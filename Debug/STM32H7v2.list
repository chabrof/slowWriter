
STM32H7v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e74  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08007144  08007144  00008144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080071c0  080071c0  000081c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080071c8  080071c8  000081c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080071cc  080071cc  000081cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  080071d0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000250  2400006c  0800723c  0000906c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240002bc  0800723c  000092bc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014169  00000000  00000000  0000909a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002437  00000000  00000000  0001d203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001090  00000000  00000000  0001f640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000cef  00000000  00000000  000206d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033a0b  00000000  00000000  000213bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015111  00000000  00000000  00054dca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014eb67  00000000  00000000  00069edb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001b8a42  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004e2c  00000000  00000000  001b8a88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000065  00000000  00000000  001bd8b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400006c 	.word	0x2400006c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800712c 	.word	0x0800712c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000070 	.word	0x24000070
 800030c:	0800712c 	.word	0x0800712c

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart4, (uint8_t *)&ch, 1, 0xFFFF);
 80006a8:	1d39      	adds	r1, r7, #4
 80006aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006ae:	2201      	movs	r2, #1
 80006b0:	4803      	ldr	r0, [pc, #12]	@ (80006c0 <__io_putchar+0x20>)
 80006b2:	f004 fb8f 	bl	8004dd4 <HAL_UART_Transmit>

  return ch;
 80006b6:	687b      	ldr	r3, [r7, #4]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	240000d4 	.word	0x240000d4

080006c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006c8:	f000 f9ae 	bl	8000a28 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006cc:	f000 fbf6 	bl	8000ebc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d0:	f000 f81c 	bl	800070c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d4:	f000 f954 	bl	8000980 <MX_GPIO_Init>
  MX_TIM8_Init();
 80006d8:	f000 f876 	bl	80007c8 <MX_TIM8_Init>
  MX_UART4_Init();
 80006dc:	f000 f904 	bl	80008e8 <MX_UART4_Init>
    /* USER CODE BEGIN 3 */
      /*ITM_SendChar('a');
      ITM_SendChar('b');
      ITM_SendChar('c');
      ITM_SendChar('\n');*/
      printf("DEB ");
 80006e0:	4807      	ldr	r0, [pc, #28]	@ (8000700 <main+0x3c>)
 80006e2:	f005 fe57 	bl	8006394 <iprintf>
      printf("LED\r\n");
 80006e6:	4807      	ldr	r0, [pc, #28]	@ (8000704 <main+0x40>)
 80006e8:	f005 febc 	bl	8006464 <puts>
      HAL_GPIO_TogglePin (GPIOE, GPIO_PIN_3);
 80006ec:	2108      	movs	r1, #8
 80006ee:	4806      	ldr	r0, [pc, #24]	@ (8000708 <main+0x44>)
 80006f0:	f000 ffb7 	bl	8001662 <HAL_GPIO_TogglePin>
      HAL_Delay (500);   /* Insert delay 100 ms */
 80006f4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006f8:	f000 fc72 	bl	8000fe0 <HAL_Delay>
      printf("DEB ");
 80006fc:	bf00      	nop
 80006fe:	e7ef      	b.n	80006e0 <main+0x1c>
 8000700:	08007144 	.word	0x08007144
 8000704:	0800714c 	.word	0x0800714c
 8000708:	58021000 	.word	0x58021000

0800070c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b09c      	sub	sp, #112	@ 0x70
 8000710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000712:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000716:	224c      	movs	r2, #76	@ 0x4c
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f005 ff82 	bl	8006624 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	2220      	movs	r2, #32
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f005 ff7c 	bl	8006624 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800072c:	2002      	movs	r0, #2
 800072e:	f000 ffb3 	bl	8001698 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000732:	2300      	movs	r3, #0
 8000734:	603b      	str	r3, [r7, #0]
 8000736:	4b23      	ldr	r3, [pc, #140]	@ (80007c4 <SystemClock_Config+0xb8>)
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800073e:	4a21      	ldr	r2, [pc, #132]	@ (80007c4 <SystemClock_Config+0xb8>)
 8000740:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000744:	6193      	str	r3, [r2, #24]
 8000746:	4b1f      	ldr	r3, [pc, #124]	@ (80007c4 <SystemClock_Config+0xb8>)
 8000748:	699b      	ldr	r3, [r3, #24]
 800074a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000752:	bf00      	nop
 8000754:	4b1b      	ldr	r3, [pc, #108]	@ (80007c4 <SystemClock_Config+0xb8>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800075c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000760:	d1f8      	bne.n	8000754 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000762:	2302      	movs	r3, #2
 8000764:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000766:	2301      	movs	r3, #1
 8000768:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800076a:	2340      	movs	r3, #64	@ 0x40
 800076c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800076e:	2300      	movs	r3, #0
 8000770:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000772:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000776:	4618      	mov	r0, r3
 8000778:	f000 ffc8 	bl	800170c <HAL_RCC_OscConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000782:	f000 f97d 	bl	8000a80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000786:	233f      	movs	r3, #63	@ 0x3f
 8000788:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800079a:	2340      	movs	r3, #64	@ 0x40
 800079c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	2101      	movs	r1, #1
 80007aa:	4618      	mov	r0, r3
 80007ac:	f001 fb88 	bl	8001ec0 <HAL_RCC_ClockConfig>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007b6:	f000 f963 	bl	8000a80 <Error_Handler>
  }
}
 80007ba:	bf00      	nop
 80007bc:	3770      	adds	r7, #112	@ 0x70
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	58024800 	.word	0x58024800

080007c8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08c      	sub	sp, #48	@ 0x30
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007de:	f107 0310 	add.w	r3, r7, #16
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80007ea:	463b      	mov	r3, r7
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80007f6:	4b3a      	ldr	r3, [pc, #232]	@ (80008e0 <MX_TIM8_Init+0x118>)
 80007f8:	4a3a      	ldr	r2, [pc, #232]	@ (80008e4 <MX_TIM8_Init+0x11c>)
 80007fa:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80007fc:	4b38      	ldr	r3, [pc, #224]	@ (80008e0 <MX_TIM8_Init+0x118>)
 80007fe:	2200      	movs	r2, #0
 8000800:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000802:	4b37      	ldr	r3, [pc, #220]	@ (80008e0 <MX_TIM8_Init+0x118>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000808:	4b35      	ldr	r3, [pc, #212]	@ (80008e0 <MX_TIM8_Init+0x118>)
 800080a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800080e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000810:	4b33      	ldr	r3, [pc, #204]	@ (80008e0 <MX_TIM8_Init+0x118>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000816:	4b32      	ldr	r3, [pc, #200]	@ (80008e0 <MX_TIM8_Init+0x118>)
 8000818:	2200      	movs	r2, #0
 800081a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081c:	4b30      	ldr	r3, [pc, #192]	@ (80008e0 <MX_TIM8_Init+0x118>)
 800081e:	2200      	movs	r2, #0
 8000820:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000822:	482f      	ldr	r0, [pc, #188]	@ (80008e0 <MX_TIM8_Init+0x118>)
 8000824:	f003 fc9a 	bl	800415c <HAL_TIM_Base_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM8_Init+0x6a>
  {
    Error_Handler();
 800082e:	f000 f927 	bl	8000a80 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8000832:	482b      	ldr	r0, [pc, #172]	@ (80008e0 <MX_TIM8_Init+0x118>)
 8000834:	f003 fce9 	bl	800420a <HAL_TIM_IC_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800083e:	f000 f91f 	bl	8000a80 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000842:	2307      	movs	r3, #7
 8000844:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000846:	2300      	movs	r3, #0
 8000848:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	4823      	ldr	r0, [pc, #140]	@ (80008e0 <MX_TIM8_Init+0x118>)
 8000852:	f003 fdd7 	bl	8004404 <HAL_TIM_SlaveConfigSynchro>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 800085c:	f000 f910 	bl	8000a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000860:	2300      	movs	r3, #0
 8000862:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000868:	2300      	movs	r3, #0
 800086a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800086c:	f107 0310 	add.w	r3, r7, #16
 8000870:	4619      	mov	r1, r3
 8000872:	481b      	ldr	r0, [pc, #108]	@ (80008e0 <MX_TIM8_Init+0x118>)
 8000874:	f004 f954 	bl	8004b20 <HAL_TIMEx_MasterConfigSynchronization>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_TIM8_Init+0xba>
  {
    Error_Handler();
 800087e:	f000 f8ff 	bl	8000a80 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000882:	2300      	movs	r3, #0
 8000884:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000886:	2301      	movs	r3, #1
 8000888:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000892:	463b      	mov	r3, r7
 8000894:	2200      	movs	r2, #0
 8000896:	4619      	mov	r1, r3
 8000898:	4811      	ldr	r0, [pc, #68]	@ (80008e0 <MX_TIM8_Init+0x118>)
 800089a:	f003 fd17 	bl	80042cc <HAL_TIM_IC_ConfigChannel>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM8_Init+0xe0>
  {
    Error_Handler();
 80008a4:	f000 f8ec 	bl	8000a80 <Error_Handler>
  }
  if (HAL_TIMEx_TISelection(&htim8, TIM_TIM8_TI1_COMP2, TIM_CHANNEL_1) != HAL_OK)
 80008a8:	2200      	movs	r2, #0
 80008aa:	2101      	movs	r1, #1
 80008ac:	480c      	ldr	r0, [pc, #48]	@ (80008e0 <MX_TIM8_Init+0x118>)
 80008ae:	f004 f9d3 	bl	8004c58 <HAL_TIMEx_TISelection>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 80008b8:	f000 f8e2 	bl	8000a80 <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80008bc:	2302      	movs	r3, #2
 80008be:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80008c0:	463b      	mov	r3, r7
 80008c2:	2204      	movs	r2, #4
 80008c4:	4619      	mov	r1, r3
 80008c6:	4806      	ldr	r0, [pc, #24]	@ (80008e0 <MX_TIM8_Init+0x118>)
 80008c8:	f003 fd00 	bl	80042cc <HAL_TIM_IC_ConfigChannel>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 80008d2:	f000 f8d5 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	3730      	adds	r7, #48	@ 0x30
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	24000088 	.word	0x24000088
 80008e4:	40010400 	.word	0x40010400

080008e8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80008ec:	4b22      	ldr	r3, [pc, #136]	@ (8000978 <MX_UART4_Init+0x90>)
 80008ee:	4a23      	ldr	r2, [pc, #140]	@ (800097c <MX_UART4_Init+0x94>)
 80008f0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80008f2:	4b21      	ldr	r3, [pc, #132]	@ (8000978 <MX_UART4_Init+0x90>)
 80008f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008f8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80008fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000978 <MX_UART4_Init+0x90>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000900:	4b1d      	ldr	r3, [pc, #116]	@ (8000978 <MX_UART4_Init+0x90>)
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000906:	4b1c      	ldr	r3, [pc, #112]	@ (8000978 <MX_UART4_Init+0x90>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800090c:	4b1a      	ldr	r3, [pc, #104]	@ (8000978 <MX_UART4_Init+0x90>)
 800090e:	220c      	movs	r2, #12
 8000910:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000912:	4b19      	ldr	r3, [pc, #100]	@ (8000978 <MX_UART4_Init+0x90>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000918:	4b17      	ldr	r3, [pc, #92]	@ (8000978 <MX_UART4_Init+0x90>)
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091e:	4b16      	ldr	r3, [pc, #88]	@ (8000978 <MX_UART4_Init+0x90>)
 8000920:	2200      	movs	r2, #0
 8000922:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000924:	4b14      	ldr	r3, [pc, #80]	@ (8000978 <MX_UART4_Init+0x90>)
 8000926:	2200      	movs	r2, #0
 8000928:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800092a:	4b13      	ldr	r3, [pc, #76]	@ (8000978 <MX_UART4_Init+0x90>)
 800092c:	2200      	movs	r2, #0
 800092e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000930:	4811      	ldr	r0, [pc, #68]	@ (8000978 <MX_UART4_Init+0x90>)
 8000932:	f004 f9ff 	bl	8004d34 <HAL_UART_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800093c:	f000 f8a0 	bl	8000a80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000940:	2100      	movs	r1, #0
 8000942:	480d      	ldr	r0, [pc, #52]	@ (8000978 <MX_UART4_Init+0x90>)
 8000944:	f005 fb99 	bl	800607a <HAL_UARTEx_SetTxFifoThreshold>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800094e:	f000 f897 	bl	8000a80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000952:	2100      	movs	r1, #0
 8000954:	4808      	ldr	r0, [pc, #32]	@ (8000978 <MX_UART4_Init+0x90>)
 8000956:	f005 fbce 	bl	80060f6 <HAL_UARTEx_SetRxFifoThreshold>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000960:	f000 f88e 	bl	8000a80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000964:	4804      	ldr	r0, [pc, #16]	@ (8000978 <MX_UART4_Init+0x90>)
 8000966:	f005 fb4f 	bl	8006008 <HAL_UARTEx_DisableFifoMode>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000970:	f000 f886 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	240000d4 	.word	0x240000d4
 800097c:	40004c00 	.word	0x40004c00

08000980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b088      	sub	sp, #32
 8000984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000986:	f107 030c 	add.w	r3, r7, #12
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
 8000994:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000996:	4b22      	ldr	r3, [pc, #136]	@ (8000a20 <MX_GPIO_Init+0xa0>)
 8000998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800099c:	4a20      	ldr	r2, [pc, #128]	@ (8000a20 <MX_GPIO_Init+0xa0>)
 800099e:	f043 0310 	orr.w	r3, r3, #16
 80009a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a20 <MX_GPIO_Init+0xa0>)
 80009a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ac:	f003 0310 	and.w	r3, r3, #16
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a20 <MX_GPIO_Init+0xa0>)
 80009b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ba:	4a19      	ldr	r2, [pc, #100]	@ (8000a20 <MX_GPIO_Init+0xa0>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009c4:	4b16      	ldr	r3, [pc, #88]	@ (8000a20 <MX_GPIO_Init+0xa0>)
 80009c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d2:	4b13      	ldr	r3, [pc, #76]	@ (8000a20 <MX_GPIO_Init+0xa0>)
 80009d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d8:	4a11      	ldr	r2, [pc, #68]	@ (8000a20 <MX_GPIO_Init+0xa0>)
 80009da:	f043 0302 	orr.w	r3, r3, #2
 80009de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000a20 <MX_GPIO_Init+0xa0>)
 80009e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e8:	f003 0302 	and.w	r3, r3, #2
 80009ec:	603b      	str	r3, [r7, #0]
 80009ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80009f0:	2200      	movs	r2, #0
 80009f2:	2108      	movs	r1, #8
 80009f4:	480b      	ldr	r0, [pc, #44]	@ (8000a24 <MX_GPIO_Init+0xa4>)
 80009f6:	f000 fe1b 	bl	8001630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009fa:	2308      	movs	r3, #8
 80009fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fe:	2301      	movs	r3, #1
 8000a00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a0a:	f107 030c 	add.w	r3, r7, #12
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4804      	ldr	r0, [pc, #16]	@ (8000a24 <MX_GPIO_Init+0xa4>)
 8000a12:	f000 fc65 	bl	80012e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a16:	bf00      	nop
 8000a18:	3720      	adds	r7, #32
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	58024400 	.word	0x58024400
 8000a24:	58021000 	.word	0x58021000

08000a28 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a2e:	463b      	mov	r3, r7
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a3a:	f000 fbd9 	bl	80011f0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000a4a:	231f      	movs	r3, #31
 8000a4c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000a4e:	2387      	movs	r3, #135	@ 0x87
 8000a50:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000a56:	2300      	movs	r3, #0
 8000a58:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000a62:	2300      	movs	r3, #0
 8000a64:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000a66:	2300      	movs	r3, #0
 8000a68:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a6a:	463b      	mov	r3, r7
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f000 fbf7 	bl	8001260 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000a72:	2004      	movs	r0, #4
 8000a74:	f000 fbd4 	bl	8001220 <HAL_MPU_Enable>

}
 8000a78:	bf00      	nop
 8000a7a:	3710      	adds	r7, #16
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a84:	b672      	cpsid	i
}
 8000a86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a88:	bf00      	nop
 8000a8a:	e7fd      	b.n	8000a88 <Error_Handler+0x8>

08000a8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a92:	4b0a      	ldr	r3, [pc, #40]	@ (8000abc <HAL_MspInit+0x30>)
 8000a94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a98:	4a08      	ldr	r2, [pc, #32]	@ (8000abc <HAL_MspInit+0x30>)
 8000a9a:	f043 0302 	orr.w	r3, r3, #2
 8000a9e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000aa2:	4b06      	ldr	r3, [pc, #24]	@ (8000abc <HAL_MspInit+0x30>)
 8000aa4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000aa8:	f003 0302 	and.w	r3, r3, #2
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	58024400 	.word	0x58024400

08000ac0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a0b      	ldr	r2, [pc, #44]	@ (8000afc <HAL_TIM_Base_MspInit+0x3c>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d10e      	bne.n	8000af0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b00 <HAL_TIM_Base_MspInit+0x40>)
 8000ad4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000ad8:	4a09      	ldr	r2, [pc, #36]	@ (8000b00 <HAL_TIM_Base_MspInit+0x40>)
 8000ada:	f043 0302 	orr.w	r3, r3, #2
 8000ade:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000ae2:	4b07      	ldr	r3, [pc, #28]	@ (8000b00 <HAL_TIM_Base_MspInit+0x40>)
 8000ae4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000ae8:	f003 0302 	and.w	r3, r3, #2
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM8_MspInit 1 */

  }

}
 8000af0:	bf00      	nop
 8000af2:	3714      	adds	r7, #20
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	40010400 	.word	0x40010400
 8000b00:	58024400 	.word	0x58024400

08000b04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b0b8      	sub	sp, #224	@ 0xe0
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b1c:	f107 0310 	add.w	r3, r7, #16
 8000b20:	22b8      	movs	r2, #184	@ 0xb8
 8000b22:	2100      	movs	r1, #0
 8000b24:	4618      	mov	r0, r3
 8000b26:	f005 fd7d 	bl	8006624 <memset>
  if(huart->Instance==UART4)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a26      	ldr	r2, [pc, #152]	@ (8000bc8 <HAL_UART_MspInit+0xc4>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d145      	bne.n	8000bc0 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000b34:	f04f 0202 	mov.w	r2, #2
 8000b38:	f04f 0300 	mov.w	r3, #0
 8000b3c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000b40:	2300      	movs	r3, #0
 8000b42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b46:	f107 0310 	add.w	r3, r7, #16
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f001 fd44 	bl	80025d8 <HAL_RCCEx_PeriphCLKConfig>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000b56:	f7ff ff93 	bl	8000a80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000b5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bcc <HAL_UART_MspInit+0xc8>)
 8000b5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b60:	4a1a      	ldr	r2, [pc, #104]	@ (8000bcc <HAL_UART_MspInit+0xc8>)
 8000b62:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000b66:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000b6a:	4b18      	ldr	r3, [pc, #96]	@ (8000bcc <HAL_UART_MspInit+0xc8>)
 8000b6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b70:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b78:	4b14      	ldr	r3, [pc, #80]	@ (8000bcc <HAL_UART_MspInit+0xc8>)
 8000b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b7e:	4a13      	ldr	r2, [pc, #76]	@ (8000bcc <HAL_UART_MspInit+0xc8>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b88:	4b10      	ldr	r3, [pc, #64]	@ (8000bcc <HAL_UART_MspInit+0xc8>)
 8000b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b96:	2303      	movs	r3, #3
 8000b98:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000bae:	2308      	movs	r3, #8
 8000bb0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4805      	ldr	r0, [pc, #20]	@ (8000bd0 <HAL_UART_MspInit+0xcc>)
 8000bbc:	f000 fb90 	bl	80012e0 <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8000bc0:	bf00      	nop
 8000bc2:	37e0      	adds	r7, #224	@ 0xe0
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40004c00 	.word	0x40004c00
 8000bcc:	58024400 	.word	0x58024400
 8000bd0:	58020000 	.word	0x58020000

08000bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <NMI_Handler+0x4>

08000bdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <HardFault_Handler+0x4>

08000be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <MemManage_Handler+0x4>

08000bec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <BusFault_Handler+0x4>

08000bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <UsageFault_Handler+0x4>

08000bfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c2a:	f000 f9b9 	bl	8000fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b086      	sub	sp, #24
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	60f8      	str	r0, [r7, #12]
 8000c3a:	60b9      	str	r1, [r7, #8]
 8000c3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
 8000c42:	e00a      	b.n	8000c5a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c44:	f3af 8000 	nop.w
 8000c48:	4601      	mov	r1, r0
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	1c5a      	adds	r2, r3, #1
 8000c4e:	60ba      	str	r2, [r7, #8]
 8000c50:	b2ca      	uxtb	r2, r1
 8000c52:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	3301      	adds	r3, #1
 8000c58:	617b      	str	r3, [r7, #20]
 8000c5a:	697a      	ldr	r2, [r7, #20]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	dbf0      	blt.n	8000c44 <_read+0x12>
  }

  return len;
 8000c62:	687b      	ldr	r3, [r7, #4]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3718      	adds	r7, #24
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	e009      	b.n	8000c92 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	1c5a      	adds	r2, r3, #1
 8000c82:	60ba      	str	r2, [r7, #8]
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff fd0a 	bl	80006a0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	617b      	str	r3, [r7, #20]
 8000c92:	697a      	ldr	r2, [r7, #20]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	dbf1      	blt.n	8000c7e <_write+0x12>
  }
  return len;
 8000c9a:	687b      	ldr	r3, [r7, #4]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3718      	adds	r7, #24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <_close>:

int _close(int file)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ccc:	605a      	str	r2, [r3, #4]
  return 0;
 8000cce:	2300      	movs	r3, #0
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <_isatty>:

int _isatty(int file)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ce4:	2301      	movs	r3, #1
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	b085      	sub	sp, #20
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	60f8      	str	r0, [r7, #12]
 8000cfa:	60b9      	str	r1, [r7, #8]
 8000cfc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cfe:	2300      	movs	r3, #0
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3714      	adds	r7, #20
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d14:	4a14      	ldr	r2, [pc, #80]	@ (8000d68 <_sbrk+0x5c>)
 8000d16:	4b15      	ldr	r3, [pc, #84]	@ (8000d6c <_sbrk+0x60>)
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d20:	4b13      	ldr	r3, [pc, #76]	@ (8000d70 <_sbrk+0x64>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d102      	bne.n	8000d2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d28:	4b11      	ldr	r3, [pc, #68]	@ (8000d70 <_sbrk+0x64>)
 8000d2a:	4a12      	ldr	r2, [pc, #72]	@ (8000d74 <_sbrk+0x68>)
 8000d2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d2e:	4b10      	ldr	r3, [pc, #64]	@ (8000d70 <_sbrk+0x64>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d207      	bcs.n	8000d4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d3c:	f005 fcc0 	bl	80066c0 <__errno>
 8000d40:	4603      	mov	r3, r0
 8000d42:	220c      	movs	r2, #12
 8000d44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d46:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4a:	e009      	b.n	8000d60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d4c:	4b08      	ldr	r3, [pc, #32]	@ (8000d70 <_sbrk+0x64>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d52:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <_sbrk+0x64>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	4a05      	ldr	r2, [pc, #20]	@ (8000d70 <_sbrk+0x64>)
 8000d5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3718      	adds	r7, #24
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	24050000 	.word	0x24050000
 8000d6c:	00000400 	.word	0x00000400
 8000d70:	24000168 	.word	0x24000168
 8000d74:	240002c0 	.word	0x240002c0

08000d78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d7c:	4b32      	ldr	r3, [pc, #200]	@ (8000e48 <SystemInit+0xd0>)
 8000d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d82:	4a31      	ldr	r2, [pc, #196]	@ (8000e48 <SystemInit+0xd0>)
 8000d84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d8c:	4b2f      	ldr	r3, [pc, #188]	@ (8000e4c <SystemInit+0xd4>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f003 030f 	and.w	r3, r3, #15
 8000d94:	2b06      	cmp	r3, #6
 8000d96:	d807      	bhi.n	8000da8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d98:	4b2c      	ldr	r3, [pc, #176]	@ (8000e4c <SystemInit+0xd4>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f023 030f 	bic.w	r3, r3, #15
 8000da0:	4a2a      	ldr	r2, [pc, #168]	@ (8000e4c <SystemInit+0xd4>)
 8000da2:	f043 0307 	orr.w	r3, r3, #7
 8000da6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000da8:	4b29      	ldr	r3, [pc, #164]	@ (8000e50 <SystemInit+0xd8>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a28      	ldr	r2, [pc, #160]	@ (8000e50 <SystemInit+0xd8>)
 8000dae:	f043 0301 	orr.w	r3, r3, #1
 8000db2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000db4:	4b26      	ldr	r3, [pc, #152]	@ (8000e50 <SystemInit+0xd8>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000dba:	4b25      	ldr	r3, [pc, #148]	@ (8000e50 <SystemInit+0xd8>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	4924      	ldr	r1, [pc, #144]	@ (8000e50 <SystemInit+0xd8>)
 8000dc0:	4b24      	ldr	r3, [pc, #144]	@ (8000e54 <SystemInit+0xdc>)
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000dc6:	4b21      	ldr	r3, [pc, #132]	@ (8000e4c <SystemInit+0xd4>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f003 0308 	and.w	r3, r3, #8
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d007      	beq.n	8000de2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000dd2:	4b1e      	ldr	r3, [pc, #120]	@ (8000e4c <SystemInit+0xd4>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f023 030f 	bic.w	r3, r3, #15
 8000dda:	4a1c      	ldr	r2, [pc, #112]	@ (8000e4c <SystemInit+0xd4>)
 8000ddc:	f043 0307 	orr.w	r3, r3, #7
 8000de0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000de2:	4b1b      	ldr	r3, [pc, #108]	@ (8000e50 <SystemInit+0xd8>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000de8:	4b19      	ldr	r3, [pc, #100]	@ (8000e50 <SystemInit+0xd8>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000dee:	4b18      	ldr	r3, [pc, #96]	@ (8000e50 <SystemInit+0xd8>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000df4:	4b16      	ldr	r3, [pc, #88]	@ (8000e50 <SystemInit+0xd8>)
 8000df6:	4a18      	ldr	r2, [pc, #96]	@ (8000e58 <SystemInit+0xe0>)
 8000df8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000dfa:	4b15      	ldr	r3, [pc, #84]	@ (8000e50 <SystemInit+0xd8>)
 8000dfc:	4a17      	ldr	r2, [pc, #92]	@ (8000e5c <SystemInit+0xe4>)
 8000dfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e00:	4b13      	ldr	r3, [pc, #76]	@ (8000e50 <SystemInit+0xd8>)
 8000e02:	4a17      	ldr	r2, [pc, #92]	@ (8000e60 <SystemInit+0xe8>)
 8000e04:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e06:	4b12      	ldr	r3, [pc, #72]	@ (8000e50 <SystemInit+0xd8>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e0c:	4b10      	ldr	r3, [pc, #64]	@ (8000e50 <SystemInit+0xd8>)
 8000e0e:	4a14      	ldr	r2, [pc, #80]	@ (8000e60 <SystemInit+0xe8>)
 8000e10:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e12:	4b0f      	ldr	r3, [pc, #60]	@ (8000e50 <SystemInit+0xd8>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e18:	4b0d      	ldr	r3, [pc, #52]	@ (8000e50 <SystemInit+0xd8>)
 8000e1a:	4a11      	ldr	r2, [pc, #68]	@ (8000e60 <SystemInit+0xe8>)
 8000e1c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e50 <SystemInit+0xd8>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e24:	4b0a      	ldr	r3, [pc, #40]	@ (8000e50 <SystemInit+0xd8>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a09      	ldr	r2, [pc, #36]	@ (8000e50 <SystemInit+0xd8>)
 8000e2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e2e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e30:	4b07      	ldr	r3, [pc, #28]	@ (8000e50 <SystemInit+0xd8>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e36:	4b0b      	ldr	r3, [pc, #44]	@ (8000e64 <SystemInit+0xec>)
 8000e38:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000e3c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000e3e:	bf00      	nop
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000ed00 	.word	0xe000ed00
 8000e4c:	52002000 	.word	0x52002000
 8000e50:	58024400 	.word	0x58024400
 8000e54:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e58:	02020200 	.word	0x02020200
 8000e5c:	01ff0000 	.word	0x01ff0000
 8000e60:	01010280 	.word	0x01010280
 8000e64:	52004000 	.word	0x52004000

08000e68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ea0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e6c:	f7ff ff84 	bl	8000d78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e70:	480c      	ldr	r0, [pc, #48]	@ (8000ea4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e72:	490d      	ldr	r1, [pc, #52]	@ (8000ea8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e74:	4a0d      	ldr	r2, [pc, #52]	@ (8000eac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e78:	e002      	b.n	8000e80 <LoopCopyDataInit>

08000e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e7e:	3304      	adds	r3, #4

08000e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e84:	d3f9      	bcc.n	8000e7a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e86:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e88:	4c0a      	ldr	r4, [pc, #40]	@ (8000eb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e8c:	e001      	b.n	8000e92 <LoopFillZerobss>

08000e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e90:	3204      	adds	r2, #4

08000e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e94:	d3fb      	bcc.n	8000e8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e96:	f005 fc19 	bl	80066cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e9a:	f7ff fc13 	bl	80006c4 <main>
  bx  lr
 8000e9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ea0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000ea4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ea8:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8000eac:	080071d0 	.word	0x080071d0
  ldr r2, =_sbss
 8000eb0:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8000eb4:	240002bc 	.word	0x240002bc

08000eb8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eb8:	e7fe      	b.n	8000eb8 <ADC3_IRQHandler>
	...

08000ebc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec2:	2003      	movs	r0, #3
 8000ec4:	f000 f962 	bl	800118c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ec8:	f001 f9b0 	bl	800222c <HAL_RCC_GetSysClockFreq>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	4b15      	ldr	r3, [pc, #84]	@ (8000f24 <HAL_Init+0x68>)
 8000ed0:	699b      	ldr	r3, [r3, #24]
 8000ed2:	0a1b      	lsrs	r3, r3, #8
 8000ed4:	f003 030f 	and.w	r3, r3, #15
 8000ed8:	4913      	ldr	r1, [pc, #76]	@ (8000f28 <HAL_Init+0x6c>)
 8000eda:	5ccb      	ldrb	r3, [r1, r3]
 8000edc:	f003 031f 	and.w	r3, r3, #31
 8000ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f24 <HAL_Init+0x68>)
 8000ee8:	699b      	ldr	r3, [r3, #24]
 8000eea:	f003 030f 	and.w	r3, r3, #15
 8000eee:	4a0e      	ldr	r2, [pc, #56]	@ (8000f28 <HAL_Init+0x6c>)
 8000ef0:	5cd3      	ldrb	r3, [r2, r3]
 8000ef2:	f003 031f 	and.w	r3, r3, #31
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8000efc:	4a0b      	ldr	r2, [pc, #44]	@ (8000f2c <HAL_Init+0x70>)
 8000efe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f00:	4a0b      	ldr	r2, [pc, #44]	@ (8000f30 <HAL_Init+0x74>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f06:	200f      	movs	r0, #15
 8000f08:	f000 f814 	bl	8000f34 <HAL_InitTick>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e002      	b.n	8000f1c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f16:	f7ff fdb9 	bl	8000a8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f1a:	2300      	movs	r3, #0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	58024400 	.word	0x58024400
 8000f28:	08007154 	.word	0x08007154
 8000f2c:	24000004 	.word	0x24000004
 8000f30:	24000000 	.word	0x24000000

08000f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f3c:	4b15      	ldr	r3, [pc, #84]	@ (8000f94 <HAL_InitTick+0x60>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d101      	bne.n	8000f48 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e021      	b.n	8000f8c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f48:	4b13      	ldr	r3, [pc, #76]	@ (8000f98 <HAL_InitTick+0x64>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4b11      	ldr	r3, [pc, #68]	@ (8000f94 <HAL_InitTick+0x60>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	4619      	mov	r1, r3
 8000f52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 f939 	bl	80011d6 <HAL_SYSTICK_Config>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00e      	b.n	8000f8c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2b0f      	cmp	r3, #15
 8000f72:	d80a      	bhi.n	8000f8a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f74:	2200      	movs	r2, #0
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7c:	f000 f911 	bl	80011a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f80:	4a06      	ldr	r2, [pc, #24]	@ (8000f9c <HAL_InitTick+0x68>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	e000      	b.n	8000f8c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	2400000c 	.word	0x2400000c
 8000f98:	24000000 	.word	0x24000000
 8000f9c:	24000008 	.word	0x24000008

08000fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <HAL_IncTick+0x20>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <HAL_IncTick+0x24>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4413      	add	r3, r2
 8000fb0:	4a04      	ldr	r2, [pc, #16]	@ (8000fc4 <HAL_IncTick+0x24>)
 8000fb2:	6013      	str	r3, [r2, #0]
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	2400000c 	.word	0x2400000c
 8000fc4:	2400016c 	.word	0x2400016c

08000fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return uwTick;
 8000fcc:	4b03      	ldr	r3, [pc, #12]	@ (8000fdc <HAL_GetTick+0x14>)
 8000fce:	681b      	ldr	r3, [r3, #0]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	2400016c 	.word	0x2400016c

08000fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe8:	f7ff ffee 	bl	8000fc8 <HAL_GetTick>
 8000fec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff8:	d005      	beq.n	8001006 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8001024 <HAL_Delay+0x44>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	461a      	mov	r2, r3
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4413      	add	r3, r2
 8001004:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001006:	bf00      	nop
 8001008:	f7ff ffde 	bl	8000fc8 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	429a      	cmp	r2, r3
 8001016:	d8f7      	bhi.n	8001008 <HAL_Delay+0x28>
  {
  }
}
 8001018:	bf00      	nop
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	2400000c 	.word	0x2400000c

08001028 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001038:	4b0b      	ldr	r3, [pc, #44]	@ (8001068 <__NVIC_SetPriorityGrouping+0x40>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800103e:	68ba      	ldr	r2, [r7, #8]
 8001040:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001044:	4013      	ands	r3, r2
 8001046:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001050:	4b06      	ldr	r3, [pc, #24]	@ (800106c <__NVIC_SetPriorityGrouping+0x44>)
 8001052:	4313      	orrs	r3, r2
 8001054:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001056:	4a04      	ldr	r2, [pc, #16]	@ (8001068 <__NVIC_SetPriorityGrouping+0x40>)
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	60d3      	str	r3, [r2, #12]
}
 800105c:	bf00      	nop
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000ed00 	.word	0xe000ed00
 800106c:	05fa0000 	.word	0x05fa0000

08001070 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001074:	4b04      	ldr	r3, [pc, #16]	@ (8001088 <__NVIC_GetPriorityGrouping+0x18>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	0a1b      	lsrs	r3, r3, #8
 800107a:	f003 0307 	and.w	r3, r3, #7
}
 800107e:	4618      	mov	r0, r3
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	6039      	str	r1, [r7, #0]
 8001096:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001098:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800109c:	2b00      	cmp	r3, #0
 800109e:	db0a      	blt.n	80010b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	490c      	ldr	r1, [pc, #48]	@ (80010d8 <__NVIC_SetPriority+0x4c>)
 80010a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010aa:	0112      	lsls	r2, r2, #4
 80010ac:	b2d2      	uxtb	r2, r2
 80010ae:	440b      	add	r3, r1
 80010b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b4:	e00a      	b.n	80010cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	4908      	ldr	r1, [pc, #32]	@ (80010dc <__NVIC_SetPriority+0x50>)
 80010bc:	88fb      	ldrh	r3, [r7, #6]
 80010be:	f003 030f 	and.w	r3, r3, #15
 80010c2:	3b04      	subs	r3, #4
 80010c4:	0112      	lsls	r2, r2, #4
 80010c6:	b2d2      	uxtb	r2, r2
 80010c8:	440b      	add	r3, r1
 80010ca:	761a      	strb	r2, [r3, #24]
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000e100 	.word	0xe000e100
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b089      	sub	sp, #36	@ 0x24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	f1c3 0307 	rsb	r3, r3, #7
 80010fa:	2b04      	cmp	r3, #4
 80010fc:	bf28      	it	cs
 80010fe:	2304      	movcs	r3, #4
 8001100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3304      	adds	r3, #4
 8001106:	2b06      	cmp	r3, #6
 8001108:	d902      	bls.n	8001110 <NVIC_EncodePriority+0x30>
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3b03      	subs	r3, #3
 800110e:	e000      	b.n	8001112 <NVIC_EncodePriority+0x32>
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001114:	f04f 32ff 	mov.w	r2, #4294967295
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43da      	mvns	r2, r3
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	401a      	ands	r2, r3
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001128:	f04f 31ff 	mov.w	r1, #4294967295
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	fa01 f303 	lsl.w	r3, r1, r3
 8001132:	43d9      	mvns	r1, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001138:	4313      	orrs	r3, r2
         );
}
 800113a:	4618      	mov	r0, r3
 800113c:	3724      	adds	r7, #36	@ 0x24
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
	...

08001148 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3b01      	subs	r3, #1
 8001154:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001158:	d301      	bcc.n	800115e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800115a:	2301      	movs	r3, #1
 800115c:	e00f      	b.n	800117e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800115e:	4a0a      	ldr	r2, [pc, #40]	@ (8001188 <SysTick_Config+0x40>)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3b01      	subs	r3, #1
 8001164:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001166:	210f      	movs	r1, #15
 8001168:	f04f 30ff 	mov.w	r0, #4294967295
 800116c:	f7ff ff8e 	bl	800108c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001170:	4b05      	ldr	r3, [pc, #20]	@ (8001188 <SysTick_Config+0x40>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001176:	4b04      	ldr	r3, [pc, #16]	@ (8001188 <SysTick_Config+0x40>)
 8001178:	2207      	movs	r2, #7
 800117a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	e000e010 	.word	0xe000e010

0800118c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f7ff ff47 	bl	8001028 <__NVIC_SetPriorityGrouping>
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b086      	sub	sp, #24
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	4603      	mov	r3, r0
 80011aa:	60b9      	str	r1, [r7, #8]
 80011ac:	607a      	str	r2, [r7, #4]
 80011ae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011b0:	f7ff ff5e 	bl	8001070 <__NVIC_GetPriorityGrouping>
 80011b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	68b9      	ldr	r1, [r7, #8]
 80011ba:	6978      	ldr	r0, [r7, #20]
 80011bc:	f7ff ff90 	bl	80010e0 <NVIC_EncodePriority>
 80011c0:	4602      	mov	r2, r0
 80011c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011c6:	4611      	mov	r1, r2
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff5f 	bl	800108c <__NVIC_SetPriority>
}
 80011ce:	bf00      	nop
 80011d0:	3718      	adds	r7, #24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff ffb2 	bl	8001148 <SysTick_Config>
 80011e4:	4603      	mov	r3, r0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
	...

080011f0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80011f4:	f3bf 8f5f 	dmb	sy
}
 80011f8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80011fa:	4b07      	ldr	r3, [pc, #28]	@ (8001218 <HAL_MPU_Disable+0x28>)
 80011fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011fe:	4a06      	ldr	r2, [pc, #24]	@ (8001218 <HAL_MPU_Disable+0x28>)
 8001200:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001204:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001206:	4b05      	ldr	r3, [pc, #20]	@ (800121c <HAL_MPU_Disable+0x2c>)
 8001208:	2200      	movs	r2, #0
 800120a:	605a      	str	r2, [r3, #4]
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	e000ed00 	.word	0xe000ed00
 800121c:	e000ed90 	.word	0xe000ed90

08001220 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001228:	4a0b      	ldr	r2, [pc, #44]	@ (8001258 <HAL_MPU_Enable+0x38>)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001232:	4b0a      	ldr	r3, [pc, #40]	@ (800125c <HAL_MPU_Enable+0x3c>)
 8001234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001236:	4a09      	ldr	r2, [pc, #36]	@ (800125c <HAL_MPU_Enable+0x3c>)
 8001238:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800123c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800123e:	f3bf 8f4f 	dsb	sy
}
 8001242:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001244:	f3bf 8f6f 	isb	sy
}
 8001248:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	e000ed90 	.word	0xe000ed90
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	785a      	ldrb	r2, [r3, #1]
 800126c:	4b1b      	ldr	r3, [pc, #108]	@ (80012dc <HAL_MPU_ConfigRegion+0x7c>)
 800126e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001270:	4b1a      	ldr	r3, [pc, #104]	@ (80012dc <HAL_MPU_ConfigRegion+0x7c>)
 8001272:	691b      	ldr	r3, [r3, #16]
 8001274:	4a19      	ldr	r2, [pc, #100]	@ (80012dc <HAL_MPU_ConfigRegion+0x7c>)
 8001276:	f023 0301 	bic.w	r3, r3, #1
 800127a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800127c:	4a17      	ldr	r2, [pc, #92]	@ (80012dc <HAL_MPU_ConfigRegion+0x7c>)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	7b1b      	ldrb	r3, [r3, #12]
 8001288:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	7adb      	ldrb	r3, [r3, #11]
 800128e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001290:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	7a9b      	ldrb	r3, [r3, #10]
 8001296:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001298:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	7b5b      	ldrb	r3, [r3, #13]
 800129e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80012a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	7b9b      	ldrb	r3, [r3, #14]
 80012a6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80012a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	7bdb      	ldrb	r3, [r3, #15]
 80012ae:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80012b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	7a5b      	ldrb	r3, [r3, #9]
 80012b6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80012b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	7a1b      	ldrb	r3, [r3, #8]
 80012be:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80012c0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	7812      	ldrb	r2, [r2, #0]
 80012c6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012c8:	4a04      	ldr	r2, [pc, #16]	@ (80012dc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012ca:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012cc:	6113      	str	r3, [r2, #16]
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	e000ed90 	.word	0xe000ed90

080012e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b089      	sub	sp, #36	@ 0x24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80012ee:	4b86      	ldr	r3, [pc, #536]	@ (8001508 <HAL_GPIO_Init+0x228>)
 80012f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80012f2:	e18c      	b.n	800160e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	2101      	movs	r1, #1
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001300:	4013      	ands	r3, r2
 8001302:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	2b00      	cmp	r3, #0
 8001308:	f000 817e 	beq.w	8001608 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 0303 	and.w	r3, r3, #3
 8001314:	2b01      	cmp	r3, #1
 8001316:	d005      	beq.n	8001324 <HAL_GPIO_Init+0x44>
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 0303 	and.w	r3, r3, #3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d130      	bne.n	8001386 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	2203      	movs	r2, #3
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4013      	ands	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	68da      	ldr	r2, [r3, #12]
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800135a:	2201      	movs	r2, #1
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43db      	mvns	r3, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4013      	ands	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	091b      	lsrs	r3, r3, #4
 8001370:	f003 0201 	and.w	r2, r3, #1
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4313      	orrs	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f003 0303 	and.w	r3, r3, #3
 800138e:	2b03      	cmp	r3, #3
 8001390:	d017      	beq.n	80013c2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	2203      	movs	r2, #3
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43db      	mvns	r3, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	689a      	ldr	r2, [r3, #8]
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f003 0303 	and.w	r3, r3, #3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d123      	bne.n	8001416 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	08da      	lsrs	r2, r3, #3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3208      	adds	r2, #8
 80013d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	220f      	movs	r2, #15
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43db      	mvns	r3, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4013      	ands	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	691a      	ldr	r2, [r3, #16]
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	f003 0307 	and.w	r3, r3, #7
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	08da      	lsrs	r2, r3, #3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3208      	adds	r2, #8
 8001410:	69b9      	ldr	r1, [r7, #24]
 8001412:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	2203      	movs	r2, #3
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43db      	mvns	r3, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4013      	ands	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f003 0203 	and.w	r2, r3, #3
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4313      	orrs	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001452:	2b00      	cmp	r3, #0
 8001454:	f000 80d8 	beq.w	8001608 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001458:	4b2c      	ldr	r3, [pc, #176]	@ (800150c <HAL_GPIO_Init+0x22c>)
 800145a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800145e:	4a2b      	ldr	r2, [pc, #172]	@ (800150c <HAL_GPIO_Init+0x22c>)
 8001460:	f043 0302 	orr.w	r3, r3, #2
 8001464:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001468:	4b28      	ldr	r3, [pc, #160]	@ (800150c <HAL_GPIO_Init+0x22c>)
 800146a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001476:	4a26      	ldr	r2, [pc, #152]	@ (8001510 <HAL_GPIO_Init+0x230>)
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	089b      	lsrs	r3, r3, #2
 800147c:	3302      	adds	r3, #2
 800147e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001482:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	f003 0303 	and.w	r3, r3, #3
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	220f      	movs	r2, #15
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43db      	mvns	r3, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4013      	ands	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a1d      	ldr	r2, [pc, #116]	@ (8001514 <HAL_GPIO_Init+0x234>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d04a      	beq.n	8001538 <HAL_GPIO_Init+0x258>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a1c      	ldr	r2, [pc, #112]	@ (8001518 <HAL_GPIO_Init+0x238>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d02b      	beq.n	8001502 <HAL_GPIO_Init+0x222>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a1b      	ldr	r2, [pc, #108]	@ (800151c <HAL_GPIO_Init+0x23c>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d025      	beq.n	80014fe <HAL_GPIO_Init+0x21e>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a1a      	ldr	r2, [pc, #104]	@ (8001520 <HAL_GPIO_Init+0x240>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d01f      	beq.n	80014fa <HAL_GPIO_Init+0x21a>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a19      	ldr	r2, [pc, #100]	@ (8001524 <HAL_GPIO_Init+0x244>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d019      	beq.n	80014f6 <HAL_GPIO_Init+0x216>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a18      	ldr	r2, [pc, #96]	@ (8001528 <HAL_GPIO_Init+0x248>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d013      	beq.n	80014f2 <HAL_GPIO_Init+0x212>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a17      	ldr	r2, [pc, #92]	@ (800152c <HAL_GPIO_Init+0x24c>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d00d      	beq.n	80014ee <HAL_GPIO_Init+0x20e>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a16      	ldr	r2, [pc, #88]	@ (8001530 <HAL_GPIO_Init+0x250>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d007      	beq.n	80014ea <HAL_GPIO_Init+0x20a>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a15      	ldr	r2, [pc, #84]	@ (8001534 <HAL_GPIO_Init+0x254>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d101      	bne.n	80014e6 <HAL_GPIO_Init+0x206>
 80014e2:	2309      	movs	r3, #9
 80014e4:	e029      	b.n	800153a <HAL_GPIO_Init+0x25a>
 80014e6:	230a      	movs	r3, #10
 80014e8:	e027      	b.n	800153a <HAL_GPIO_Init+0x25a>
 80014ea:	2307      	movs	r3, #7
 80014ec:	e025      	b.n	800153a <HAL_GPIO_Init+0x25a>
 80014ee:	2306      	movs	r3, #6
 80014f0:	e023      	b.n	800153a <HAL_GPIO_Init+0x25a>
 80014f2:	2305      	movs	r3, #5
 80014f4:	e021      	b.n	800153a <HAL_GPIO_Init+0x25a>
 80014f6:	2304      	movs	r3, #4
 80014f8:	e01f      	b.n	800153a <HAL_GPIO_Init+0x25a>
 80014fa:	2303      	movs	r3, #3
 80014fc:	e01d      	b.n	800153a <HAL_GPIO_Init+0x25a>
 80014fe:	2302      	movs	r3, #2
 8001500:	e01b      	b.n	800153a <HAL_GPIO_Init+0x25a>
 8001502:	2301      	movs	r3, #1
 8001504:	e019      	b.n	800153a <HAL_GPIO_Init+0x25a>
 8001506:	bf00      	nop
 8001508:	58000080 	.word	0x58000080
 800150c:	58024400 	.word	0x58024400
 8001510:	58000400 	.word	0x58000400
 8001514:	58020000 	.word	0x58020000
 8001518:	58020400 	.word	0x58020400
 800151c:	58020800 	.word	0x58020800
 8001520:	58020c00 	.word	0x58020c00
 8001524:	58021000 	.word	0x58021000
 8001528:	58021400 	.word	0x58021400
 800152c:	58021800 	.word	0x58021800
 8001530:	58021c00 	.word	0x58021c00
 8001534:	58022400 	.word	0x58022400
 8001538:	2300      	movs	r3, #0
 800153a:	69fa      	ldr	r2, [r7, #28]
 800153c:	f002 0203 	and.w	r2, r2, #3
 8001540:	0092      	lsls	r2, r2, #2
 8001542:	4093      	lsls	r3, r2
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4313      	orrs	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800154a:	4938      	ldr	r1, [pc, #224]	@ (800162c <HAL_GPIO_Init+0x34c>)
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	089b      	lsrs	r3, r3, #2
 8001550:	3302      	adds	r3, #2
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001558:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	43db      	mvns	r3, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4013      	ands	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	4313      	orrs	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800157e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001586:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	43db      	mvns	r3, r3
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	4013      	ands	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d003      	beq.n	80015ac <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80015ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	43db      	mvns	r3, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4013      	ands	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d003      	beq.n	80015d8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	43db      	mvns	r3, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4013      	ands	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	3301      	adds	r3, #1
 800160c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	fa22 f303 	lsr.w	r3, r2, r3
 8001618:	2b00      	cmp	r3, #0
 800161a:	f47f ae6b 	bne.w	80012f4 <HAL_GPIO_Init+0x14>
  }
}
 800161e:	bf00      	nop
 8001620:	bf00      	nop
 8001622:	3724      	adds	r7, #36	@ 0x24
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	58000400 	.word	0x58000400

08001630 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	460b      	mov	r3, r1
 800163a:	807b      	strh	r3, [r7, #2]
 800163c:	4613      	mov	r3, r2
 800163e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001640:	787b      	ldrb	r3, [r7, #1]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001646:	887a      	ldrh	r2, [r7, #2]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800164c:	e003      	b.n	8001656 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800164e:	887b      	ldrh	r3, [r7, #2]
 8001650:	041a      	lsls	r2, r3, #16
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	619a      	str	r2, [r3, #24]
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001662:	b480      	push	{r7}
 8001664:	b085      	sub	sp, #20
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
 800166a:	460b      	mov	r3, r1
 800166c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001674:	887a      	ldrh	r2, [r7, #2]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	4013      	ands	r3, r2
 800167a:	041a      	lsls	r2, r3, #16
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	43d9      	mvns	r1, r3
 8001680:	887b      	ldrh	r3, [r7, #2]
 8001682:	400b      	ands	r3, r1
 8001684:	431a      	orrs	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	619a      	str	r2, [r3, #24]
}
 800168a:	bf00      	nop
 800168c:	3714      	adds	r7, #20
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80016a0:	4b19      	ldr	r3, [pc, #100]	@ (8001708 <HAL_PWREx_ConfigSupply+0x70>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	f003 0304 	and.w	r3, r3, #4
 80016a8:	2b04      	cmp	r3, #4
 80016aa:	d00a      	beq.n	80016c2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80016ac:	4b16      	ldr	r3, [pc, #88]	@ (8001708 <HAL_PWREx_ConfigSupply+0x70>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	f003 0307 	and.w	r3, r3, #7
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d001      	beq.n	80016be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e01f      	b.n	80016fe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80016be:	2300      	movs	r3, #0
 80016c0:	e01d      	b.n	80016fe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80016c2:	4b11      	ldr	r3, [pc, #68]	@ (8001708 <HAL_PWREx_ConfigSupply+0x70>)
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	f023 0207 	bic.w	r2, r3, #7
 80016ca:	490f      	ldr	r1, [pc, #60]	@ (8001708 <HAL_PWREx_ConfigSupply+0x70>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80016d2:	f7ff fc79 	bl	8000fc8 <HAL_GetTick>
 80016d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80016d8:	e009      	b.n	80016ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80016da:	f7ff fc75 	bl	8000fc8 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80016e8:	d901      	bls.n	80016ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e007      	b.n	80016fe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80016ee:	4b06      	ldr	r3, [pc, #24]	@ (8001708 <HAL_PWREx_ConfigSupply+0x70>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80016fa:	d1ee      	bne.n	80016da <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	58024800 	.word	0x58024800

0800170c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08c      	sub	sp, #48	@ 0x30
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e3c8      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	2b00      	cmp	r3, #0
 8001728:	f000 8087 	beq.w	800183a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800172c:	4b88      	ldr	r3, [pc, #544]	@ (8001950 <HAL_RCC_OscConfig+0x244>)
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001734:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001736:	4b86      	ldr	r3, [pc, #536]	@ (8001950 <HAL_RCC_OscConfig+0x244>)
 8001738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800173a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800173c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800173e:	2b10      	cmp	r3, #16
 8001740:	d007      	beq.n	8001752 <HAL_RCC_OscConfig+0x46>
 8001742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001744:	2b18      	cmp	r3, #24
 8001746:	d110      	bne.n	800176a <HAL_RCC_OscConfig+0x5e>
 8001748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d10b      	bne.n	800176a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001752:	4b7f      	ldr	r3, [pc, #508]	@ (8001950 <HAL_RCC_OscConfig+0x244>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d06c      	beq.n	8001838 <HAL_RCC_OscConfig+0x12c>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d168      	bne.n	8001838 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e3a2      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001772:	d106      	bne.n	8001782 <HAL_RCC_OscConfig+0x76>
 8001774:	4b76      	ldr	r3, [pc, #472]	@ (8001950 <HAL_RCC_OscConfig+0x244>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a75      	ldr	r2, [pc, #468]	@ (8001950 <HAL_RCC_OscConfig+0x244>)
 800177a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800177e:	6013      	str	r3, [r2, #0]
 8001780:	e02e      	b.n	80017e0 <HAL_RCC_OscConfig+0xd4>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d10c      	bne.n	80017a4 <HAL_RCC_OscConfig+0x98>
 800178a:	4b71      	ldr	r3, [pc, #452]	@ (8001950 <HAL_RCC_OscConfig+0x244>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a70      	ldr	r2, [pc, #448]	@ (8001950 <HAL_RCC_OscConfig+0x244>)
 8001790:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	4b6e      	ldr	r3, [pc, #440]	@ (8001950 <HAL_RCC_OscConfig+0x244>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a6d      	ldr	r2, [pc, #436]	@ (8001950 <HAL_RCC_OscConfig+0x244>)
 800179c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	e01d      	b.n	80017e0 <HAL_RCC_OscConfig+0xd4>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017ac:	d10c      	bne.n	80017c8 <HAL_RCC_OscConfig+0xbc>
 80017ae:	4b68      	ldr	r3, [pc, #416]	@ (8001950 <HAL_RCC_OscConfig+0x244>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a67      	ldr	r2, [pc, #412]	@ (8001950 <HAL_RCC_OscConfig+0x244>)
 80017b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017b8:	6013      	str	r3, [r2, #0]
 80017ba:	4b65      	ldr	r3, [pc, #404]	@ (8001950 <HAL_RCC_OscConfig+0x244>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a64      	ldr	r2, [pc, #400]	@ (8001950 <HAL_RCC_OscConfig+0x244>)
 80017c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	e00b      	b.n	80017e0 <HAL_RCC_OscConfig+0xd4>
 80017c8:	4b61      	ldr	r3, [pc, #388]	@ (8001950 <HAL_RCC_OscConfig+0x244>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a60      	ldr	r2, [pc, #384]	@ (8001950 <HAL_RCC_OscConfig+0x244>)
 80017ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017d2:	6013      	str	r3, [r2, #0]
 80017d4:	4b5e      	ldr	r3, [pc, #376]	@ (8001950 <HAL_RCC_OscConfig+0x244>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a5d      	ldr	r2, [pc, #372]	@ (8001950 <HAL_RCC_OscConfig+0x244>)
 80017da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d013      	beq.n	8001810 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e8:	f7ff fbee 	bl	8000fc8 <HAL_GetTick>
 80017ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f0:	f7ff fbea 	bl	8000fc8 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b64      	cmp	r3, #100	@ 0x64
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e356      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001802:	4b53      	ldr	r3, [pc, #332]	@ (8001950 <HAL_RCC_OscConfig+0x244>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d0f0      	beq.n	80017f0 <HAL_RCC_OscConfig+0xe4>
 800180e:	e014      	b.n	800183a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001810:	f7ff fbda 	bl	8000fc8 <HAL_GetTick>
 8001814:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001818:	f7ff fbd6 	bl	8000fc8 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b64      	cmp	r3, #100	@ 0x64
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e342      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800182a:	4b49      	ldr	r3, [pc, #292]	@ (8001950 <HAL_RCC_OscConfig+0x244>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1f0      	bne.n	8001818 <HAL_RCC_OscConfig+0x10c>
 8001836:	e000      	b.n	800183a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001838:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	f000 808c 	beq.w	8001960 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001848:	4b41      	ldr	r3, [pc, #260]	@ (8001950 <HAL_RCC_OscConfig+0x244>)
 800184a:	691b      	ldr	r3, [r3, #16]
 800184c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001850:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001852:	4b3f      	ldr	r3, [pc, #252]	@ (8001950 <HAL_RCC_OscConfig+0x244>)
 8001854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001856:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001858:	6a3b      	ldr	r3, [r7, #32]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d007      	beq.n	800186e <HAL_RCC_OscConfig+0x162>
 800185e:	6a3b      	ldr	r3, [r7, #32]
 8001860:	2b18      	cmp	r3, #24
 8001862:	d137      	bne.n	80018d4 <HAL_RCC_OscConfig+0x1c8>
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f003 0303 	and.w	r3, r3, #3
 800186a:	2b00      	cmp	r3, #0
 800186c:	d132      	bne.n	80018d4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800186e:	4b38      	ldr	r3, [pc, #224]	@ (8001950 <HAL_RCC_OscConfig+0x244>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0304 	and.w	r3, r3, #4
 8001876:	2b00      	cmp	r3, #0
 8001878:	d005      	beq.n	8001886 <HAL_RCC_OscConfig+0x17a>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e314      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001886:	4b32      	ldr	r3, [pc, #200]	@ (8001950 <HAL_RCC_OscConfig+0x244>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f023 0219 	bic.w	r2, r3, #25
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	492f      	ldr	r1, [pc, #188]	@ (8001950 <HAL_RCC_OscConfig+0x244>)
 8001894:	4313      	orrs	r3, r2
 8001896:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001898:	f7ff fb96 	bl	8000fc8 <HAL_GetTick>
 800189c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018a0:	f7ff fb92 	bl	8000fc8 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e2fe      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018b2:	4b27      	ldr	r3, [pc, #156]	@ (8001950 <HAL_RCC_OscConfig+0x244>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0304 	and.w	r3, r3, #4
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0f0      	beq.n	80018a0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018be:	4b24      	ldr	r3, [pc, #144]	@ (8001950 <HAL_RCC_OscConfig+0x244>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	061b      	lsls	r3, r3, #24
 80018cc:	4920      	ldr	r1, [pc, #128]	@ (8001950 <HAL_RCC_OscConfig+0x244>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018d2:	e045      	b.n	8001960 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d026      	beq.n	800192a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80018dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001950 <HAL_RCC_OscConfig+0x244>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f023 0219 	bic.w	r2, r3, #25
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	4919      	ldr	r1, [pc, #100]	@ (8001950 <HAL_RCC_OscConfig+0x244>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ee:	f7ff fb6b 	bl	8000fc8 <HAL_GetTick>
 80018f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018f4:	e008      	b.n	8001908 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018f6:	f7ff fb67 	bl	8000fc8 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e2d3      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001908:	4b11      	ldr	r3, [pc, #68]	@ (8001950 <HAL_RCC_OscConfig+0x244>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	2b00      	cmp	r3, #0
 8001912:	d0f0      	beq.n	80018f6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001914:	4b0e      	ldr	r3, [pc, #56]	@ (8001950 <HAL_RCC_OscConfig+0x244>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	061b      	lsls	r3, r3, #24
 8001922:	490b      	ldr	r1, [pc, #44]	@ (8001950 <HAL_RCC_OscConfig+0x244>)
 8001924:	4313      	orrs	r3, r2
 8001926:	604b      	str	r3, [r1, #4]
 8001928:	e01a      	b.n	8001960 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800192a:	4b09      	ldr	r3, [pc, #36]	@ (8001950 <HAL_RCC_OscConfig+0x244>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a08      	ldr	r2, [pc, #32]	@ (8001950 <HAL_RCC_OscConfig+0x244>)
 8001930:	f023 0301 	bic.w	r3, r3, #1
 8001934:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001936:	f7ff fb47 	bl	8000fc8 <HAL_GetTick>
 800193a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800193c:	e00a      	b.n	8001954 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800193e:	f7ff fb43 	bl	8000fc8 <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d903      	bls.n	8001954 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e2af      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a4>
 8001950:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001954:	4b96      	ldr	r3, [pc, #600]	@ (8001bb0 <HAL_RCC_OscConfig+0x4a4>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1ee      	bne.n	800193e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0310 	and.w	r3, r3, #16
 8001968:	2b00      	cmp	r3, #0
 800196a:	d06a      	beq.n	8001a42 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800196c:	4b90      	ldr	r3, [pc, #576]	@ (8001bb0 <HAL_RCC_OscConfig+0x4a4>)
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001974:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001976:	4b8e      	ldr	r3, [pc, #568]	@ (8001bb0 <HAL_RCC_OscConfig+0x4a4>)
 8001978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800197a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	2b08      	cmp	r3, #8
 8001980:	d007      	beq.n	8001992 <HAL_RCC_OscConfig+0x286>
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	2b18      	cmp	r3, #24
 8001986:	d11b      	bne.n	80019c0 <HAL_RCC_OscConfig+0x2b4>
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	2b01      	cmp	r3, #1
 8001990:	d116      	bne.n	80019c0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001992:	4b87      	ldr	r3, [pc, #540]	@ (8001bb0 <HAL_RCC_OscConfig+0x4a4>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800199a:	2b00      	cmp	r3, #0
 800199c:	d005      	beq.n	80019aa <HAL_RCC_OscConfig+0x29e>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	2b80      	cmp	r3, #128	@ 0x80
 80019a4:	d001      	beq.n	80019aa <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e282      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80019aa:	4b81      	ldr	r3, [pc, #516]	@ (8001bb0 <HAL_RCC_OscConfig+0x4a4>)
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	061b      	lsls	r3, r3, #24
 80019b8:	497d      	ldr	r1, [pc, #500]	@ (8001bb0 <HAL_RCC_OscConfig+0x4a4>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80019be:	e040      	b.n	8001a42 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	69db      	ldr	r3, [r3, #28]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d023      	beq.n	8001a10 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80019c8:	4b79      	ldr	r3, [pc, #484]	@ (8001bb0 <HAL_RCC_OscConfig+0x4a4>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a78      	ldr	r2, [pc, #480]	@ (8001bb0 <HAL_RCC_OscConfig+0x4a4>)
 80019ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d4:	f7ff faf8 	bl	8000fc8 <HAL_GetTick>
 80019d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80019dc:	f7ff faf4 	bl	8000fc8 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e260      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80019ee:	4b70      	ldr	r3, [pc, #448]	@ (8001bb0 <HAL_RCC_OscConfig+0x4a4>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d0f0      	beq.n	80019dc <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80019fa:	4b6d      	ldr	r3, [pc, #436]	@ (8001bb0 <HAL_RCC_OscConfig+0x4a4>)
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a1b      	ldr	r3, [r3, #32]
 8001a06:	061b      	lsls	r3, r3, #24
 8001a08:	4969      	ldr	r1, [pc, #420]	@ (8001bb0 <HAL_RCC_OscConfig+0x4a4>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	60cb      	str	r3, [r1, #12]
 8001a0e:	e018      	b.n	8001a42 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001a10:	4b67      	ldr	r3, [pc, #412]	@ (8001bb0 <HAL_RCC_OscConfig+0x4a4>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a66      	ldr	r2, [pc, #408]	@ (8001bb0 <HAL_RCC_OscConfig+0x4a4>)
 8001a16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001a1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1c:	f7ff fad4 	bl	8000fc8 <HAL_GetTick>
 8001a20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001a24:	f7ff fad0 	bl	8000fc8 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e23c      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a36:	4b5e      	ldr	r3, [pc, #376]	@ (8001bb0 <HAL_RCC_OscConfig+0x4a4>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f0      	bne.n	8001a24 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0308 	and.w	r3, r3, #8
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d036      	beq.n	8001abc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d019      	beq.n	8001a8a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a56:	4b56      	ldr	r3, [pc, #344]	@ (8001bb0 <HAL_RCC_OscConfig+0x4a4>)
 8001a58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a5a:	4a55      	ldr	r2, [pc, #340]	@ (8001bb0 <HAL_RCC_OscConfig+0x4a4>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a62:	f7ff fab1 	bl	8000fc8 <HAL_GetTick>
 8001a66:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a6a:	f7ff faad 	bl	8000fc8 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e219      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a7c:	4b4c      	ldr	r3, [pc, #304]	@ (8001bb0 <HAL_RCC_OscConfig+0x4a4>)
 8001a7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0f0      	beq.n	8001a6a <HAL_RCC_OscConfig+0x35e>
 8001a88:	e018      	b.n	8001abc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a8a:	4b49      	ldr	r3, [pc, #292]	@ (8001bb0 <HAL_RCC_OscConfig+0x4a4>)
 8001a8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a8e:	4a48      	ldr	r2, [pc, #288]	@ (8001bb0 <HAL_RCC_OscConfig+0x4a4>)
 8001a90:	f023 0301 	bic.w	r3, r3, #1
 8001a94:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a96:	f7ff fa97 	bl	8000fc8 <HAL_GetTick>
 8001a9a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a9e:	f7ff fa93 	bl	8000fc8 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e1ff      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ab0:	4b3f      	ldr	r3, [pc, #252]	@ (8001bb0 <HAL_RCC_OscConfig+0x4a4>)
 8001ab2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1f0      	bne.n	8001a9e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0320 	and.w	r3, r3, #32
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d036      	beq.n	8001b36 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d019      	beq.n	8001b04 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ad0:	4b37      	ldr	r3, [pc, #220]	@ (8001bb0 <HAL_RCC_OscConfig+0x4a4>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a36      	ldr	r2, [pc, #216]	@ (8001bb0 <HAL_RCC_OscConfig+0x4a4>)
 8001ad6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ada:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001adc:	f7ff fa74 	bl	8000fc8 <HAL_GetTick>
 8001ae0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ae4:	f7ff fa70 	bl	8000fc8 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e1dc      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001af6:	4b2e      	ldr	r3, [pc, #184]	@ (8001bb0 <HAL_RCC_OscConfig+0x4a4>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x3d8>
 8001b02:	e018      	b.n	8001b36 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b04:	4b2a      	ldr	r3, [pc, #168]	@ (8001bb0 <HAL_RCC_OscConfig+0x4a4>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a29      	ldr	r2, [pc, #164]	@ (8001bb0 <HAL_RCC_OscConfig+0x4a4>)
 8001b0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001b0e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b10:	f7ff fa5a 	bl	8000fc8 <HAL_GetTick>
 8001b14:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b18:	f7ff fa56 	bl	8000fc8 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e1c2      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b2a:	4b21      	ldr	r3, [pc, #132]	@ (8001bb0 <HAL_RCC_OscConfig+0x4a4>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1f0      	bne.n	8001b18 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0304 	and.w	r3, r3, #4
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f000 8086 	beq.w	8001c50 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001b44:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb4 <HAL_RCC_OscConfig+0x4a8>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a1a      	ldr	r2, [pc, #104]	@ (8001bb4 <HAL_RCC_OscConfig+0x4a8>)
 8001b4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b50:	f7ff fa3a 	bl	8000fc8 <HAL_GetTick>
 8001b54:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b58:	f7ff fa36 	bl	8000fc8 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b64      	cmp	r3, #100	@ 0x64
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e1a2      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b6a:	4b12      	ldr	r3, [pc, #72]	@ (8001bb4 <HAL_RCC_OscConfig+0x4a8>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d0f0      	beq.n	8001b58 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d106      	bne.n	8001b8c <HAL_RCC_OscConfig+0x480>
 8001b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb0 <HAL_RCC_OscConfig+0x4a4>)
 8001b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b82:	4a0b      	ldr	r2, [pc, #44]	@ (8001bb0 <HAL_RCC_OscConfig+0x4a4>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b8a:	e032      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4e6>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d111      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x4ac>
 8001b94:	4b06      	ldr	r3, [pc, #24]	@ (8001bb0 <HAL_RCC_OscConfig+0x4a4>)
 8001b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b98:	4a05      	ldr	r2, [pc, #20]	@ (8001bb0 <HAL_RCC_OscConfig+0x4a4>)
 8001b9a:	f023 0301 	bic.w	r3, r3, #1
 8001b9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ba0:	4b03      	ldr	r3, [pc, #12]	@ (8001bb0 <HAL_RCC_OscConfig+0x4a4>)
 8001ba2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ba4:	4a02      	ldr	r2, [pc, #8]	@ (8001bb0 <HAL_RCC_OscConfig+0x4a4>)
 8001ba6:	f023 0304 	bic.w	r3, r3, #4
 8001baa:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bac:	e021      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4e6>
 8001bae:	bf00      	nop
 8001bb0:	58024400 	.word	0x58024400
 8001bb4:	58024800 	.word	0x58024800
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	2b05      	cmp	r3, #5
 8001bbe:	d10c      	bne.n	8001bda <HAL_RCC_OscConfig+0x4ce>
 8001bc0:	4b83      	ldr	r3, [pc, #524]	@ (8001dd0 <HAL_RCC_OscConfig+0x6c4>)
 8001bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bc4:	4a82      	ldr	r2, [pc, #520]	@ (8001dd0 <HAL_RCC_OscConfig+0x6c4>)
 8001bc6:	f043 0304 	orr.w	r3, r3, #4
 8001bca:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bcc:	4b80      	ldr	r3, [pc, #512]	@ (8001dd0 <HAL_RCC_OscConfig+0x6c4>)
 8001bce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bd0:	4a7f      	ldr	r2, [pc, #508]	@ (8001dd0 <HAL_RCC_OscConfig+0x6c4>)
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bd8:	e00b      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4e6>
 8001bda:	4b7d      	ldr	r3, [pc, #500]	@ (8001dd0 <HAL_RCC_OscConfig+0x6c4>)
 8001bdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bde:	4a7c      	ldr	r2, [pc, #496]	@ (8001dd0 <HAL_RCC_OscConfig+0x6c4>)
 8001be0:	f023 0301 	bic.w	r3, r3, #1
 8001be4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001be6:	4b7a      	ldr	r3, [pc, #488]	@ (8001dd0 <HAL_RCC_OscConfig+0x6c4>)
 8001be8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bea:	4a79      	ldr	r2, [pc, #484]	@ (8001dd0 <HAL_RCC_OscConfig+0x6c4>)
 8001bec:	f023 0304 	bic.w	r3, r3, #4
 8001bf0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d015      	beq.n	8001c26 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bfa:	f7ff f9e5 	bl	8000fc8 <HAL_GetTick>
 8001bfe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c00:	e00a      	b.n	8001c18 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c02:	f7ff f9e1 	bl	8000fc8 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e14b      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c18:	4b6d      	ldr	r3, [pc, #436]	@ (8001dd0 <HAL_RCC_OscConfig+0x6c4>)
 8001c1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0ee      	beq.n	8001c02 <HAL_RCC_OscConfig+0x4f6>
 8001c24:	e014      	b.n	8001c50 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c26:	f7ff f9cf 	bl	8000fc8 <HAL_GetTick>
 8001c2a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c2c:	e00a      	b.n	8001c44 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c2e:	f7ff f9cb 	bl	8000fc8 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e135      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c44:	4b62      	ldr	r3, [pc, #392]	@ (8001dd0 <HAL_RCC_OscConfig+0x6c4>)
 8001c46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1ee      	bne.n	8001c2e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 812a 	beq.w	8001eae <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001c5a:	4b5d      	ldr	r3, [pc, #372]	@ (8001dd0 <HAL_RCC_OscConfig+0x6c4>)
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c62:	2b18      	cmp	r3, #24
 8001c64:	f000 80ba 	beq.w	8001ddc <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	f040 8095 	bne.w	8001d9c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c72:	4b57      	ldr	r3, [pc, #348]	@ (8001dd0 <HAL_RCC_OscConfig+0x6c4>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a56      	ldr	r2, [pc, #344]	@ (8001dd0 <HAL_RCC_OscConfig+0x6c4>)
 8001c78:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7e:	f7ff f9a3 	bl	8000fc8 <HAL_GetTick>
 8001c82:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c86:	f7ff f99f 	bl	8000fc8 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e10b      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c98:	4b4d      	ldr	r3, [pc, #308]	@ (8001dd0 <HAL_RCC_OscConfig+0x6c4>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1f0      	bne.n	8001c86 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ca4:	4b4a      	ldr	r3, [pc, #296]	@ (8001dd0 <HAL_RCC_OscConfig+0x6c4>)
 8001ca6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ca8:	4b4a      	ldr	r3, [pc, #296]	@ (8001dd4 <HAL_RCC_OscConfig+0x6c8>)
 8001caa:	4013      	ands	r3, r2
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001cb4:	0112      	lsls	r2, r2, #4
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	4945      	ldr	r1, [pc, #276]	@ (8001dd0 <HAL_RCC_OscConfig+0x6c4>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	628b      	str	r3, [r1, #40]	@ 0x28
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	025b      	lsls	r3, r3, #9
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	041b      	lsls	r3, r3, #16
 8001cdc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	061b      	lsls	r3, r3, #24
 8001cea:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001cee:	4938      	ldr	r1, [pc, #224]	@ (8001dd0 <HAL_RCC_OscConfig+0x6c4>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001cf4:	4b36      	ldr	r3, [pc, #216]	@ (8001dd0 <HAL_RCC_OscConfig+0x6c4>)
 8001cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf8:	4a35      	ldr	r2, [pc, #212]	@ (8001dd0 <HAL_RCC_OscConfig+0x6c4>)
 8001cfa:	f023 0301 	bic.w	r3, r3, #1
 8001cfe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001d00:	4b33      	ldr	r3, [pc, #204]	@ (8001dd0 <HAL_RCC_OscConfig+0x6c4>)
 8001d02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d04:	4b34      	ldr	r3, [pc, #208]	@ (8001dd8 <HAL_RCC_OscConfig+0x6cc>)
 8001d06:	4013      	ands	r3, r2
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001d0c:	00d2      	lsls	r2, r2, #3
 8001d0e:	4930      	ldr	r1, [pc, #192]	@ (8001dd0 <HAL_RCC_OscConfig+0x6c4>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001d14:	4b2e      	ldr	r3, [pc, #184]	@ (8001dd0 <HAL_RCC_OscConfig+0x6c4>)
 8001d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d18:	f023 020c 	bic.w	r2, r3, #12
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d20:	492b      	ldr	r1, [pc, #172]	@ (8001dd0 <HAL_RCC_OscConfig+0x6c4>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001d26:	4b2a      	ldr	r3, [pc, #168]	@ (8001dd0 <HAL_RCC_OscConfig+0x6c4>)
 8001d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d2a:	f023 0202 	bic.w	r2, r3, #2
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d32:	4927      	ldr	r1, [pc, #156]	@ (8001dd0 <HAL_RCC_OscConfig+0x6c4>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001d38:	4b25      	ldr	r3, [pc, #148]	@ (8001dd0 <HAL_RCC_OscConfig+0x6c4>)
 8001d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d3c:	4a24      	ldr	r2, [pc, #144]	@ (8001dd0 <HAL_RCC_OscConfig+0x6c4>)
 8001d3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d44:	4b22      	ldr	r3, [pc, #136]	@ (8001dd0 <HAL_RCC_OscConfig+0x6c4>)
 8001d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d48:	4a21      	ldr	r2, [pc, #132]	@ (8001dd0 <HAL_RCC_OscConfig+0x6c4>)
 8001d4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001d50:	4b1f      	ldr	r3, [pc, #124]	@ (8001dd0 <HAL_RCC_OscConfig+0x6c4>)
 8001d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d54:	4a1e      	ldr	r2, [pc, #120]	@ (8001dd0 <HAL_RCC_OscConfig+0x6c4>)
 8001d56:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001d5c:	4b1c      	ldr	r3, [pc, #112]	@ (8001dd0 <HAL_RCC_OscConfig+0x6c4>)
 8001d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d60:	4a1b      	ldr	r2, [pc, #108]	@ (8001dd0 <HAL_RCC_OscConfig+0x6c4>)
 8001d62:	f043 0301 	orr.w	r3, r3, #1
 8001d66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d68:	4b19      	ldr	r3, [pc, #100]	@ (8001dd0 <HAL_RCC_OscConfig+0x6c4>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a18      	ldr	r2, [pc, #96]	@ (8001dd0 <HAL_RCC_OscConfig+0x6c4>)
 8001d6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d74:	f7ff f928 	bl	8000fc8 <HAL_GetTick>
 8001d78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d7c:	f7ff f924 	bl	8000fc8 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e090      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d8e:	4b10      	ldr	r3, [pc, #64]	@ (8001dd0 <HAL_RCC_OscConfig+0x6c4>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0f0      	beq.n	8001d7c <HAL_RCC_OscConfig+0x670>
 8001d9a:	e088      	b.n	8001eae <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd0 <HAL_RCC_OscConfig+0x6c4>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a0b      	ldr	r2, [pc, #44]	@ (8001dd0 <HAL_RCC_OscConfig+0x6c4>)
 8001da2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001da6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da8:	f7ff f90e 	bl	8000fc8 <HAL_GetTick>
 8001dac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db0:	f7ff f90a 	bl	8000fc8 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e076      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001dc2:	4b03      	ldr	r3, [pc, #12]	@ (8001dd0 <HAL_RCC_OscConfig+0x6c4>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f0      	bne.n	8001db0 <HAL_RCC_OscConfig+0x6a4>
 8001dce:	e06e      	b.n	8001eae <HAL_RCC_OscConfig+0x7a2>
 8001dd0:	58024400 	.word	0x58024400
 8001dd4:	fffffc0c 	.word	0xfffffc0c
 8001dd8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001ddc:	4b36      	ldr	r3, [pc, #216]	@ (8001eb8 <HAL_RCC_OscConfig+0x7ac>)
 8001dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001de2:	4b35      	ldr	r3, [pc, #212]	@ (8001eb8 <HAL_RCC_OscConfig+0x7ac>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d031      	beq.n	8001e54 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	f003 0203 	and.w	r2, r3, #3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d12a      	bne.n	8001e54 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	091b      	lsrs	r3, r3, #4
 8001e02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d122      	bne.n	8001e54 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e18:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d11a      	bne.n	8001e54 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	0a5b      	lsrs	r3, r3, #9
 8001e22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e2a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d111      	bne.n	8001e54 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	0c1b      	lsrs	r3, r3, #16
 8001e34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e3c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d108      	bne.n	8001e54 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	0e1b      	lsrs	r3, r3, #24
 8001e46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e4e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d001      	beq.n	8001e58 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e02b      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001e58:	4b17      	ldr	r3, [pc, #92]	@ (8001eb8 <HAL_RCC_OscConfig+0x7ac>)
 8001e5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e5c:	08db      	lsrs	r3, r3, #3
 8001e5e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e62:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d01f      	beq.n	8001eae <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001e6e:	4b12      	ldr	r3, [pc, #72]	@ (8001eb8 <HAL_RCC_OscConfig+0x7ac>)
 8001e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e72:	4a11      	ldr	r2, [pc, #68]	@ (8001eb8 <HAL_RCC_OscConfig+0x7ac>)
 8001e74:	f023 0301 	bic.w	r3, r3, #1
 8001e78:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e7a:	f7ff f8a5 	bl	8000fc8 <HAL_GetTick>
 8001e7e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001e80:	bf00      	nop
 8001e82:	f7ff f8a1 	bl	8000fc8 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d0f9      	beq.n	8001e82 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb8 <HAL_RCC_OscConfig+0x7ac>)
 8001e90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e92:	4b0a      	ldr	r3, [pc, #40]	@ (8001ebc <HAL_RCC_OscConfig+0x7b0>)
 8001e94:	4013      	ands	r3, r2
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001e9a:	00d2      	lsls	r2, r2, #3
 8001e9c:	4906      	ldr	r1, [pc, #24]	@ (8001eb8 <HAL_RCC_OscConfig+0x7ac>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001ea2:	4b05      	ldr	r3, [pc, #20]	@ (8001eb8 <HAL_RCC_OscConfig+0x7ac>)
 8001ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea6:	4a04      	ldr	r2, [pc, #16]	@ (8001eb8 <HAL_RCC_OscConfig+0x7ac>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3730      	adds	r7, #48	@ 0x30
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	58024400 	.word	0x58024400
 8001ebc:	ffff0007 	.word	0xffff0007

08001ec0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d101      	bne.n	8001ed4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e19c      	b.n	800220e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ed4:	4b8a      	ldr	r3, [pc, #552]	@ (8002100 <HAL_RCC_ClockConfig+0x240>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 030f 	and.w	r3, r3, #15
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d910      	bls.n	8001f04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee2:	4b87      	ldr	r3, [pc, #540]	@ (8002100 <HAL_RCC_ClockConfig+0x240>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f023 020f 	bic.w	r2, r3, #15
 8001eea:	4985      	ldr	r1, [pc, #532]	@ (8002100 <HAL_RCC_ClockConfig+0x240>)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef2:	4b83      	ldr	r3, [pc, #524]	@ (8002100 <HAL_RCC_ClockConfig+0x240>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d001      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e184      	b.n	800220e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d010      	beq.n	8001f32 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	691a      	ldr	r2, [r3, #16]
 8001f14:	4b7b      	ldr	r3, [pc, #492]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d908      	bls.n	8001f32 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001f20:	4b78      	ldr	r3, [pc, #480]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	4975      	ldr	r1, [pc, #468]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d010      	beq.n	8001f60 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	695a      	ldr	r2, [r3, #20]
 8001f42:	4b70      	ldr	r3, [pc, #448]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d908      	bls.n	8001f60 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f4e:	4b6d      	ldr	r3, [pc, #436]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	496a      	ldr	r1, [pc, #424]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0310 	and.w	r3, r3, #16
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d010      	beq.n	8001f8e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	699a      	ldr	r2, [r3, #24]
 8001f70:	4b64      	ldr	r3, [pc, #400]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d908      	bls.n	8001f8e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001f7c:	4b61      	ldr	r3, [pc, #388]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001f7e:	69db      	ldr	r3, [r3, #28]
 8001f80:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	495e      	ldr	r1, [pc, #376]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0320 	and.w	r3, r3, #32
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d010      	beq.n	8001fbc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69da      	ldr	r2, [r3, #28]
 8001f9e:	4b59      	ldr	r3, [pc, #356]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d908      	bls.n	8001fbc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001faa:	4b56      	ldr	r3, [pc, #344]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	4953      	ldr	r1, [pc, #332]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d010      	beq.n	8001fea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68da      	ldr	r2, [r3, #12]
 8001fcc:	4b4d      	ldr	r3, [pc, #308]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	f003 030f 	and.w	r3, r3, #15
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d908      	bls.n	8001fea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fd8:	4b4a      	ldr	r3, [pc, #296]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	f023 020f 	bic.w	r2, r3, #15
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	4947      	ldr	r1, [pc, #284]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d055      	beq.n	80020a2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001ff6:	4b43      	ldr	r3, [pc, #268]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	4940      	ldr	r1, [pc, #256]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8002004:	4313      	orrs	r3, r2
 8002006:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	2b02      	cmp	r3, #2
 800200e:	d107      	bne.n	8002020 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002010:	4b3c      	ldr	r3, [pc, #240]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d121      	bne.n	8002060 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e0f6      	b.n	800220e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	2b03      	cmp	r3, #3
 8002026:	d107      	bne.n	8002038 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002028:	4b36      	ldr	r3, [pc, #216]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d115      	bne.n	8002060 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e0ea      	b.n	800220e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d107      	bne.n	8002050 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002040:	4b30      	ldr	r3, [pc, #192]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002048:	2b00      	cmp	r3, #0
 800204a:	d109      	bne.n	8002060 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e0de      	b.n	800220e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002050:	4b2c      	ldr	r3, [pc, #176]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e0d6      	b.n	800220e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002060:	4b28      	ldr	r3, [pc, #160]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	f023 0207 	bic.w	r2, r3, #7
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	4925      	ldr	r1, [pc, #148]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 800206e:	4313      	orrs	r3, r2
 8002070:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002072:	f7fe ffa9 	bl	8000fc8 <HAL_GetTick>
 8002076:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002078:	e00a      	b.n	8002090 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800207a:	f7fe ffa5 	bl	8000fc8 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002088:	4293      	cmp	r3, r2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e0be      	b.n	800220e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002090:	4b1c      	ldr	r3, [pc, #112]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	429a      	cmp	r2, r3
 80020a0:	d1eb      	bne.n	800207a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d010      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68da      	ldr	r2, [r3, #12]
 80020b2:	4b14      	ldr	r3, [pc, #80]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d208      	bcs.n	80020d0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020be:	4b11      	ldr	r3, [pc, #68]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	f023 020f 	bic.w	r2, r3, #15
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	490e      	ldr	r1, [pc, #56]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002100 <HAL_RCC_ClockConfig+0x240>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 030f 	and.w	r3, r3, #15
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d214      	bcs.n	8002108 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020de:	4b08      	ldr	r3, [pc, #32]	@ (8002100 <HAL_RCC_ClockConfig+0x240>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f023 020f 	bic.w	r2, r3, #15
 80020e6:	4906      	ldr	r1, [pc, #24]	@ (8002100 <HAL_RCC_ClockConfig+0x240>)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ee:	4b04      	ldr	r3, [pc, #16]	@ (8002100 <HAL_RCC_ClockConfig+0x240>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d005      	beq.n	8002108 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e086      	b.n	800220e <HAL_RCC_ClockConfig+0x34e>
 8002100:	52002000 	.word	0x52002000
 8002104:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b00      	cmp	r3, #0
 8002112:	d010      	beq.n	8002136 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	691a      	ldr	r2, [r3, #16]
 8002118:	4b3f      	ldr	r3, [pc, #252]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002120:	429a      	cmp	r2, r3
 8002122:	d208      	bcs.n	8002136 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002124:	4b3c      	ldr	r3, [pc, #240]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	4939      	ldr	r1, [pc, #228]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 8002132:	4313      	orrs	r3, r2
 8002134:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	2b00      	cmp	r3, #0
 8002140:	d010      	beq.n	8002164 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	695a      	ldr	r2, [r3, #20]
 8002146:	4b34      	ldr	r3, [pc, #208]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800214e:	429a      	cmp	r2, r3
 8002150:	d208      	bcs.n	8002164 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002152:	4b31      	ldr	r3, [pc, #196]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	492e      	ldr	r1, [pc, #184]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 8002160:	4313      	orrs	r3, r2
 8002162:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0310 	and.w	r3, r3, #16
 800216c:	2b00      	cmp	r3, #0
 800216e:	d010      	beq.n	8002192 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	699a      	ldr	r2, [r3, #24]
 8002174:	4b28      	ldr	r3, [pc, #160]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 8002176:	69db      	ldr	r3, [r3, #28]
 8002178:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800217c:	429a      	cmp	r2, r3
 800217e:	d208      	bcs.n	8002192 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002180:	4b25      	ldr	r3, [pc, #148]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	4922      	ldr	r1, [pc, #136]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 800218e:	4313      	orrs	r3, r2
 8002190:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0320 	and.w	r3, r3, #32
 800219a:	2b00      	cmp	r3, #0
 800219c:	d010      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	69da      	ldr	r2, [r3, #28]
 80021a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d208      	bcs.n	80021c0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80021ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	4917      	ldr	r1, [pc, #92]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80021c0:	f000 f834 	bl	800222c <HAL_RCC_GetSysClockFreq>
 80021c4:	4602      	mov	r2, r0
 80021c6:	4b14      	ldr	r3, [pc, #80]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	0a1b      	lsrs	r3, r3, #8
 80021cc:	f003 030f 	and.w	r3, r3, #15
 80021d0:	4912      	ldr	r1, [pc, #72]	@ (800221c <HAL_RCC_ClockConfig+0x35c>)
 80021d2:	5ccb      	ldrb	r3, [r1, r3]
 80021d4:	f003 031f 	and.w	r3, r3, #31
 80021d8:	fa22 f303 	lsr.w	r3, r2, r3
 80021dc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80021de:	4b0e      	ldr	r3, [pc, #56]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	4a0d      	ldr	r2, [pc, #52]	@ (800221c <HAL_RCC_ClockConfig+0x35c>)
 80021e8:	5cd3      	ldrb	r3, [r2, r3]
 80021ea:	f003 031f 	and.w	r3, r3, #31
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	fa22 f303 	lsr.w	r3, r2, r3
 80021f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002220 <HAL_RCC_ClockConfig+0x360>)
 80021f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80021f8:	4a0a      	ldr	r2, [pc, #40]	@ (8002224 <HAL_RCC_ClockConfig+0x364>)
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80021fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002228 <HAL_RCC_ClockConfig+0x368>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4618      	mov	r0, r3
 8002204:	f7fe fe96 	bl	8000f34 <HAL_InitTick>
 8002208:	4603      	mov	r3, r0
 800220a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800220c:	7bfb      	ldrb	r3, [r7, #15]
}
 800220e:	4618      	mov	r0, r3
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	58024400 	.word	0x58024400
 800221c:	08007154 	.word	0x08007154
 8002220:	24000004 	.word	0x24000004
 8002224:	24000000 	.word	0x24000000
 8002228:	24000008 	.word	0x24000008

0800222c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800222c:	b480      	push	{r7}
 800222e:	b089      	sub	sp, #36	@ 0x24
 8002230:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002232:	4bb3      	ldr	r3, [pc, #716]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800223a:	2b18      	cmp	r3, #24
 800223c:	f200 8155 	bhi.w	80024ea <HAL_RCC_GetSysClockFreq+0x2be>
 8002240:	a201      	add	r2, pc, #4	@ (adr r2, 8002248 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002246:	bf00      	nop
 8002248:	080022ad 	.word	0x080022ad
 800224c:	080024eb 	.word	0x080024eb
 8002250:	080024eb 	.word	0x080024eb
 8002254:	080024eb 	.word	0x080024eb
 8002258:	080024eb 	.word	0x080024eb
 800225c:	080024eb 	.word	0x080024eb
 8002260:	080024eb 	.word	0x080024eb
 8002264:	080024eb 	.word	0x080024eb
 8002268:	080022d3 	.word	0x080022d3
 800226c:	080024eb 	.word	0x080024eb
 8002270:	080024eb 	.word	0x080024eb
 8002274:	080024eb 	.word	0x080024eb
 8002278:	080024eb 	.word	0x080024eb
 800227c:	080024eb 	.word	0x080024eb
 8002280:	080024eb 	.word	0x080024eb
 8002284:	080024eb 	.word	0x080024eb
 8002288:	080022d9 	.word	0x080022d9
 800228c:	080024eb 	.word	0x080024eb
 8002290:	080024eb 	.word	0x080024eb
 8002294:	080024eb 	.word	0x080024eb
 8002298:	080024eb 	.word	0x080024eb
 800229c:	080024eb 	.word	0x080024eb
 80022a0:	080024eb 	.word	0x080024eb
 80022a4:	080024eb 	.word	0x080024eb
 80022a8:	080022df 	.word	0x080022df
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022ac:	4b94      	ldr	r3, [pc, #592]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0320 	and.w	r3, r3, #32
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d009      	beq.n	80022cc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80022b8:	4b91      	ldr	r3, [pc, #580]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	08db      	lsrs	r3, r3, #3
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	4a90      	ldr	r2, [pc, #576]	@ (8002504 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80022c4:	fa22 f303 	lsr.w	r3, r2, r3
 80022c8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80022ca:	e111      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80022cc:	4b8d      	ldr	r3, [pc, #564]	@ (8002504 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80022ce:	61bb      	str	r3, [r7, #24]
      break;
 80022d0:	e10e      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80022d2:	4b8d      	ldr	r3, [pc, #564]	@ (8002508 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80022d4:	61bb      	str	r3, [r7, #24]
      break;
 80022d6:	e10b      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80022d8:	4b8c      	ldr	r3, [pc, #560]	@ (800250c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80022da:	61bb      	str	r3, [r7, #24]
      break;
 80022dc:	e108      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80022de:	4b88      	ldr	r3, [pc, #544]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e2:	f003 0303 	and.w	r3, r3, #3
 80022e6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80022e8:	4b85      	ldr	r3, [pc, #532]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ec:	091b      	lsrs	r3, r3, #4
 80022ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022f2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80022f4:	4b82      	ldr	r3, [pc, #520]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80022fe:	4b80      	ldr	r3, [pc, #512]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002302:	08db      	lsrs	r3, r3, #3
 8002304:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	fb02 f303 	mul.w	r3, r2, r3
 800230e:	ee07 3a90 	vmov	s15, r3
 8002312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002316:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 80e1 	beq.w	80024e4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	2b02      	cmp	r3, #2
 8002326:	f000 8083 	beq.w	8002430 <HAL_RCC_GetSysClockFreq+0x204>
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2b02      	cmp	r3, #2
 800232e:	f200 80a1 	bhi.w	8002474 <HAL_RCC_GetSysClockFreq+0x248>
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d003      	beq.n	8002340 <HAL_RCC_GetSysClockFreq+0x114>
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d056      	beq.n	80023ec <HAL_RCC_GetSysClockFreq+0x1c0>
 800233e:	e099      	b.n	8002474 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002340:	4b6f      	ldr	r3, [pc, #444]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0320 	and.w	r3, r3, #32
 8002348:	2b00      	cmp	r3, #0
 800234a:	d02d      	beq.n	80023a8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800234c:	4b6c      	ldr	r3, [pc, #432]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	08db      	lsrs	r3, r3, #3
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	4a6b      	ldr	r2, [pc, #428]	@ (8002504 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002358:	fa22 f303 	lsr.w	r3, r2, r3
 800235c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	ee07 3a90 	vmov	s15, r3
 8002364:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	ee07 3a90 	vmov	s15, r3
 800236e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002376:	4b62      	ldr	r3, [pc, #392]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800237e:	ee07 3a90 	vmov	s15, r3
 8002382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002386:	ed97 6a02 	vldr	s12, [r7, #8]
 800238a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002510 <HAL_RCC_GetSysClockFreq+0x2e4>
 800238e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002396:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800239a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800239e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023a2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80023a6:	e087      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	ee07 3a90 	vmov	s15, r3
 80023ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023b2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002514 <HAL_RCC_GetSysClockFreq+0x2e8>
 80023b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023ba:	4b51      	ldr	r3, [pc, #324]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023c2:	ee07 3a90 	vmov	s15, r3
 80023c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80023ce:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002510 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80023de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80023ea:	e065      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	ee07 3a90 	vmov	s15, r3
 80023f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023f6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002518 <HAL_RCC_GetSysClockFreq+0x2ec>
 80023fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023fe:	4b40      	ldr	r3, [pc, #256]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002406:	ee07 3a90 	vmov	s15, r3
 800240a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800240e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002412:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002510 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800241a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800241e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800242a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800242e:	e043      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	ee07 3a90 	vmov	s15, r3
 8002436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800243a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800251c <HAL_RCC_GetSysClockFreq+0x2f0>
 800243e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002442:	4b2f      	ldr	r3, [pc, #188]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800244a:	ee07 3a90 	vmov	s15, r3
 800244e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002452:	ed97 6a02 	vldr	s12, [r7, #8]
 8002456:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002510 <HAL_RCC_GetSysClockFreq+0x2e4>
 800245a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800245e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002462:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800246a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800246e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002472:	e021      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	ee07 3a90 	vmov	s15, r3
 800247a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800247e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002518 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002486:	4b1e      	ldr	r3, [pc, #120]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800248e:	ee07 3a90 	vmov	s15, r3
 8002492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002496:	ed97 6a02 	vldr	s12, [r7, #8]
 800249a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002510 <HAL_RCC_GetSysClockFreq+0x2e4>
 800249e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80024aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80024b6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80024b8:	4b11      	ldr	r3, [pc, #68]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024bc:	0a5b      	lsrs	r3, r3, #9
 80024be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024c2:	3301      	adds	r3, #1
 80024c4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	ee07 3a90 	vmov	s15, r3
 80024cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80024d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024dc:	ee17 3a90 	vmov	r3, s15
 80024e0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80024e2:	e005      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	61bb      	str	r3, [r7, #24]
      break;
 80024e8:	e002      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80024ea:	4b07      	ldr	r3, [pc, #28]	@ (8002508 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80024ec:	61bb      	str	r3, [r7, #24]
      break;
 80024ee:	bf00      	nop
  }

  return sysclockfreq;
 80024f0:	69bb      	ldr	r3, [r7, #24]
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3724      	adds	r7, #36	@ 0x24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	58024400 	.word	0x58024400
 8002504:	03d09000 	.word	0x03d09000
 8002508:	003d0900 	.word	0x003d0900
 800250c:	017d7840 	.word	0x017d7840
 8002510:	46000000 	.word	0x46000000
 8002514:	4c742400 	.word	0x4c742400
 8002518:	4a742400 	.word	0x4a742400
 800251c:	4bbebc20 	.word	0x4bbebc20

08002520 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002526:	f7ff fe81 	bl	800222c <HAL_RCC_GetSysClockFreq>
 800252a:	4602      	mov	r2, r0
 800252c:	4b10      	ldr	r3, [pc, #64]	@ (8002570 <HAL_RCC_GetHCLKFreq+0x50>)
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	0a1b      	lsrs	r3, r3, #8
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	490f      	ldr	r1, [pc, #60]	@ (8002574 <HAL_RCC_GetHCLKFreq+0x54>)
 8002538:	5ccb      	ldrb	r3, [r1, r3]
 800253a:	f003 031f 	and.w	r3, r3, #31
 800253e:	fa22 f303 	lsr.w	r3, r2, r3
 8002542:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002544:	4b0a      	ldr	r3, [pc, #40]	@ (8002570 <HAL_RCC_GetHCLKFreq+0x50>)
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	f003 030f 	and.w	r3, r3, #15
 800254c:	4a09      	ldr	r2, [pc, #36]	@ (8002574 <HAL_RCC_GetHCLKFreq+0x54>)
 800254e:	5cd3      	ldrb	r3, [r2, r3]
 8002550:	f003 031f 	and.w	r3, r3, #31
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	fa22 f303 	lsr.w	r3, r2, r3
 800255a:	4a07      	ldr	r2, [pc, #28]	@ (8002578 <HAL_RCC_GetHCLKFreq+0x58>)
 800255c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800255e:	4a07      	ldr	r2, [pc, #28]	@ (800257c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002564:	4b04      	ldr	r3, [pc, #16]	@ (8002578 <HAL_RCC_GetHCLKFreq+0x58>)
 8002566:	681b      	ldr	r3, [r3, #0]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	58024400 	.word	0x58024400
 8002574:	08007154 	.word	0x08007154
 8002578:	24000004 	.word	0x24000004
 800257c:	24000000 	.word	0x24000000

08002580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002584:	f7ff ffcc 	bl	8002520 <HAL_RCC_GetHCLKFreq>
 8002588:	4602      	mov	r2, r0
 800258a:	4b06      	ldr	r3, [pc, #24]	@ (80025a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	091b      	lsrs	r3, r3, #4
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	4904      	ldr	r1, [pc, #16]	@ (80025a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002596:	5ccb      	ldrb	r3, [r1, r3]
 8002598:	f003 031f 	and.w	r3, r3, #31
 800259c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	58024400 	.word	0x58024400
 80025a8:	08007154 	.word	0x08007154

080025ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80025b0:	f7ff ffb6 	bl	8002520 <HAL_RCC_GetHCLKFreq>
 80025b4:	4602      	mov	r2, r0
 80025b6:	4b06      	ldr	r3, [pc, #24]	@ (80025d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	0a1b      	lsrs	r3, r3, #8
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	4904      	ldr	r1, [pc, #16]	@ (80025d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025c2:	5ccb      	ldrb	r3, [r1, r3]
 80025c4:	f003 031f 	and.w	r3, r3, #31
 80025c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	58024400 	.word	0x58024400
 80025d4:	08007154 	.word	0x08007154

080025d8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025dc:	b0c6      	sub	sp, #280	@ 0x118
 80025de:	af00      	add	r7, sp, #0
 80025e0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025e4:	2300      	movs	r3, #0
 80025e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025ea:	2300      	movs	r3, #0
 80025ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80025f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80025f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80025fc:	2500      	movs	r5, #0
 80025fe:	ea54 0305 	orrs.w	r3, r4, r5
 8002602:	d049      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002608:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800260a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800260e:	d02f      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002610:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002614:	d828      	bhi.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002616:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800261a:	d01a      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800261c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002620:	d822      	bhi.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002626:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800262a:	d007      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800262c:	e01c      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800262e:	4bab      	ldr	r3, [pc, #684]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002632:	4aaa      	ldr	r2, [pc, #680]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002634:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002638:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800263a:	e01a      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800263c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002640:	3308      	adds	r3, #8
 8002642:	2102      	movs	r1, #2
 8002644:	4618      	mov	r0, r3
 8002646:	f001 fc25 	bl	8003e94 <RCCEx_PLL2_Config>
 800264a:	4603      	mov	r3, r0
 800264c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002650:	e00f      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002652:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002656:	3328      	adds	r3, #40	@ 0x28
 8002658:	2102      	movs	r1, #2
 800265a:	4618      	mov	r0, r3
 800265c:	f001 fccc 	bl	8003ff8 <RCCEx_PLL3_Config>
 8002660:	4603      	mov	r3, r0
 8002662:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002666:	e004      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800266e:	e000      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002670:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002672:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10a      	bne.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800267a:	4b98      	ldr	r3, [pc, #608]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800267c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800267e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002682:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002686:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002688:	4a94      	ldr	r2, [pc, #592]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800268a:	430b      	orrs	r3, r1
 800268c:	6513      	str	r3, [r2, #80]	@ 0x50
 800268e:	e003      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002690:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002694:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800269c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80026a4:	f04f 0900 	mov.w	r9, #0
 80026a8:	ea58 0309 	orrs.w	r3, r8, r9
 80026ac:	d047      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80026ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80026b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026b4:	2b04      	cmp	r3, #4
 80026b6:	d82a      	bhi.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80026b8:	a201      	add	r2, pc, #4	@ (adr r2, 80026c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80026ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026be:	bf00      	nop
 80026c0:	080026d5 	.word	0x080026d5
 80026c4:	080026e3 	.word	0x080026e3
 80026c8:	080026f9 	.word	0x080026f9
 80026cc:	08002717 	.word	0x08002717
 80026d0:	08002717 	.word	0x08002717
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026d4:	4b81      	ldr	r3, [pc, #516]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80026d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d8:	4a80      	ldr	r2, [pc, #512]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80026da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80026e0:	e01a      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80026e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80026e6:	3308      	adds	r3, #8
 80026e8:	2100      	movs	r1, #0
 80026ea:	4618      	mov	r0, r3
 80026ec:	f001 fbd2 	bl	8003e94 <RCCEx_PLL2_Config>
 80026f0:	4603      	mov	r3, r0
 80026f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80026f6:	e00f      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80026f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80026fc:	3328      	adds	r3, #40	@ 0x28
 80026fe:	2100      	movs	r1, #0
 8002700:	4618      	mov	r0, r3
 8002702:	f001 fc79 	bl	8003ff8 <RCCEx_PLL3_Config>
 8002706:	4603      	mov	r3, r0
 8002708:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800270c:	e004      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002714:	e000      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002716:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002718:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10a      	bne.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002720:	4b6e      	ldr	r3, [pc, #440]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002722:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002724:	f023 0107 	bic.w	r1, r3, #7
 8002728:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800272c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800272e:	4a6b      	ldr	r2, [pc, #428]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002730:	430b      	orrs	r3, r1
 8002732:	6513      	str	r3, [r2, #80]	@ 0x50
 8002734:	e003      	b.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002736:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800273a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800273e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002746:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800274a:	f04f 0b00 	mov.w	fp, #0
 800274e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002752:	d05b      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002754:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002758:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800275c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8002760:	d03b      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x202>
 8002762:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8002766:	d834      	bhi.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002768:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800276c:	d037      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x206>
 800276e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002772:	d82e      	bhi.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002774:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002778:	d033      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800277a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800277e:	d828      	bhi.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002780:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002784:	d01a      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8002786:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800278a:	d822      	bhi.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800278c:	2b00      	cmp	r3, #0
 800278e:	d003      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8002790:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002794:	d007      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8002796:	e01c      	b.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002798:	4b50      	ldr	r3, [pc, #320]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800279a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800279c:	4a4f      	ldr	r2, [pc, #316]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800279e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80027a4:	e01e      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80027a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80027aa:	3308      	adds	r3, #8
 80027ac:	2100      	movs	r1, #0
 80027ae:	4618      	mov	r0, r3
 80027b0:	f001 fb70 	bl	8003e94 <RCCEx_PLL2_Config>
 80027b4:	4603      	mov	r3, r0
 80027b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80027ba:	e013      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80027bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80027c0:	3328      	adds	r3, #40	@ 0x28
 80027c2:	2100      	movs	r1, #0
 80027c4:	4618      	mov	r0, r3
 80027c6:	f001 fc17 	bl	8003ff8 <RCCEx_PLL3_Config>
 80027ca:	4603      	mov	r3, r0
 80027cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80027d0:	e008      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80027d8:	e004      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80027da:	bf00      	nop
 80027dc:	e002      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80027de:	bf00      	nop
 80027e0:	e000      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80027e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10b      	bne.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80027ec:	4b3b      	ldr	r3, [pc, #236]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80027ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80027f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80027f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80027fc:	4a37      	ldr	r2, [pc, #220]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80027fe:	430b      	orrs	r3, r1
 8002800:	6593      	str	r3, [r2, #88]	@ 0x58
 8002802:	e003      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002804:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002808:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800280c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002814:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002818:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800281c:	2300      	movs	r3, #0
 800281e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002822:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002826:	460b      	mov	r3, r1
 8002828:	4313      	orrs	r3, r2
 800282a:	d05d      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800282c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002830:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002834:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002838:	d03b      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800283a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800283e:	d834      	bhi.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002840:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002844:	d037      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8002846:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800284a:	d82e      	bhi.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800284c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002850:	d033      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8002852:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002856:	d828      	bhi.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002858:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800285c:	d01a      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800285e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002862:	d822      	bhi.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002864:	2b00      	cmp	r3, #0
 8002866:	d003      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002868:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800286c:	d007      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800286e:	e01c      	b.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002870:	4b1a      	ldr	r3, [pc, #104]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002874:	4a19      	ldr	r2, [pc, #100]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002876:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800287a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800287c:	e01e      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800287e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002882:	3308      	adds	r3, #8
 8002884:	2100      	movs	r1, #0
 8002886:	4618      	mov	r0, r3
 8002888:	f001 fb04 	bl	8003e94 <RCCEx_PLL2_Config>
 800288c:	4603      	mov	r3, r0
 800288e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002892:	e013      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002894:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002898:	3328      	adds	r3, #40	@ 0x28
 800289a:	2100      	movs	r1, #0
 800289c:	4618      	mov	r0, r3
 800289e:	f001 fbab 	bl	8003ff8 <RCCEx_PLL3_Config>
 80028a2:	4603      	mov	r3, r0
 80028a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80028a8:	e008      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80028b0:	e004      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80028b2:	bf00      	nop
 80028b4:	e002      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80028b6:	bf00      	nop
 80028b8:	e000      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80028ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10d      	bne.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80028c4:	4b05      	ldr	r3, [pc, #20]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80028c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028c8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80028cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80028d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80028d4:	4a01      	ldr	r2, [pc, #4]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80028d6:	430b      	orrs	r3, r1
 80028d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80028da:	e005      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80028dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80028e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80028e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80028ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80028f4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80028f8:	2300      	movs	r3, #0
 80028fa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80028fe:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002902:	460b      	mov	r3, r1
 8002904:	4313      	orrs	r3, r2
 8002906:	d03a      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002908:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800290c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800290e:	2b30      	cmp	r3, #48	@ 0x30
 8002910:	d01f      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8002912:	2b30      	cmp	r3, #48	@ 0x30
 8002914:	d819      	bhi.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002916:	2b20      	cmp	r3, #32
 8002918:	d00c      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800291a:	2b20      	cmp	r3, #32
 800291c:	d815      	bhi.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800291e:	2b00      	cmp	r3, #0
 8002920:	d019      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002922:	2b10      	cmp	r3, #16
 8002924:	d111      	bne.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002926:	4baa      	ldr	r3, [pc, #680]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800292a:	4aa9      	ldr	r2, [pc, #676]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800292c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002930:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002932:	e011      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002934:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002938:	3308      	adds	r3, #8
 800293a:	2102      	movs	r1, #2
 800293c:	4618      	mov	r0, r3
 800293e:	f001 faa9 	bl	8003e94 <RCCEx_PLL2_Config>
 8002942:	4603      	mov	r3, r0
 8002944:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002948:	e006      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002950:	e002      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8002952:	bf00      	nop
 8002954:	e000      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8002956:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002958:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10a      	bne.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002960:	4b9b      	ldr	r3, [pc, #620]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002962:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002964:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002968:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800296c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800296e:	4a98      	ldr	r2, [pc, #608]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002970:	430b      	orrs	r3, r1
 8002972:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002974:	e003      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002976:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800297a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800297e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002986:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800298a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800298e:	2300      	movs	r3, #0
 8002990:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002994:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002998:	460b      	mov	r3, r1
 800299a:	4313      	orrs	r3, r2
 800299c:	d051      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800299e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80029a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80029a8:	d035      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80029aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80029ae:	d82e      	bhi.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80029b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80029b4:	d031      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x442>
 80029b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80029ba:	d828      	bhi.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80029bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029c0:	d01a      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80029c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029c6:	d822      	bhi.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80029cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029d0:	d007      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80029d2:	e01c      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029d4:	4b7e      	ldr	r3, [pc, #504]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80029d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d8:	4a7d      	ldr	r2, [pc, #500]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80029da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80029e0:	e01c      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80029e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80029e6:	3308      	adds	r3, #8
 80029e8:	2100      	movs	r1, #0
 80029ea:	4618      	mov	r0, r3
 80029ec:	f001 fa52 	bl	8003e94 <RCCEx_PLL2_Config>
 80029f0:	4603      	mov	r3, r0
 80029f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80029f6:	e011      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80029f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80029fc:	3328      	adds	r3, #40	@ 0x28
 80029fe:	2100      	movs	r1, #0
 8002a00:	4618      	mov	r0, r3
 8002a02:	f001 faf9 	bl	8003ff8 <RCCEx_PLL3_Config>
 8002a06:	4603      	mov	r3, r0
 8002a08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002a0c:	e006      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002a14:	e002      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8002a16:	bf00      	nop
 8002a18:	e000      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8002a1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10a      	bne.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002a24:	4b6a      	ldr	r3, [pc, #424]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a28:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a32:	4a67      	ldr	r2, [pc, #412]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a34:	430b      	orrs	r3, r1
 8002a36:	6513      	str	r3, [r2, #80]	@ 0x50
 8002a38:	e003      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002a3e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002a4e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002a52:	2300      	movs	r3, #0
 8002a54:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002a58:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	d053      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a6c:	d033      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8002a6e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a72:	d82c      	bhi.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002a74:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a78:	d02f      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x502>
 8002a7a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a7e:	d826      	bhi.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002a80:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002a84:	d02b      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002a86:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002a8a:	d820      	bhi.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002a8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002a90:	d012      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8002a92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002a96:	d81a      	bhi.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d022      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8002a9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002aa0:	d115      	bne.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002aa6:	3308      	adds	r3, #8
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f001 f9f2 	bl	8003e94 <RCCEx_PLL2_Config>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002ab6:	e015      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002abc:	3328      	adds	r3, #40	@ 0x28
 8002abe:	2101      	movs	r1, #1
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f001 fa99 	bl	8003ff8 <RCCEx_PLL3_Config>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002acc:	e00a      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002ad4:	e006      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002ad6:	bf00      	nop
 8002ad8:	e004      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002ada:	bf00      	nop
 8002adc:	e002      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002ade:	bf00      	nop
 8002ae0:	e000      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002ae2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ae4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d10a      	bne.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002aec:	4b38      	ldr	r3, [pc, #224]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002aee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002af0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002af8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002afa:	4a35      	ldr	r2, [pc, #212]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002afc:	430b      	orrs	r3, r1
 8002afe:	6513      	str	r3, [r2, #80]	@ 0x50
 8002b00:	e003      	b.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002b06:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b12:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002b16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002b20:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002b24:	460b      	mov	r3, r1
 8002b26:	4313      	orrs	r3, r2
 8002b28:	d058      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b2e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002b32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b36:	d033      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8002b38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b3c:	d82c      	bhi.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b42:	d02f      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8002b44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b48:	d826      	bhi.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002b4a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002b4e:	d02b      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002b50:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002b54:	d820      	bhi.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002b56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b5a:	d012      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8002b5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b60:	d81a      	bhi.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d022      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002b66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b6a:	d115      	bne.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b70:	3308      	adds	r3, #8
 8002b72:	2101      	movs	r1, #1
 8002b74:	4618      	mov	r0, r3
 8002b76:	f001 f98d 	bl	8003e94 <RCCEx_PLL2_Config>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002b80:	e015      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b86:	3328      	adds	r3, #40	@ 0x28
 8002b88:	2101      	movs	r1, #1
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f001 fa34 	bl	8003ff8 <RCCEx_PLL3_Config>
 8002b90:	4603      	mov	r3, r0
 8002b92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002b96:	e00a      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002b9e:	e006      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002ba0:	bf00      	nop
 8002ba2:	e004      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002ba4:	bf00      	nop
 8002ba6:	e002      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002ba8:	bf00      	nop
 8002baa:	e000      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002bac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10e      	bne.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002bb6:	4b06      	ldr	r3, [pc, #24]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bba:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bc2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002bc6:	4a02      	ldr	r2, [pc, #8]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002bc8:	430b      	orrs	r3, r1
 8002bca:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bcc:	e006      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002bce:	bf00      	nop
 8002bd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002bd8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002be8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002bec:	2300      	movs	r3, #0
 8002bee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002bf2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	d037      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c06:	d00e      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8002c08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c0c:	d816      	bhi.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d018      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8002c12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c16:	d111      	bne.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c18:	4bc4      	ldr	r3, [pc, #784]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c1c:	4ac3      	ldr	r2, [pc, #780]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002c24:	e00f      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c2a:	3308      	adds	r3, #8
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f001 f930 	bl	8003e94 <RCCEx_PLL2_Config>
 8002c34:	4603      	mov	r3, r0
 8002c36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002c3a:	e004      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002c42:	e000      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8002c44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10a      	bne.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002c4e:	4bb7      	ldr	r3, [pc, #732]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c52:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c5c:	4ab3      	ldr	r2, [pc, #716]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c5e:	430b      	orrs	r3, r1
 8002c60:	6513      	str	r3, [r2, #80]	@ 0x50
 8002c62:	e003      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002c68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c74:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002c78:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002c82:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002c86:	460b      	mov	r3, r1
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	d039      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c92:	2b03      	cmp	r3, #3
 8002c94:	d81c      	bhi.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8002c96:	a201      	add	r2, pc, #4	@ (adr r2, 8002c9c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8002c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c9c:	08002cd9 	.word	0x08002cd9
 8002ca0:	08002cad 	.word	0x08002cad
 8002ca4:	08002cbb 	.word	0x08002cbb
 8002ca8:	08002cd9 	.word	0x08002cd9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cac:	4b9f      	ldr	r3, [pc, #636]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb0:	4a9e      	ldr	r2, [pc, #632]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002cb8:	e00f      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002cbe:	3308      	adds	r3, #8
 8002cc0:	2102      	movs	r1, #2
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f001 f8e6 	bl	8003e94 <RCCEx_PLL2_Config>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002cce:	e004      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002cd6:	e000      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8002cd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10a      	bne.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002ce2:	4b92      	ldr	r3, [pc, #584]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ce6:	f023 0103 	bic.w	r1, r3, #3
 8002cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002cee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cf0:	4a8e      	ldr	r2, [pc, #568]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cf2:	430b      	orrs	r3, r1
 8002cf4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cf6:	e003      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cf8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002cfc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d08:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002d0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002d10:	2300      	movs	r3, #0
 8002d12:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002d16:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	f000 8099 	beq.w	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d22:	4b83      	ldr	r3, [pc, #524]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a82      	ldr	r2, [pc, #520]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002d28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d2e:	f7fe f94b 	bl	8000fc8 <HAL_GetTick>
 8002d32:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d36:	e00b      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d38:	f7fe f946 	bl	8000fc8 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b64      	cmp	r3, #100	@ 0x64
 8002d46:	d903      	bls.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002d4e:	e005      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d50:	4b77      	ldr	r3, [pc, #476]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0ed      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8002d5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d173      	bne.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002d64:	4b71      	ldr	r3, [pc, #452]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d66:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002d70:	4053      	eors	r3, r2
 8002d72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d015      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d7a:	4b6c      	ldr	r3, [pc, #432]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d82:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d86:	4b69      	ldr	r3, [pc, #420]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d8a:	4a68      	ldr	r2, [pc, #416]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d90:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d92:	4b66      	ldr	r3, [pc, #408]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d96:	4a65      	ldr	r2, [pc, #404]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d9c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002d9e:	4a63      	ldr	r2, [pc, #396]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002da0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002da4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002daa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002dae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002db2:	d118      	bne.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db4:	f7fe f908 	bl	8000fc8 <HAL_GetTick>
 8002db8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dbc:	e00d      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dbe:	f7fe f903 	bl	8000fc8 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002dc8:	1ad2      	subs	r2, r2, r3
 8002dca:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d903      	bls.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8002dd8:	e005      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dda:	4b54      	ldr	r3, [pc, #336]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0eb      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8002de6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d129      	bne.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002df2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002df6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dfa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002dfe:	d10e      	bne.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8002e00:	4b4a      	ldr	r3, [pc, #296]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002e10:	091a      	lsrs	r2, r3, #4
 8002e12:	4b48      	ldr	r3, [pc, #288]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002e14:	4013      	ands	r3, r2
 8002e16:	4a45      	ldr	r2, [pc, #276]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e18:	430b      	orrs	r3, r1
 8002e1a:	6113      	str	r3, [r2, #16]
 8002e1c:	e005      	b.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8002e1e:	4b43      	ldr	r3, [pc, #268]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	4a42      	ldr	r2, [pc, #264]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e24:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002e28:	6113      	str	r3, [r2, #16]
 8002e2a:	4b40      	ldr	r3, [pc, #256]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e2c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002e36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e3a:	4a3c      	ldr	r2, [pc, #240]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e3c:	430b      	orrs	r3, r1
 8002e3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e40:	e008      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002e46:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8002e4a:	e003      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002e50:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5c:	f002 0301 	and.w	r3, r2, #1
 8002e60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002e64:	2300      	movs	r3, #0
 8002e66:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002e6a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002e6e:	460b      	mov	r3, r1
 8002e70:	4313      	orrs	r3, r2
 8002e72:	f000 808f 	beq.w	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e7c:	2b28      	cmp	r3, #40	@ 0x28
 8002e7e:	d871      	bhi.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8002e80:	a201      	add	r2, pc, #4	@ (adr r2, 8002e88 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8002e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e86:	bf00      	nop
 8002e88:	08002f6d 	.word	0x08002f6d
 8002e8c:	08002f65 	.word	0x08002f65
 8002e90:	08002f65 	.word	0x08002f65
 8002e94:	08002f65 	.word	0x08002f65
 8002e98:	08002f65 	.word	0x08002f65
 8002e9c:	08002f65 	.word	0x08002f65
 8002ea0:	08002f65 	.word	0x08002f65
 8002ea4:	08002f65 	.word	0x08002f65
 8002ea8:	08002f39 	.word	0x08002f39
 8002eac:	08002f65 	.word	0x08002f65
 8002eb0:	08002f65 	.word	0x08002f65
 8002eb4:	08002f65 	.word	0x08002f65
 8002eb8:	08002f65 	.word	0x08002f65
 8002ebc:	08002f65 	.word	0x08002f65
 8002ec0:	08002f65 	.word	0x08002f65
 8002ec4:	08002f65 	.word	0x08002f65
 8002ec8:	08002f4f 	.word	0x08002f4f
 8002ecc:	08002f65 	.word	0x08002f65
 8002ed0:	08002f65 	.word	0x08002f65
 8002ed4:	08002f65 	.word	0x08002f65
 8002ed8:	08002f65 	.word	0x08002f65
 8002edc:	08002f65 	.word	0x08002f65
 8002ee0:	08002f65 	.word	0x08002f65
 8002ee4:	08002f65 	.word	0x08002f65
 8002ee8:	08002f6d 	.word	0x08002f6d
 8002eec:	08002f65 	.word	0x08002f65
 8002ef0:	08002f65 	.word	0x08002f65
 8002ef4:	08002f65 	.word	0x08002f65
 8002ef8:	08002f65 	.word	0x08002f65
 8002efc:	08002f65 	.word	0x08002f65
 8002f00:	08002f65 	.word	0x08002f65
 8002f04:	08002f65 	.word	0x08002f65
 8002f08:	08002f6d 	.word	0x08002f6d
 8002f0c:	08002f65 	.word	0x08002f65
 8002f10:	08002f65 	.word	0x08002f65
 8002f14:	08002f65 	.word	0x08002f65
 8002f18:	08002f65 	.word	0x08002f65
 8002f1c:	08002f65 	.word	0x08002f65
 8002f20:	08002f65 	.word	0x08002f65
 8002f24:	08002f65 	.word	0x08002f65
 8002f28:	08002f6d 	.word	0x08002f6d
 8002f2c:	58024400 	.word	0x58024400
 8002f30:	58024800 	.word	0x58024800
 8002f34:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f3c:	3308      	adds	r3, #8
 8002f3e:	2101      	movs	r1, #1
 8002f40:	4618      	mov	r0, r3
 8002f42:	f000 ffa7 	bl	8003e94 <RCCEx_PLL2_Config>
 8002f46:	4603      	mov	r3, r0
 8002f48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002f4c:	e00f      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f52:	3328      	adds	r3, #40	@ 0x28
 8002f54:	2101      	movs	r1, #1
 8002f56:	4618      	mov	r0, r3
 8002f58:	f001 f84e 	bl	8003ff8 <RCCEx_PLL3_Config>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002f62:	e004      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002f6a:	e000      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8002f6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10a      	bne.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002f76:	4bbf      	ldr	r3, [pc, #764]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f7a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f84:	4abb      	ldr	r2, [pc, #748]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002f86:	430b      	orrs	r3, r1
 8002f88:	6553      	str	r3, [r2, #84]	@ 0x54
 8002f8a:	e003      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002f90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f9c:	f002 0302 	and.w	r3, r2, #2
 8002fa0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002faa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002fae:	460b      	mov	r3, r1
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	d041      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fba:	2b05      	cmp	r3, #5
 8002fbc:	d824      	bhi.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8002fbe:	a201      	add	r2, pc, #4	@ (adr r2, 8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8002fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc4:	08003011 	.word	0x08003011
 8002fc8:	08002fdd 	.word	0x08002fdd
 8002fcc:	08002ff3 	.word	0x08002ff3
 8002fd0:	08003011 	.word	0x08003011
 8002fd4:	08003011 	.word	0x08003011
 8002fd8:	08003011 	.word	0x08003011
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fe0:	3308      	adds	r3, #8
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f000 ff55 	bl	8003e94 <RCCEx_PLL2_Config>
 8002fea:	4603      	mov	r3, r0
 8002fec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002ff0:	e00f      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ff6:	3328      	adds	r3, #40	@ 0x28
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f000 fffc 	bl	8003ff8 <RCCEx_PLL3_Config>
 8003000:	4603      	mov	r3, r0
 8003002:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003006:	e004      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800300e:	e000      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003010:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003012:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10a      	bne.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800301a:	4b96      	ldr	r3, [pc, #600]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800301c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800301e:	f023 0107 	bic.w	r1, r3, #7
 8003022:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003026:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003028:	4a92      	ldr	r2, [pc, #584]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800302a:	430b      	orrs	r3, r1
 800302c:	6553      	str	r3, [r2, #84]	@ 0x54
 800302e:	e003      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003030:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003034:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800303c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003040:	f002 0304 	and.w	r3, r2, #4
 8003044:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003048:	2300      	movs	r3, #0
 800304a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800304e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003052:	460b      	mov	r3, r1
 8003054:	4313      	orrs	r3, r2
 8003056:	d044      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800305c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003060:	2b05      	cmp	r3, #5
 8003062:	d825      	bhi.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003064:	a201      	add	r2, pc, #4	@ (adr r2, 800306c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800306a:	bf00      	nop
 800306c:	080030b9 	.word	0x080030b9
 8003070:	08003085 	.word	0x08003085
 8003074:	0800309b 	.word	0x0800309b
 8003078:	080030b9 	.word	0x080030b9
 800307c:	080030b9 	.word	0x080030b9
 8003080:	080030b9 	.word	0x080030b9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003084:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003088:	3308      	adds	r3, #8
 800308a:	2101      	movs	r1, #1
 800308c:	4618      	mov	r0, r3
 800308e:	f000 ff01 	bl	8003e94 <RCCEx_PLL2_Config>
 8003092:	4603      	mov	r3, r0
 8003094:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003098:	e00f      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800309a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800309e:	3328      	adds	r3, #40	@ 0x28
 80030a0:	2101      	movs	r1, #1
 80030a2:	4618      	mov	r0, r3
 80030a4:	f000 ffa8 	bl	8003ff8 <RCCEx_PLL3_Config>
 80030a8:	4603      	mov	r3, r0
 80030aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80030ae:	e004      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80030b6:	e000      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80030b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10b      	bne.n	80030da <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030c2:	4b6c      	ldr	r3, [pc, #432]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80030c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030c6:	f023 0107 	bic.w	r1, r3, #7
 80030ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030d2:	4a68      	ldr	r2, [pc, #416]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80030d4:	430b      	orrs	r3, r1
 80030d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80030d8:	e003      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80030de:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80030e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ea:	f002 0320 	and.w	r3, r2, #32
 80030ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80030f2:	2300      	movs	r3, #0
 80030f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80030f8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80030fc:	460b      	mov	r3, r1
 80030fe:	4313      	orrs	r3, r2
 8003100:	d055      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003102:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003106:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800310a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800310e:	d033      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003110:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003114:	d82c      	bhi.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003116:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800311a:	d02f      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800311c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003120:	d826      	bhi.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003122:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003126:	d02b      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003128:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800312c:	d820      	bhi.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800312e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003132:	d012      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003134:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003138:	d81a      	bhi.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800313a:	2b00      	cmp	r3, #0
 800313c:	d022      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800313e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003142:	d115      	bne.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003144:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003148:	3308      	adds	r3, #8
 800314a:	2100      	movs	r1, #0
 800314c:	4618      	mov	r0, r3
 800314e:	f000 fea1 	bl	8003e94 <RCCEx_PLL2_Config>
 8003152:	4603      	mov	r3, r0
 8003154:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003158:	e015      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800315a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800315e:	3328      	adds	r3, #40	@ 0x28
 8003160:	2102      	movs	r1, #2
 8003162:	4618      	mov	r0, r3
 8003164:	f000 ff48 	bl	8003ff8 <RCCEx_PLL3_Config>
 8003168:	4603      	mov	r3, r0
 800316a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800316e:	e00a      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003176:	e006      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003178:	bf00      	nop
 800317a:	e004      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800317c:	bf00      	nop
 800317e:	e002      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003180:	bf00      	nop
 8003182:	e000      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003184:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003186:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10b      	bne.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800318e:	4b39      	ldr	r3, [pc, #228]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003192:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003196:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800319a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800319e:	4a35      	ldr	r2, [pc, #212]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80031a0:	430b      	orrs	r3, r1
 80031a2:	6553      	str	r3, [r2, #84]	@ 0x54
 80031a4:	e003      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80031aa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80031ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80031ba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80031be:	2300      	movs	r3, #0
 80031c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80031c4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80031c8:	460b      	mov	r3, r1
 80031ca:	4313      	orrs	r3, r2
 80031cc:	d058      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80031ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031d6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80031da:	d033      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80031dc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80031e0:	d82c      	bhi.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80031e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031e6:	d02f      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80031e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031ec:	d826      	bhi.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80031ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80031f2:	d02b      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80031f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80031f8:	d820      	bhi.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80031fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031fe:	d012      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003200:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003204:	d81a      	bhi.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003206:	2b00      	cmp	r3, #0
 8003208:	d022      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800320a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800320e:	d115      	bne.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003210:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003214:	3308      	adds	r3, #8
 8003216:	2100      	movs	r1, #0
 8003218:	4618      	mov	r0, r3
 800321a:	f000 fe3b 	bl	8003e94 <RCCEx_PLL2_Config>
 800321e:	4603      	mov	r3, r0
 8003220:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003224:	e015      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003226:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800322a:	3328      	adds	r3, #40	@ 0x28
 800322c:	2102      	movs	r1, #2
 800322e:	4618      	mov	r0, r3
 8003230:	f000 fee2 	bl	8003ff8 <RCCEx_PLL3_Config>
 8003234:	4603      	mov	r3, r0
 8003236:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800323a:	e00a      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003242:	e006      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003244:	bf00      	nop
 8003246:	e004      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003248:	bf00      	nop
 800324a:	e002      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800324c:	bf00      	nop
 800324e:	e000      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003250:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003252:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10e      	bne.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800325a:	4b06      	ldr	r3, [pc, #24]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800325c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800325e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003262:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003266:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800326a:	4a02      	ldr	r2, [pc, #8]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800326c:	430b      	orrs	r3, r1
 800326e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003270:	e006      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003272:	bf00      	nop
 8003274:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003278:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800327c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003280:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003288:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800328c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003290:	2300      	movs	r3, #0
 8003292:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003296:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800329a:	460b      	mov	r3, r1
 800329c:	4313      	orrs	r3, r2
 800329e:	d055      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80032a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80032a8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80032ac:	d033      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80032ae:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80032b2:	d82c      	bhi.n	800330e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80032b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032b8:	d02f      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80032ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032be:	d826      	bhi.n	800330e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80032c0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80032c4:	d02b      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80032c6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80032ca:	d820      	bhi.n	800330e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80032cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032d0:	d012      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80032d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032d6:	d81a      	bhi.n	800330e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d022      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80032dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032e0:	d115      	bne.n	800330e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032e6:	3308      	adds	r3, #8
 80032e8:	2100      	movs	r1, #0
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 fdd2 	bl	8003e94 <RCCEx_PLL2_Config>
 80032f0:	4603      	mov	r3, r0
 80032f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80032f6:	e015      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80032f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032fc:	3328      	adds	r3, #40	@ 0x28
 80032fe:	2102      	movs	r1, #2
 8003300:	4618      	mov	r0, r3
 8003302:	f000 fe79 	bl	8003ff8 <RCCEx_PLL3_Config>
 8003306:	4603      	mov	r3, r0
 8003308:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800330c:	e00a      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003314:	e006      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003316:	bf00      	nop
 8003318:	e004      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800331a:	bf00      	nop
 800331c:	e002      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800331e:	bf00      	nop
 8003320:	e000      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003322:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003324:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003328:	2b00      	cmp	r3, #0
 800332a:	d10b      	bne.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800332c:	4ba0      	ldr	r3, [pc, #640]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800332e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003330:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003334:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003338:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800333c:	4a9c      	ldr	r2, [pc, #624]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800333e:	430b      	orrs	r3, r1
 8003340:	6593      	str	r3, [r2, #88]	@ 0x58
 8003342:	e003      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003344:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003348:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800334c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003354:	f002 0308 	and.w	r3, r2, #8
 8003358:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800335c:	2300      	movs	r3, #0
 800335e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003362:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003366:	460b      	mov	r3, r1
 8003368:	4313      	orrs	r3, r2
 800336a:	d01e      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800336c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003370:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003374:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003378:	d10c      	bne.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800337a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800337e:	3328      	adds	r3, #40	@ 0x28
 8003380:	2102      	movs	r1, #2
 8003382:	4618      	mov	r0, r3
 8003384:	f000 fe38 	bl	8003ff8 <RCCEx_PLL3_Config>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d002      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003394:	4b86      	ldr	r3, [pc, #536]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003398:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800339c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033a4:	4a82      	ldr	r2, [pc, #520]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80033a6:	430b      	orrs	r3, r1
 80033a8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b2:	f002 0310 	and.w	r3, r2, #16
 80033b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80033ba:	2300      	movs	r3, #0
 80033bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80033c0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80033c4:	460b      	mov	r3, r1
 80033c6:	4313      	orrs	r3, r2
 80033c8:	d01e      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80033ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033d6:	d10c      	bne.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80033d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033dc:	3328      	adds	r3, #40	@ 0x28
 80033de:	2102      	movs	r1, #2
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 fe09 	bl	8003ff8 <RCCEx_PLL3_Config>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d002      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80033f2:	4b6f      	ldr	r3, [pc, #444]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80033f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033f6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80033fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003402:	4a6b      	ldr	r2, [pc, #428]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003404:	430b      	orrs	r3, r1
 8003406:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800340c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003410:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003414:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003416:	2300      	movs	r3, #0
 8003418:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800341a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800341e:	460b      	mov	r3, r1
 8003420:	4313      	orrs	r3, r2
 8003422:	d03e      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003424:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003428:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800342c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003430:	d022      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003432:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003436:	d81b      	bhi.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800343c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003440:	d00b      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8003442:	e015      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003444:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003448:	3308      	adds	r3, #8
 800344a:	2100      	movs	r1, #0
 800344c:	4618      	mov	r0, r3
 800344e:	f000 fd21 	bl	8003e94 <RCCEx_PLL2_Config>
 8003452:	4603      	mov	r3, r0
 8003454:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003458:	e00f      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800345a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800345e:	3328      	adds	r3, #40	@ 0x28
 8003460:	2102      	movs	r1, #2
 8003462:	4618      	mov	r0, r3
 8003464:	f000 fdc8 	bl	8003ff8 <RCCEx_PLL3_Config>
 8003468:	4603      	mov	r3, r0
 800346a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800346e:	e004      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003476:	e000      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8003478:	bf00      	nop
    }

    if (ret == HAL_OK)
 800347a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10b      	bne.n	800349a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003482:	4b4b      	ldr	r3, [pc, #300]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003486:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800348a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800348e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003492:	4a47      	ldr	r2, [pc, #284]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003494:	430b      	orrs	r3, r1
 8003496:	6593      	str	r3, [r2, #88]	@ 0x58
 8003498:	e003      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800349a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800349e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034aa:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80034ae:	673b      	str	r3, [r7, #112]	@ 0x70
 80034b0:	2300      	movs	r3, #0
 80034b2:	677b      	str	r3, [r7, #116]	@ 0x74
 80034b4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80034b8:	460b      	mov	r3, r1
 80034ba:	4313      	orrs	r3, r2
 80034bc:	d03b      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80034be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034c6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80034ca:	d01f      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80034cc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80034d0:	d818      	bhi.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80034d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034d6:	d003      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80034d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80034dc:	d007      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80034de:	e011      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034e0:	4b33      	ldr	r3, [pc, #204]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80034e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e4:	4a32      	ldr	r2, [pc, #200]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80034e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80034ec:	e00f      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80034ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034f2:	3328      	adds	r3, #40	@ 0x28
 80034f4:	2101      	movs	r1, #1
 80034f6:	4618      	mov	r0, r3
 80034f8:	f000 fd7e 	bl	8003ff8 <RCCEx_PLL3_Config>
 80034fc:	4603      	mov	r3, r0
 80034fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8003502:	e004      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800350a:	e000      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800350c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800350e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10b      	bne.n	800352e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003516:	4b26      	ldr	r3, [pc, #152]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800351a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800351e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003522:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003526:	4a22      	ldr	r2, [pc, #136]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003528:	430b      	orrs	r3, r1
 800352a:	6553      	str	r3, [r2, #84]	@ 0x54
 800352c:	e003      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800352e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003532:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003536:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800353a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003542:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003544:	2300      	movs	r3, #0
 8003546:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003548:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800354c:	460b      	mov	r3, r1
 800354e:	4313      	orrs	r3, r2
 8003550:	d034      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003552:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003556:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003558:	2b00      	cmp	r3, #0
 800355a:	d003      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800355c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003560:	d007      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8003562:	e011      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003564:	4b12      	ldr	r3, [pc, #72]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003568:	4a11      	ldr	r2, [pc, #68]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800356a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800356e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003570:	e00e      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003572:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003576:	3308      	adds	r3, #8
 8003578:	2102      	movs	r1, #2
 800357a:	4618      	mov	r0, r3
 800357c:	f000 fc8a 	bl	8003e94 <RCCEx_PLL2_Config>
 8003580:	4603      	mov	r3, r0
 8003582:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003586:	e003      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800358e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003590:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10d      	bne.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003598:	4b05      	ldr	r3, [pc, #20]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800359a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800359c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80035a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035a6:	4a02      	ldr	r2, [pc, #8]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80035a8:	430b      	orrs	r3, r1
 80035aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035ac:	e006      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80035ae:	bf00      	nop
 80035b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80035bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80035c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80035ca:	2300      	movs	r3, #0
 80035cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80035ce:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80035d2:	460b      	mov	r3, r1
 80035d4:	4313      	orrs	r3, r2
 80035d6:	d00c      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80035d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035dc:	3328      	adds	r3, #40	@ 0x28
 80035de:	2102      	movs	r1, #2
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 fd09 	bl	8003ff8 <RCCEx_PLL3_Config>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d002      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80035f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80035fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003600:	2300      	movs	r3, #0
 8003602:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003604:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003608:	460b      	mov	r3, r1
 800360a:	4313      	orrs	r3, r2
 800360c:	d036      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800360e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003612:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003614:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003618:	d018      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800361a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800361e:	d811      	bhi.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003620:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003624:	d014      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8003626:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800362a:	d80b      	bhi.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800362c:	2b00      	cmp	r3, #0
 800362e:	d011      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8003630:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003634:	d106      	bne.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003636:	4bb7      	ldr	r3, [pc, #732]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800363a:	4ab6      	ldr	r2, [pc, #728]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800363c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003640:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003642:	e008      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800364a:	e004      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800364c:	bf00      	nop
 800364e:	e002      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003650:	bf00      	nop
 8003652:	e000      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003654:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003656:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10a      	bne.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800365e:	4bad      	ldr	r3, [pc, #692]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003662:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003666:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800366a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800366c:	4aa9      	ldr	r2, [pc, #676]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800366e:	430b      	orrs	r3, r1
 8003670:	6553      	str	r3, [r2, #84]	@ 0x54
 8003672:	e003      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003674:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003678:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800367c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003684:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003688:	653b      	str	r3, [r7, #80]	@ 0x50
 800368a:	2300      	movs	r3, #0
 800368c:	657b      	str	r3, [r7, #84]	@ 0x54
 800368e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003692:	460b      	mov	r3, r1
 8003694:	4313      	orrs	r3, r2
 8003696:	d009      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003698:	4b9e      	ldr	r3, [pc, #632]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800369a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800369c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80036a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036a6:	4a9b      	ldr	r2, [pc, #620]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80036a8:	430b      	orrs	r3, r1
 80036aa:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80036b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036ba:	2300      	movs	r3, #0
 80036bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036be:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80036c2:	460b      	mov	r3, r1
 80036c4:	4313      	orrs	r3, r2
 80036c6:	d009      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036c8:	4b92      	ldr	r3, [pc, #584]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80036ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036cc:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80036d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036d6:	4a8f      	ldr	r2, [pc, #572]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80036d8:	430b      	orrs	r3, r1
 80036da:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80036dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80036e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80036ea:	2300      	movs	r3, #0
 80036ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80036ee:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80036f2:	460b      	mov	r3, r1
 80036f4:	4313      	orrs	r3, r2
 80036f6:	d00e      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80036f8:	4b86      	ldr	r3, [pc, #536]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	4a85      	ldr	r2, [pc, #532]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80036fe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003702:	6113      	str	r3, [r2, #16]
 8003704:	4b83      	ldr	r3, [pc, #524]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003706:	6919      	ldr	r1, [r3, #16]
 8003708:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800370c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003710:	4a80      	ldr	r2, [pc, #512]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003712:	430b      	orrs	r3, r1
 8003714:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003716:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800371a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003722:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003724:	2300      	movs	r3, #0
 8003726:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003728:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800372c:	460b      	mov	r3, r1
 800372e:	4313      	orrs	r3, r2
 8003730:	d009      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003732:	4b78      	ldr	r3, [pc, #480]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003736:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800373a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800373e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003740:	4a74      	ldr	r2, [pc, #464]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003742:	430b      	orrs	r3, r1
 8003744:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003746:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800374a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003752:	633b      	str	r3, [r7, #48]	@ 0x30
 8003754:	2300      	movs	r3, #0
 8003756:	637b      	str	r3, [r7, #52]	@ 0x34
 8003758:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800375c:	460b      	mov	r3, r1
 800375e:	4313      	orrs	r3, r2
 8003760:	d00a      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003762:	4b6c      	ldr	r3, [pc, #432]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003766:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800376a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800376e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003772:	4a68      	ldr	r2, [pc, #416]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003774:	430b      	orrs	r3, r1
 8003776:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003778:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800377c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003780:	2100      	movs	r1, #0
 8003782:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800378a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800378e:	460b      	mov	r3, r1
 8003790:	4313      	orrs	r3, r2
 8003792:	d011      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003798:	3308      	adds	r3, #8
 800379a:	2100      	movs	r1, #0
 800379c:	4618      	mov	r0, r3
 800379e:	f000 fb79 	bl	8003e94 <RCCEx_PLL2_Config>
 80037a2:	4603      	mov	r3, r0
 80037a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80037a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d003      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80037b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c0:	2100      	movs	r1, #0
 80037c2:	6239      	str	r1, [r7, #32]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80037ca:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80037ce:	460b      	mov	r3, r1
 80037d0:	4313      	orrs	r3, r2
 80037d2:	d011      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037d8:	3308      	adds	r3, #8
 80037da:	2101      	movs	r1, #1
 80037dc:	4618      	mov	r0, r3
 80037de:	f000 fb59 	bl	8003e94 <RCCEx_PLL2_Config>
 80037e2:	4603      	mov	r3, r0
 80037e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80037e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d003      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80037f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003800:	2100      	movs	r1, #0
 8003802:	61b9      	str	r1, [r7, #24]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	61fb      	str	r3, [r7, #28]
 800380a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800380e:	460b      	mov	r3, r1
 8003810:	4313      	orrs	r3, r2
 8003812:	d011      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003814:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003818:	3308      	adds	r3, #8
 800381a:	2102      	movs	r1, #2
 800381c:	4618      	mov	r0, r3
 800381e:	f000 fb39 	bl	8003e94 <RCCEx_PLL2_Config>
 8003822:	4603      	mov	r3, r0
 8003824:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003828:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003830:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003834:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800383c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003840:	2100      	movs	r1, #0
 8003842:	6139      	str	r1, [r7, #16]
 8003844:	f003 0308 	and.w	r3, r3, #8
 8003848:	617b      	str	r3, [r7, #20]
 800384a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800384e:	460b      	mov	r3, r1
 8003850:	4313      	orrs	r3, r2
 8003852:	d011      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003854:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003858:	3328      	adds	r3, #40	@ 0x28
 800385a:	2100      	movs	r1, #0
 800385c:	4618      	mov	r0, r3
 800385e:	f000 fbcb 	bl	8003ff8 <RCCEx_PLL3_Config>
 8003862:	4603      	mov	r3, r0
 8003864:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8003868:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800386c:	2b00      	cmp	r3, #0
 800386e:	d003      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003870:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003874:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003878:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800387c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003880:	2100      	movs	r1, #0
 8003882:	60b9      	str	r1, [r7, #8]
 8003884:	f003 0310 	and.w	r3, r3, #16
 8003888:	60fb      	str	r3, [r7, #12]
 800388a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800388e:	460b      	mov	r3, r1
 8003890:	4313      	orrs	r3, r2
 8003892:	d011      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003894:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003898:	3328      	adds	r3, #40	@ 0x28
 800389a:	2101      	movs	r1, #1
 800389c:	4618      	mov	r0, r3
 800389e:	f000 fbab 	bl	8003ff8 <RCCEx_PLL3_Config>
 80038a2:	4603      	mov	r3, r0
 80038a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80038a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d003      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80038b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c0:	2100      	movs	r1, #0
 80038c2:	6039      	str	r1, [r7, #0]
 80038c4:	f003 0320 	and.w	r3, r3, #32
 80038c8:	607b      	str	r3, [r7, #4]
 80038ca:	e9d7 1200 	ldrd	r1, r2, [r7]
 80038ce:	460b      	mov	r3, r1
 80038d0:	4313      	orrs	r3, r2
 80038d2:	d011      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80038d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038d8:	3328      	adds	r3, #40	@ 0x28
 80038da:	2102      	movs	r1, #2
 80038dc:	4618      	mov	r0, r3
 80038de:	f000 fb8b 	bl	8003ff8 <RCCEx_PLL3_Config>
 80038e2:	4603      	mov	r3, r0
 80038e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80038e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d003      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80038f8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d101      	bne.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8003900:	2300      	movs	r3, #0
 8003902:	e000      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
}
 8003906:	4618      	mov	r0, r3
 8003908:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800390c:	46bd      	mov	sp, r7
 800390e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003912:	bf00      	nop
 8003914:	58024400 	.word	0x58024400

08003918 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800391c:	f7fe fe00 	bl	8002520 <HAL_RCC_GetHCLKFreq>
 8003920:	4602      	mov	r2, r0
 8003922:	4b06      	ldr	r3, [pc, #24]	@ (800393c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	091b      	lsrs	r3, r3, #4
 8003928:	f003 0307 	and.w	r3, r3, #7
 800392c:	4904      	ldr	r1, [pc, #16]	@ (8003940 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800392e:	5ccb      	ldrb	r3, [r1, r3]
 8003930:	f003 031f 	and.w	r3, r3, #31
 8003934:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003938:	4618      	mov	r0, r3
 800393a:	bd80      	pop	{r7, pc}
 800393c:	58024400 	.word	0x58024400
 8003940:	08007154 	.word	0x08007154

08003944 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003944:	b480      	push	{r7}
 8003946:	b089      	sub	sp, #36	@ 0x24
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800394c:	4ba1      	ldr	r3, [pc, #644]	@ (8003bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800394e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003950:	f003 0303 	and.w	r3, r3, #3
 8003954:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003956:	4b9f      	ldr	r3, [pc, #636]	@ (8003bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800395a:	0b1b      	lsrs	r3, r3, #12
 800395c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003960:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003962:	4b9c      	ldr	r3, [pc, #624]	@ (8003bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003966:	091b      	lsrs	r3, r3, #4
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800396e:	4b99      	ldr	r3, [pc, #612]	@ (8003bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003970:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003972:	08db      	lsrs	r3, r3, #3
 8003974:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	fb02 f303 	mul.w	r3, r2, r3
 800397e:	ee07 3a90 	vmov	s15, r3
 8003982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003986:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	2b00      	cmp	r3, #0
 800398e:	f000 8111 	beq.w	8003bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	2b02      	cmp	r3, #2
 8003996:	f000 8083 	beq.w	8003aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	2b02      	cmp	r3, #2
 800399e:	f200 80a1 	bhi.w	8003ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d056      	beq.n	8003a5c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80039ae:	e099      	b.n	8003ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039b0:	4b88      	ldr	r3, [pc, #544]	@ (8003bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0320 	and.w	r3, r3, #32
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d02d      	beq.n	8003a18 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80039bc:	4b85      	ldr	r3, [pc, #532]	@ (8003bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	08db      	lsrs	r3, r3, #3
 80039c2:	f003 0303 	and.w	r3, r3, #3
 80039c6:	4a84      	ldr	r2, [pc, #528]	@ (8003bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80039c8:	fa22 f303 	lsr.w	r3, r2, r3
 80039cc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	ee07 3a90 	vmov	s15, r3
 80039d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	ee07 3a90 	vmov	s15, r3
 80039de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039e6:	4b7b      	ldr	r3, [pc, #492]	@ (8003bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ee:	ee07 3a90 	vmov	s15, r3
 80039f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80039fa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003bdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80039fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a12:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003a16:	e087      	b.n	8003b28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	ee07 3a90 	vmov	s15, r3
 8003a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a22:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003be0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003a26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a2a:	4b6a      	ldr	r3, [pc, #424]	@ (8003bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a32:	ee07 3a90 	vmov	s15, r3
 8003a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a3e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003bdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a5a:	e065      	b.n	8003b28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	ee07 3a90 	vmov	s15, r3
 8003a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a66:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003be4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a6e:	4b59      	ldr	r3, [pc, #356]	@ (8003bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a76:	ee07 3a90 	vmov	s15, r3
 8003a7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a82:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003bdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a9e:	e043      	b.n	8003b28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	ee07 3a90 	vmov	s15, r3
 8003aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aaa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003be8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ab2:	4b48      	ldr	r3, [pc, #288]	@ (8003bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aba:	ee07 3a90 	vmov	s15, r3
 8003abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ac2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ac6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003bdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ad2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ade:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ae2:	e021      	b.n	8003b28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	ee07 3a90 	vmov	s15, r3
 8003aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003be4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003af6:	4b37      	ldr	r3, [pc, #220]	@ (8003bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003afe:	ee07 3a90 	vmov	s15, r3
 8003b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b06:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b0a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003bdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b26:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003b28:	4b2a      	ldr	r3, [pc, #168]	@ (8003bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b2c:	0a5b      	lsrs	r3, r3, #9
 8003b2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b32:	ee07 3a90 	vmov	s15, r3
 8003b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003b3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b42:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b4e:	ee17 2a90 	vmov	r2, s15
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003b56:	4b1f      	ldr	r3, [pc, #124]	@ (8003bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b5a:	0c1b      	lsrs	r3, r3, #16
 8003b5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b60:	ee07 3a90 	vmov	s15, r3
 8003b64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b68:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003b6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b70:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b7c:	ee17 2a90 	vmov	r2, s15
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003b84:	4b13      	ldr	r3, [pc, #76]	@ (8003bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b88:	0e1b      	lsrs	r3, r3, #24
 8003b8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b8e:	ee07 3a90 	vmov	s15, r3
 8003b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003b9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ba2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ba6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003baa:	ee17 2a90 	vmov	r2, s15
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	609a      	str	r2, [r3, #8]
}
 8003bc6:	bf00      	nop
 8003bc8:	3724      	adds	r7, #36	@ 0x24
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	58024400 	.word	0x58024400
 8003bd8:	03d09000 	.word	0x03d09000
 8003bdc:	46000000 	.word	0x46000000
 8003be0:	4c742400 	.word	0x4c742400
 8003be4:	4a742400 	.word	0x4a742400
 8003be8:	4bbebc20 	.word	0x4bbebc20

08003bec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b089      	sub	sp, #36	@ 0x24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003bf4:	4ba1      	ldr	r3, [pc, #644]	@ (8003e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bf8:	f003 0303 	and.w	r3, r3, #3
 8003bfc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003bfe:	4b9f      	ldr	r3, [pc, #636]	@ (8003e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c02:	0d1b      	lsrs	r3, r3, #20
 8003c04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c08:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003c0a:	4b9c      	ldr	r3, [pc, #624]	@ (8003e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c0e:	0a1b      	lsrs	r3, r3, #8
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003c16:	4b99      	ldr	r3, [pc, #612]	@ (8003e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c1a:	08db      	lsrs	r3, r3, #3
 8003c1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	fb02 f303 	mul.w	r3, r2, r3
 8003c26:	ee07 3a90 	vmov	s15, r3
 8003c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f000 8111 	beq.w	8003e5c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	f000 8083 	beq.w	8003d48 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	f200 80a1 	bhi.w	8003d8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d003      	beq.n	8003c58 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d056      	beq.n	8003d04 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003c56:	e099      	b.n	8003d8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c58:	4b88      	ldr	r3, [pc, #544]	@ (8003e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0320 	and.w	r3, r3, #32
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d02d      	beq.n	8003cc0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003c64:	4b85      	ldr	r3, [pc, #532]	@ (8003e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	08db      	lsrs	r3, r3, #3
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	4a84      	ldr	r2, [pc, #528]	@ (8003e80 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003c70:	fa22 f303 	lsr.w	r3, r2, r3
 8003c74:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	ee07 3a90 	vmov	s15, r3
 8003c7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	ee07 3a90 	vmov	s15, r3
 8003c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c8e:	4b7b      	ldr	r3, [pc, #492]	@ (8003e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c96:	ee07 3a90 	vmov	s15, r3
 8003c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ca2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003e84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003cbe:	e087      	b.n	8003dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	ee07 3a90 	vmov	s15, r3
 8003cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003e88 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cd2:	4b6a      	ldr	r3, [pc, #424]	@ (8003e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cda:	ee07 3a90 	vmov	s15, r3
 8003cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ce2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ce6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003e84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d02:	e065      	b.n	8003dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	ee07 3a90 	vmov	s15, r3
 8003d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d0e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003e8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d16:	4b59      	ldr	r3, [pc, #356]	@ (8003e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d1e:	ee07 3a90 	vmov	s15, r3
 8003d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d26:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d2a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003e84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d46:	e043      	b.n	8003dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	ee07 3a90 	vmov	s15, r3
 8003d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d52:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003e90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d5a:	4b48      	ldr	r3, [pc, #288]	@ (8003e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d62:	ee07 3a90 	vmov	s15, r3
 8003d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d6e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003e84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d8a:	e021      	b.n	8003dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	ee07 3a90 	vmov	s15, r3
 8003d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d96:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003e8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d9e:	4b37      	ldr	r3, [pc, #220]	@ (8003e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003da6:	ee07 3a90 	vmov	s15, r3
 8003daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dae:	ed97 6a03 	vldr	s12, [r7, #12]
 8003db2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003e84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003dce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003dd0:	4b2a      	ldr	r3, [pc, #168]	@ (8003e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd4:	0a5b      	lsrs	r3, r3, #9
 8003dd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003dda:	ee07 3a90 	vmov	s15, r3
 8003dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003de2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003de6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003dea:	edd7 6a07 	vldr	s13, [r7, #28]
 8003dee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003df2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003df6:	ee17 2a90 	vmov	r2, s15
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003dfe:	4b1f      	ldr	r3, [pc, #124]	@ (8003e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e02:	0c1b      	lsrs	r3, r3, #16
 8003e04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e08:	ee07 3a90 	vmov	s15, r3
 8003e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e18:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e24:	ee17 2a90 	vmov	r2, s15
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003e2c:	4b13      	ldr	r3, [pc, #76]	@ (8003e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e30:	0e1b      	lsrs	r3, r3, #24
 8003e32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e36:	ee07 3a90 	vmov	s15, r3
 8003e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e46:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e52:	ee17 2a90 	vmov	r2, s15
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003e5a:	e008      	b.n	8003e6e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	609a      	str	r2, [r3, #8]
}
 8003e6e:	bf00      	nop
 8003e70:	3724      	adds	r7, #36	@ 0x24
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	58024400 	.word	0x58024400
 8003e80:	03d09000 	.word	0x03d09000
 8003e84:	46000000 	.word	0x46000000
 8003e88:	4c742400 	.word	0x4c742400
 8003e8c:	4a742400 	.word	0x4a742400
 8003e90:	4bbebc20 	.word	0x4bbebc20

08003e94 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ea2:	4b53      	ldr	r3, [pc, #332]	@ (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea6:	f003 0303 	and.w	r3, r3, #3
 8003eaa:	2b03      	cmp	r3, #3
 8003eac:	d101      	bne.n	8003eb2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e099      	b.n	8003fe6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003eb2:	4b4f      	ldr	r3, [pc, #316]	@ (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a4e      	ldr	r2, [pc, #312]	@ (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003eb8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003ebc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ebe:	f7fd f883 	bl	8000fc8 <HAL_GetTick>
 8003ec2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003ec4:	e008      	b.n	8003ed8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003ec6:	f7fd f87f 	bl	8000fc8 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d901      	bls.n	8003ed8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e086      	b.n	8003fe6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003ed8:	4b45      	ldr	r3, [pc, #276]	@ (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1f0      	bne.n	8003ec6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003ee4:	4b42      	ldr	r3, [pc, #264]	@ (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	031b      	lsls	r3, r3, #12
 8003ef2:	493f      	ldr	r1, [pc, #252]	@ (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	628b      	str	r3, [r1, #40]	@ 0x28
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	3b01      	subs	r3, #1
 8003efe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	3b01      	subs	r3, #1
 8003f08:	025b      	lsls	r3, r3, #9
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	3b01      	subs	r3, #1
 8003f14:	041b      	lsls	r3, r3, #16
 8003f16:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	3b01      	subs	r3, #1
 8003f22:	061b      	lsls	r3, r3, #24
 8003f24:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003f28:	4931      	ldr	r1, [pc, #196]	@ (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003f2e:	4b30      	ldr	r3, [pc, #192]	@ (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f32:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	492d      	ldr	r1, [pc, #180]	@ (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003f40:	4b2b      	ldr	r3, [pc, #172]	@ (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f44:	f023 0220 	bic.w	r2, r3, #32
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	4928      	ldr	r1, [pc, #160]	@ (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003f52:	4b27      	ldr	r3, [pc, #156]	@ (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f56:	4a26      	ldr	r2, [pc, #152]	@ (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003f58:	f023 0310 	bic.w	r3, r3, #16
 8003f5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003f5e:	4b24      	ldr	r3, [pc, #144]	@ (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003f60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f62:	4b24      	ldr	r3, [pc, #144]	@ (8003ff4 <RCCEx_PLL2_Config+0x160>)
 8003f64:	4013      	ands	r3, r2
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	69d2      	ldr	r2, [r2, #28]
 8003f6a:	00d2      	lsls	r2, r2, #3
 8003f6c:	4920      	ldr	r1, [pc, #128]	@ (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003f72:	4b1f      	ldr	r3, [pc, #124]	@ (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f76:	4a1e      	ldr	r2, [pc, #120]	@ (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003f78:	f043 0310 	orr.w	r3, r3, #16
 8003f7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d106      	bne.n	8003f92 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003f84:	4b1a      	ldr	r3, [pc, #104]	@ (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f88:	4a19      	ldr	r2, [pc, #100]	@ (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003f8a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003f8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003f90:	e00f      	b.n	8003fb2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d106      	bne.n	8003fa6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003f98:	4b15      	ldr	r3, [pc, #84]	@ (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f9c:	4a14      	ldr	r2, [pc, #80]	@ (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003f9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fa2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003fa4:	e005      	b.n	8003fb2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003fa6:	4b12      	ldr	r3, [pc, #72]	@ (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003faa:	4a11      	ldr	r2, [pc, #68]	@ (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003fac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003fb0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a0e      	ldr	r2, [pc, #56]	@ (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003fb8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003fbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fbe:	f7fd f803 	bl	8000fc8 <HAL_GetTick>
 8003fc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003fc4:	e008      	b.n	8003fd8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003fc6:	f7fc ffff 	bl	8000fc8 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d901      	bls.n	8003fd8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e006      	b.n	8003fe6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003fd8:	4b05      	ldr	r3, [pc, #20]	@ (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d0f0      	beq.n	8003fc6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	58024400 	.word	0x58024400
 8003ff4:	ffff0007 	.word	0xffff0007

08003ff8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004002:	2300      	movs	r3, #0
 8004004:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004006:	4b53      	ldr	r3, [pc, #332]	@ (8004154 <RCCEx_PLL3_Config+0x15c>)
 8004008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800400a:	f003 0303 	and.w	r3, r3, #3
 800400e:	2b03      	cmp	r3, #3
 8004010:	d101      	bne.n	8004016 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e099      	b.n	800414a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004016:	4b4f      	ldr	r3, [pc, #316]	@ (8004154 <RCCEx_PLL3_Config+0x15c>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a4e      	ldr	r2, [pc, #312]	@ (8004154 <RCCEx_PLL3_Config+0x15c>)
 800401c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004020:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004022:	f7fc ffd1 	bl	8000fc8 <HAL_GetTick>
 8004026:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004028:	e008      	b.n	800403c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800402a:	f7fc ffcd 	bl	8000fc8 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d901      	bls.n	800403c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e086      	b.n	800414a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800403c:	4b45      	ldr	r3, [pc, #276]	@ (8004154 <RCCEx_PLL3_Config+0x15c>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1f0      	bne.n	800402a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004048:	4b42      	ldr	r3, [pc, #264]	@ (8004154 <RCCEx_PLL3_Config+0x15c>)
 800404a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800404c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	051b      	lsls	r3, r3, #20
 8004056:	493f      	ldr	r1, [pc, #252]	@ (8004154 <RCCEx_PLL3_Config+0x15c>)
 8004058:	4313      	orrs	r3, r2
 800405a:	628b      	str	r3, [r1, #40]	@ 0x28
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	3b01      	subs	r3, #1
 8004062:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	3b01      	subs	r3, #1
 800406c:	025b      	lsls	r3, r3, #9
 800406e:	b29b      	uxth	r3, r3
 8004070:	431a      	orrs	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	3b01      	subs	r3, #1
 8004078:	041b      	lsls	r3, r3, #16
 800407a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	3b01      	subs	r3, #1
 8004086:	061b      	lsls	r3, r3, #24
 8004088:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800408c:	4931      	ldr	r1, [pc, #196]	@ (8004154 <RCCEx_PLL3_Config+0x15c>)
 800408e:	4313      	orrs	r3, r2
 8004090:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004092:	4b30      	ldr	r3, [pc, #192]	@ (8004154 <RCCEx_PLL3_Config+0x15c>)
 8004094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004096:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	492d      	ldr	r1, [pc, #180]	@ (8004154 <RCCEx_PLL3_Config+0x15c>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80040a4:	4b2b      	ldr	r3, [pc, #172]	@ (8004154 <RCCEx_PLL3_Config+0x15c>)
 80040a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	4928      	ldr	r1, [pc, #160]	@ (8004154 <RCCEx_PLL3_Config+0x15c>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80040b6:	4b27      	ldr	r3, [pc, #156]	@ (8004154 <RCCEx_PLL3_Config+0x15c>)
 80040b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ba:	4a26      	ldr	r2, [pc, #152]	@ (8004154 <RCCEx_PLL3_Config+0x15c>)
 80040bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80040c2:	4b24      	ldr	r3, [pc, #144]	@ (8004154 <RCCEx_PLL3_Config+0x15c>)
 80040c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040c6:	4b24      	ldr	r3, [pc, #144]	@ (8004158 <RCCEx_PLL3_Config+0x160>)
 80040c8:	4013      	ands	r3, r2
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	69d2      	ldr	r2, [r2, #28]
 80040ce:	00d2      	lsls	r2, r2, #3
 80040d0:	4920      	ldr	r1, [pc, #128]	@ (8004154 <RCCEx_PLL3_Config+0x15c>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80040d6:	4b1f      	ldr	r3, [pc, #124]	@ (8004154 <RCCEx_PLL3_Config+0x15c>)
 80040d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040da:	4a1e      	ldr	r2, [pc, #120]	@ (8004154 <RCCEx_PLL3_Config+0x15c>)
 80040dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d106      	bne.n	80040f6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80040e8:	4b1a      	ldr	r3, [pc, #104]	@ (8004154 <RCCEx_PLL3_Config+0x15c>)
 80040ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ec:	4a19      	ldr	r2, [pc, #100]	@ (8004154 <RCCEx_PLL3_Config+0x15c>)
 80040ee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80040f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80040f4:	e00f      	b.n	8004116 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d106      	bne.n	800410a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80040fc:	4b15      	ldr	r3, [pc, #84]	@ (8004154 <RCCEx_PLL3_Config+0x15c>)
 80040fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004100:	4a14      	ldr	r2, [pc, #80]	@ (8004154 <RCCEx_PLL3_Config+0x15c>)
 8004102:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004106:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004108:	e005      	b.n	8004116 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800410a:	4b12      	ldr	r3, [pc, #72]	@ (8004154 <RCCEx_PLL3_Config+0x15c>)
 800410c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800410e:	4a11      	ldr	r2, [pc, #68]	@ (8004154 <RCCEx_PLL3_Config+0x15c>)
 8004110:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004114:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004116:	4b0f      	ldr	r3, [pc, #60]	@ (8004154 <RCCEx_PLL3_Config+0x15c>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a0e      	ldr	r2, [pc, #56]	@ (8004154 <RCCEx_PLL3_Config+0x15c>)
 800411c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004120:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004122:	f7fc ff51 	bl	8000fc8 <HAL_GetTick>
 8004126:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004128:	e008      	b.n	800413c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800412a:	f7fc ff4d 	bl	8000fc8 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b02      	cmp	r3, #2
 8004136:	d901      	bls.n	800413c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e006      	b.n	800414a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800413c:	4b05      	ldr	r3, [pc, #20]	@ (8004154 <RCCEx_PLL3_Config+0x15c>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d0f0      	beq.n	800412a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004148:	7bfb      	ldrb	r3, [r7, #15]
}
 800414a:	4618      	mov	r0, r3
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	58024400 	.word	0x58024400
 8004158:	ffff0007 	.word	0xffff0007

0800415c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e049      	b.n	8004202 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d106      	bne.n	8004188 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f7fc fc9c 	bl	8000ac0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2202      	movs	r2, #2
 800418c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	3304      	adds	r3, #4
 8004198:	4619      	mov	r1, r3
 800419a:	4610      	mov	r0, r2
 800419c:	f000 f974 	bl	8004488 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3708      	adds	r7, #8
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b082      	sub	sp, #8
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e049      	b.n	80042b0 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b00      	cmp	r3, #0
 8004226:	d106      	bne.n	8004236 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 f841 	bl	80042b8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2202      	movs	r2, #2
 800423a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	3304      	adds	r3, #4
 8004246:	4619      	mov	r1, r3
 8004248:	4610      	mov	r0, r2
 800424a:	f000 f91d 	bl	8004488 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3708      	adds	r7, #8
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042d8:	2300      	movs	r3, #0
 80042da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d101      	bne.n	80042ea <HAL_TIM_IC_ConfigChannel+0x1e>
 80042e6:	2302      	movs	r3, #2
 80042e8:	e088      	b.n	80043fc <HAL_TIM_IC_ConfigChannel+0x130>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d11b      	bne.n	8004330 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004308:	f000 fa54 	bl	80047b4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	699a      	ldr	r2, [r3, #24]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 020c 	bic.w	r2, r2, #12
 800431a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6999      	ldr	r1, [r3, #24]
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	689a      	ldr	r2, [r3, #8]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	430a      	orrs	r2, r1
 800432c:	619a      	str	r2, [r3, #24]
 800432e:	e060      	b.n	80043f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b04      	cmp	r3, #4
 8004334:	d11c      	bne.n	8004370 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004346:	f000 fae4 	bl	8004912 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	699a      	ldr	r2, [r3, #24]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004358:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	6999      	ldr	r1, [r3, #24]
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	021a      	lsls	r2, r3, #8
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	619a      	str	r2, [r3, #24]
 800436e:	e040      	b.n	80043f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b08      	cmp	r3, #8
 8004374:	d11b      	bne.n	80043ae <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004386:	f000 fb31 	bl	80049ec <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	69da      	ldr	r2, [r3, #28]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 020c 	bic.w	r2, r2, #12
 8004398:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	69d9      	ldr	r1, [r3, #28]
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	430a      	orrs	r2, r1
 80043aa:	61da      	str	r2, [r3, #28]
 80043ac:	e021      	b.n	80043f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2b0c      	cmp	r3, #12
 80043b2:	d11c      	bne.n	80043ee <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80043c4:	f000 fb4e 	bl	8004a64 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	69da      	ldr	r2, [r3, #28]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80043d6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	69d9      	ldr	r1, [r3, #28]
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	021a      	lsls	r2, r3, #8
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	61da      	str	r2, [r3, #28]
 80043ec:	e001      	b.n	80043f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80043fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3718      	adds	r7, #24
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004414:	2b01      	cmp	r3, #1
 8004416:	d101      	bne.n	800441c <HAL_TIM_SlaveConfigSynchro+0x18>
 8004418:	2302      	movs	r3, #2
 800441a:	e031      	b.n	8004480 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2202      	movs	r2, #2
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800442c:	6839      	ldr	r1, [r7, #0]
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f8d6 	bl	80045e0 <TIM_SlaveTimer_SetConfig>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d009      	beq.n	800444e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2201      	movs	r2, #1
 800443e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e018      	b.n	8004480 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68da      	ldr	r2, [r3, #12]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800445c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68da      	ldr	r2, [r3, #12]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800446c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3708      	adds	r7, #8
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a47      	ldr	r2, [pc, #284]	@ (80045b8 <TIM_Base_SetConfig+0x130>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d013      	beq.n	80044c8 <TIM_Base_SetConfig+0x40>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044a6:	d00f      	beq.n	80044c8 <TIM_Base_SetConfig+0x40>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a44      	ldr	r2, [pc, #272]	@ (80045bc <TIM_Base_SetConfig+0x134>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d00b      	beq.n	80044c8 <TIM_Base_SetConfig+0x40>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a43      	ldr	r2, [pc, #268]	@ (80045c0 <TIM_Base_SetConfig+0x138>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d007      	beq.n	80044c8 <TIM_Base_SetConfig+0x40>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a42      	ldr	r2, [pc, #264]	@ (80045c4 <TIM_Base_SetConfig+0x13c>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d003      	beq.n	80044c8 <TIM_Base_SetConfig+0x40>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a41      	ldr	r2, [pc, #260]	@ (80045c8 <TIM_Base_SetConfig+0x140>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d108      	bne.n	80044da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a36      	ldr	r2, [pc, #216]	@ (80045b8 <TIM_Base_SetConfig+0x130>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d027      	beq.n	8004532 <TIM_Base_SetConfig+0xaa>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044e8:	d023      	beq.n	8004532 <TIM_Base_SetConfig+0xaa>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a33      	ldr	r2, [pc, #204]	@ (80045bc <TIM_Base_SetConfig+0x134>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d01f      	beq.n	8004532 <TIM_Base_SetConfig+0xaa>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a32      	ldr	r2, [pc, #200]	@ (80045c0 <TIM_Base_SetConfig+0x138>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d01b      	beq.n	8004532 <TIM_Base_SetConfig+0xaa>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a31      	ldr	r2, [pc, #196]	@ (80045c4 <TIM_Base_SetConfig+0x13c>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d017      	beq.n	8004532 <TIM_Base_SetConfig+0xaa>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a30      	ldr	r2, [pc, #192]	@ (80045c8 <TIM_Base_SetConfig+0x140>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d013      	beq.n	8004532 <TIM_Base_SetConfig+0xaa>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a2f      	ldr	r2, [pc, #188]	@ (80045cc <TIM_Base_SetConfig+0x144>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d00f      	beq.n	8004532 <TIM_Base_SetConfig+0xaa>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a2e      	ldr	r2, [pc, #184]	@ (80045d0 <TIM_Base_SetConfig+0x148>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d00b      	beq.n	8004532 <TIM_Base_SetConfig+0xaa>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a2d      	ldr	r2, [pc, #180]	@ (80045d4 <TIM_Base_SetConfig+0x14c>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d007      	beq.n	8004532 <TIM_Base_SetConfig+0xaa>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a2c      	ldr	r2, [pc, #176]	@ (80045d8 <TIM_Base_SetConfig+0x150>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d003      	beq.n	8004532 <TIM_Base_SetConfig+0xaa>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a2b      	ldr	r2, [pc, #172]	@ (80045dc <TIM_Base_SetConfig+0x154>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d108      	bne.n	8004544 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	4313      	orrs	r3, r2
 8004542:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	4313      	orrs	r3, r2
 8004550:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	689a      	ldr	r2, [r3, #8]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a14      	ldr	r2, [pc, #80]	@ (80045b8 <TIM_Base_SetConfig+0x130>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d00f      	beq.n	800458a <TIM_Base_SetConfig+0x102>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a16      	ldr	r2, [pc, #88]	@ (80045c8 <TIM_Base_SetConfig+0x140>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d00b      	beq.n	800458a <TIM_Base_SetConfig+0x102>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a15      	ldr	r2, [pc, #84]	@ (80045cc <TIM_Base_SetConfig+0x144>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d007      	beq.n	800458a <TIM_Base_SetConfig+0x102>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a14      	ldr	r2, [pc, #80]	@ (80045d0 <TIM_Base_SetConfig+0x148>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d003      	beq.n	800458a <TIM_Base_SetConfig+0x102>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a13      	ldr	r2, [pc, #76]	@ (80045d4 <TIM_Base_SetConfig+0x14c>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d103      	bne.n	8004592 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	691a      	ldr	r2, [r3, #16]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f043 0204 	orr.w	r2, r3, #4
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2201      	movs	r2, #1
 80045a2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	601a      	str	r2, [r3, #0]
}
 80045aa:	bf00      	nop
 80045ac:	3714      	adds	r7, #20
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	40010000 	.word	0x40010000
 80045bc:	40000400 	.word	0x40000400
 80045c0:	40000800 	.word	0x40000800
 80045c4:	40000c00 	.word	0x40000c00
 80045c8:	40010400 	.word	0x40010400
 80045cc:	40014000 	.word	0x40014000
 80045d0:	40014400 	.word	0x40014400
 80045d4:	40014800 	.word	0x40014800
 80045d8:	4000e000 	.word	0x4000e000
 80045dc:	4000e400 	.word	0x4000e400

080045e0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045ea:	2300      	movs	r3, #0
 80045ec:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	4b65      	ldr	r3, [pc, #404]	@ (8004790 <TIM_SlaveTimer_SetConfig+0x1b0>)
 80045fa:	4013      	ands	r3, r2
 80045fc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	4313      	orrs	r3, r2
 8004606:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	4b62      	ldr	r3, [pc, #392]	@ (8004794 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800460c:	4013      	ands	r3, r2
 800460e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	4313      	orrs	r3, r2
 8004618:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	4a5c      	ldr	r2, [pc, #368]	@ (8004798 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8004628:	4293      	cmp	r3, r2
 800462a:	f000 80ab 	beq.w	8004784 <TIM_SlaveTimer_SetConfig+0x1a4>
 800462e:	4a5a      	ldr	r2, [pc, #360]	@ (8004798 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8004630:	4293      	cmp	r3, r2
 8004632:	f200 80a4 	bhi.w	800477e <TIM_SlaveTimer_SetConfig+0x19e>
 8004636:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800463a:	f000 80a3 	beq.w	8004784 <TIM_SlaveTimer_SetConfig+0x1a4>
 800463e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004642:	f200 809c 	bhi.w	800477e <TIM_SlaveTimer_SetConfig+0x19e>
 8004646:	4a55      	ldr	r2, [pc, #340]	@ (800479c <TIM_SlaveTimer_SetConfig+0x1bc>)
 8004648:	4293      	cmp	r3, r2
 800464a:	f000 809b 	beq.w	8004784 <TIM_SlaveTimer_SetConfig+0x1a4>
 800464e:	4a53      	ldr	r2, [pc, #332]	@ (800479c <TIM_SlaveTimer_SetConfig+0x1bc>)
 8004650:	4293      	cmp	r3, r2
 8004652:	f200 8094 	bhi.w	800477e <TIM_SlaveTimer_SetConfig+0x19e>
 8004656:	4a52      	ldr	r2, [pc, #328]	@ (80047a0 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8004658:	4293      	cmp	r3, r2
 800465a:	f000 8093 	beq.w	8004784 <TIM_SlaveTimer_SetConfig+0x1a4>
 800465e:	4a50      	ldr	r2, [pc, #320]	@ (80047a0 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8004660:	4293      	cmp	r3, r2
 8004662:	f200 808c 	bhi.w	800477e <TIM_SlaveTimer_SetConfig+0x19e>
 8004666:	4a4f      	ldr	r2, [pc, #316]	@ (80047a4 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8004668:	4293      	cmp	r3, r2
 800466a:	f000 808b 	beq.w	8004784 <TIM_SlaveTimer_SetConfig+0x1a4>
 800466e:	4a4d      	ldr	r2, [pc, #308]	@ (80047a4 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8004670:	4293      	cmp	r3, r2
 8004672:	f200 8084 	bhi.w	800477e <TIM_SlaveTimer_SetConfig+0x19e>
 8004676:	4a4c      	ldr	r2, [pc, #304]	@ (80047a8 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8004678:	4293      	cmp	r3, r2
 800467a:	f000 8083 	beq.w	8004784 <TIM_SlaveTimer_SetConfig+0x1a4>
 800467e:	4a4a      	ldr	r2, [pc, #296]	@ (80047a8 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d87c      	bhi.n	800477e <TIM_SlaveTimer_SetConfig+0x19e>
 8004684:	4a49      	ldr	r2, [pc, #292]	@ (80047ac <TIM_SlaveTimer_SetConfig+0x1cc>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d07c      	beq.n	8004784 <TIM_SlaveTimer_SetConfig+0x1a4>
 800468a:	4a48      	ldr	r2, [pc, #288]	@ (80047ac <TIM_SlaveTimer_SetConfig+0x1cc>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d876      	bhi.n	800477e <TIM_SlaveTimer_SetConfig+0x19e>
 8004690:	4a47      	ldr	r2, [pc, #284]	@ (80047b0 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d076      	beq.n	8004784 <TIM_SlaveTimer_SetConfig+0x1a4>
 8004696:	4a46      	ldr	r2, [pc, #280]	@ (80047b0 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d870      	bhi.n	800477e <TIM_SlaveTimer_SetConfig+0x19e>
 800469c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80046a0:	d070      	beq.n	8004784 <TIM_SlaveTimer_SetConfig+0x1a4>
 80046a2:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80046a6:	d86a      	bhi.n	800477e <TIM_SlaveTimer_SetConfig+0x19e>
 80046a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046ac:	d06a      	beq.n	8004784 <TIM_SlaveTimer_SetConfig+0x1a4>
 80046ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046b2:	d864      	bhi.n	800477e <TIM_SlaveTimer_SetConfig+0x19e>
 80046b4:	2b70      	cmp	r3, #112	@ 0x70
 80046b6:	d01a      	beq.n	80046ee <TIM_SlaveTimer_SetConfig+0x10e>
 80046b8:	2b70      	cmp	r3, #112	@ 0x70
 80046ba:	d860      	bhi.n	800477e <TIM_SlaveTimer_SetConfig+0x19e>
 80046bc:	2b60      	cmp	r3, #96	@ 0x60
 80046be:	d054      	beq.n	800476a <TIM_SlaveTimer_SetConfig+0x18a>
 80046c0:	2b60      	cmp	r3, #96	@ 0x60
 80046c2:	d85c      	bhi.n	800477e <TIM_SlaveTimer_SetConfig+0x19e>
 80046c4:	2b50      	cmp	r3, #80	@ 0x50
 80046c6:	d046      	beq.n	8004756 <TIM_SlaveTimer_SetConfig+0x176>
 80046c8:	2b50      	cmp	r3, #80	@ 0x50
 80046ca:	d858      	bhi.n	800477e <TIM_SlaveTimer_SetConfig+0x19e>
 80046cc:	2b40      	cmp	r3, #64	@ 0x40
 80046ce:	d019      	beq.n	8004704 <TIM_SlaveTimer_SetConfig+0x124>
 80046d0:	2b40      	cmp	r3, #64	@ 0x40
 80046d2:	d854      	bhi.n	800477e <TIM_SlaveTimer_SetConfig+0x19e>
 80046d4:	2b30      	cmp	r3, #48	@ 0x30
 80046d6:	d055      	beq.n	8004784 <TIM_SlaveTimer_SetConfig+0x1a4>
 80046d8:	2b30      	cmp	r3, #48	@ 0x30
 80046da:	d850      	bhi.n	800477e <TIM_SlaveTimer_SetConfig+0x19e>
 80046dc:	2b20      	cmp	r3, #32
 80046de:	d051      	beq.n	8004784 <TIM_SlaveTimer_SetConfig+0x1a4>
 80046e0:	2b20      	cmp	r3, #32
 80046e2:	d84c      	bhi.n	800477e <TIM_SlaveTimer_SetConfig+0x19e>
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d04d      	beq.n	8004784 <TIM_SlaveTimer_SetConfig+0x1a4>
 80046e8:	2b10      	cmp	r3, #16
 80046ea:	d04b      	beq.n	8004784 <TIM_SlaveTimer_SetConfig+0x1a4>
 80046ec:	e047      	b.n	800477e <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80046fe:	f000 f9ee 	bl	8004ade <TIM_ETR_SetConfig>
      break;
 8004702:	e040      	b.n	8004786 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2b05      	cmp	r3, #5
 800470a:	d101      	bne.n	8004710 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e03b      	b.n	8004788 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6a1a      	ldr	r2, [r3, #32]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 0201 	bic.w	r2, r2, #1
 8004726:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004736:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	011b      	lsls	r3, r3, #4
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	4313      	orrs	r3, r2
 8004742:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68ba      	ldr	r2, [r7, #8]
 800474a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	621a      	str	r2, [r3, #32]
      break;
 8004754:	e017      	b.n	8004786 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004762:	461a      	mov	r2, r3
 8004764:	f000 f8a6 	bl	80048b4 <TIM_TI1_ConfigInputStage>
      break;
 8004768:	e00d      	b.n	8004786 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004776:	461a      	mov	r2, r3
 8004778:	f000 f908 	bl	800498c <TIM_TI2_ConfigInputStage>
      break;
 800477c:	e003      	b.n	8004786 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	75fb      	strb	r3, [r7, #23]
      break;
 8004782:	e000      	b.n	8004786 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 8004784:	bf00      	nop
  }

  return status;
 8004786:	7dfb      	ldrb	r3, [r7, #23]
}
 8004788:	4618      	mov	r0, r3
 800478a:	3718      	adds	r7, #24
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	ffcfff8f 	.word	0xffcfff8f
 8004794:	fffefff8 	.word	0xfffefff8
 8004798:	00200010 	.word	0x00200010
 800479c:	00100070 	.word	0x00100070
 80047a0:	00100060 	.word	0x00100060
 80047a4:	00100050 	.word	0x00100050
 80047a8:	00100040 	.word	0x00100040
 80047ac:	00100030 	.word	0x00100030
 80047b0:	00100020 	.word	0x00100020

080047b4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b087      	sub	sp, #28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
 80047c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6a1b      	ldr	r3, [r3, #32]
 80047cc:	f023 0201 	bic.w	r2, r3, #1
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	4a2c      	ldr	r2, [pc, #176]	@ (8004890 <TIM_TI1_SetConfig+0xdc>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d023      	beq.n	800482a <TIM_TI1_SetConfig+0x76>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047e8:	d01f      	beq.n	800482a <TIM_TI1_SetConfig+0x76>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	4a29      	ldr	r2, [pc, #164]	@ (8004894 <TIM_TI1_SetConfig+0xe0>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d01b      	beq.n	800482a <TIM_TI1_SetConfig+0x76>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	4a28      	ldr	r2, [pc, #160]	@ (8004898 <TIM_TI1_SetConfig+0xe4>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d017      	beq.n	800482a <TIM_TI1_SetConfig+0x76>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	4a27      	ldr	r2, [pc, #156]	@ (800489c <TIM_TI1_SetConfig+0xe8>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d013      	beq.n	800482a <TIM_TI1_SetConfig+0x76>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	4a26      	ldr	r2, [pc, #152]	@ (80048a0 <TIM_TI1_SetConfig+0xec>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d00f      	beq.n	800482a <TIM_TI1_SetConfig+0x76>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	4a25      	ldr	r2, [pc, #148]	@ (80048a4 <TIM_TI1_SetConfig+0xf0>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d00b      	beq.n	800482a <TIM_TI1_SetConfig+0x76>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	4a24      	ldr	r2, [pc, #144]	@ (80048a8 <TIM_TI1_SetConfig+0xf4>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d007      	beq.n	800482a <TIM_TI1_SetConfig+0x76>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	4a23      	ldr	r2, [pc, #140]	@ (80048ac <TIM_TI1_SetConfig+0xf8>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d003      	beq.n	800482a <TIM_TI1_SetConfig+0x76>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	4a22      	ldr	r2, [pc, #136]	@ (80048b0 <TIM_TI1_SetConfig+0xfc>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d101      	bne.n	800482e <TIM_TI1_SetConfig+0x7a>
 800482a:	2301      	movs	r3, #1
 800482c:	e000      	b.n	8004830 <TIM_TI1_SetConfig+0x7c>
 800482e:	2300      	movs	r3, #0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d008      	beq.n	8004846 <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	f023 0303 	bic.w	r3, r3, #3
 800483a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800483c:	697a      	ldr	r2, [r7, #20]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4313      	orrs	r3, r2
 8004842:	617b      	str	r3, [r7, #20]
 8004844:	e003      	b.n	800484e <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f043 0301 	orr.w	r3, r3, #1
 800484c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004854:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	011b      	lsls	r3, r3, #4
 800485a:	b2db      	uxtb	r3, r3
 800485c:	697a      	ldr	r2, [r7, #20]
 800485e:	4313      	orrs	r3, r2
 8004860:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	f023 030a 	bic.w	r3, r3, #10
 8004868:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	f003 030a 	and.w	r3, r3, #10
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	4313      	orrs	r3, r2
 8004874:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	621a      	str	r2, [r3, #32]
}
 8004882:	bf00      	nop
 8004884:	371c      	adds	r7, #28
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	40010000 	.word	0x40010000
 8004894:	40000400 	.word	0x40000400
 8004898:	40000800 	.word	0x40000800
 800489c:	40000c00 	.word	0x40000c00
 80048a0:	40010400 	.word	0x40010400
 80048a4:	40001800 	.word	0x40001800
 80048a8:	40014000 	.word	0x40014000
 80048ac:	4000e000 	.word	0x4000e000
 80048b0:	4000e400 	.word	0x4000e400

080048b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b087      	sub	sp, #28
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6a1b      	ldr	r3, [r3, #32]
 80048ca:	f023 0201 	bic.w	r2, r3, #1
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	011b      	lsls	r3, r3, #4
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f023 030a 	bic.w	r3, r3, #10
 80048f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	693a      	ldr	r2, [r7, #16]
 80048fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	621a      	str	r2, [r3, #32]
}
 8004906:	bf00      	nop
 8004908:	371c      	adds	r7, #28
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr

08004912 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004912:	b480      	push	{r7}
 8004914:	b087      	sub	sp, #28
 8004916:	af00      	add	r7, sp, #0
 8004918:	60f8      	str	r0, [r7, #12]
 800491a:	60b9      	str	r1, [r7, #8]
 800491c:	607a      	str	r2, [r7, #4]
 800491e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	f023 0210 	bic.w	r2, r3, #16
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800493e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	021b      	lsls	r3, r3, #8
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	4313      	orrs	r3, r2
 8004948:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004950:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	031b      	lsls	r3, r3, #12
 8004956:	b29b      	uxth	r3, r3
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	4313      	orrs	r3, r2
 800495c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004964:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	011b      	lsls	r3, r3, #4
 800496a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	4313      	orrs	r3, r2
 8004972:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	697a      	ldr	r2, [r7, #20]
 800497e:	621a      	str	r2, [r3, #32]
}
 8004980:	bf00      	nop
 8004982:	371c      	adds	r7, #28
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800498c:	b480      	push	{r7}
 800498e:	b087      	sub	sp, #28
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6a1b      	ldr	r3, [r3, #32]
 800499c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	f023 0210 	bic.w	r2, r3, #16
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80049b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	031b      	lsls	r3, r3, #12
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	4313      	orrs	r3, r2
 80049c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80049c8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	011b      	lsls	r3, r3, #4
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	621a      	str	r2, [r3, #32]
}
 80049e0:	bf00      	nop
 80049e2:	371c      	adds	r7, #28
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b087      	sub	sp, #28
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
 80049f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	69db      	ldr	r3, [r3, #28]
 8004a10:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	f023 0303 	bic.w	r3, r3, #3
 8004a18:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a28:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	011b      	lsls	r3, r3, #4
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004a3c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	021b      	lsls	r3, r3, #8
 8004a42:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	621a      	str	r2, [r3, #32]
}
 8004a58:	bf00      	nop
 8004a5a:	371c      	adds	r7, #28
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b087      	sub	sp, #28
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
 8004a70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6a1b      	ldr	r3, [r3, #32]
 8004a7c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	69db      	ldr	r3, [r3, #28]
 8004a88:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a90:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	021b      	lsls	r3, r3, #8
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004aa2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	031b      	lsls	r3, r3, #12
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004ab6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	031b      	lsls	r3, r3, #12
 8004abc:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	621a      	str	r2, [r3, #32]
}
 8004ad2:	bf00      	nop
 8004ad4:	371c      	adds	r7, #28
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr

08004ade <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b087      	sub	sp, #28
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	60f8      	str	r0, [r7, #12]
 8004ae6:	60b9      	str	r1, [r7, #8]
 8004ae8:	607a      	str	r2, [r7, #4]
 8004aea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004af8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	021a      	lsls	r2, r3, #8
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	431a      	orrs	r2, r3
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	609a      	str	r2, [r3, #8]
}
 8004b12:	bf00      	nop
 8004b14:	371c      	adds	r7, #28
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
	...

08004b20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d101      	bne.n	8004b38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b34:	2302      	movs	r3, #2
 8004b36:	e077      	b.n	8004c28 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2202      	movs	r2, #2
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a35      	ldr	r2, [pc, #212]	@ (8004c34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d004      	beq.n	8004b6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a34      	ldr	r2, [pc, #208]	@ (8004c38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d108      	bne.n	8004b7e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004b72:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a25      	ldr	r2, [pc, #148]	@ (8004c34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d02c      	beq.n	8004bfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004baa:	d027      	beq.n	8004bfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a22      	ldr	r2, [pc, #136]	@ (8004c3c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d022      	beq.n	8004bfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a21      	ldr	r2, [pc, #132]	@ (8004c40 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d01d      	beq.n	8004bfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a1f      	ldr	r2, [pc, #124]	@ (8004c44 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d018      	beq.n	8004bfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a1a      	ldr	r2, [pc, #104]	@ (8004c38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d013      	beq.n	8004bfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a1b      	ldr	r2, [pc, #108]	@ (8004c48 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d00e      	beq.n	8004bfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a1a      	ldr	r2, [pc, #104]	@ (8004c4c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d009      	beq.n	8004bfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a18      	ldr	r2, [pc, #96]	@ (8004c50 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d004      	beq.n	8004bfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a17      	ldr	r2, [pc, #92]	@ (8004c54 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d10c      	bne.n	8004c16 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3714      	adds	r7, #20
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	40010000 	.word	0x40010000
 8004c38:	40010400 	.word	0x40010400
 8004c3c:	40000400 	.word	0x40000400
 8004c40:	40000800 	.word	0x40000800
 8004c44:	40000c00 	.word	0x40000c00
 8004c48:	40001800 	.word	0x40001800
 8004c4c:	40014000 	.word	0x40014000
 8004c50:	4000e000 	.word	0x4000e000
 8004c54:	4000e400 	.word	0x4000e400

08004c58 <HAL_TIMEx_TISelection>:
  *
  *         (*)  Value not defined in all devices. \n
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_TIMEx_TISelection(TIM_HandleTypeDef *htim, uint32_t TISelection, uint32_t Channel)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b087      	sub	sp, #28
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c64:	2300      	movs	r3, #0
 8004c66:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_TIM_TISEL_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TISEL(TISelection));

  __HAL_LOCK(htim);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d101      	bne.n	8004c76 <HAL_TIMEx_TISelection+0x1e>
 8004c72:	2302      	movs	r3, #2
 8004c74:	e058      	b.n	8004d28 <HAL_TIMEx_TISelection+0xd0>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2b0c      	cmp	r3, #12
 8004c82:	d849      	bhi.n	8004d18 <HAL_TIMEx_TISelection+0xc0>
 8004c84:	a201      	add	r2, pc, #4	@ (adr r2, 8004c8c <HAL_TIMEx_TISelection+0x34>)
 8004c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c8a:	bf00      	nop
 8004c8c:	08004cc1 	.word	0x08004cc1
 8004c90:	08004d19 	.word	0x08004d19
 8004c94:	08004d19 	.word	0x08004d19
 8004c98:	08004d19 	.word	0x08004d19
 8004c9c:	08004cd7 	.word	0x08004cd7
 8004ca0:	08004d19 	.word	0x08004d19
 8004ca4:	08004d19 	.word	0x08004d19
 8004ca8:	08004d19 	.word	0x08004d19
 8004cac:	08004ced 	.word	0x08004ced
 8004cb0:	08004d19 	.word	0x08004d19
 8004cb4:	08004d19 	.word	0x08004d19
 8004cb8:	08004d19 	.word	0x08004d19
 8004cbc:	08004d03 	.word	0x08004d03
  {
    case TIM_CHANNEL_1:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI1SEL, TISelection);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004cc6:	f023 010f 	bic.w	r1, r3, #15
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8004cd4:	e023      	b.n	8004d1e <HAL_TIMEx_TISelection+0xc6>
    case TIM_CHANNEL_2:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI2SEL, TISelection);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004cdc:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68ba      	ldr	r2, [r7, #8]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8004cea:	e018      	b.n	8004d1e <HAL_TIMEx_TISelection+0xc6>
    case TIM_CHANNEL_3:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI3SEL, TISelection);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004cf2:	f423 2170 	bic.w	r1, r3, #983040	@ 0xf0000
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8004d00:	e00d      	b.n	8004d1e <HAL_TIMEx_TISelection+0xc6>
    case TIM_CHANNEL_4:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI4SEL, TISelection);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d08:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	430a      	orrs	r2, r1
 8004d14:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8004d16:	e002      	b.n	8004d1e <HAL_TIMEx_TISelection+0xc6>
    default:
      status = HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	75fb      	strb	r3, [r7, #23]
      break;
 8004d1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d26:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	371c      	adds	r7, #28
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e042      	b.n	8004dcc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d106      	bne.n	8004d5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f7fb fed3 	bl	8000b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2224      	movs	r2, #36	@ 0x24
 8004d62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f022 0201 	bic.w	r2, r2, #1
 8004d74:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d002      	beq.n	8004d84 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 ff22 	bl	8005bc8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 f8b3 	bl	8004ef0 <UART_SetConfig>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d101      	bne.n	8004d94 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e01b      	b.n	8004dcc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	685a      	ldr	r2, [r3, #4]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004da2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	689a      	ldr	r2, [r3, #8]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004db2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f042 0201 	orr.w	r2, r2, #1
 8004dc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 ffa1 	bl	8005d0c <UART_CheckIdleState>
 8004dca:	4603      	mov	r3, r0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3708      	adds	r7, #8
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b08a      	sub	sp, #40	@ 0x28
 8004dd8:	af02      	add	r7, sp, #8
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	603b      	str	r3, [r7, #0]
 8004de0:	4613      	mov	r3, r2
 8004de2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dea:	2b20      	cmp	r3, #32
 8004dec:	d17b      	bne.n	8004ee6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d002      	beq.n	8004dfa <HAL_UART_Transmit+0x26>
 8004df4:	88fb      	ldrh	r3, [r7, #6]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e074      	b.n	8004ee8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2221      	movs	r2, #33	@ 0x21
 8004e0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e0e:	f7fc f8db 	bl	8000fc8 <HAL_GetTick>
 8004e12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	88fa      	ldrh	r2, [r7, #6]
 8004e18:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	88fa      	ldrh	r2, [r7, #6]
 8004e20:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e2c:	d108      	bne.n	8004e40 <HAL_UART_Transmit+0x6c>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d104      	bne.n	8004e40 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004e36:	2300      	movs	r3, #0
 8004e38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	61bb      	str	r3, [r7, #24]
 8004e3e:	e003      	b.n	8004e48 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e44:	2300      	movs	r3, #0
 8004e46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e48:	e030      	b.n	8004eac <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	9300      	str	r3, [sp, #0]
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	2200      	movs	r2, #0
 8004e52:	2180      	movs	r1, #128	@ 0x80
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f001 f803 	bl	8005e60 <UART_WaitOnFlagUntilTimeout>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d005      	beq.n	8004e6c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2220      	movs	r2, #32
 8004e64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e03d      	b.n	8004ee8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10b      	bne.n	8004e8a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	881b      	ldrh	r3, [r3, #0]
 8004e76:	461a      	mov	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e80:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	3302      	adds	r3, #2
 8004e86:	61bb      	str	r3, [r7, #24]
 8004e88:	e007      	b.n	8004e9a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	781a      	ldrb	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	3301      	adds	r3, #1
 8004e98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1c8      	bne.n	8004e4a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	9300      	str	r3, [sp, #0]
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	2140      	movs	r1, #64	@ 0x40
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f000 ffcc 	bl	8005e60 <UART_WaitOnFlagUntilTimeout>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d005      	beq.n	8004eda <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2220      	movs	r2, #32
 8004ed2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e006      	b.n	8004ee8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2220      	movs	r2, #32
 8004ede:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	e000      	b.n	8004ee8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004ee6:	2302      	movs	r3, #2
  }
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3720      	adds	r7, #32
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ef0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ef4:	b092      	sub	sp, #72	@ 0x48
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004efa:	2300      	movs	r3, #0
 8004efc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	689a      	ldr	r2, [r3, #8]
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	431a      	orrs	r2, r3
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	431a      	orrs	r2, r3
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	69db      	ldr	r3, [r3, #28]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	4bbe      	ldr	r3, [pc, #760]	@ (8005218 <UART_SetConfig+0x328>)
 8004f20:	4013      	ands	r3, r2
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	6812      	ldr	r2, [r2, #0]
 8004f26:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004f28:	430b      	orrs	r3, r1
 8004f2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	68da      	ldr	r2, [r3, #12]
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4ab3      	ldr	r2, [pc, #716]	@ (800521c <UART_SetConfig+0x32c>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d004      	beq.n	8004f5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	689a      	ldr	r2, [r3, #8]
 8004f62:	4baf      	ldr	r3, [pc, #700]	@ (8005220 <UART_SetConfig+0x330>)
 8004f64:	4013      	ands	r3, r2
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	6812      	ldr	r2, [r2, #0]
 8004f6a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004f6c:	430b      	orrs	r3, r1
 8004f6e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f76:	f023 010f 	bic.w	r1, r3, #15
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	430a      	orrs	r2, r1
 8004f84:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4aa6      	ldr	r2, [pc, #664]	@ (8005224 <UART_SetConfig+0x334>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d177      	bne.n	8005080 <UART_SetConfig+0x190>
 8004f90:	4ba5      	ldr	r3, [pc, #660]	@ (8005228 <UART_SetConfig+0x338>)
 8004f92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f94:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f98:	2b28      	cmp	r3, #40	@ 0x28
 8004f9a:	d86d      	bhi.n	8005078 <UART_SetConfig+0x188>
 8004f9c:	a201      	add	r2, pc, #4	@ (adr r2, 8004fa4 <UART_SetConfig+0xb4>)
 8004f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa2:	bf00      	nop
 8004fa4:	08005049 	.word	0x08005049
 8004fa8:	08005079 	.word	0x08005079
 8004fac:	08005079 	.word	0x08005079
 8004fb0:	08005079 	.word	0x08005079
 8004fb4:	08005079 	.word	0x08005079
 8004fb8:	08005079 	.word	0x08005079
 8004fbc:	08005079 	.word	0x08005079
 8004fc0:	08005079 	.word	0x08005079
 8004fc4:	08005051 	.word	0x08005051
 8004fc8:	08005079 	.word	0x08005079
 8004fcc:	08005079 	.word	0x08005079
 8004fd0:	08005079 	.word	0x08005079
 8004fd4:	08005079 	.word	0x08005079
 8004fd8:	08005079 	.word	0x08005079
 8004fdc:	08005079 	.word	0x08005079
 8004fe0:	08005079 	.word	0x08005079
 8004fe4:	08005059 	.word	0x08005059
 8004fe8:	08005079 	.word	0x08005079
 8004fec:	08005079 	.word	0x08005079
 8004ff0:	08005079 	.word	0x08005079
 8004ff4:	08005079 	.word	0x08005079
 8004ff8:	08005079 	.word	0x08005079
 8004ffc:	08005079 	.word	0x08005079
 8005000:	08005079 	.word	0x08005079
 8005004:	08005061 	.word	0x08005061
 8005008:	08005079 	.word	0x08005079
 800500c:	08005079 	.word	0x08005079
 8005010:	08005079 	.word	0x08005079
 8005014:	08005079 	.word	0x08005079
 8005018:	08005079 	.word	0x08005079
 800501c:	08005079 	.word	0x08005079
 8005020:	08005079 	.word	0x08005079
 8005024:	08005069 	.word	0x08005069
 8005028:	08005079 	.word	0x08005079
 800502c:	08005079 	.word	0x08005079
 8005030:	08005079 	.word	0x08005079
 8005034:	08005079 	.word	0x08005079
 8005038:	08005079 	.word	0x08005079
 800503c:	08005079 	.word	0x08005079
 8005040:	08005079 	.word	0x08005079
 8005044:	08005071 	.word	0x08005071
 8005048:	2301      	movs	r3, #1
 800504a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800504e:	e326      	b.n	800569e <UART_SetConfig+0x7ae>
 8005050:	2304      	movs	r3, #4
 8005052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005056:	e322      	b.n	800569e <UART_SetConfig+0x7ae>
 8005058:	2308      	movs	r3, #8
 800505a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800505e:	e31e      	b.n	800569e <UART_SetConfig+0x7ae>
 8005060:	2310      	movs	r3, #16
 8005062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005066:	e31a      	b.n	800569e <UART_SetConfig+0x7ae>
 8005068:	2320      	movs	r3, #32
 800506a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800506e:	e316      	b.n	800569e <UART_SetConfig+0x7ae>
 8005070:	2340      	movs	r3, #64	@ 0x40
 8005072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005076:	e312      	b.n	800569e <UART_SetConfig+0x7ae>
 8005078:	2380      	movs	r3, #128	@ 0x80
 800507a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800507e:	e30e      	b.n	800569e <UART_SetConfig+0x7ae>
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a69      	ldr	r2, [pc, #420]	@ (800522c <UART_SetConfig+0x33c>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d130      	bne.n	80050ec <UART_SetConfig+0x1fc>
 800508a:	4b67      	ldr	r3, [pc, #412]	@ (8005228 <UART_SetConfig+0x338>)
 800508c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800508e:	f003 0307 	and.w	r3, r3, #7
 8005092:	2b05      	cmp	r3, #5
 8005094:	d826      	bhi.n	80050e4 <UART_SetConfig+0x1f4>
 8005096:	a201      	add	r2, pc, #4	@ (adr r2, 800509c <UART_SetConfig+0x1ac>)
 8005098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800509c:	080050b5 	.word	0x080050b5
 80050a0:	080050bd 	.word	0x080050bd
 80050a4:	080050c5 	.word	0x080050c5
 80050a8:	080050cd 	.word	0x080050cd
 80050ac:	080050d5 	.word	0x080050d5
 80050b0:	080050dd 	.word	0x080050dd
 80050b4:	2300      	movs	r3, #0
 80050b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ba:	e2f0      	b.n	800569e <UART_SetConfig+0x7ae>
 80050bc:	2304      	movs	r3, #4
 80050be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050c2:	e2ec      	b.n	800569e <UART_SetConfig+0x7ae>
 80050c4:	2308      	movs	r3, #8
 80050c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ca:	e2e8      	b.n	800569e <UART_SetConfig+0x7ae>
 80050cc:	2310      	movs	r3, #16
 80050ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050d2:	e2e4      	b.n	800569e <UART_SetConfig+0x7ae>
 80050d4:	2320      	movs	r3, #32
 80050d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050da:	e2e0      	b.n	800569e <UART_SetConfig+0x7ae>
 80050dc:	2340      	movs	r3, #64	@ 0x40
 80050de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050e2:	e2dc      	b.n	800569e <UART_SetConfig+0x7ae>
 80050e4:	2380      	movs	r3, #128	@ 0x80
 80050e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ea:	e2d8      	b.n	800569e <UART_SetConfig+0x7ae>
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a4f      	ldr	r2, [pc, #316]	@ (8005230 <UART_SetConfig+0x340>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d130      	bne.n	8005158 <UART_SetConfig+0x268>
 80050f6:	4b4c      	ldr	r3, [pc, #304]	@ (8005228 <UART_SetConfig+0x338>)
 80050f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050fa:	f003 0307 	and.w	r3, r3, #7
 80050fe:	2b05      	cmp	r3, #5
 8005100:	d826      	bhi.n	8005150 <UART_SetConfig+0x260>
 8005102:	a201      	add	r2, pc, #4	@ (adr r2, 8005108 <UART_SetConfig+0x218>)
 8005104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005108:	08005121 	.word	0x08005121
 800510c:	08005129 	.word	0x08005129
 8005110:	08005131 	.word	0x08005131
 8005114:	08005139 	.word	0x08005139
 8005118:	08005141 	.word	0x08005141
 800511c:	08005149 	.word	0x08005149
 8005120:	2300      	movs	r3, #0
 8005122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005126:	e2ba      	b.n	800569e <UART_SetConfig+0x7ae>
 8005128:	2304      	movs	r3, #4
 800512a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800512e:	e2b6      	b.n	800569e <UART_SetConfig+0x7ae>
 8005130:	2308      	movs	r3, #8
 8005132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005136:	e2b2      	b.n	800569e <UART_SetConfig+0x7ae>
 8005138:	2310      	movs	r3, #16
 800513a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800513e:	e2ae      	b.n	800569e <UART_SetConfig+0x7ae>
 8005140:	2320      	movs	r3, #32
 8005142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005146:	e2aa      	b.n	800569e <UART_SetConfig+0x7ae>
 8005148:	2340      	movs	r3, #64	@ 0x40
 800514a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800514e:	e2a6      	b.n	800569e <UART_SetConfig+0x7ae>
 8005150:	2380      	movs	r3, #128	@ 0x80
 8005152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005156:	e2a2      	b.n	800569e <UART_SetConfig+0x7ae>
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a35      	ldr	r2, [pc, #212]	@ (8005234 <UART_SetConfig+0x344>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d130      	bne.n	80051c4 <UART_SetConfig+0x2d4>
 8005162:	4b31      	ldr	r3, [pc, #196]	@ (8005228 <UART_SetConfig+0x338>)
 8005164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005166:	f003 0307 	and.w	r3, r3, #7
 800516a:	2b05      	cmp	r3, #5
 800516c:	d826      	bhi.n	80051bc <UART_SetConfig+0x2cc>
 800516e:	a201      	add	r2, pc, #4	@ (adr r2, 8005174 <UART_SetConfig+0x284>)
 8005170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005174:	0800518d 	.word	0x0800518d
 8005178:	08005195 	.word	0x08005195
 800517c:	0800519d 	.word	0x0800519d
 8005180:	080051a5 	.word	0x080051a5
 8005184:	080051ad 	.word	0x080051ad
 8005188:	080051b5 	.word	0x080051b5
 800518c:	2300      	movs	r3, #0
 800518e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005192:	e284      	b.n	800569e <UART_SetConfig+0x7ae>
 8005194:	2304      	movs	r3, #4
 8005196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800519a:	e280      	b.n	800569e <UART_SetConfig+0x7ae>
 800519c:	2308      	movs	r3, #8
 800519e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051a2:	e27c      	b.n	800569e <UART_SetConfig+0x7ae>
 80051a4:	2310      	movs	r3, #16
 80051a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051aa:	e278      	b.n	800569e <UART_SetConfig+0x7ae>
 80051ac:	2320      	movs	r3, #32
 80051ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051b2:	e274      	b.n	800569e <UART_SetConfig+0x7ae>
 80051b4:	2340      	movs	r3, #64	@ 0x40
 80051b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051ba:	e270      	b.n	800569e <UART_SetConfig+0x7ae>
 80051bc:	2380      	movs	r3, #128	@ 0x80
 80051be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051c2:	e26c      	b.n	800569e <UART_SetConfig+0x7ae>
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a1b      	ldr	r2, [pc, #108]	@ (8005238 <UART_SetConfig+0x348>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d142      	bne.n	8005254 <UART_SetConfig+0x364>
 80051ce:	4b16      	ldr	r3, [pc, #88]	@ (8005228 <UART_SetConfig+0x338>)
 80051d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051d2:	f003 0307 	and.w	r3, r3, #7
 80051d6:	2b05      	cmp	r3, #5
 80051d8:	d838      	bhi.n	800524c <UART_SetConfig+0x35c>
 80051da:	a201      	add	r2, pc, #4	@ (adr r2, 80051e0 <UART_SetConfig+0x2f0>)
 80051dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e0:	080051f9 	.word	0x080051f9
 80051e4:	08005201 	.word	0x08005201
 80051e8:	08005209 	.word	0x08005209
 80051ec:	08005211 	.word	0x08005211
 80051f0:	0800523d 	.word	0x0800523d
 80051f4:	08005245 	.word	0x08005245
 80051f8:	2300      	movs	r3, #0
 80051fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051fe:	e24e      	b.n	800569e <UART_SetConfig+0x7ae>
 8005200:	2304      	movs	r3, #4
 8005202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005206:	e24a      	b.n	800569e <UART_SetConfig+0x7ae>
 8005208:	2308      	movs	r3, #8
 800520a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800520e:	e246      	b.n	800569e <UART_SetConfig+0x7ae>
 8005210:	2310      	movs	r3, #16
 8005212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005216:	e242      	b.n	800569e <UART_SetConfig+0x7ae>
 8005218:	cfff69f3 	.word	0xcfff69f3
 800521c:	58000c00 	.word	0x58000c00
 8005220:	11fff4ff 	.word	0x11fff4ff
 8005224:	40011000 	.word	0x40011000
 8005228:	58024400 	.word	0x58024400
 800522c:	40004400 	.word	0x40004400
 8005230:	40004800 	.word	0x40004800
 8005234:	40004c00 	.word	0x40004c00
 8005238:	40005000 	.word	0x40005000
 800523c:	2320      	movs	r3, #32
 800523e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005242:	e22c      	b.n	800569e <UART_SetConfig+0x7ae>
 8005244:	2340      	movs	r3, #64	@ 0x40
 8005246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800524a:	e228      	b.n	800569e <UART_SetConfig+0x7ae>
 800524c:	2380      	movs	r3, #128	@ 0x80
 800524e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005252:	e224      	b.n	800569e <UART_SetConfig+0x7ae>
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4ab1      	ldr	r2, [pc, #708]	@ (8005520 <UART_SetConfig+0x630>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d176      	bne.n	800534c <UART_SetConfig+0x45c>
 800525e:	4bb1      	ldr	r3, [pc, #708]	@ (8005524 <UART_SetConfig+0x634>)
 8005260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005262:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005266:	2b28      	cmp	r3, #40	@ 0x28
 8005268:	d86c      	bhi.n	8005344 <UART_SetConfig+0x454>
 800526a:	a201      	add	r2, pc, #4	@ (adr r2, 8005270 <UART_SetConfig+0x380>)
 800526c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005270:	08005315 	.word	0x08005315
 8005274:	08005345 	.word	0x08005345
 8005278:	08005345 	.word	0x08005345
 800527c:	08005345 	.word	0x08005345
 8005280:	08005345 	.word	0x08005345
 8005284:	08005345 	.word	0x08005345
 8005288:	08005345 	.word	0x08005345
 800528c:	08005345 	.word	0x08005345
 8005290:	0800531d 	.word	0x0800531d
 8005294:	08005345 	.word	0x08005345
 8005298:	08005345 	.word	0x08005345
 800529c:	08005345 	.word	0x08005345
 80052a0:	08005345 	.word	0x08005345
 80052a4:	08005345 	.word	0x08005345
 80052a8:	08005345 	.word	0x08005345
 80052ac:	08005345 	.word	0x08005345
 80052b0:	08005325 	.word	0x08005325
 80052b4:	08005345 	.word	0x08005345
 80052b8:	08005345 	.word	0x08005345
 80052bc:	08005345 	.word	0x08005345
 80052c0:	08005345 	.word	0x08005345
 80052c4:	08005345 	.word	0x08005345
 80052c8:	08005345 	.word	0x08005345
 80052cc:	08005345 	.word	0x08005345
 80052d0:	0800532d 	.word	0x0800532d
 80052d4:	08005345 	.word	0x08005345
 80052d8:	08005345 	.word	0x08005345
 80052dc:	08005345 	.word	0x08005345
 80052e0:	08005345 	.word	0x08005345
 80052e4:	08005345 	.word	0x08005345
 80052e8:	08005345 	.word	0x08005345
 80052ec:	08005345 	.word	0x08005345
 80052f0:	08005335 	.word	0x08005335
 80052f4:	08005345 	.word	0x08005345
 80052f8:	08005345 	.word	0x08005345
 80052fc:	08005345 	.word	0x08005345
 8005300:	08005345 	.word	0x08005345
 8005304:	08005345 	.word	0x08005345
 8005308:	08005345 	.word	0x08005345
 800530c:	08005345 	.word	0x08005345
 8005310:	0800533d 	.word	0x0800533d
 8005314:	2301      	movs	r3, #1
 8005316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800531a:	e1c0      	b.n	800569e <UART_SetConfig+0x7ae>
 800531c:	2304      	movs	r3, #4
 800531e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005322:	e1bc      	b.n	800569e <UART_SetConfig+0x7ae>
 8005324:	2308      	movs	r3, #8
 8005326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800532a:	e1b8      	b.n	800569e <UART_SetConfig+0x7ae>
 800532c:	2310      	movs	r3, #16
 800532e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005332:	e1b4      	b.n	800569e <UART_SetConfig+0x7ae>
 8005334:	2320      	movs	r3, #32
 8005336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800533a:	e1b0      	b.n	800569e <UART_SetConfig+0x7ae>
 800533c:	2340      	movs	r3, #64	@ 0x40
 800533e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005342:	e1ac      	b.n	800569e <UART_SetConfig+0x7ae>
 8005344:	2380      	movs	r3, #128	@ 0x80
 8005346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800534a:	e1a8      	b.n	800569e <UART_SetConfig+0x7ae>
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a75      	ldr	r2, [pc, #468]	@ (8005528 <UART_SetConfig+0x638>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d130      	bne.n	80053b8 <UART_SetConfig+0x4c8>
 8005356:	4b73      	ldr	r3, [pc, #460]	@ (8005524 <UART_SetConfig+0x634>)
 8005358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800535a:	f003 0307 	and.w	r3, r3, #7
 800535e:	2b05      	cmp	r3, #5
 8005360:	d826      	bhi.n	80053b0 <UART_SetConfig+0x4c0>
 8005362:	a201      	add	r2, pc, #4	@ (adr r2, 8005368 <UART_SetConfig+0x478>)
 8005364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005368:	08005381 	.word	0x08005381
 800536c:	08005389 	.word	0x08005389
 8005370:	08005391 	.word	0x08005391
 8005374:	08005399 	.word	0x08005399
 8005378:	080053a1 	.word	0x080053a1
 800537c:	080053a9 	.word	0x080053a9
 8005380:	2300      	movs	r3, #0
 8005382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005386:	e18a      	b.n	800569e <UART_SetConfig+0x7ae>
 8005388:	2304      	movs	r3, #4
 800538a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800538e:	e186      	b.n	800569e <UART_SetConfig+0x7ae>
 8005390:	2308      	movs	r3, #8
 8005392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005396:	e182      	b.n	800569e <UART_SetConfig+0x7ae>
 8005398:	2310      	movs	r3, #16
 800539a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800539e:	e17e      	b.n	800569e <UART_SetConfig+0x7ae>
 80053a0:	2320      	movs	r3, #32
 80053a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053a6:	e17a      	b.n	800569e <UART_SetConfig+0x7ae>
 80053a8:	2340      	movs	r3, #64	@ 0x40
 80053aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ae:	e176      	b.n	800569e <UART_SetConfig+0x7ae>
 80053b0:	2380      	movs	r3, #128	@ 0x80
 80053b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053b6:	e172      	b.n	800569e <UART_SetConfig+0x7ae>
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a5b      	ldr	r2, [pc, #364]	@ (800552c <UART_SetConfig+0x63c>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d130      	bne.n	8005424 <UART_SetConfig+0x534>
 80053c2:	4b58      	ldr	r3, [pc, #352]	@ (8005524 <UART_SetConfig+0x634>)
 80053c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053c6:	f003 0307 	and.w	r3, r3, #7
 80053ca:	2b05      	cmp	r3, #5
 80053cc:	d826      	bhi.n	800541c <UART_SetConfig+0x52c>
 80053ce:	a201      	add	r2, pc, #4	@ (adr r2, 80053d4 <UART_SetConfig+0x4e4>)
 80053d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d4:	080053ed 	.word	0x080053ed
 80053d8:	080053f5 	.word	0x080053f5
 80053dc:	080053fd 	.word	0x080053fd
 80053e0:	08005405 	.word	0x08005405
 80053e4:	0800540d 	.word	0x0800540d
 80053e8:	08005415 	.word	0x08005415
 80053ec:	2300      	movs	r3, #0
 80053ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053f2:	e154      	b.n	800569e <UART_SetConfig+0x7ae>
 80053f4:	2304      	movs	r3, #4
 80053f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053fa:	e150      	b.n	800569e <UART_SetConfig+0x7ae>
 80053fc:	2308      	movs	r3, #8
 80053fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005402:	e14c      	b.n	800569e <UART_SetConfig+0x7ae>
 8005404:	2310      	movs	r3, #16
 8005406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800540a:	e148      	b.n	800569e <UART_SetConfig+0x7ae>
 800540c:	2320      	movs	r3, #32
 800540e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005412:	e144      	b.n	800569e <UART_SetConfig+0x7ae>
 8005414:	2340      	movs	r3, #64	@ 0x40
 8005416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800541a:	e140      	b.n	800569e <UART_SetConfig+0x7ae>
 800541c:	2380      	movs	r3, #128	@ 0x80
 800541e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005422:	e13c      	b.n	800569e <UART_SetConfig+0x7ae>
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a41      	ldr	r2, [pc, #260]	@ (8005530 <UART_SetConfig+0x640>)
 800542a:	4293      	cmp	r3, r2
 800542c:	f040 8082 	bne.w	8005534 <UART_SetConfig+0x644>
 8005430:	4b3c      	ldr	r3, [pc, #240]	@ (8005524 <UART_SetConfig+0x634>)
 8005432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005434:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005438:	2b28      	cmp	r3, #40	@ 0x28
 800543a:	d86d      	bhi.n	8005518 <UART_SetConfig+0x628>
 800543c:	a201      	add	r2, pc, #4	@ (adr r2, 8005444 <UART_SetConfig+0x554>)
 800543e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005442:	bf00      	nop
 8005444:	080054e9 	.word	0x080054e9
 8005448:	08005519 	.word	0x08005519
 800544c:	08005519 	.word	0x08005519
 8005450:	08005519 	.word	0x08005519
 8005454:	08005519 	.word	0x08005519
 8005458:	08005519 	.word	0x08005519
 800545c:	08005519 	.word	0x08005519
 8005460:	08005519 	.word	0x08005519
 8005464:	080054f1 	.word	0x080054f1
 8005468:	08005519 	.word	0x08005519
 800546c:	08005519 	.word	0x08005519
 8005470:	08005519 	.word	0x08005519
 8005474:	08005519 	.word	0x08005519
 8005478:	08005519 	.word	0x08005519
 800547c:	08005519 	.word	0x08005519
 8005480:	08005519 	.word	0x08005519
 8005484:	080054f9 	.word	0x080054f9
 8005488:	08005519 	.word	0x08005519
 800548c:	08005519 	.word	0x08005519
 8005490:	08005519 	.word	0x08005519
 8005494:	08005519 	.word	0x08005519
 8005498:	08005519 	.word	0x08005519
 800549c:	08005519 	.word	0x08005519
 80054a0:	08005519 	.word	0x08005519
 80054a4:	08005501 	.word	0x08005501
 80054a8:	08005519 	.word	0x08005519
 80054ac:	08005519 	.word	0x08005519
 80054b0:	08005519 	.word	0x08005519
 80054b4:	08005519 	.word	0x08005519
 80054b8:	08005519 	.word	0x08005519
 80054bc:	08005519 	.word	0x08005519
 80054c0:	08005519 	.word	0x08005519
 80054c4:	08005509 	.word	0x08005509
 80054c8:	08005519 	.word	0x08005519
 80054cc:	08005519 	.word	0x08005519
 80054d0:	08005519 	.word	0x08005519
 80054d4:	08005519 	.word	0x08005519
 80054d8:	08005519 	.word	0x08005519
 80054dc:	08005519 	.word	0x08005519
 80054e0:	08005519 	.word	0x08005519
 80054e4:	08005511 	.word	0x08005511
 80054e8:	2301      	movs	r3, #1
 80054ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ee:	e0d6      	b.n	800569e <UART_SetConfig+0x7ae>
 80054f0:	2304      	movs	r3, #4
 80054f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054f6:	e0d2      	b.n	800569e <UART_SetConfig+0x7ae>
 80054f8:	2308      	movs	r3, #8
 80054fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054fe:	e0ce      	b.n	800569e <UART_SetConfig+0x7ae>
 8005500:	2310      	movs	r3, #16
 8005502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005506:	e0ca      	b.n	800569e <UART_SetConfig+0x7ae>
 8005508:	2320      	movs	r3, #32
 800550a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800550e:	e0c6      	b.n	800569e <UART_SetConfig+0x7ae>
 8005510:	2340      	movs	r3, #64	@ 0x40
 8005512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005516:	e0c2      	b.n	800569e <UART_SetConfig+0x7ae>
 8005518:	2380      	movs	r3, #128	@ 0x80
 800551a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800551e:	e0be      	b.n	800569e <UART_SetConfig+0x7ae>
 8005520:	40011400 	.word	0x40011400
 8005524:	58024400 	.word	0x58024400
 8005528:	40007800 	.word	0x40007800
 800552c:	40007c00 	.word	0x40007c00
 8005530:	40011800 	.word	0x40011800
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4aad      	ldr	r2, [pc, #692]	@ (80057f0 <UART_SetConfig+0x900>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d176      	bne.n	800562c <UART_SetConfig+0x73c>
 800553e:	4bad      	ldr	r3, [pc, #692]	@ (80057f4 <UART_SetConfig+0x904>)
 8005540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005542:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005546:	2b28      	cmp	r3, #40	@ 0x28
 8005548:	d86c      	bhi.n	8005624 <UART_SetConfig+0x734>
 800554a:	a201      	add	r2, pc, #4	@ (adr r2, 8005550 <UART_SetConfig+0x660>)
 800554c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005550:	080055f5 	.word	0x080055f5
 8005554:	08005625 	.word	0x08005625
 8005558:	08005625 	.word	0x08005625
 800555c:	08005625 	.word	0x08005625
 8005560:	08005625 	.word	0x08005625
 8005564:	08005625 	.word	0x08005625
 8005568:	08005625 	.word	0x08005625
 800556c:	08005625 	.word	0x08005625
 8005570:	080055fd 	.word	0x080055fd
 8005574:	08005625 	.word	0x08005625
 8005578:	08005625 	.word	0x08005625
 800557c:	08005625 	.word	0x08005625
 8005580:	08005625 	.word	0x08005625
 8005584:	08005625 	.word	0x08005625
 8005588:	08005625 	.word	0x08005625
 800558c:	08005625 	.word	0x08005625
 8005590:	08005605 	.word	0x08005605
 8005594:	08005625 	.word	0x08005625
 8005598:	08005625 	.word	0x08005625
 800559c:	08005625 	.word	0x08005625
 80055a0:	08005625 	.word	0x08005625
 80055a4:	08005625 	.word	0x08005625
 80055a8:	08005625 	.word	0x08005625
 80055ac:	08005625 	.word	0x08005625
 80055b0:	0800560d 	.word	0x0800560d
 80055b4:	08005625 	.word	0x08005625
 80055b8:	08005625 	.word	0x08005625
 80055bc:	08005625 	.word	0x08005625
 80055c0:	08005625 	.word	0x08005625
 80055c4:	08005625 	.word	0x08005625
 80055c8:	08005625 	.word	0x08005625
 80055cc:	08005625 	.word	0x08005625
 80055d0:	08005615 	.word	0x08005615
 80055d4:	08005625 	.word	0x08005625
 80055d8:	08005625 	.word	0x08005625
 80055dc:	08005625 	.word	0x08005625
 80055e0:	08005625 	.word	0x08005625
 80055e4:	08005625 	.word	0x08005625
 80055e8:	08005625 	.word	0x08005625
 80055ec:	08005625 	.word	0x08005625
 80055f0:	0800561d 	.word	0x0800561d
 80055f4:	2301      	movs	r3, #1
 80055f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055fa:	e050      	b.n	800569e <UART_SetConfig+0x7ae>
 80055fc:	2304      	movs	r3, #4
 80055fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005602:	e04c      	b.n	800569e <UART_SetConfig+0x7ae>
 8005604:	2308      	movs	r3, #8
 8005606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800560a:	e048      	b.n	800569e <UART_SetConfig+0x7ae>
 800560c:	2310      	movs	r3, #16
 800560e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005612:	e044      	b.n	800569e <UART_SetConfig+0x7ae>
 8005614:	2320      	movs	r3, #32
 8005616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800561a:	e040      	b.n	800569e <UART_SetConfig+0x7ae>
 800561c:	2340      	movs	r3, #64	@ 0x40
 800561e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005622:	e03c      	b.n	800569e <UART_SetConfig+0x7ae>
 8005624:	2380      	movs	r3, #128	@ 0x80
 8005626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800562a:	e038      	b.n	800569e <UART_SetConfig+0x7ae>
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a71      	ldr	r2, [pc, #452]	@ (80057f8 <UART_SetConfig+0x908>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d130      	bne.n	8005698 <UART_SetConfig+0x7a8>
 8005636:	4b6f      	ldr	r3, [pc, #444]	@ (80057f4 <UART_SetConfig+0x904>)
 8005638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800563a:	f003 0307 	and.w	r3, r3, #7
 800563e:	2b05      	cmp	r3, #5
 8005640:	d826      	bhi.n	8005690 <UART_SetConfig+0x7a0>
 8005642:	a201      	add	r2, pc, #4	@ (adr r2, 8005648 <UART_SetConfig+0x758>)
 8005644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005648:	08005661 	.word	0x08005661
 800564c:	08005669 	.word	0x08005669
 8005650:	08005671 	.word	0x08005671
 8005654:	08005679 	.word	0x08005679
 8005658:	08005681 	.word	0x08005681
 800565c:	08005689 	.word	0x08005689
 8005660:	2302      	movs	r3, #2
 8005662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005666:	e01a      	b.n	800569e <UART_SetConfig+0x7ae>
 8005668:	2304      	movs	r3, #4
 800566a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800566e:	e016      	b.n	800569e <UART_SetConfig+0x7ae>
 8005670:	2308      	movs	r3, #8
 8005672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005676:	e012      	b.n	800569e <UART_SetConfig+0x7ae>
 8005678:	2310      	movs	r3, #16
 800567a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800567e:	e00e      	b.n	800569e <UART_SetConfig+0x7ae>
 8005680:	2320      	movs	r3, #32
 8005682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005686:	e00a      	b.n	800569e <UART_SetConfig+0x7ae>
 8005688:	2340      	movs	r3, #64	@ 0x40
 800568a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800568e:	e006      	b.n	800569e <UART_SetConfig+0x7ae>
 8005690:	2380      	movs	r3, #128	@ 0x80
 8005692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005696:	e002      	b.n	800569e <UART_SetConfig+0x7ae>
 8005698:	2380      	movs	r3, #128	@ 0x80
 800569a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a55      	ldr	r2, [pc, #340]	@ (80057f8 <UART_SetConfig+0x908>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	f040 80f8 	bne.w	800589a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056aa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80056ae:	2b20      	cmp	r3, #32
 80056b0:	dc46      	bgt.n	8005740 <UART_SetConfig+0x850>
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	db75      	blt.n	80057a2 <UART_SetConfig+0x8b2>
 80056b6:	3b02      	subs	r3, #2
 80056b8:	2b1e      	cmp	r3, #30
 80056ba:	d872      	bhi.n	80057a2 <UART_SetConfig+0x8b2>
 80056bc:	a201      	add	r2, pc, #4	@ (adr r2, 80056c4 <UART_SetConfig+0x7d4>)
 80056be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c2:	bf00      	nop
 80056c4:	08005747 	.word	0x08005747
 80056c8:	080057a3 	.word	0x080057a3
 80056cc:	0800574f 	.word	0x0800574f
 80056d0:	080057a3 	.word	0x080057a3
 80056d4:	080057a3 	.word	0x080057a3
 80056d8:	080057a3 	.word	0x080057a3
 80056dc:	0800575f 	.word	0x0800575f
 80056e0:	080057a3 	.word	0x080057a3
 80056e4:	080057a3 	.word	0x080057a3
 80056e8:	080057a3 	.word	0x080057a3
 80056ec:	080057a3 	.word	0x080057a3
 80056f0:	080057a3 	.word	0x080057a3
 80056f4:	080057a3 	.word	0x080057a3
 80056f8:	080057a3 	.word	0x080057a3
 80056fc:	0800576f 	.word	0x0800576f
 8005700:	080057a3 	.word	0x080057a3
 8005704:	080057a3 	.word	0x080057a3
 8005708:	080057a3 	.word	0x080057a3
 800570c:	080057a3 	.word	0x080057a3
 8005710:	080057a3 	.word	0x080057a3
 8005714:	080057a3 	.word	0x080057a3
 8005718:	080057a3 	.word	0x080057a3
 800571c:	080057a3 	.word	0x080057a3
 8005720:	080057a3 	.word	0x080057a3
 8005724:	080057a3 	.word	0x080057a3
 8005728:	080057a3 	.word	0x080057a3
 800572c:	080057a3 	.word	0x080057a3
 8005730:	080057a3 	.word	0x080057a3
 8005734:	080057a3 	.word	0x080057a3
 8005738:	080057a3 	.word	0x080057a3
 800573c:	08005795 	.word	0x08005795
 8005740:	2b40      	cmp	r3, #64	@ 0x40
 8005742:	d02a      	beq.n	800579a <UART_SetConfig+0x8aa>
 8005744:	e02d      	b.n	80057a2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005746:	f7fe f8e7 	bl	8003918 <HAL_RCCEx_GetD3PCLK1Freq>
 800574a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800574c:	e02f      	b.n	80057ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800574e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005752:	4618      	mov	r0, r3
 8005754:	f7fe f8f6 	bl	8003944 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800575a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800575c:	e027      	b.n	80057ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800575e:	f107 0318 	add.w	r3, r7, #24
 8005762:	4618      	mov	r0, r3
 8005764:	f7fe fa42 	bl	8003bec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800576c:	e01f      	b.n	80057ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800576e:	4b21      	ldr	r3, [pc, #132]	@ (80057f4 <UART_SetConfig+0x904>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0320 	and.w	r3, r3, #32
 8005776:	2b00      	cmp	r3, #0
 8005778:	d009      	beq.n	800578e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800577a:	4b1e      	ldr	r3, [pc, #120]	@ (80057f4 <UART_SetConfig+0x904>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	08db      	lsrs	r3, r3, #3
 8005780:	f003 0303 	and.w	r3, r3, #3
 8005784:	4a1d      	ldr	r2, [pc, #116]	@ (80057fc <UART_SetConfig+0x90c>)
 8005786:	fa22 f303 	lsr.w	r3, r2, r3
 800578a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800578c:	e00f      	b.n	80057ae <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800578e:	4b1b      	ldr	r3, [pc, #108]	@ (80057fc <UART_SetConfig+0x90c>)
 8005790:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005792:	e00c      	b.n	80057ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005794:	4b1a      	ldr	r3, [pc, #104]	@ (8005800 <UART_SetConfig+0x910>)
 8005796:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005798:	e009      	b.n	80057ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800579a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800579e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057a0:	e005      	b.n	80057ae <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80057a2:	2300      	movs	r3, #0
 80057a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80057ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80057ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	f000 81ee 	beq.w	8005b92 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ba:	4a12      	ldr	r2, [pc, #72]	@ (8005804 <UART_SetConfig+0x914>)
 80057bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057c0:	461a      	mov	r2, r3
 80057c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80057c8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	685a      	ldr	r2, [r3, #4]
 80057ce:	4613      	mov	r3, r2
 80057d0:	005b      	lsls	r3, r3, #1
 80057d2:	4413      	add	r3, r2
 80057d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d305      	bcc.n	80057e6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d910      	bls.n	8005808 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80057ec:	e1d1      	b.n	8005b92 <UART_SetConfig+0xca2>
 80057ee:	bf00      	nop
 80057f0:	40011c00 	.word	0x40011c00
 80057f4:	58024400 	.word	0x58024400
 80057f8:	58000c00 	.word	0x58000c00
 80057fc:	03d09000 	.word	0x03d09000
 8005800:	003d0900 	.word	0x003d0900
 8005804:	08007164 	.word	0x08007164
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005808:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800580a:	2200      	movs	r2, #0
 800580c:	60bb      	str	r3, [r7, #8]
 800580e:	60fa      	str	r2, [r7, #12]
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005814:	4ac0      	ldr	r2, [pc, #768]	@ (8005b18 <UART_SetConfig+0xc28>)
 8005816:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800581a:	b29b      	uxth	r3, r3
 800581c:	2200      	movs	r2, #0
 800581e:	603b      	str	r3, [r7, #0]
 8005820:	607a      	str	r2, [r7, #4]
 8005822:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005826:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800582a:	f7fa fdc1 	bl	80003b0 <__aeabi_uldivmod>
 800582e:	4602      	mov	r2, r0
 8005830:	460b      	mov	r3, r1
 8005832:	4610      	mov	r0, r2
 8005834:	4619      	mov	r1, r3
 8005836:	f04f 0200 	mov.w	r2, #0
 800583a:	f04f 0300 	mov.w	r3, #0
 800583e:	020b      	lsls	r3, r1, #8
 8005840:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005844:	0202      	lsls	r2, r0, #8
 8005846:	6979      	ldr	r1, [r7, #20]
 8005848:	6849      	ldr	r1, [r1, #4]
 800584a:	0849      	lsrs	r1, r1, #1
 800584c:	2000      	movs	r0, #0
 800584e:	460c      	mov	r4, r1
 8005850:	4605      	mov	r5, r0
 8005852:	eb12 0804 	adds.w	r8, r2, r4
 8005856:	eb43 0905 	adc.w	r9, r3, r5
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	469a      	mov	sl, r3
 8005862:	4693      	mov	fp, r2
 8005864:	4652      	mov	r2, sl
 8005866:	465b      	mov	r3, fp
 8005868:	4640      	mov	r0, r8
 800586a:	4649      	mov	r1, r9
 800586c:	f7fa fda0 	bl	80003b0 <__aeabi_uldivmod>
 8005870:	4602      	mov	r2, r0
 8005872:	460b      	mov	r3, r1
 8005874:	4613      	mov	r3, r2
 8005876:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800587a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800587e:	d308      	bcc.n	8005892 <UART_SetConfig+0x9a2>
 8005880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005882:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005886:	d204      	bcs.n	8005892 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800588e:	60da      	str	r2, [r3, #12]
 8005890:	e17f      	b.n	8005b92 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005898:	e17b      	b.n	8005b92 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	69db      	ldr	r3, [r3, #28]
 800589e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058a2:	f040 80bd 	bne.w	8005a20 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80058a6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80058aa:	2b20      	cmp	r3, #32
 80058ac:	dc48      	bgt.n	8005940 <UART_SetConfig+0xa50>
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	db7b      	blt.n	80059aa <UART_SetConfig+0xaba>
 80058b2:	2b20      	cmp	r3, #32
 80058b4:	d879      	bhi.n	80059aa <UART_SetConfig+0xaba>
 80058b6:	a201      	add	r2, pc, #4	@ (adr r2, 80058bc <UART_SetConfig+0x9cc>)
 80058b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058bc:	08005947 	.word	0x08005947
 80058c0:	0800594f 	.word	0x0800594f
 80058c4:	080059ab 	.word	0x080059ab
 80058c8:	080059ab 	.word	0x080059ab
 80058cc:	08005957 	.word	0x08005957
 80058d0:	080059ab 	.word	0x080059ab
 80058d4:	080059ab 	.word	0x080059ab
 80058d8:	080059ab 	.word	0x080059ab
 80058dc:	08005967 	.word	0x08005967
 80058e0:	080059ab 	.word	0x080059ab
 80058e4:	080059ab 	.word	0x080059ab
 80058e8:	080059ab 	.word	0x080059ab
 80058ec:	080059ab 	.word	0x080059ab
 80058f0:	080059ab 	.word	0x080059ab
 80058f4:	080059ab 	.word	0x080059ab
 80058f8:	080059ab 	.word	0x080059ab
 80058fc:	08005977 	.word	0x08005977
 8005900:	080059ab 	.word	0x080059ab
 8005904:	080059ab 	.word	0x080059ab
 8005908:	080059ab 	.word	0x080059ab
 800590c:	080059ab 	.word	0x080059ab
 8005910:	080059ab 	.word	0x080059ab
 8005914:	080059ab 	.word	0x080059ab
 8005918:	080059ab 	.word	0x080059ab
 800591c:	080059ab 	.word	0x080059ab
 8005920:	080059ab 	.word	0x080059ab
 8005924:	080059ab 	.word	0x080059ab
 8005928:	080059ab 	.word	0x080059ab
 800592c:	080059ab 	.word	0x080059ab
 8005930:	080059ab 	.word	0x080059ab
 8005934:	080059ab 	.word	0x080059ab
 8005938:	080059ab 	.word	0x080059ab
 800593c:	0800599d 	.word	0x0800599d
 8005940:	2b40      	cmp	r3, #64	@ 0x40
 8005942:	d02e      	beq.n	80059a2 <UART_SetConfig+0xab2>
 8005944:	e031      	b.n	80059aa <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005946:	f7fc fe1b 	bl	8002580 <HAL_RCC_GetPCLK1Freq>
 800594a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800594c:	e033      	b.n	80059b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800594e:	f7fc fe2d 	bl	80025ac <HAL_RCC_GetPCLK2Freq>
 8005952:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005954:	e02f      	b.n	80059b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005956:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800595a:	4618      	mov	r0, r3
 800595c:	f7fd fff2 	bl	8003944 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005962:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005964:	e027      	b.n	80059b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005966:	f107 0318 	add.w	r3, r7, #24
 800596a:	4618      	mov	r0, r3
 800596c:	f7fe f93e 	bl	8003bec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005974:	e01f      	b.n	80059b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005976:	4b69      	ldr	r3, [pc, #420]	@ (8005b1c <UART_SetConfig+0xc2c>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0320 	and.w	r3, r3, #32
 800597e:	2b00      	cmp	r3, #0
 8005980:	d009      	beq.n	8005996 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005982:	4b66      	ldr	r3, [pc, #408]	@ (8005b1c <UART_SetConfig+0xc2c>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	08db      	lsrs	r3, r3, #3
 8005988:	f003 0303 	and.w	r3, r3, #3
 800598c:	4a64      	ldr	r2, [pc, #400]	@ (8005b20 <UART_SetConfig+0xc30>)
 800598e:	fa22 f303 	lsr.w	r3, r2, r3
 8005992:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005994:	e00f      	b.n	80059b6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8005996:	4b62      	ldr	r3, [pc, #392]	@ (8005b20 <UART_SetConfig+0xc30>)
 8005998:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800599a:	e00c      	b.n	80059b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800599c:	4b61      	ldr	r3, [pc, #388]	@ (8005b24 <UART_SetConfig+0xc34>)
 800599e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059a0:	e009      	b.n	80059b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059a8:	e005      	b.n	80059b6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80059aa:	2300      	movs	r3, #0
 80059ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80059b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f000 80ea 	beq.w	8005b92 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c2:	4a55      	ldr	r2, [pc, #340]	@ (8005b18 <UART_SetConfig+0xc28>)
 80059c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059c8:	461a      	mov	r2, r3
 80059ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80059d0:	005a      	lsls	r2, r3, #1
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	085b      	lsrs	r3, r3, #1
 80059d8:	441a      	add	r2, r3
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059e6:	2b0f      	cmp	r3, #15
 80059e8:	d916      	bls.n	8005a18 <UART_SetConfig+0xb28>
 80059ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059f0:	d212      	bcs.n	8005a18 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	f023 030f 	bic.w	r3, r3, #15
 80059fa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059fe:	085b      	lsrs	r3, r3, #1
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	f003 0307 	and.w	r3, r3, #7
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005a14:	60da      	str	r2, [r3, #12]
 8005a16:	e0bc      	b.n	8005b92 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005a1e:	e0b8      	b.n	8005b92 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a20:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005a24:	2b20      	cmp	r3, #32
 8005a26:	dc4b      	bgt.n	8005ac0 <UART_SetConfig+0xbd0>
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f2c0 8087 	blt.w	8005b3c <UART_SetConfig+0xc4c>
 8005a2e:	2b20      	cmp	r3, #32
 8005a30:	f200 8084 	bhi.w	8005b3c <UART_SetConfig+0xc4c>
 8005a34:	a201      	add	r2, pc, #4	@ (adr r2, 8005a3c <UART_SetConfig+0xb4c>)
 8005a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a3a:	bf00      	nop
 8005a3c:	08005ac7 	.word	0x08005ac7
 8005a40:	08005acf 	.word	0x08005acf
 8005a44:	08005b3d 	.word	0x08005b3d
 8005a48:	08005b3d 	.word	0x08005b3d
 8005a4c:	08005ad7 	.word	0x08005ad7
 8005a50:	08005b3d 	.word	0x08005b3d
 8005a54:	08005b3d 	.word	0x08005b3d
 8005a58:	08005b3d 	.word	0x08005b3d
 8005a5c:	08005ae7 	.word	0x08005ae7
 8005a60:	08005b3d 	.word	0x08005b3d
 8005a64:	08005b3d 	.word	0x08005b3d
 8005a68:	08005b3d 	.word	0x08005b3d
 8005a6c:	08005b3d 	.word	0x08005b3d
 8005a70:	08005b3d 	.word	0x08005b3d
 8005a74:	08005b3d 	.word	0x08005b3d
 8005a78:	08005b3d 	.word	0x08005b3d
 8005a7c:	08005af7 	.word	0x08005af7
 8005a80:	08005b3d 	.word	0x08005b3d
 8005a84:	08005b3d 	.word	0x08005b3d
 8005a88:	08005b3d 	.word	0x08005b3d
 8005a8c:	08005b3d 	.word	0x08005b3d
 8005a90:	08005b3d 	.word	0x08005b3d
 8005a94:	08005b3d 	.word	0x08005b3d
 8005a98:	08005b3d 	.word	0x08005b3d
 8005a9c:	08005b3d 	.word	0x08005b3d
 8005aa0:	08005b3d 	.word	0x08005b3d
 8005aa4:	08005b3d 	.word	0x08005b3d
 8005aa8:	08005b3d 	.word	0x08005b3d
 8005aac:	08005b3d 	.word	0x08005b3d
 8005ab0:	08005b3d 	.word	0x08005b3d
 8005ab4:	08005b3d 	.word	0x08005b3d
 8005ab8:	08005b3d 	.word	0x08005b3d
 8005abc:	08005b2f 	.word	0x08005b2f
 8005ac0:	2b40      	cmp	r3, #64	@ 0x40
 8005ac2:	d037      	beq.n	8005b34 <UART_SetConfig+0xc44>
 8005ac4:	e03a      	b.n	8005b3c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ac6:	f7fc fd5b 	bl	8002580 <HAL_RCC_GetPCLK1Freq>
 8005aca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005acc:	e03c      	b.n	8005b48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ace:	f7fc fd6d 	bl	80025ac <HAL_RCC_GetPCLK2Freq>
 8005ad2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005ad4:	e038      	b.n	8005b48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ad6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7fd ff32 	bl	8003944 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ae4:	e030      	b.n	8005b48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ae6:	f107 0318 	add.w	r3, r7, #24
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7fe f87e 	bl	8003bec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005af4:	e028      	b.n	8005b48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005af6:	4b09      	ldr	r3, [pc, #36]	@ (8005b1c <UART_SetConfig+0xc2c>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0320 	and.w	r3, r3, #32
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d012      	beq.n	8005b28 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005b02:	4b06      	ldr	r3, [pc, #24]	@ (8005b1c <UART_SetConfig+0xc2c>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	08db      	lsrs	r3, r3, #3
 8005b08:	f003 0303 	and.w	r3, r3, #3
 8005b0c:	4a04      	ldr	r2, [pc, #16]	@ (8005b20 <UART_SetConfig+0xc30>)
 8005b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b14:	e018      	b.n	8005b48 <UART_SetConfig+0xc58>
 8005b16:	bf00      	nop
 8005b18:	08007164 	.word	0x08007164
 8005b1c:	58024400 	.word	0x58024400
 8005b20:	03d09000 	.word	0x03d09000
 8005b24:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8005b28:	4b24      	ldr	r3, [pc, #144]	@ (8005bbc <UART_SetConfig+0xccc>)
 8005b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b2c:	e00c      	b.n	8005b48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005b2e:	4b24      	ldr	r3, [pc, #144]	@ (8005bc0 <UART_SetConfig+0xcd0>)
 8005b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b32:	e009      	b.n	8005b48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b3a:	e005      	b.n	8005b48 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005b46:	bf00      	nop
    }

    if (pclk != 0U)
 8005b48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d021      	beq.n	8005b92 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b52:	4a1c      	ldr	r2, [pc, #112]	@ (8005bc4 <UART_SetConfig+0xcd4>)
 8005b54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b58:	461a      	mov	r2, r3
 8005b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b5c:	fbb3 f2f2 	udiv	r2, r3, r2
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	085b      	lsrs	r3, r3, #1
 8005b66:	441a      	add	r2, r3
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b70:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b74:	2b0f      	cmp	r3, #15
 8005b76:	d909      	bls.n	8005b8c <UART_SetConfig+0xc9c>
 8005b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b7e:	d205      	bcs.n	8005b8c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	60da      	str	r2, [r3, #12]
 8005b8a:	e002      	b.n	8005b92 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	2200      	movs	r2, #0
 8005bac:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005bae:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3748      	adds	r7, #72	@ 0x48
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bbc:	03d09000 	.word	0x03d09000
 8005bc0:	003d0900 	.word	0x003d0900
 8005bc4:	08007164 	.word	0x08007164

08005bc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd4:	f003 0308 	and.w	r3, r3, #8
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00a      	beq.n	8005bf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00a      	beq.n	8005c14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	430a      	orrs	r2, r1
 8005c12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c18:	f003 0302 	and.w	r3, r3, #2
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d00a      	beq.n	8005c36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	430a      	orrs	r2, r1
 8005c34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c3a:	f003 0304 	and.w	r3, r3, #4
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00a      	beq.n	8005c58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	430a      	orrs	r2, r1
 8005c56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c5c:	f003 0310 	and.w	r3, r3, #16
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00a      	beq.n	8005c7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c7e:	f003 0320 	and.w	r3, r3, #32
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00a      	beq.n	8005c9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d01a      	beq.n	8005cde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cc6:	d10a      	bne.n	8005cde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00a      	beq.n	8005d00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	605a      	str	r2, [r3, #4]
  }
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b098      	sub	sp, #96	@ 0x60
 8005d10:	af02      	add	r7, sp, #8
 8005d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d1c:	f7fb f954 	bl	8000fc8 <HAL_GetTick>
 8005d20:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0308 	and.w	r3, r3, #8
 8005d2c:	2b08      	cmp	r3, #8
 8005d2e:	d12f      	bne.n	8005d90 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d34:	9300      	str	r3, [sp, #0]
 8005d36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 f88e 	bl	8005e60 <UART_WaitOnFlagUntilTimeout>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d022      	beq.n	8005d90 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d52:	e853 3f00 	ldrex	r3, [r3]
 8005d56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	461a      	mov	r2, r3
 8005d66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d68:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d6a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d70:	e841 2300 	strex	r3, r2, [r1]
 8005d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d1e6      	bne.n	8005d4a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2220      	movs	r2, #32
 8005d80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	e063      	b.n	8005e58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0304 	and.w	r3, r3, #4
 8005d9a:	2b04      	cmp	r3, #4
 8005d9c:	d149      	bne.n	8005e32 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d9e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005da2:	9300      	str	r3, [sp, #0]
 8005da4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005da6:	2200      	movs	r2, #0
 8005da8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 f857 	bl	8005e60 <UART_WaitOnFlagUntilTimeout>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d03c      	beq.n	8005e32 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc0:	e853 3f00 	ldrex	r3, [r3]
 8005dc4:	623b      	str	r3, [r7, #32]
   return(result);
 8005dc6:	6a3b      	ldr	r3, [r7, #32]
 8005dc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005dcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dd6:	633b      	str	r3, [r7, #48]	@ 0x30
 8005dd8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ddc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005dde:	e841 2300 	strex	r3, r2, [r1]
 8005de2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1e6      	bne.n	8005db8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	3308      	adds	r3, #8
 8005df0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	e853 3f00 	ldrex	r3, [r3]
 8005df8:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f023 0301 	bic.w	r3, r3, #1
 8005e00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	3308      	adds	r3, #8
 8005e08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e0a:	61fa      	str	r2, [r7, #28]
 8005e0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0e:	69b9      	ldr	r1, [r7, #24]
 8005e10:	69fa      	ldr	r2, [r7, #28]
 8005e12:	e841 2300 	strex	r3, r2, [r1]
 8005e16:	617b      	str	r3, [r7, #20]
   return(result);
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d1e5      	bne.n	8005dea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2220      	movs	r2, #32
 8005e22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	e012      	b.n	8005e58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2220      	movs	r2, #32
 8005e36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2220      	movs	r2, #32
 8005e3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3758      	adds	r7, #88	@ 0x58
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	603b      	str	r3, [r7, #0]
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e70:	e04f      	b.n	8005f12 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e78:	d04b      	beq.n	8005f12 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e7a:	f7fb f8a5 	bl	8000fc8 <HAL_GetTick>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	69ba      	ldr	r2, [r7, #24]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d302      	bcc.n	8005e90 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d101      	bne.n	8005e94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e04e      	b.n	8005f32 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 0304 	and.w	r3, r3, #4
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d037      	beq.n	8005f12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	2b80      	cmp	r3, #128	@ 0x80
 8005ea6:	d034      	beq.n	8005f12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	2b40      	cmp	r3, #64	@ 0x40
 8005eac:	d031      	beq.n	8005f12 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	69db      	ldr	r3, [r3, #28]
 8005eb4:	f003 0308 	and.w	r3, r3, #8
 8005eb8:	2b08      	cmp	r3, #8
 8005eba:	d110      	bne.n	8005ede <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2208      	movs	r2, #8
 8005ec2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	f000 f839 	bl	8005f3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2208      	movs	r2, #8
 8005ece:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e029      	b.n	8005f32 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	69db      	ldr	r3, [r3, #28]
 8005ee4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ee8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005eec:	d111      	bne.n	8005f12 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ef6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	f000 f81f 	bl	8005f3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2220      	movs	r2, #32
 8005f02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e00f      	b.n	8005f32 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	69da      	ldr	r2, [r3, #28]
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	68ba      	ldr	r2, [r7, #8]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	bf0c      	ite	eq
 8005f22:	2301      	moveq	r3, #1
 8005f24:	2300      	movne	r3, #0
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	461a      	mov	r2, r3
 8005f2a:	79fb      	ldrb	r3, [r7, #7]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d0a0      	beq.n	8005e72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
	...

08005f3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b095      	sub	sp, #84	@ 0x54
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f4c:	e853 3f00 	ldrex	r3, [r3]
 8005f50:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	461a      	mov	r2, r3
 8005f60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f62:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f64:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f66:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f68:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f6a:	e841 2300 	strex	r3, r2, [r1]
 8005f6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1e6      	bne.n	8005f44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	3308      	adds	r3, #8
 8005f7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7e:	6a3b      	ldr	r3, [r7, #32]
 8005f80:	e853 3f00 	ldrex	r3, [r3]
 8005f84:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f86:	69fa      	ldr	r2, [r7, #28]
 8005f88:	4b1e      	ldr	r3, [pc, #120]	@ (8006004 <UART_EndRxTransfer+0xc8>)
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	3308      	adds	r3, #8
 8005f94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f98:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f9e:	e841 2300 	strex	r3, r2, [r1]
 8005fa2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1e5      	bne.n	8005f76 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d118      	bne.n	8005fe4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	e853 3f00 	ldrex	r3, [r3]
 8005fbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	f023 0310 	bic.w	r3, r3, #16
 8005fc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	461a      	mov	r2, r3
 8005fce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fd0:	61bb      	str	r3, [r7, #24]
 8005fd2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd4:	6979      	ldr	r1, [r7, #20]
 8005fd6:	69ba      	ldr	r2, [r7, #24]
 8005fd8:	e841 2300 	strex	r3, r2, [r1]
 8005fdc:	613b      	str	r3, [r7, #16]
   return(result);
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1e6      	bne.n	8005fb2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005ff8:	bf00      	nop
 8005ffa:	3754      	adds	r7, #84	@ 0x54
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr
 8006004:	effffffe 	.word	0xeffffffe

08006008 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006016:	2b01      	cmp	r3, #1
 8006018:	d101      	bne.n	800601e <HAL_UARTEx_DisableFifoMode+0x16>
 800601a:	2302      	movs	r3, #2
 800601c:	e027      	b.n	800606e <HAL_UARTEx_DisableFifoMode+0x66>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2224      	movs	r2, #36	@ 0x24
 800602a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f022 0201 	bic.w	r2, r2, #1
 8006044:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800604c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2220      	movs	r2, #32
 8006060:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3714      	adds	r7, #20
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr

0800607a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b084      	sub	sp, #16
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
 8006082:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800608a:	2b01      	cmp	r3, #1
 800608c:	d101      	bne.n	8006092 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800608e:	2302      	movs	r3, #2
 8006090:	e02d      	b.n	80060ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2224      	movs	r2, #36	@ 0x24
 800609e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f022 0201 	bic.w	r2, r2, #1
 80060b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	683a      	ldr	r2, [r7, #0]
 80060ca:	430a      	orrs	r2, r1
 80060cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f850 	bl	8006174 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2220      	movs	r2, #32
 80060e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b084      	sub	sp, #16
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
 80060fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006106:	2b01      	cmp	r3, #1
 8006108:	d101      	bne.n	800610e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800610a:	2302      	movs	r3, #2
 800610c:	e02d      	b.n	800616a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2201      	movs	r2, #1
 8006112:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2224      	movs	r2, #36	@ 0x24
 800611a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f022 0201 	bic.w	r2, r2, #1
 8006134:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	683a      	ldr	r2, [r7, #0]
 8006146:	430a      	orrs	r2, r1
 8006148:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 f812 	bl	8006174 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2220      	movs	r2, #32
 800615c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
	...

08006174 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006180:	2b00      	cmp	r3, #0
 8006182:	d108      	bne.n	8006196 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006194:	e031      	b.n	80061fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006196:	2310      	movs	r3, #16
 8006198:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800619a:	2310      	movs	r3, #16
 800619c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	0e5b      	lsrs	r3, r3, #25
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	f003 0307 	and.w	r3, r3, #7
 80061ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	0f5b      	lsrs	r3, r3, #29
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	f003 0307 	and.w	r3, r3, #7
 80061bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061be:	7bbb      	ldrb	r3, [r7, #14]
 80061c0:	7b3a      	ldrb	r2, [r7, #12]
 80061c2:	4911      	ldr	r1, [pc, #68]	@ (8006208 <UARTEx_SetNbDataToProcess+0x94>)
 80061c4:	5c8a      	ldrb	r2, [r1, r2]
 80061c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80061ca:	7b3a      	ldrb	r2, [r7, #12]
 80061cc:	490f      	ldr	r1, [pc, #60]	@ (800620c <UARTEx_SetNbDataToProcess+0x98>)
 80061ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061dc:	7bfb      	ldrb	r3, [r7, #15]
 80061de:	7b7a      	ldrb	r2, [r7, #13]
 80061e0:	4909      	ldr	r1, [pc, #36]	@ (8006208 <UARTEx_SetNbDataToProcess+0x94>)
 80061e2:	5c8a      	ldrb	r2, [r1, r2]
 80061e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80061e8:	7b7a      	ldrb	r2, [r7, #13]
 80061ea:	4908      	ldr	r1, [pc, #32]	@ (800620c <UARTEx_SetNbDataToProcess+0x98>)
 80061ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80061fa:	bf00      	nop
 80061fc:	3714      	adds	r7, #20
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr
 8006206:	bf00      	nop
 8006208:	0800717c 	.word	0x0800717c
 800620c:	08007184 	.word	0x08007184

08006210 <std>:
 8006210:	2300      	movs	r3, #0
 8006212:	b510      	push	{r4, lr}
 8006214:	4604      	mov	r4, r0
 8006216:	e9c0 3300 	strd	r3, r3, [r0]
 800621a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800621e:	6083      	str	r3, [r0, #8]
 8006220:	8181      	strh	r1, [r0, #12]
 8006222:	6643      	str	r3, [r0, #100]	@ 0x64
 8006224:	81c2      	strh	r2, [r0, #14]
 8006226:	6183      	str	r3, [r0, #24]
 8006228:	4619      	mov	r1, r3
 800622a:	2208      	movs	r2, #8
 800622c:	305c      	adds	r0, #92	@ 0x5c
 800622e:	f000 f9f9 	bl	8006624 <memset>
 8006232:	4b0d      	ldr	r3, [pc, #52]	@ (8006268 <std+0x58>)
 8006234:	6263      	str	r3, [r4, #36]	@ 0x24
 8006236:	4b0d      	ldr	r3, [pc, #52]	@ (800626c <std+0x5c>)
 8006238:	62a3      	str	r3, [r4, #40]	@ 0x28
 800623a:	4b0d      	ldr	r3, [pc, #52]	@ (8006270 <std+0x60>)
 800623c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800623e:	4b0d      	ldr	r3, [pc, #52]	@ (8006274 <std+0x64>)
 8006240:	6323      	str	r3, [r4, #48]	@ 0x30
 8006242:	4b0d      	ldr	r3, [pc, #52]	@ (8006278 <std+0x68>)
 8006244:	6224      	str	r4, [r4, #32]
 8006246:	429c      	cmp	r4, r3
 8006248:	d006      	beq.n	8006258 <std+0x48>
 800624a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800624e:	4294      	cmp	r4, r2
 8006250:	d002      	beq.n	8006258 <std+0x48>
 8006252:	33d0      	adds	r3, #208	@ 0xd0
 8006254:	429c      	cmp	r4, r3
 8006256:	d105      	bne.n	8006264 <std+0x54>
 8006258:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800625c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006260:	f000 ba58 	b.w	8006714 <__retarget_lock_init_recursive>
 8006264:	bd10      	pop	{r4, pc}
 8006266:	bf00      	nop
 8006268:	08006475 	.word	0x08006475
 800626c:	08006497 	.word	0x08006497
 8006270:	080064cf 	.word	0x080064cf
 8006274:	080064f3 	.word	0x080064f3
 8006278:	24000170 	.word	0x24000170

0800627c <stdio_exit_handler>:
 800627c:	4a02      	ldr	r2, [pc, #8]	@ (8006288 <stdio_exit_handler+0xc>)
 800627e:	4903      	ldr	r1, [pc, #12]	@ (800628c <stdio_exit_handler+0x10>)
 8006280:	4803      	ldr	r0, [pc, #12]	@ (8006290 <stdio_exit_handler+0x14>)
 8006282:	f000 b869 	b.w	8006358 <_fwalk_sglue>
 8006286:	bf00      	nop
 8006288:	24000010 	.word	0x24000010
 800628c:	08006fb5 	.word	0x08006fb5
 8006290:	24000020 	.word	0x24000020

08006294 <cleanup_stdio>:
 8006294:	6841      	ldr	r1, [r0, #4]
 8006296:	4b0c      	ldr	r3, [pc, #48]	@ (80062c8 <cleanup_stdio+0x34>)
 8006298:	4299      	cmp	r1, r3
 800629a:	b510      	push	{r4, lr}
 800629c:	4604      	mov	r4, r0
 800629e:	d001      	beq.n	80062a4 <cleanup_stdio+0x10>
 80062a0:	f000 fe88 	bl	8006fb4 <_fflush_r>
 80062a4:	68a1      	ldr	r1, [r4, #8]
 80062a6:	4b09      	ldr	r3, [pc, #36]	@ (80062cc <cleanup_stdio+0x38>)
 80062a8:	4299      	cmp	r1, r3
 80062aa:	d002      	beq.n	80062b2 <cleanup_stdio+0x1e>
 80062ac:	4620      	mov	r0, r4
 80062ae:	f000 fe81 	bl	8006fb4 <_fflush_r>
 80062b2:	68e1      	ldr	r1, [r4, #12]
 80062b4:	4b06      	ldr	r3, [pc, #24]	@ (80062d0 <cleanup_stdio+0x3c>)
 80062b6:	4299      	cmp	r1, r3
 80062b8:	d004      	beq.n	80062c4 <cleanup_stdio+0x30>
 80062ba:	4620      	mov	r0, r4
 80062bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062c0:	f000 be78 	b.w	8006fb4 <_fflush_r>
 80062c4:	bd10      	pop	{r4, pc}
 80062c6:	bf00      	nop
 80062c8:	24000170 	.word	0x24000170
 80062cc:	240001d8 	.word	0x240001d8
 80062d0:	24000240 	.word	0x24000240

080062d4 <global_stdio_init.part.0>:
 80062d4:	b510      	push	{r4, lr}
 80062d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006304 <global_stdio_init.part.0+0x30>)
 80062d8:	4c0b      	ldr	r4, [pc, #44]	@ (8006308 <global_stdio_init.part.0+0x34>)
 80062da:	4a0c      	ldr	r2, [pc, #48]	@ (800630c <global_stdio_init.part.0+0x38>)
 80062dc:	601a      	str	r2, [r3, #0]
 80062de:	4620      	mov	r0, r4
 80062e0:	2200      	movs	r2, #0
 80062e2:	2104      	movs	r1, #4
 80062e4:	f7ff ff94 	bl	8006210 <std>
 80062e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80062ec:	2201      	movs	r2, #1
 80062ee:	2109      	movs	r1, #9
 80062f0:	f7ff ff8e 	bl	8006210 <std>
 80062f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80062f8:	2202      	movs	r2, #2
 80062fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062fe:	2112      	movs	r1, #18
 8006300:	f7ff bf86 	b.w	8006210 <std>
 8006304:	240002a8 	.word	0x240002a8
 8006308:	24000170 	.word	0x24000170
 800630c:	0800627d 	.word	0x0800627d

08006310 <__sfp_lock_acquire>:
 8006310:	4801      	ldr	r0, [pc, #4]	@ (8006318 <__sfp_lock_acquire+0x8>)
 8006312:	f000 ba00 	b.w	8006716 <__retarget_lock_acquire_recursive>
 8006316:	bf00      	nop
 8006318:	240002b1 	.word	0x240002b1

0800631c <__sfp_lock_release>:
 800631c:	4801      	ldr	r0, [pc, #4]	@ (8006324 <__sfp_lock_release+0x8>)
 800631e:	f000 b9fb 	b.w	8006718 <__retarget_lock_release_recursive>
 8006322:	bf00      	nop
 8006324:	240002b1 	.word	0x240002b1

08006328 <__sinit>:
 8006328:	b510      	push	{r4, lr}
 800632a:	4604      	mov	r4, r0
 800632c:	f7ff fff0 	bl	8006310 <__sfp_lock_acquire>
 8006330:	6a23      	ldr	r3, [r4, #32]
 8006332:	b11b      	cbz	r3, 800633c <__sinit+0x14>
 8006334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006338:	f7ff bff0 	b.w	800631c <__sfp_lock_release>
 800633c:	4b04      	ldr	r3, [pc, #16]	@ (8006350 <__sinit+0x28>)
 800633e:	6223      	str	r3, [r4, #32]
 8006340:	4b04      	ldr	r3, [pc, #16]	@ (8006354 <__sinit+0x2c>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d1f5      	bne.n	8006334 <__sinit+0xc>
 8006348:	f7ff ffc4 	bl	80062d4 <global_stdio_init.part.0>
 800634c:	e7f2      	b.n	8006334 <__sinit+0xc>
 800634e:	bf00      	nop
 8006350:	08006295 	.word	0x08006295
 8006354:	240002a8 	.word	0x240002a8

08006358 <_fwalk_sglue>:
 8006358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800635c:	4607      	mov	r7, r0
 800635e:	4688      	mov	r8, r1
 8006360:	4614      	mov	r4, r2
 8006362:	2600      	movs	r6, #0
 8006364:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006368:	f1b9 0901 	subs.w	r9, r9, #1
 800636c:	d505      	bpl.n	800637a <_fwalk_sglue+0x22>
 800636e:	6824      	ldr	r4, [r4, #0]
 8006370:	2c00      	cmp	r4, #0
 8006372:	d1f7      	bne.n	8006364 <_fwalk_sglue+0xc>
 8006374:	4630      	mov	r0, r6
 8006376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800637a:	89ab      	ldrh	r3, [r5, #12]
 800637c:	2b01      	cmp	r3, #1
 800637e:	d907      	bls.n	8006390 <_fwalk_sglue+0x38>
 8006380:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006384:	3301      	adds	r3, #1
 8006386:	d003      	beq.n	8006390 <_fwalk_sglue+0x38>
 8006388:	4629      	mov	r1, r5
 800638a:	4638      	mov	r0, r7
 800638c:	47c0      	blx	r8
 800638e:	4306      	orrs	r6, r0
 8006390:	3568      	adds	r5, #104	@ 0x68
 8006392:	e7e9      	b.n	8006368 <_fwalk_sglue+0x10>

08006394 <iprintf>:
 8006394:	b40f      	push	{r0, r1, r2, r3}
 8006396:	b507      	push	{r0, r1, r2, lr}
 8006398:	4906      	ldr	r1, [pc, #24]	@ (80063b4 <iprintf+0x20>)
 800639a:	ab04      	add	r3, sp, #16
 800639c:	6808      	ldr	r0, [r1, #0]
 800639e:	f853 2b04 	ldr.w	r2, [r3], #4
 80063a2:	6881      	ldr	r1, [r0, #8]
 80063a4:	9301      	str	r3, [sp, #4]
 80063a6:	f000 fadb 	bl	8006960 <_vfiprintf_r>
 80063aa:	b003      	add	sp, #12
 80063ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80063b0:	b004      	add	sp, #16
 80063b2:	4770      	bx	lr
 80063b4:	2400001c 	.word	0x2400001c

080063b8 <_puts_r>:
 80063b8:	6a03      	ldr	r3, [r0, #32]
 80063ba:	b570      	push	{r4, r5, r6, lr}
 80063bc:	6884      	ldr	r4, [r0, #8]
 80063be:	4605      	mov	r5, r0
 80063c0:	460e      	mov	r6, r1
 80063c2:	b90b      	cbnz	r3, 80063c8 <_puts_r+0x10>
 80063c4:	f7ff ffb0 	bl	8006328 <__sinit>
 80063c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80063ca:	07db      	lsls	r3, r3, #31
 80063cc:	d405      	bmi.n	80063da <_puts_r+0x22>
 80063ce:	89a3      	ldrh	r3, [r4, #12]
 80063d0:	0598      	lsls	r0, r3, #22
 80063d2:	d402      	bmi.n	80063da <_puts_r+0x22>
 80063d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063d6:	f000 f99e 	bl	8006716 <__retarget_lock_acquire_recursive>
 80063da:	89a3      	ldrh	r3, [r4, #12]
 80063dc:	0719      	lsls	r1, r3, #28
 80063de:	d502      	bpl.n	80063e6 <_puts_r+0x2e>
 80063e0:	6923      	ldr	r3, [r4, #16]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d135      	bne.n	8006452 <_puts_r+0x9a>
 80063e6:	4621      	mov	r1, r4
 80063e8:	4628      	mov	r0, r5
 80063ea:	f000 f8c5 	bl	8006578 <__swsetup_r>
 80063ee:	b380      	cbz	r0, 8006452 <_puts_r+0x9a>
 80063f0:	f04f 35ff 	mov.w	r5, #4294967295
 80063f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80063f6:	07da      	lsls	r2, r3, #31
 80063f8:	d405      	bmi.n	8006406 <_puts_r+0x4e>
 80063fa:	89a3      	ldrh	r3, [r4, #12]
 80063fc:	059b      	lsls	r3, r3, #22
 80063fe:	d402      	bmi.n	8006406 <_puts_r+0x4e>
 8006400:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006402:	f000 f989 	bl	8006718 <__retarget_lock_release_recursive>
 8006406:	4628      	mov	r0, r5
 8006408:	bd70      	pop	{r4, r5, r6, pc}
 800640a:	2b00      	cmp	r3, #0
 800640c:	da04      	bge.n	8006418 <_puts_r+0x60>
 800640e:	69a2      	ldr	r2, [r4, #24]
 8006410:	429a      	cmp	r2, r3
 8006412:	dc17      	bgt.n	8006444 <_puts_r+0x8c>
 8006414:	290a      	cmp	r1, #10
 8006416:	d015      	beq.n	8006444 <_puts_r+0x8c>
 8006418:	6823      	ldr	r3, [r4, #0]
 800641a:	1c5a      	adds	r2, r3, #1
 800641c:	6022      	str	r2, [r4, #0]
 800641e:	7019      	strb	r1, [r3, #0]
 8006420:	68a3      	ldr	r3, [r4, #8]
 8006422:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006426:	3b01      	subs	r3, #1
 8006428:	60a3      	str	r3, [r4, #8]
 800642a:	2900      	cmp	r1, #0
 800642c:	d1ed      	bne.n	800640a <_puts_r+0x52>
 800642e:	2b00      	cmp	r3, #0
 8006430:	da11      	bge.n	8006456 <_puts_r+0x9e>
 8006432:	4622      	mov	r2, r4
 8006434:	210a      	movs	r1, #10
 8006436:	4628      	mov	r0, r5
 8006438:	f000 f85f 	bl	80064fa <__swbuf_r>
 800643c:	3001      	adds	r0, #1
 800643e:	d0d7      	beq.n	80063f0 <_puts_r+0x38>
 8006440:	250a      	movs	r5, #10
 8006442:	e7d7      	b.n	80063f4 <_puts_r+0x3c>
 8006444:	4622      	mov	r2, r4
 8006446:	4628      	mov	r0, r5
 8006448:	f000 f857 	bl	80064fa <__swbuf_r>
 800644c:	3001      	adds	r0, #1
 800644e:	d1e7      	bne.n	8006420 <_puts_r+0x68>
 8006450:	e7ce      	b.n	80063f0 <_puts_r+0x38>
 8006452:	3e01      	subs	r6, #1
 8006454:	e7e4      	b.n	8006420 <_puts_r+0x68>
 8006456:	6823      	ldr	r3, [r4, #0]
 8006458:	1c5a      	adds	r2, r3, #1
 800645a:	6022      	str	r2, [r4, #0]
 800645c:	220a      	movs	r2, #10
 800645e:	701a      	strb	r2, [r3, #0]
 8006460:	e7ee      	b.n	8006440 <_puts_r+0x88>
	...

08006464 <puts>:
 8006464:	4b02      	ldr	r3, [pc, #8]	@ (8006470 <puts+0xc>)
 8006466:	4601      	mov	r1, r0
 8006468:	6818      	ldr	r0, [r3, #0]
 800646a:	f7ff bfa5 	b.w	80063b8 <_puts_r>
 800646e:	bf00      	nop
 8006470:	2400001c 	.word	0x2400001c

08006474 <__sread>:
 8006474:	b510      	push	{r4, lr}
 8006476:	460c      	mov	r4, r1
 8006478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800647c:	f000 f8fc 	bl	8006678 <_read_r>
 8006480:	2800      	cmp	r0, #0
 8006482:	bfab      	itete	ge
 8006484:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006486:	89a3      	ldrhlt	r3, [r4, #12]
 8006488:	181b      	addge	r3, r3, r0
 800648a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800648e:	bfac      	ite	ge
 8006490:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006492:	81a3      	strhlt	r3, [r4, #12]
 8006494:	bd10      	pop	{r4, pc}

08006496 <__swrite>:
 8006496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800649a:	461f      	mov	r7, r3
 800649c:	898b      	ldrh	r3, [r1, #12]
 800649e:	05db      	lsls	r3, r3, #23
 80064a0:	4605      	mov	r5, r0
 80064a2:	460c      	mov	r4, r1
 80064a4:	4616      	mov	r6, r2
 80064a6:	d505      	bpl.n	80064b4 <__swrite+0x1e>
 80064a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064ac:	2302      	movs	r3, #2
 80064ae:	2200      	movs	r2, #0
 80064b0:	f000 f8d0 	bl	8006654 <_lseek_r>
 80064b4:	89a3      	ldrh	r3, [r4, #12]
 80064b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80064be:	81a3      	strh	r3, [r4, #12]
 80064c0:	4632      	mov	r2, r6
 80064c2:	463b      	mov	r3, r7
 80064c4:	4628      	mov	r0, r5
 80064c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064ca:	f000 b8e7 	b.w	800669c <_write_r>

080064ce <__sseek>:
 80064ce:	b510      	push	{r4, lr}
 80064d0:	460c      	mov	r4, r1
 80064d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064d6:	f000 f8bd 	bl	8006654 <_lseek_r>
 80064da:	1c43      	adds	r3, r0, #1
 80064dc:	89a3      	ldrh	r3, [r4, #12]
 80064de:	bf15      	itete	ne
 80064e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80064e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80064e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80064ea:	81a3      	strheq	r3, [r4, #12]
 80064ec:	bf18      	it	ne
 80064ee:	81a3      	strhne	r3, [r4, #12]
 80064f0:	bd10      	pop	{r4, pc}

080064f2 <__sclose>:
 80064f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064f6:	f000 b89d 	b.w	8006634 <_close_r>

080064fa <__swbuf_r>:
 80064fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064fc:	460e      	mov	r6, r1
 80064fe:	4614      	mov	r4, r2
 8006500:	4605      	mov	r5, r0
 8006502:	b118      	cbz	r0, 800650c <__swbuf_r+0x12>
 8006504:	6a03      	ldr	r3, [r0, #32]
 8006506:	b90b      	cbnz	r3, 800650c <__swbuf_r+0x12>
 8006508:	f7ff ff0e 	bl	8006328 <__sinit>
 800650c:	69a3      	ldr	r3, [r4, #24]
 800650e:	60a3      	str	r3, [r4, #8]
 8006510:	89a3      	ldrh	r3, [r4, #12]
 8006512:	071a      	lsls	r2, r3, #28
 8006514:	d501      	bpl.n	800651a <__swbuf_r+0x20>
 8006516:	6923      	ldr	r3, [r4, #16]
 8006518:	b943      	cbnz	r3, 800652c <__swbuf_r+0x32>
 800651a:	4621      	mov	r1, r4
 800651c:	4628      	mov	r0, r5
 800651e:	f000 f82b 	bl	8006578 <__swsetup_r>
 8006522:	b118      	cbz	r0, 800652c <__swbuf_r+0x32>
 8006524:	f04f 37ff 	mov.w	r7, #4294967295
 8006528:	4638      	mov	r0, r7
 800652a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800652c:	6823      	ldr	r3, [r4, #0]
 800652e:	6922      	ldr	r2, [r4, #16]
 8006530:	1a98      	subs	r0, r3, r2
 8006532:	6963      	ldr	r3, [r4, #20]
 8006534:	b2f6      	uxtb	r6, r6
 8006536:	4283      	cmp	r3, r0
 8006538:	4637      	mov	r7, r6
 800653a:	dc05      	bgt.n	8006548 <__swbuf_r+0x4e>
 800653c:	4621      	mov	r1, r4
 800653e:	4628      	mov	r0, r5
 8006540:	f000 fd38 	bl	8006fb4 <_fflush_r>
 8006544:	2800      	cmp	r0, #0
 8006546:	d1ed      	bne.n	8006524 <__swbuf_r+0x2a>
 8006548:	68a3      	ldr	r3, [r4, #8]
 800654a:	3b01      	subs	r3, #1
 800654c:	60a3      	str	r3, [r4, #8]
 800654e:	6823      	ldr	r3, [r4, #0]
 8006550:	1c5a      	adds	r2, r3, #1
 8006552:	6022      	str	r2, [r4, #0]
 8006554:	701e      	strb	r6, [r3, #0]
 8006556:	6962      	ldr	r2, [r4, #20]
 8006558:	1c43      	adds	r3, r0, #1
 800655a:	429a      	cmp	r2, r3
 800655c:	d004      	beq.n	8006568 <__swbuf_r+0x6e>
 800655e:	89a3      	ldrh	r3, [r4, #12]
 8006560:	07db      	lsls	r3, r3, #31
 8006562:	d5e1      	bpl.n	8006528 <__swbuf_r+0x2e>
 8006564:	2e0a      	cmp	r6, #10
 8006566:	d1df      	bne.n	8006528 <__swbuf_r+0x2e>
 8006568:	4621      	mov	r1, r4
 800656a:	4628      	mov	r0, r5
 800656c:	f000 fd22 	bl	8006fb4 <_fflush_r>
 8006570:	2800      	cmp	r0, #0
 8006572:	d0d9      	beq.n	8006528 <__swbuf_r+0x2e>
 8006574:	e7d6      	b.n	8006524 <__swbuf_r+0x2a>
	...

08006578 <__swsetup_r>:
 8006578:	b538      	push	{r3, r4, r5, lr}
 800657a:	4b29      	ldr	r3, [pc, #164]	@ (8006620 <__swsetup_r+0xa8>)
 800657c:	4605      	mov	r5, r0
 800657e:	6818      	ldr	r0, [r3, #0]
 8006580:	460c      	mov	r4, r1
 8006582:	b118      	cbz	r0, 800658c <__swsetup_r+0x14>
 8006584:	6a03      	ldr	r3, [r0, #32]
 8006586:	b90b      	cbnz	r3, 800658c <__swsetup_r+0x14>
 8006588:	f7ff fece 	bl	8006328 <__sinit>
 800658c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006590:	0719      	lsls	r1, r3, #28
 8006592:	d422      	bmi.n	80065da <__swsetup_r+0x62>
 8006594:	06da      	lsls	r2, r3, #27
 8006596:	d407      	bmi.n	80065a8 <__swsetup_r+0x30>
 8006598:	2209      	movs	r2, #9
 800659a:	602a      	str	r2, [r5, #0]
 800659c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065a0:	81a3      	strh	r3, [r4, #12]
 80065a2:	f04f 30ff 	mov.w	r0, #4294967295
 80065a6:	e033      	b.n	8006610 <__swsetup_r+0x98>
 80065a8:	0758      	lsls	r0, r3, #29
 80065aa:	d512      	bpl.n	80065d2 <__swsetup_r+0x5a>
 80065ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80065ae:	b141      	cbz	r1, 80065c2 <__swsetup_r+0x4a>
 80065b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80065b4:	4299      	cmp	r1, r3
 80065b6:	d002      	beq.n	80065be <__swsetup_r+0x46>
 80065b8:	4628      	mov	r0, r5
 80065ba:	f000 f8af 	bl	800671c <_free_r>
 80065be:	2300      	movs	r3, #0
 80065c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80065c2:	89a3      	ldrh	r3, [r4, #12]
 80065c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80065c8:	81a3      	strh	r3, [r4, #12]
 80065ca:	2300      	movs	r3, #0
 80065cc:	6063      	str	r3, [r4, #4]
 80065ce:	6923      	ldr	r3, [r4, #16]
 80065d0:	6023      	str	r3, [r4, #0]
 80065d2:	89a3      	ldrh	r3, [r4, #12]
 80065d4:	f043 0308 	orr.w	r3, r3, #8
 80065d8:	81a3      	strh	r3, [r4, #12]
 80065da:	6923      	ldr	r3, [r4, #16]
 80065dc:	b94b      	cbnz	r3, 80065f2 <__swsetup_r+0x7a>
 80065de:	89a3      	ldrh	r3, [r4, #12]
 80065e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80065e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065e8:	d003      	beq.n	80065f2 <__swsetup_r+0x7a>
 80065ea:	4621      	mov	r1, r4
 80065ec:	4628      	mov	r0, r5
 80065ee:	f000 fd2f 	bl	8007050 <__smakebuf_r>
 80065f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065f6:	f013 0201 	ands.w	r2, r3, #1
 80065fa:	d00a      	beq.n	8006612 <__swsetup_r+0x9a>
 80065fc:	2200      	movs	r2, #0
 80065fe:	60a2      	str	r2, [r4, #8]
 8006600:	6962      	ldr	r2, [r4, #20]
 8006602:	4252      	negs	r2, r2
 8006604:	61a2      	str	r2, [r4, #24]
 8006606:	6922      	ldr	r2, [r4, #16]
 8006608:	b942      	cbnz	r2, 800661c <__swsetup_r+0xa4>
 800660a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800660e:	d1c5      	bne.n	800659c <__swsetup_r+0x24>
 8006610:	bd38      	pop	{r3, r4, r5, pc}
 8006612:	0799      	lsls	r1, r3, #30
 8006614:	bf58      	it	pl
 8006616:	6962      	ldrpl	r2, [r4, #20]
 8006618:	60a2      	str	r2, [r4, #8]
 800661a:	e7f4      	b.n	8006606 <__swsetup_r+0x8e>
 800661c:	2000      	movs	r0, #0
 800661e:	e7f7      	b.n	8006610 <__swsetup_r+0x98>
 8006620:	2400001c 	.word	0x2400001c

08006624 <memset>:
 8006624:	4402      	add	r2, r0
 8006626:	4603      	mov	r3, r0
 8006628:	4293      	cmp	r3, r2
 800662a:	d100      	bne.n	800662e <memset+0xa>
 800662c:	4770      	bx	lr
 800662e:	f803 1b01 	strb.w	r1, [r3], #1
 8006632:	e7f9      	b.n	8006628 <memset+0x4>

08006634 <_close_r>:
 8006634:	b538      	push	{r3, r4, r5, lr}
 8006636:	4d06      	ldr	r5, [pc, #24]	@ (8006650 <_close_r+0x1c>)
 8006638:	2300      	movs	r3, #0
 800663a:	4604      	mov	r4, r0
 800663c:	4608      	mov	r0, r1
 800663e:	602b      	str	r3, [r5, #0]
 8006640:	f7fa fb30 	bl	8000ca4 <_close>
 8006644:	1c43      	adds	r3, r0, #1
 8006646:	d102      	bne.n	800664e <_close_r+0x1a>
 8006648:	682b      	ldr	r3, [r5, #0]
 800664a:	b103      	cbz	r3, 800664e <_close_r+0x1a>
 800664c:	6023      	str	r3, [r4, #0]
 800664e:	bd38      	pop	{r3, r4, r5, pc}
 8006650:	240002ac 	.word	0x240002ac

08006654 <_lseek_r>:
 8006654:	b538      	push	{r3, r4, r5, lr}
 8006656:	4d07      	ldr	r5, [pc, #28]	@ (8006674 <_lseek_r+0x20>)
 8006658:	4604      	mov	r4, r0
 800665a:	4608      	mov	r0, r1
 800665c:	4611      	mov	r1, r2
 800665e:	2200      	movs	r2, #0
 8006660:	602a      	str	r2, [r5, #0]
 8006662:	461a      	mov	r2, r3
 8006664:	f7fa fb45 	bl	8000cf2 <_lseek>
 8006668:	1c43      	adds	r3, r0, #1
 800666a:	d102      	bne.n	8006672 <_lseek_r+0x1e>
 800666c:	682b      	ldr	r3, [r5, #0]
 800666e:	b103      	cbz	r3, 8006672 <_lseek_r+0x1e>
 8006670:	6023      	str	r3, [r4, #0]
 8006672:	bd38      	pop	{r3, r4, r5, pc}
 8006674:	240002ac 	.word	0x240002ac

08006678 <_read_r>:
 8006678:	b538      	push	{r3, r4, r5, lr}
 800667a:	4d07      	ldr	r5, [pc, #28]	@ (8006698 <_read_r+0x20>)
 800667c:	4604      	mov	r4, r0
 800667e:	4608      	mov	r0, r1
 8006680:	4611      	mov	r1, r2
 8006682:	2200      	movs	r2, #0
 8006684:	602a      	str	r2, [r5, #0]
 8006686:	461a      	mov	r2, r3
 8006688:	f7fa fad3 	bl	8000c32 <_read>
 800668c:	1c43      	adds	r3, r0, #1
 800668e:	d102      	bne.n	8006696 <_read_r+0x1e>
 8006690:	682b      	ldr	r3, [r5, #0]
 8006692:	b103      	cbz	r3, 8006696 <_read_r+0x1e>
 8006694:	6023      	str	r3, [r4, #0]
 8006696:	bd38      	pop	{r3, r4, r5, pc}
 8006698:	240002ac 	.word	0x240002ac

0800669c <_write_r>:
 800669c:	b538      	push	{r3, r4, r5, lr}
 800669e:	4d07      	ldr	r5, [pc, #28]	@ (80066bc <_write_r+0x20>)
 80066a0:	4604      	mov	r4, r0
 80066a2:	4608      	mov	r0, r1
 80066a4:	4611      	mov	r1, r2
 80066a6:	2200      	movs	r2, #0
 80066a8:	602a      	str	r2, [r5, #0]
 80066aa:	461a      	mov	r2, r3
 80066ac:	f7fa fade 	bl	8000c6c <_write>
 80066b0:	1c43      	adds	r3, r0, #1
 80066b2:	d102      	bne.n	80066ba <_write_r+0x1e>
 80066b4:	682b      	ldr	r3, [r5, #0]
 80066b6:	b103      	cbz	r3, 80066ba <_write_r+0x1e>
 80066b8:	6023      	str	r3, [r4, #0]
 80066ba:	bd38      	pop	{r3, r4, r5, pc}
 80066bc:	240002ac 	.word	0x240002ac

080066c0 <__errno>:
 80066c0:	4b01      	ldr	r3, [pc, #4]	@ (80066c8 <__errno+0x8>)
 80066c2:	6818      	ldr	r0, [r3, #0]
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	2400001c 	.word	0x2400001c

080066cc <__libc_init_array>:
 80066cc:	b570      	push	{r4, r5, r6, lr}
 80066ce:	4d0d      	ldr	r5, [pc, #52]	@ (8006704 <__libc_init_array+0x38>)
 80066d0:	4c0d      	ldr	r4, [pc, #52]	@ (8006708 <__libc_init_array+0x3c>)
 80066d2:	1b64      	subs	r4, r4, r5
 80066d4:	10a4      	asrs	r4, r4, #2
 80066d6:	2600      	movs	r6, #0
 80066d8:	42a6      	cmp	r6, r4
 80066da:	d109      	bne.n	80066f0 <__libc_init_array+0x24>
 80066dc:	4d0b      	ldr	r5, [pc, #44]	@ (800670c <__libc_init_array+0x40>)
 80066de:	4c0c      	ldr	r4, [pc, #48]	@ (8006710 <__libc_init_array+0x44>)
 80066e0:	f000 fd24 	bl	800712c <_init>
 80066e4:	1b64      	subs	r4, r4, r5
 80066e6:	10a4      	asrs	r4, r4, #2
 80066e8:	2600      	movs	r6, #0
 80066ea:	42a6      	cmp	r6, r4
 80066ec:	d105      	bne.n	80066fa <__libc_init_array+0x2e>
 80066ee:	bd70      	pop	{r4, r5, r6, pc}
 80066f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80066f4:	4798      	blx	r3
 80066f6:	3601      	adds	r6, #1
 80066f8:	e7ee      	b.n	80066d8 <__libc_init_array+0xc>
 80066fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80066fe:	4798      	blx	r3
 8006700:	3601      	adds	r6, #1
 8006702:	e7f2      	b.n	80066ea <__libc_init_array+0x1e>
 8006704:	080071c8 	.word	0x080071c8
 8006708:	080071c8 	.word	0x080071c8
 800670c:	080071c8 	.word	0x080071c8
 8006710:	080071cc 	.word	0x080071cc

08006714 <__retarget_lock_init_recursive>:
 8006714:	4770      	bx	lr

08006716 <__retarget_lock_acquire_recursive>:
 8006716:	4770      	bx	lr

08006718 <__retarget_lock_release_recursive>:
 8006718:	4770      	bx	lr
	...

0800671c <_free_r>:
 800671c:	b538      	push	{r3, r4, r5, lr}
 800671e:	4605      	mov	r5, r0
 8006720:	2900      	cmp	r1, #0
 8006722:	d041      	beq.n	80067a8 <_free_r+0x8c>
 8006724:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006728:	1f0c      	subs	r4, r1, #4
 800672a:	2b00      	cmp	r3, #0
 800672c:	bfb8      	it	lt
 800672e:	18e4      	addlt	r4, r4, r3
 8006730:	f000 f8e0 	bl	80068f4 <__malloc_lock>
 8006734:	4a1d      	ldr	r2, [pc, #116]	@ (80067ac <_free_r+0x90>)
 8006736:	6813      	ldr	r3, [r2, #0]
 8006738:	b933      	cbnz	r3, 8006748 <_free_r+0x2c>
 800673a:	6063      	str	r3, [r4, #4]
 800673c:	6014      	str	r4, [r2, #0]
 800673e:	4628      	mov	r0, r5
 8006740:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006744:	f000 b8dc 	b.w	8006900 <__malloc_unlock>
 8006748:	42a3      	cmp	r3, r4
 800674a:	d908      	bls.n	800675e <_free_r+0x42>
 800674c:	6820      	ldr	r0, [r4, #0]
 800674e:	1821      	adds	r1, r4, r0
 8006750:	428b      	cmp	r3, r1
 8006752:	bf01      	itttt	eq
 8006754:	6819      	ldreq	r1, [r3, #0]
 8006756:	685b      	ldreq	r3, [r3, #4]
 8006758:	1809      	addeq	r1, r1, r0
 800675a:	6021      	streq	r1, [r4, #0]
 800675c:	e7ed      	b.n	800673a <_free_r+0x1e>
 800675e:	461a      	mov	r2, r3
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	b10b      	cbz	r3, 8006768 <_free_r+0x4c>
 8006764:	42a3      	cmp	r3, r4
 8006766:	d9fa      	bls.n	800675e <_free_r+0x42>
 8006768:	6811      	ldr	r1, [r2, #0]
 800676a:	1850      	adds	r0, r2, r1
 800676c:	42a0      	cmp	r0, r4
 800676e:	d10b      	bne.n	8006788 <_free_r+0x6c>
 8006770:	6820      	ldr	r0, [r4, #0]
 8006772:	4401      	add	r1, r0
 8006774:	1850      	adds	r0, r2, r1
 8006776:	4283      	cmp	r3, r0
 8006778:	6011      	str	r1, [r2, #0]
 800677a:	d1e0      	bne.n	800673e <_free_r+0x22>
 800677c:	6818      	ldr	r0, [r3, #0]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	6053      	str	r3, [r2, #4]
 8006782:	4408      	add	r0, r1
 8006784:	6010      	str	r0, [r2, #0]
 8006786:	e7da      	b.n	800673e <_free_r+0x22>
 8006788:	d902      	bls.n	8006790 <_free_r+0x74>
 800678a:	230c      	movs	r3, #12
 800678c:	602b      	str	r3, [r5, #0]
 800678e:	e7d6      	b.n	800673e <_free_r+0x22>
 8006790:	6820      	ldr	r0, [r4, #0]
 8006792:	1821      	adds	r1, r4, r0
 8006794:	428b      	cmp	r3, r1
 8006796:	bf04      	itt	eq
 8006798:	6819      	ldreq	r1, [r3, #0]
 800679a:	685b      	ldreq	r3, [r3, #4]
 800679c:	6063      	str	r3, [r4, #4]
 800679e:	bf04      	itt	eq
 80067a0:	1809      	addeq	r1, r1, r0
 80067a2:	6021      	streq	r1, [r4, #0]
 80067a4:	6054      	str	r4, [r2, #4]
 80067a6:	e7ca      	b.n	800673e <_free_r+0x22>
 80067a8:	bd38      	pop	{r3, r4, r5, pc}
 80067aa:	bf00      	nop
 80067ac:	240002b8 	.word	0x240002b8

080067b0 <sbrk_aligned>:
 80067b0:	b570      	push	{r4, r5, r6, lr}
 80067b2:	4e0f      	ldr	r6, [pc, #60]	@ (80067f0 <sbrk_aligned+0x40>)
 80067b4:	460c      	mov	r4, r1
 80067b6:	6831      	ldr	r1, [r6, #0]
 80067b8:	4605      	mov	r5, r0
 80067ba:	b911      	cbnz	r1, 80067c2 <sbrk_aligned+0x12>
 80067bc:	f000 fca6 	bl	800710c <_sbrk_r>
 80067c0:	6030      	str	r0, [r6, #0]
 80067c2:	4621      	mov	r1, r4
 80067c4:	4628      	mov	r0, r5
 80067c6:	f000 fca1 	bl	800710c <_sbrk_r>
 80067ca:	1c43      	adds	r3, r0, #1
 80067cc:	d103      	bne.n	80067d6 <sbrk_aligned+0x26>
 80067ce:	f04f 34ff 	mov.w	r4, #4294967295
 80067d2:	4620      	mov	r0, r4
 80067d4:	bd70      	pop	{r4, r5, r6, pc}
 80067d6:	1cc4      	adds	r4, r0, #3
 80067d8:	f024 0403 	bic.w	r4, r4, #3
 80067dc:	42a0      	cmp	r0, r4
 80067de:	d0f8      	beq.n	80067d2 <sbrk_aligned+0x22>
 80067e0:	1a21      	subs	r1, r4, r0
 80067e2:	4628      	mov	r0, r5
 80067e4:	f000 fc92 	bl	800710c <_sbrk_r>
 80067e8:	3001      	adds	r0, #1
 80067ea:	d1f2      	bne.n	80067d2 <sbrk_aligned+0x22>
 80067ec:	e7ef      	b.n	80067ce <sbrk_aligned+0x1e>
 80067ee:	bf00      	nop
 80067f0:	240002b4 	.word	0x240002b4

080067f4 <_malloc_r>:
 80067f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067f8:	1ccd      	adds	r5, r1, #3
 80067fa:	f025 0503 	bic.w	r5, r5, #3
 80067fe:	3508      	adds	r5, #8
 8006800:	2d0c      	cmp	r5, #12
 8006802:	bf38      	it	cc
 8006804:	250c      	movcc	r5, #12
 8006806:	2d00      	cmp	r5, #0
 8006808:	4606      	mov	r6, r0
 800680a:	db01      	blt.n	8006810 <_malloc_r+0x1c>
 800680c:	42a9      	cmp	r1, r5
 800680e:	d904      	bls.n	800681a <_malloc_r+0x26>
 8006810:	230c      	movs	r3, #12
 8006812:	6033      	str	r3, [r6, #0]
 8006814:	2000      	movs	r0, #0
 8006816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800681a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80068f0 <_malloc_r+0xfc>
 800681e:	f000 f869 	bl	80068f4 <__malloc_lock>
 8006822:	f8d8 3000 	ldr.w	r3, [r8]
 8006826:	461c      	mov	r4, r3
 8006828:	bb44      	cbnz	r4, 800687c <_malloc_r+0x88>
 800682a:	4629      	mov	r1, r5
 800682c:	4630      	mov	r0, r6
 800682e:	f7ff ffbf 	bl	80067b0 <sbrk_aligned>
 8006832:	1c43      	adds	r3, r0, #1
 8006834:	4604      	mov	r4, r0
 8006836:	d158      	bne.n	80068ea <_malloc_r+0xf6>
 8006838:	f8d8 4000 	ldr.w	r4, [r8]
 800683c:	4627      	mov	r7, r4
 800683e:	2f00      	cmp	r7, #0
 8006840:	d143      	bne.n	80068ca <_malloc_r+0xd6>
 8006842:	2c00      	cmp	r4, #0
 8006844:	d04b      	beq.n	80068de <_malloc_r+0xea>
 8006846:	6823      	ldr	r3, [r4, #0]
 8006848:	4639      	mov	r1, r7
 800684a:	4630      	mov	r0, r6
 800684c:	eb04 0903 	add.w	r9, r4, r3
 8006850:	f000 fc5c 	bl	800710c <_sbrk_r>
 8006854:	4581      	cmp	r9, r0
 8006856:	d142      	bne.n	80068de <_malloc_r+0xea>
 8006858:	6821      	ldr	r1, [r4, #0]
 800685a:	1a6d      	subs	r5, r5, r1
 800685c:	4629      	mov	r1, r5
 800685e:	4630      	mov	r0, r6
 8006860:	f7ff ffa6 	bl	80067b0 <sbrk_aligned>
 8006864:	3001      	adds	r0, #1
 8006866:	d03a      	beq.n	80068de <_malloc_r+0xea>
 8006868:	6823      	ldr	r3, [r4, #0]
 800686a:	442b      	add	r3, r5
 800686c:	6023      	str	r3, [r4, #0]
 800686e:	f8d8 3000 	ldr.w	r3, [r8]
 8006872:	685a      	ldr	r2, [r3, #4]
 8006874:	bb62      	cbnz	r2, 80068d0 <_malloc_r+0xdc>
 8006876:	f8c8 7000 	str.w	r7, [r8]
 800687a:	e00f      	b.n	800689c <_malloc_r+0xa8>
 800687c:	6822      	ldr	r2, [r4, #0]
 800687e:	1b52      	subs	r2, r2, r5
 8006880:	d420      	bmi.n	80068c4 <_malloc_r+0xd0>
 8006882:	2a0b      	cmp	r2, #11
 8006884:	d917      	bls.n	80068b6 <_malloc_r+0xc2>
 8006886:	1961      	adds	r1, r4, r5
 8006888:	42a3      	cmp	r3, r4
 800688a:	6025      	str	r5, [r4, #0]
 800688c:	bf18      	it	ne
 800688e:	6059      	strne	r1, [r3, #4]
 8006890:	6863      	ldr	r3, [r4, #4]
 8006892:	bf08      	it	eq
 8006894:	f8c8 1000 	streq.w	r1, [r8]
 8006898:	5162      	str	r2, [r4, r5]
 800689a:	604b      	str	r3, [r1, #4]
 800689c:	4630      	mov	r0, r6
 800689e:	f000 f82f 	bl	8006900 <__malloc_unlock>
 80068a2:	f104 000b 	add.w	r0, r4, #11
 80068a6:	1d23      	adds	r3, r4, #4
 80068a8:	f020 0007 	bic.w	r0, r0, #7
 80068ac:	1ac2      	subs	r2, r0, r3
 80068ae:	bf1c      	itt	ne
 80068b0:	1a1b      	subne	r3, r3, r0
 80068b2:	50a3      	strne	r3, [r4, r2]
 80068b4:	e7af      	b.n	8006816 <_malloc_r+0x22>
 80068b6:	6862      	ldr	r2, [r4, #4]
 80068b8:	42a3      	cmp	r3, r4
 80068ba:	bf0c      	ite	eq
 80068bc:	f8c8 2000 	streq.w	r2, [r8]
 80068c0:	605a      	strne	r2, [r3, #4]
 80068c2:	e7eb      	b.n	800689c <_malloc_r+0xa8>
 80068c4:	4623      	mov	r3, r4
 80068c6:	6864      	ldr	r4, [r4, #4]
 80068c8:	e7ae      	b.n	8006828 <_malloc_r+0x34>
 80068ca:	463c      	mov	r4, r7
 80068cc:	687f      	ldr	r7, [r7, #4]
 80068ce:	e7b6      	b.n	800683e <_malloc_r+0x4a>
 80068d0:	461a      	mov	r2, r3
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	42a3      	cmp	r3, r4
 80068d6:	d1fb      	bne.n	80068d0 <_malloc_r+0xdc>
 80068d8:	2300      	movs	r3, #0
 80068da:	6053      	str	r3, [r2, #4]
 80068dc:	e7de      	b.n	800689c <_malloc_r+0xa8>
 80068de:	230c      	movs	r3, #12
 80068e0:	6033      	str	r3, [r6, #0]
 80068e2:	4630      	mov	r0, r6
 80068e4:	f000 f80c 	bl	8006900 <__malloc_unlock>
 80068e8:	e794      	b.n	8006814 <_malloc_r+0x20>
 80068ea:	6005      	str	r5, [r0, #0]
 80068ec:	e7d6      	b.n	800689c <_malloc_r+0xa8>
 80068ee:	bf00      	nop
 80068f0:	240002b8 	.word	0x240002b8

080068f4 <__malloc_lock>:
 80068f4:	4801      	ldr	r0, [pc, #4]	@ (80068fc <__malloc_lock+0x8>)
 80068f6:	f7ff bf0e 	b.w	8006716 <__retarget_lock_acquire_recursive>
 80068fa:	bf00      	nop
 80068fc:	240002b0 	.word	0x240002b0

08006900 <__malloc_unlock>:
 8006900:	4801      	ldr	r0, [pc, #4]	@ (8006908 <__malloc_unlock+0x8>)
 8006902:	f7ff bf09 	b.w	8006718 <__retarget_lock_release_recursive>
 8006906:	bf00      	nop
 8006908:	240002b0 	.word	0x240002b0

0800690c <__sfputc_r>:
 800690c:	6893      	ldr	r3, [r2, #8]
 800690e:	3b01      	subs	r3, #1
 8006910:	2b00      	cmp	r3, #0
 8006912:	b410      	push	{r4}
 8006914:	6093      	str	r3, [r2, #8]
 8006916:	da08      	bge.n	800692a <__sfputc_r+0x1e>
 8006918:	6994      	ldr	r4, [r2, #24]
 800691a:	42a3      	cmp	r3, r4
 800691c:	db01      	blt.n	8006922 <__sfputc_r+0x16>
 800691e:	290a      	cmp	r1, #10
 8006920:	d103      	bne.n	800692a <__sfputc_r+0x1e>
 8006922:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006926:	f7ff bde8 	b.w	80064fa <__swbuf_r>
 800692a:	6813      	ldr	r3, [r2, #0]
 800692c:	1c58      	adds	r0, r3, #1
 800692e:	6010      	str	r0, [r2, #0]
 8006930:	7019      	strb	r1, [r3, #0]
 8006932:	4608      	mov	r0, r1
 8006934:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006938:	4770      	bx	lr

0800693a <__sfputs_r>:
 800693a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800693c:	4606      	mov	r6, r0
 800693e:	460f      	mov	r7, r1
 8006940:	4614      	mov	r4, r2
 8006942:	18d5      	adds	r5, r2, r3
 8006944:	42ac      	cmp	r4, r5
 8006946:	d101      	bne.n	800694c <__sfputs_r+0x12>
 8006948:	2000      	movs	r0, #0
 800694a:	e007      	b.n	800695c <__sfputs_r+0x22>
 800694c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006950:	463a      	mov	r2, r7
 8006952:	4630      	mov	r0, r6
 8006954:	f7ff ffda 	bl	800690c <__sfputc_r>
 8006958:	1c43      	adds	r3, r0, #1
 800695a:	d1f3      	bne.n	8006944 <__sfputs_r+0xa>
 800695c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006960 <_vfiprintf_r>:
 8006960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006964:	460d      	mov	r5, r1
 8006966:	b09d      	sub	sp, #116	@ 0x74
 8006968:	4614      	mov	r4, r2
 800696a:	4698      	mov	r8, r3
 800696c:	4606      	mov	r6, r0
 800696e:	b118      	cbz	r0, 8006978 <_vfiprintf_r+0x18>
 8006970:	6a03      	ldr	r3, [r0, #32]
 8006972:	b90b      	cbnz	r3, 8006978 <_vfiprintf_r+0x18>
 8006974:	f7ff fcd8 	bl	8006328 <__sinit>
 8006978:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800697a:	07d9      	lsls	r1, r3, #31
 800697c:	d405      	bmi.n	800698a <_vfiprintf_r+0x2a>
 800697e:	89ab      	ldrh	r3, [r5, #12]
 8006980:	059a      	lsls	r2, r3, #22
 8006982:	d402      	bmi.n	800698a <_vfiprintf_r+0x2a>
 8006984:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006986:	f7ff fec6 	bl	8006716 <__retarget_lock_acquire_recursive>
 800698a:	89ab      	ldrh	r3, [r5, #12]
 800698c:	071b      	lsls	r3, r3, #28
 800698e:	d501      	bpl.n	8006994 <_vfiprintf_r+0x34>
 8006990:	692b      	ldr	r3, [r5, #16]
 8006992:	b99b      	cbnz	r3, 80069bc <_vfiprintf_r+0x5c>
 8006994:	4629      	mov	r1, r5
 8006996:	4630      	mov	r0, r6
 8006998:	f7ff fdee 	bl	8006578 <__swsetup_r>
 800699c:	b170      	cbz	r0, 80069bc <_vfiprintf_r+0x5c>
 800699e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80069a0:	07dc      	lsls	r4, r3, #31
 80069a2:	d504      	bpl.n	80069ae <_vfiprintf_r+0x4e>
 80069a4:	f04f 30ff 	mov.w	r0, #4294967295
 80069a8:	b01d      	add	sp, #116	@ 0x74
 80069aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069ae:	89ab      	ldrh	r3, [r5, #12]
 80069b0:	0598      	lsls	r0, r3, #22
 80069b2:	d4f7      	bmi.n	80069a4 <_vfiprintf_r+0x44>
 80069b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80069b6:	f7ff feaf 	bl	8006718 <__retarget_lock_release_recursive>
 80069ba:	e7f3      	b.n	80069a4 <_vfiprintf_r+0x44>
 80069bc:	2300      	movs	r3, #0
 80069be:	9309      	str	r3, [sp, #36]	@ 0x24
 80069c0:	2320      	movs	r3, #32
 80069c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80069c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80069ca:	2330      	movs	r3, #48	@ 0x30
 80069cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006b7c <_vfiprintf_r+0x21c>
 80069d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80069d4:	f04f 0901 	mov.w	r9, #1
 80069d8:	4623      	mov	r3, r4
 80069da:	469a      	mov	sl, r3
 80069dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069e0:	b10a      	cbz	r2, 80069e6 <_vfiprintf_r+0x86>
 80069e2:	2a25      	cmp	r2, #37	@ 0x25
 80069e4:	d1f9      	bne.n	80069da <_vfiprintf_r+0x7a>
 80069e6:	ebba 0b04 	subs.w	fp, sl, r4
 80069ea:	d00b      	beq.n	8006a04 <_vfiprintf_r+0xa4>
 80069ec:	465b      	mov	r3, fp
 80069ee:	4622      	mov	r2, r4
 80069f0:	4629      	mov	r1, r5
 80069f2:	4630      	mov	r0, r6
 80069f4:	f7ff ffa1 	bl	800693a <__sfputs_r>
 80069f8:	3001      	adds	r0, #1
 80069fa:	f000 80a7 	beq.w	8006b4c <_vfiprintf_r+0x1ec>
 80069fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a00:	445a      	add	r2, fp
 8006a02:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a04:	f89a 3000 	ldrb.w	r3, [sl]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f000 809f 	beq.w	8006b4c <_vfiprintf_r+0x1ec>
 8006a0e:	2300      	movs	r3, #0
 8006a10:	f04f 32ff 	mov.w	r2, #4294967295
 8006a14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a18:	f10a 0a01 	add.w	sl, sl, #1
 8006a1c:	9304      	str	r3, [sp, #16]
 8006a1e:	9307      	str	r3, [sp, #28]
 8006a20:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006a24:	931a      	str	r3, [sp, #104]	@ 0x68
 8006a26:	4654      	mov	r4, sl
 8006a28:	2205      	movs	r2, #5
 8006a2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a2e:	4853      	ldr	r0, [pc, #332]	@ (8006b7c <_vfiprintf_r+0x21c>)
 8006a30:	f7f9 fc6e 	bl	8000310 <memchr>
 8006a34:	9a04      	ldr	r2, [sp, #16]
 8006a36:	b9d8      	cbnz	r0, 8006a70 <_vfiprintf_r+0x110>
 8006a38:	06d1      	lsls	r1, r2, #27
 8006a3a:	bf44      	itt	mi
 8006a3c:	2320      	movmi	r3, #32
 8006a3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a42:	0713      	lsls	r3, r2, #28
 8006a44:	bf44      	itt	mi
 8006a46:	232b      	movmi	r3, #43	@ 0x2b
 8006a48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a4c:	f89a 3000 	ldrb.w	r3, [sl]
 8006a50:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a52:	d015      	beq.n	8006a80 <_vfiprintf_r+0x120>
 8006a54:	9a07      	ldr	r2, [sp, #28]
 8006a56:	4654      	mov	r4, sl
 8006a58:	2000      	movs	r0, #0
 8006a5a:	f04f 0c0a 	mov.w	ip, #10
 8006a5e:	4621      	mov	r1, r4
 8006a60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a64:	3b30      	subs	r3, #48	@ 0x30
 8006a66:	2b09      	cmp	r3, #9
 8006a68:	d94b      	bls.n	8006b02 <_vfiprintf_r+0x1a2>
 8006a6a:	b1b0      	cbz	r0, 8006a9a <_vfiprintf_r+0x13a>
 8006a6c:	9207      	str	r2, [sp, #28]
 8006a6e:	e014      	b.n	8006a9a <_vfiprintf_r+0x13a>
 8006a70:	eba0 0308 	sub.w	r3, r0, r8
 8006a74:	fa09 f303 	lsl.w	r3, r9, r3
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	9304      	str	r3, [sp, #16]
 8006a7c:	46a2      	mov	sl, r4
 8006a7e:	e7d2      	b.n	8006a26 <_vfiprintf_r+0xc6>
 8006a80:	9b03      	ldr	r3, [sp, #12]
 8006a82:	1d19      	adds	r1, r3, #4
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	9103      	str	r1, [sp, #12]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	bfbb      	ittet	lt
 8006a8c:	425b      	neglt	r3, r3
 8006a8e:	f042 0202 	orrlt.w	r2, r2, #2
 8006a92:	9307      	strge	r3, [sp, #28]
 8006a94:	9307      	strlt	r3, [sp, #28]
 8006a96:	bfb8      	it	lt
 8006a98:	9204      	strlt	r2, [sp, #16]
 8006a9a:	7823      	ldrb	r3, [r4, #0]
 8006a9c:	2b2e      	cmp	r3, #46	@ 0x2e
 8006a9e:	d10a      	bne.n	8006ab6 <_vfiprintf_r+0x156>
 8006aa0:	7863      	ldrb	r3, [r4, #1]
 8006aa2:	2b2a      	cmp	r3, #42	@ 0x2a
 8006aa4:	d132      	bne.n	8006b0c <_vfiprintf_r+0x1ac>
 8006aa6:	9b03      	ldr	r3, [sp, #12]
 8006aa8:	1d1a      	adds	r2, r3, #4
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	9203      	str	r2, [sp, #12]
 8006aae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006ab2:	3402      	adds	r4, #2
 8006ab4:	9305      	str	r3, [sp, #20]
 8006ab6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006b8c <_vfiprintf_r+0x22c>
 8006aba:	7821      	ldrb	r1, [r4, #0]
 8006abc:	2203      	movs	r2, #3
 8006abe:	4650      	mov	r0, sl
 8006ac0:	f7f9 fc26 	bl	8000310 <memchr>
 8006ac4:	b138      	cbz	r0, 8006ad6 <_vfiprintf_r+0x176>
 8006ac6:	9b04      	ldr	r3, [sp, #16]
 8006ac8:	eba0 000a 	sub.w	r0, r0, sl
 8006acc:	2240      	movs	r2, #64	@ 0x40
 8006ace:	4082      	lsls	r2, r0
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	3401      	adds	r4, #1
 8006ad4:	9304      	str	r3, [sp, #16]
 8006ad6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ada:	4829      	ldr	r0, [pc, #164]	@ (8006b80 <_vfiprintf_r+0x220>)
 8006adc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006ae0:	2206      	movs	r2, #6
 8006ae2:	f7f9 fc15 	bl	8000310 <memchr>
 8006ae6:	2800      	cmp	r0, #0
 8006ae8:	d03f      	beq.n	8006b6a <_vfiprintf_r+0x20a>
 8006aea:	4b26      	ldr	r3, [pc, #152]	@ (8006b84 <_vfiprintf_r+0x224>)
 8006aec:	bb1b      	cbnz	r3, 8006b36 <_vfiprintf_r+0x1d6>
 8006aee:	9b03      	ldr	r3, [sp, #12]
 8006af0:	3307      	adds	r3, #7
 8006af2:	f023 0307 	bic.w	r3, r3, #7
 8006af6:	3308      	adds	r3, #8
 8006af8:	9303      	str	r3, [sp, #12]
 8006afa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006afc:	443b      	add	r3, r7
 8006afe:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b00:	e76a      	b.n	80069d8 <_vfiprintf_r+0x78>
 8006b02:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b06:	460c      	mov	r4, r1
 8006b08:	2001      	movs	r0, #1
 8006b0a:	e7a8      	b.n	8006a5e <_vfiprintf_r+0xfe>
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	3401      	adds	r4, #1
 8006b10:	9305      	str	r3, [sp, #20]
 8006b12:	4619      	mov	r1, r3
 8006b14:	f04f 0c0a 	mov.w	ip, #10
 8006b18:	4620      	mov	r0, r4
 8006b1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b1e:	3a30      	subs	r2, #48	@ 0x30
 8006b20:	2a09      	cmp	r2, #9
 8006b22:	d903      	bls.n	8006b2c <_vfiprintf_r+0x1cc>
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d0c6      	beq.n	8006ab6 <_vfiprintf_r+0x156>
 8006b28:	9105      	str	r1, [sp, #20]
 8006b2a:	e7c4      	b.n	8006ab6 <_vfiprintf_r+0x156>
 8006b2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b30:	4604      	mov	r4, r0
 8006b32:	2301      	movs	r3, #1
 8006b34:	e7f0      	b.n	8006b18 <_vfiprintf_r+0x1b8>
 8006b36:	ab03      	add	r3, sp, #12
 8006b38:	9300      	str	r3, [sp, #0]
 8006b3a:	462a      	mov	r2, r5
 8006b3c:	4b12      	ldr	r3, [pc, #72]	@ (8006b88 <_vfiprintf_r+0x228>)
 8006b3e:	a904      	add	r1, sp, #16
 8006b40:	4630      	mov	r0, r6
 8006b42:	f3af 8000 	nop.w
 8006b46:	4607      	mov	r7, r0
 8006b48:	1c78      	adds	r0, r7, #1
 8006b4a:	d1d6      	bne.n	8006afa <_vfiprintf_r+0x19a>
 8006b4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b4e:	07d9      	lsls	r1, r3, #31
 8006b50:	d405      	bmi.n	8006b5e <_vfiprintf_r+0x1fe>
 8006b52:	89ab      	ldrh	r3, [r5, #12]
 8006b54:	059a      	lsls	r2, r3, #22
 8006b56:	d402      	bmi.n	8006b5e <_vfiprintf_r+0x1fe>
 8006b58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b5a:	f7ff fddd 	bl	8006718 <__retarget_lock_release_recursive>
 8006b5e:	89ab      	ldrh	r3, [r5, #12]
 8006b60:	065b      	lsls	r3, r3, #25
 8006b62:	f53f af1f 	bmi.w	80069a4 <_vfiprintf_r+0x44>
 8006b66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006b68:	e71e      	b.n	80069a8 <_vfiprintf_r+0x48>
 8006b6a:	ab03      	add	r3, sp, #12
 8006b6c:	9300      	str	r3, [sp, #0]
 8006b6e:	462a      	mov	r2, r5
 8006b70:	4b05      	ldr	r3, [pc, #20]	@ (8006b88 <_vfiprintf_r+0x228>)
 8006b72:	a904      	add	r1, sp, #16
 8006b74:	4630      	mov	r0, r6
 8006b76:	f000 f879 	bl	8006c6c <_printf_i>
 8006b7a:	e7e4      	b.n	8006b46 <_vfiprintf_r+0x1e6>
 8006b7c:	0800718c 	.word	0x0800718c
 8006b80:	08007196 	.word	0x08007196
 8006b84:	00000000 	.word	0x00000000
 8006b88:	0800693b 	.word	0x0800693b
 8006b8c:	08007192 	.word	0x08007192

08006b90 <_printf_common>:
 8006b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b94:	4616      	mov	r6, r2
 8006b96:	4698      	mov	r8, r3
 8006b98:	688a      	ldr	r2, [r1, #8]
 8006b9a:	690b      	ldr	r3, [r1, #16]
 8006b9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	bfb8      	it	lt
 8006ba4:	4613      	movlt	r3, r2
 8006ba6:	6033      	str	r3, [r6, #0]
 8006ba8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006bac:	4607      	mov	r7, r0
 8006bae:	460c      	mov	r4, r1
 8006bb0:	b10a      	cbz	r2, 8006bb6 <_printf_common+0x26>
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	6033      	str	r3, [r6, #0]
 8006bb6:	6823      	ldr	r3, [r4, #0]
 8006bb8:	0699      	lsls	r1, r3, #26
 8006bba:	bf42      	ittt	mi
 8006bbc:	6833      	ldrmi	r3, [r6, #0]
 8006bbe:	3302      	addmi	r3, #2
 8006bc0:	6033      	strmi	r3, [r6, #0]
 8006bc2:	6825      	ldr	r5, [r4, #0]
 8006bc4:	f015 0506 	ands.w	r5, r5, #6
 8006bc8:	d106      	bne.n	8006bd8 <_printf_common+0x48>
 8006bca:	f104 0a19 	add.w	sl, r4, #25
 8006bce:	68e3      	ldr	r3, [r4, #12]
 8006bd0:	6832      	ldr	r2, [r6, #0]
 8006bd2:	1a9b      	subs	r3, r3, r2
 8006bd4:	42ab      	cmp	r3, r5
 8006bd6:	dc26      	bgt.n	8006c26 <_printf_common+0x96>
 8006bd8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006bdc:	6822      	ldr	r2, [r4, #0]
 8006bde:	3b00      	subs	r3, #0
 8006be0:	bf18      	it	ne
 8006be2:	2301      	movne	r3, #1
 8006be4:	0692      	lsls	r2, r2, #26
 8006be6:	d42b      	bmi.n	8006c40 <_printf_common+0xb0>
 8006be8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006bec:	4641      	mov	r1, r8
 8006bee:	4638      	mov	r0, r7
 8006bf0:	47c8      	blx	r9
 8006bf2:	3001      	adds	r0, #1
 8006bf4:	d01e      	beq.n	8006c34 <_printf_common+0xa4>
 8006bf6:	6823      	ldr	r3, [r4, #0]
 8006bf8:	6922      	ldr	r2, [r4, #16]
 8006bfa:	f003 0306 	and.w	r3, r3, #6
 8006bfe:	2b04      	cmp	r3, #4
 8006c00:	bf02      	ittt	eq
 8006c02:	68e5      	ldreq	r5, [r4, #12]
 8006c04:	6833      	ldreq	r3, [r6, #0]
 8006c06:	1aed      	subeq	r5, r5, r3
 8006c08:	68a3      	ldr	r3, [r4, #8]
 8006c0a:	bf0c      	ite	eq
 8006c0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c10:	2500      	movne	r5, #0
 8006c12:	4293      	cmp	r3, r2
 8006c14:	bfc4      	itt	gt
 8006c16:	1a9b      	subgt	r3, r3, r2
 8006c18:	18ed      	addgt	r5, r5, r3
 8006c1a:	2600      	movs	r6, #0
 8006c1c:	341a      	adds	r4, #26
 8006c1e:	42b5      	cmp	r5, r6
 8006c20:	d11a      	bne.n	8006c58 <_printf_common+0xc8>
 8006c22:	2000      	movs	r0, #0
 8006c24:	e008      	b.n	8006c38 <_printf_common+0xa8>
 8006c26:	2301      	movs	r3, #1
 8006c28:	4652      	mov	r2, sl
 8006c2a:	4641      	mov	r1, r8
 8006c2c:	4638      	mov	r0, r7
 8006c2e:	47c8      	blx	r9
 8006c30:	3001      	adds	r0, #1
 8006c32:	d103      	bne.n	8006c3c <_printf_common+0xac>
 8006c34:	f04f 30ff 	mov.w	r0, #4294967295
 8006c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c3c:	3501      	adds	r5, #1
 8006c3e:	e7c6      	b.n	8006bce <_printf_common+0x3e>
 8006c40:	18e1      	adds	r1, r4, r3
 8006c42:	1c5a      	adds	r2, r3, #1
 8006c44:	2030      	movs	r0, #48	@ 0x30
 8006c46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006c4a:	4422      	add	r2, r4
 8006c4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006c50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006c54:	3302      	adds	r3, #2
 8006c56:	e7c7      	b.n	8006be8 <_printf_common+0x58>
 8006c58:	2301      	movs	r3, #1
 8006c5a:	4622      	mov	r2, r4
 8006c5c:	4641      	mov	r1, r8
 8006c5e:	4638      	mov	r0, r7
 8006c60:	47c8      	blx	r9
 8006c62:	3001      	adds	r0, #1
 8006c64:	d0e6      	beq.n	8006c34 <_printf_common+0xa4>
 8006c66:	3601      	adds	r6, #1
 8006c68:	e7d9      	b.n	8006c1e <_printf_common+0x8e>
	...

08006c6c <_printf_i>:
 8006c6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c70:	7e0f      	ldrb	r7, [r1, #24]
 8006c72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006c74:	2f78      	cmp	r7, #120	@ 0x78
 8006c76:	4691      	mov	r9, r2
 8006c78:	4680      	mov	r8, r0
 8006c7a:	460c      	mov	r4, r1
 8006c7c:	469a      	mov	sl, r3
 8006c7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006c82:	d807      	bhi.n	8006c94 <_printf_i+0x28>
 8006c84:	2f62      	cmp	r7, #98	@ 0x62
 8006c86:	d80a      	bhi.n	8006c9e <_printf_i+0x32>
 8006c88:	2f00      	cmp	r7, #0
 8006c8a:	f000 80d2 	beq.w	8006e32 <_printf_i+0x1c6>
 8006c8e:	2f58      	cmp	r7, #88	@ 0x58
 8006c90:	f000 80b9 	beq.w	8006e06 <_printf_i+0x19a>
 8006c94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006c9c:	e03a      	b.n	8006d14 <_printf_i+0xa8>
 8006c9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006ca2:	2b15      	cmp	r3, #21
 8006ca4:	d8f6      	bhi.n	8006c94 <_printf_i+0x28>
 8006ca6:	a101      	add	r1, pc, #4	@ (adr r1, 8006cac <_printf_i+0x40>)
 8006ca8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006cac:	08006d05 	.word	0x08006d05
 8006cb0:	08006d19 	.word	0x08006d19
 8006cb4:	08006c95 	.word	0x08006c95
 8006cb8:	08006c95 	.word	0x08006c95
 8006cbc:	08006c95 	.word	0x08006c95
 8006cc0:	08006c95 	.word	0x08006c95
 8006cc4:	08006d19 	.word	0x08006d19
 8006cc8:	08006c95 	.word	0x08006c95
 8006ccc:	08006c95 	.word	0x08006c95
 8006cd0:	08006c95 	.word	0x08006c95
 8006cd4:	08006c95 	.word	0x08006c95
 8006cd8:	08006e19 	.word	0x08006e19
 8006cdc:	08006d43 	.word	0x08006d43
 8006ce0:	08006dd3 	.word	0x08006dd3
 8006ce4:	08006c95 	.word	0x08006c95
 8006ce8:	08006c95 	.word	0x08006c95
 8006cec:	08006e3b 	.word	0x08006e3b
 8006cf0:	08006c95 	.word	0x08006c95
 8006cf4:	08006d43 	.word	0x08006d43
 8006cf8:	08006c95 	.word	0x08006c95
 8006cfc:	08006c95 	.word	0x08006c95
 8006d00:	08006ddb 	.word	0x08006ddb
 8006d04:	6833      	ldr	r3, [r6, #0]
 8006d06:	1d1a      	adds	r2, r3, #4
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	6032      	str	r2, [r6, #0]
 8006d0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006d14:	2301      	movs	r3, #1
 8006d16:	e09d      	b.n	8006e54 <_printf_i+0x1e8>
 8006d18:	6833      	ldr	r3, [r6, #0]
 8006d1a:	6820      	ldr	r0, [r4, #0]
 8006d1c:	1d19      	adds	r1, r3, #4
 8006d1e:	6031      	str	r1, [r6, #0]
 8006d20:	0606      	lsls	r6, r0, #24
 8006d22:	d501      	bpl.n	8006d28 <_printf_i+0xbc>
 8006d24:	681d      	ldr	r5, [r3, #0]
 8006d26:	e003      	b.n	8006d30 <_printf_i+0xc4>
 8006d28:	0645      	lsls	r5, r0, #25
 8006d2a:	d5fb      	bpl.n	8006d24 <_printf_i+0xb8>
 8006d2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006d30:	2d00      	cmp	r5, #0
 8006d32:	da03      	bge.n	8006d3c <_printf_i+0xd0>
 8006d34:	232d      	movs	r3, #45	@ 0x2d
 8006d36:	426d      	negs	r5, r5
 8006d38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d3c:	4859      	ldr	r0, [pc, #356]	@ (8006ea4 <_printf_i+0x238>)
 8006d3e:	230a      	movs	r3, #10
 8006d40:	e011      	b.n	8006d66 <_printf_i+0xfa>
 8006d42:	6821      	ldr	r1, [r4, #0]
 8006d44:	6833      	ldr	r3, [r6, #0]
 8006d46:	0608      	lsls	r0, r1, #24
 8006d48:	f853 5b04 	ldr.w	r5, [r3], #4
 8006d4c:	d402      	bmi.n	8006d54 <_printf_i+0xe8>
 8006d4e:	0649      	lsls	r1, r1, #25
 8006d50:	bf48      	it	mi
 8006d52:	b2ad      	uxthmi	r5, r5
 8006d54:	2f6f      	cmp	r7, #111	@ 0x6f
 8006d56:	4853      	ldr	r0, [pc, #332]	@ (8006ea4 <_printf_i+0x238>)
 8006d58:	6033      	str	r3, [r6, #0]
 8006d5a:	bf14      	ite	ne
 8006d5c:	230a      	movne	r3, #10
 8006d5e:	2308      	moveq	r3, #8
 8006d60:	2100      	movs	r1, #0
 8006d62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006d66:	6866      	ldr	r6, [r4, #4]
 8006d68:	60a6      	str	r6, [r4, #8]
 8006d6a:	2e00      	cmp	r6, #0
 8006d6c:	bfa2      	ittt	ge
 8006d6e:	6821      	ldrge	r1, [r4, #0]
 8006d70:	f021 0104 	bicge.w	r1, r1, #4
 8006d74:	6021      	strge	r1, [r4, #0]
 8006d76:	b90d      	cbnz	r5, 8006d7c <_printf_i+0x110>
 8006d78:	2e00      	cmp	r6, #0
 8006d7a:	d04b      	beq.n	8006e14 <_printf_i+0x1a8>
 8006d7c:	4616      	mov	r6, r2
 8006d7e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d82:	fb03 5711 	mls	r7, r3, r1, r5
 8006d86:	5dc7      	ldrb	r7, [r0, r7]
 8006d88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d8c:	462f      	mov	r7, r5
 8006d8e:	42bb      	cmp	r3, r7
 8006d90:	460d      	mov	r5, r1
 8006d92:	d9f4      	bls.n	8006d7e <_printf_i+0x112>
 8006d94:	2b08      	cmp	r3, #8
 8006d96:	d10b      	bne.n	8006db0 <_printf_i+0x144>
 8006d98:	6823      	ldr	r3, [r4, #0]
 8006d9a:	07df      	lsls	r7, r3, #31
 8006d9c:	d508      	bpl.n	8006db0 <_printf_i+0x144>
 8006d9e:	6923      	ldr	r3, [r4, #16]
 8006da0:	6861      	ldr	r1, [r4, #4]
 8006da2:	4299      	cmp	r1, r3
 8006da4:	bfde      	ittt	le
 8006da6:	2330      	movle	r3, #48	@ 0x30
 8006da8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006dac:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006db0:	1b92      	subs	r2, r2, r6
 8006db2:	6122      	str	r2, [r4, #16]
 8006db4:	f8cd a000 	str.w	sl, [sp]
 8006db8:	464b      	mov	r3, r9
 8006dba:	aa03      	add	r2, sp, #12
 8006dbc:	4621      	mov	r1, r4
 8006dbe:	4640      	mov	r0, r8
 8006dc0:	f7ff fee6 	bl	8006b90 <_printf_common>
 8006dc4:	3001      	adds	r0, #1
 8006dc6:	d14a      	bne.n	8006e5e <_printf_i+0x1f2>
 8006dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dcc:	b004      	add	sp, #16
 8006dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dd2:	6823      	ldr	r3, [r4, #0]
 8006dd4:	f043 0320 	orr.w	r3, r3, #32
 8006dd8:	6023      	str	r3, [r4, #0]
 8006dda:	4833      	ldr	r0, [pc, #204]	@ (8006ea8 <_printf_i+0x23c>)
 8006ddc:	2778      	movs	r7, #120	@ 0x78
 8006dde:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006de2:	6823      	ldr	r3, [r4, #0]
 8006de4:	6831      	ldr	r1, [r6, #0]
 8006de6:	061f      	lsls	r7, r3, #24
 8006de8:	f851 5b04 	ldr.w	r5, [r1], #4
 8006dec:	d402      	bmi.n	8006df4 <_printf_i+0x188>
 8006dee:	065f      	lsls	r7, r3, #25
 8006df0:	bf48      	it	mi
 8006df2:	b2ad      	uxthmi	r5, r5
 8006df4:	6031      	str	r1, [r6, #0]
 8006df6:	07d9      	lsls	r1, r3, #31
 8006df8:	bf44      	itt	mi
 8006dfa:	f043 0320 	orrmi.w	r3, r3, #32
 8006dfe:	6023      	strmi	r3, [r4, #0]
 8006e00:	b11d      	cbz	r5, 8006e0a <_printf_i+0x19e>
 8006e02:	2310      	movs	r3, #16
 8006e04:	e7ac      	b.n	8006d60 <_printf_i+0xf4>
 8006e06:	4827      	ldr	r0, [pc, #156]	@ (8006ea4 <_printf_i+0x238>)
 8006e08:	e7e9      	b.n	8006dde <_printf_i+0x172>
 8006e0a:	6823      	ldr	r3, [r4, #0]
 8006e0c:	f023 0320 	bic.w	r3, r3, #32
 8006e10:	6023      	str	r3, [r4, #0]
 8006e12:	e7f6      	b.n	8006e02 <_printf_i+0x196>
 8006e14:	4616      	mov	r6, r2
 8006e16:	e7bd      	b.n	8006d94 <_printf_i+0x128>
 8006e18:	6833      	ldr	r3, [r6, #0]
 8006e1a:	6825      	ldr	r5, [r4, #0]
 8006e1c:	6961      	ldr	r1, [r4, #20]
 8006e1e:	1d18      	adds	r0, r3, #4
 8006e20:	6030      	str	r0, [r6, #0]
 8006e22:	062e      	lsls	r6, r5, #24
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	d501      	bpl.n	8006e2c <_printf_i+0x1c0>
 8006e28:	6019      	str	r1, [r3, #0]
 8006e2a:	e002      	b.n	8006e32 <_printf_i+0x1c6>
 8006e2c:	0668      	lsls	r0, r5, #25
 8006e2e:	d5fb      	bpl.n	8006e28 <_printf_i+0x1bc>
 8006e30:	8019      	strh	r1, [r3, #0]
 8006e32:	2300      	movs	r3, #0
 8006e34:	6123      	str	r3, [r4, #16]
 8006e36:	4616      	mov	r6, r2
 8006e38:	e7bc      	b.n	8006db4 <_printf_i+0x148>
 8006e3a:	6833      	ldr	r3, [r6, #0]
 8006e3c:	1d1a      	adds	r2, r3, #4
 8006e3e:	6032      	str	r2, [r6, #0]
 8006e40:	681e      	ldr	r6, [r3, #0]
 8006e42:	6862      	ldr	r2, [r4, #4]
 8006e44:	2100      	movs	r1, #0
 8006e46:	4630      	mov	r0, r6
 8006e48:	f7f9 fa62 	bl	8000310 <memchr>
 8006e4c:	b108      	cbz	r0, 8006e52 <_printf_i+0x1e6>
 8006e4e:	1b80      	subs	r0, r0, r6
 8006e50:	6060      	str	r0, [r4, #4]
 8006e52:	6863      	ldr	r3, [r4, #4]
 8006e54:	6123      	str	r3, [r4, #16]
 8006e56:	2300      	movs	r3, #0
 8006e58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e5c:	e7aa      	b.n	8006db4 <_printf_i+0x148>
 8006e5e:	6923      	ldr	r3, [r4, #16]
 8006e60:	4632      	mov	r2, r6
 8006e62:	4649      	mov	r1, r9
 8006e64:	4640      	mov	r0, r8
 8006e66:	47d0      	blx	sl
 8006e68:	3001      	adds	r0, #1
 8006e6a:	d0ad      	beq.n	8006dc8 <_printf_i+0x15c>
 8006e6c:	6823      	ldr	r3, [r4, #0]
 8006e6e:	079b      	lsls	r3, r3, #30
 8006e70:	d413      	bmi.n	8006e9a <_printf_i+0x22e>
 8006e72:	68e0      	ldr	r0, [r4, #12]
 8006e74:	9b03      	ldr	r3, [sp, #12]
 8006e76:	4298      	cmp	r0, r3
 8006e78:	bfb8      	it	lt
 8006e7a:	4618      	movlt	r0, r3
 8006e7c:	e7a6      	b.n	8006dcc <_printf_i+0x160>
 8006e7e:	2301      	movs	r3, #1
 8006e80:	4632      	mov	r2, r6
 8006e82:	4649      	mov	r1, r9
 8006e84:	4640      	mov	r0, r8
 8006e86:	47d0      	blx	sl
 8006e88:	3001      	adds	r0, #1
 8006e8a:	d09d      	beq.n	8006dc8 <_printf_i+0x15c>
 8006e8c:	3501      	adds	r5, #1
 8006e8e:	68e3      	ldr	r3, [r4, #12]
 8006e90:	9903      	ldr	r1, [sp, #12]
 8006e92:	1a5b      	subs	r3, r3, r1
 8006e94:	42ab      	cmp	r3, r5
 8006e96:	dcf2      	bgt.n	8006e7e <_printf_i+0x212>
 8006e98:	e7eb      	b.n	8006e72 <_printf_i+0x206>
 8006e9a:	2500      	movs	r5, #0
 8006e9c:	f104 0619 	add.w	r6, r4, #25
 8006ea0:	e7f5      	b.n	8006e8e <_printf_i+0x222>
 8006ea2:	bf00      	nop
 8006ea4:	0800719d 	.word	0x0800719d
 8006ea8:	080071ae 	.word	0x080071ae

08006eac <__sflush_r>:
 8006eac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eb4:	0716      	lsls	r6, r2, #28
 8006eb6:	4605      	mov	r5, r0
 8006eb8:	460c      	mov	r4, r1
 8006eba:	d454      	bmi.n	8006f66 <__sflush_r+0xba>
 8006ebc:	684b      	ldr	r3, [r1, #4]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	dc02      	bgt.n	8006ec8 <__sflush_r+0x1c>
 8006ec2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	dd48      	ble.n	8006f5a <__sflush_r+0xae>
 8006ec8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006eca:	2e00      	cmp	r6, #0
 8006ecc:	d045      	beq.n	8006f5a <__sflush_r+0xae>
 8006ece:	2300      	movs	r3, #0
 8006ed0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006ed4:	682f      	ldr	r7, [r5, #0]
 8006ed6:	6a21      	ldr	r1, [r4, #32]
 8006ed8:	602b      	str	r3, [r5, #0]
 8006eda:	d030      	beq.n	8006f3e <__sflush_r+0x92>
 8006edc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006ede:	89a3      	ldrh	r3, [r4, #12]
 8006ee0:	0759      	lsls	r1, r3, #29
 8006ee2:	d505      	bpl.n	8006ef0 <__sflush_r+0x44>
 8006ee4:	6863      	ldr	r3, [r4, #4]
 8006ee6:	1ad2      	subs	r2, r2, r3
 8006ee8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006eea:	b10b      	cbz	r3, 8006ef0 <__sflush_r+0x44>
 8006eec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006eee:	1ad2      	subs	r2, r2, r3
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ef4:	6a21      	ldr	r1, [r4, #32]
 8006ef6:	4628      	mov	r0, r5
 8006ef8:	47b0      	blx	r6
 8006efa:	1c43      	adds	r3, r0, #1
 8006efc:	89a3      	ldrh	r3, [r4, #12]
 8006efe:	d106      	bne.n	8006f0e <__sflush_r+0x62>
 8006f00:	6829      	ldr	r1, [r5, #0]
 8006f02:	291d      	cmp	r1, #29
 8006f04:	d82b      	bhi.n	8006f5e <__sflush_r+0xb2>
 8006f06:	4a2a      	ldr	r2, [pc, #168]	@ (8006fb0 <__sflush_r+0x104>)
 8006f08:	410a      	asrs	r2, r1
 8006f0a:	07d6      	lsls	r6, r2, #31
 8006f0c:	d427      	bmi.n	8006f5e <__sflush_r+0xb2>
 8006f0e:	2200      	movs	r2, #0
 8006f10:	6062      	str	r2, [r4, #4]
 8006f12:	04d9      	lsls	r1, r3, #19
 8006f14:	6922      	ldr	r2, [r4, #16]
 8006f16:	6022      	str	r2, [r4, #0]
 8006f18:	d504      	bpl.n	8006f24 <__sflush_r+0x78>
 8006f1a:	1c42      	adds	r2, r0, #1
 8006f1c:	d101      	bne.n	8006f22 <__sflush_r+0x76>
 8006f1e:	682b      	ldr	r3, [r5, #0]
 8006f20:	b903      	cbnz	r3, 8006f24 <__sflush_r+0x78>
 8006f22:	6560      	str	r0, [r4, #84]	@ 0x54
 8006f24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f26:	602f      	str	r7, [r5, #0]
 8006f28:	b1b9      	cbz	r1, 8006f5a <__sflush_r+0xae>
 8006f2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f2e:	4299      	cmp	r1, r3
 8006f30:	d002      	beq.n	8006f38 <__sflush_r+0x8c>
 8006f32:	4628      	mov	r0, r5
 8006f34:	f7ff fbf2 	bl	800671c <_free_r>
 8006f38:	2300      	movs	r3, #0
 8006f3a:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f3c:	e00d      	b.n	8006f5a <__sflush_r+0xae>
 8006f3e:	2301      	movs	r3, #1
 8006f40:	4628      	mov	r0, r5
 8006f42:	47b0      	blx	r6
 8006f44:	4602      	mov	r2, r0
 8006f46:	1c50      	adds	r0, r2, #1
 8006f48:	d1c9      	bne.n	8006ede <__sflush_r+0x32>
 8006f4a:	682b      	ldr	r3, [r5, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d0c6      	beq.n	8006ede <__sflush_r+0x32>
 8006f50:	2b1d      	cmp	r3, #29
 8006f52:	d001      	beq.n	8006f58 <__sflush_r+0xac>
 8006f54:	2b16      	cmp	r3, #22
 8006f56:	d11e      	bne.n	8006f96 <__sflush_r+0xea>
 8006f58:	602f      	str	r7, [r5, #0]
 8006f5a:	2000      	movs	r0, #0
 8006f5c:	e022      	b.n	8006fa4 <__sflush_r+0xf8>
 8006f5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f62:	b21b      	sxth	r3, r3
 8006f64:	e01b      	b.n	8006f9e <__sflush_r+0xf2>
 8006f66:	690f      	ldr	r7, [r1, #16]
 8006f68:	2f00      	cmp	r7, #0
 8006f6a:	d0f6      	beq.n	8006f5a <__sflush_r+0xae>
 8006f6c:	0793      	lsls	r3, r2, #30
 8006f6e:	680e      	ldr	r6, [r1, #0]
 8006f70:	bf08      	it	eq
 8006f72:	694b      	ldreq	r3, [r1, #20]
 8006f74:	600f      	str	r7, [r1, #0]
 8006f76:	bf18      	it	ne
 8006f78:	2300      	movne	r3, #0
 8006f7a:	eba6 0807 	sub.w	r8, r6, r7
 8006f7e:	608b      	str	r3, [r1, #8]
 8006f80:	f1b8 0f00 	cmp.w	r8, #0
 8006f84:	dde9      	ble.n	8006f5a <__sflush_r+0xae>
 8006f86:	6a21      	ldr	r1, [r4, #32]
 8006f88:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006f8a:	4643      	mov	r3, r8
 8006f8c:	463a      	mov	r2, r7
 8006f8e:	4628      	mov	r0, r5
 8006f90:	47b0      	blx	r6
 8006f92:	2800      	cmp	r0, #0
 8006f94:	dc08      	bgt.n	8006fa8 <__sflush_r+0xfc>
 8006f96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f9e:	81a3      	strh	r3, [r4, #12]
 8006fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fa8:	4407      	add	r7, r0
 8006faa:	eba8 0800 	sub.w	r8, r8, r0
 8006fae:	e7e7      	b.n	8006f80 <__sflush_r+0xd4>
 8006fb0:	dfbffffe 	.word	0xdfbffffe

08006fb4 <_fflush_r>:
 8006fb4:	b538      	push	{r3, r4, r5, lr}
 8006fb6:	690b      	ldr	r3, [r1, #16]
 8006fb8:	4605      	mov	r5, r0
 8006fba:	460c      	mov	r4, r1
 8006fbc:	b913      	cbnz	r3, 8006fc4 <_fflush_r+0x10>
 8006fbe:	2500      	movs	r5, #0
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	bd38      	pop	{r3, r4, r5, pc}
 8006fc4:	b118      	cbz	r0, 8006fce <_fflush_r+0x1a>
 8006fc6:	6a03      	ldr	r3, [r0, #32]
 8006fc8:	b90b      	cbnz	r3, 8006fce <_fflush_r+0x1a>
 8006fca:	f7ff f9ad 	bl	8006328 <__sinit>
 8006fce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d0f3      	beq.n	8006fbe <_fflush_r+0xa>
 8006fd6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006fd8:	07d0      	lsls	r0, r2, #31
 8006fda:	d404      	bmi.n	8006fe6 <_fflush_r+0x32>
 8006fdc:	0599      	lsls	r1, r3, #22
 8006fde:	d402      	bmi.n	8006fe6 <_fflush_r+0x32>
 8006fe0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006fe2:	f7ff fb98 	bl	8006716 <__retarget_lock_acquire_recursive>
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	4621      	mov	r1, r4
 8006fea:	f7ff ff5f 	bl	8006eac <__sflush_r>
 8006fee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ff0:	07da      	lsls	r2, r3, #31
 8006ff2:	4605      	mov	r5, r0
 8006ff4:	d4e4      	bmi.n	8006fc0 <_fflush_r+0xc>
 8006ff6:	89a3      	ldrh	r3, [r4, #12]
 8006ff8:	059b      	lsls	r3, r3, #22
 8006ffa:	d4e1      	bmi.n	8006fc0 <_fflush_r+0xc>
 8006ffc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ffe:	f7ff fb8b 	bl	8006718 <__retarget_lock_release_recursive>
 8007002:	e7dd      	b.n	8006fc0 <_fflush_r+0xc>

08007004 <__swhatbuf_r>:
 8007004:	b570      	push	{r4, r5, r6, lr}
 8007006:	460c      	mov	r4, r1
 8007008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800700c:	2900      	cmp	r1, #0
 800700e:	b096      	sub	sp, #88	@ 0x58
 8007010:	4615      	mov	r5, r2
 8007012:	461e      	mov	r6, r3
 8007014:	da0d      	bge.n	8007032 <__swhatbuf_r+0x2e>
 8007016:	89a3      	ldrh	r3, [r4, #12]
 8007018:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800701c:	f04f 0100 	mov.w	r1, #0
 8007020:	bf14      	ite	ne
 8007022:	2340      	movne	r3, #64	@ 0x40
 8007024:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007028:	2000      	movs	r0, #0
 800702a:	6031      	str	r1, [r6, #0]
 800702c:	602b      	str	r3, [r5, #0]
 800702e:	b016      	add	sp, #88	@ 0x58
 8007030:	bd70      	pop	{r4, r5, r6, pc}
 8007032:	466a      	mov	r2, sp
 8007034:	f000 f848 	bl	80070c8 <_fstat_r>
 8007038:	2800      	cmp	r0, #0
 800703a:	dbec      	blt.n	8007016 <__swhatbuf_r+0x12>
 800703c:	9901      	ldr	r1, [sp, #4]
 800703e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007042:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007046:	4259      	negs	r1, r3
 8007048:	4159      	adcs	r1, r3
 800704a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800704e:	e7eb      	b.n	8007028 <__swhatbuf_r+0x24>

08007050 <__smakebuf_r>:
 8007050:	898b      	ldrh	r3, [r1, #12]
 8007052:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007054:	079d      	lsls	r5, r3, #30
 8007056:	4606      	mov	r6, r0
 8007058:	460c      	mov	r4, r1
 800705a:	d507      	bpl.n	800706c <__smakebuf_r+0x1c>
 800705c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007060:	6023      	str	r3, [r4, #0]
 8007062:	6123      	str	r3, [r4, #16]
 8007064:	2301      	movs	r3, #1
 8007066:	6163      	str	r3, [r4, #20]
 8007068:	b003      	add	sp, #12
 800706a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800706c:	ab01      	add	r3, sp, #4
 800706e:	466a      	mov	r2, sp
 8007070:	f7ff ffc8 	bl	8007004 <__swhatbuf_r>
 8007074:	9f00      	ldr	r7, [sp, #0]
 8007076:	4605      	mov	r5, r0
 8007078:	4639      	mov	r1, r7
 800707a:	4630      	mov	r0, r6
 800707c:	f7ff fbba 	bl	80067f4 <_malloc_r>
 8007080:	b948      	cbnz	r0, 8007096 <__smakebuf_r+0x46>
 8007082:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007086:	059a      	lsls	r2, r3, #22
 8007088:	d4ee      	bmi.n	8007068 <__smakebuf_r+0x18>
 800708a:	f023 0303 	bic.w	r3, r3, #3
 800708e:	f043 0302 	orr.w	r3, r3, #2
 8007092:	81a3      	strh	r3, [r4, #12]
 8007094:	e7e2      	b.n	800705c <__smakebuf_r+0xc>
 8007096:	89a3      	ldrh	r3, [r4, #12]
 8007098:	6020      	str	r0, [r4, #0]
 800709a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800709e:	81a3      	strh	r3, [r4, #12]
 80070a0:	9b01      	ldr	r3, [sp, #4]
 80070a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80070a6:	b15b      	cbz	r3, 80070c0 <__smakebuf_r+0x70>
 80070a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070ac:	4630      	mov	r0, r6
 80070ae:	f000 f81d 	bl	80070ec <_isatty_r>
 80070b2:	b128      	cbz	r0, 80070c0 <__smakebuf_r+0x70>
 80070b4:	89a3      	ldrh	r3, [r4, #12]
 80070b6:	f023 0303 	bic.w	r3, r3, #3
 80070ba:	f043 0301 	orr.w	r3, r3, #1
 80070be:	81a3      	strh	r3, [r4, #12]
 80070c0:	89a3      	ldrh	r3, [r4, #12]
 80070c2:	431d      	orrs	r5, r3
 80070c4:	81a5      	strh	r5, [r4, #12]
 80070c6:	e7cf      	b.n	8007068 <__smakebuf_r+0x18>

080070c8 <_fstat_r>:
 80070c8:	b538      	push	{r3, r4, r5, lr}
 80070ca:	4d07      	ldr	r5, [pc, #28]	@ (80070e8 <_fstat_r+0x20>)
 80070cc:	2300      	movs	r3, #0
 80070ce:	4604      	mov	r4, r0
 80070d0:	4608      	mov	r0, r1
 80070d2:	4611      	mov	r1, r2
 80070d4:	602b      	str	r3, [r5, #0]
 80070d6:	f7f9 fdf1 	bl	8000cbc <_fstat>
 80070da:	1c43      	adds	r3, r0, #1
 80070dc:	d102      	bne.n	80070e4 <_fstat_r+0x1c>
 80070de:	682b      	ldr	r3, [r5, #0]
 80070e0:	b103      	cbz	r3, 80070e4 <_fstat_r+0x1c>
 80070e2:	6023      	str	r3, [r4, #0]
 80070e4:	bd38      	pop	{r3, r4, r5, pc}
 80070e6:	bf00      	nop
 80070e8:	240002ac 	.word	0x240002ac

080070ec <_isatty_r>:
 80070ec:	b538      	push	{r3, r4, r5, lr}
 80070ee:	4d06      	ldr	r5, [pc, #24]	@ (8007108 <_isatty_r+0x1c>)
 80070f0:	2300      	movs	r3, #0
 80070f2:	4604      	mov	r4, r0
 80070f4:	4608      	mov	r0, r1
 80070f6:	602b      	str	r3, [r5, #0]
 80070f8:	f7f9 fdf0 	bl	8000cdc <_isatty>
 80070fc:	1c43      	adds	r3, r0, #1
 80070fe:	d102      	bne.n	8007106 <_isatty_r+0x1a>
 8007100:	682b      	ldr	r3, [r5, #0]
 8007102:	b103      	cbz	r3, 8007106 <_isatty_r+0x1a>
 8007104:	6023      	str	r3, [r4, #0]
 8007106:	bd38      	pop	{r3, r4, r5, pc}
 8007108:	240002ac 	.word	0x240002ac

0800710c <_sbrk_r>:
 800710c:	b538      	push	{r3, r4, r5, lr}
 800710e:	4d06      	ldr	r5, [pc, #24]	@ (8007128 <_sbrk_r+0x1c>)
 8007110:	2300      	movs	r3, #0
 8007112:	4604      	mov	r4, r0
 8007114:	4608      	mov	r0, r1
 8007116:	602b      	str	r3, [r5, #0]
 8007118:	f7f9 fdf8 	bl	8000d0c <_sbrk>
 800711c:	1c43      	adds	r3, r0, #1
 800711e:	d102      	bne.n	8007126 <_sbrk_r+0x1a>
 8007120:	682b      	ldr	r3, [r5, #0]
 8007122:	b103      	cbz	r3, 8007126 <_sbrk_r+0x1a>
 8007124:	6023      	str	r3, [r4, #0]
 8007126:	bd38      	pop	{r3, r4, r5, pc}
 8007128:	240002ac 	.word	0x240002ac

0800712c <_init>:
 800712c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800712e:	bf00      	nop
 8007130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007132:	bc08      	pop	{r3}
 8007134:	469e      	mov	lr, r3
 8007136:	4770      	bx	lr

08007138 <_fini>:
 8007138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800713a:	bf00      	nop
 800713c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800713e:	bc08      	pop	{r3}
 8007140:	469e      	mov	lr, r3
 8007142:	4770      	bx	lr

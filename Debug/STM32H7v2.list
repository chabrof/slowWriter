
STM32H7v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ac8  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b30  08008d98  08008d98  00009d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b8c8  0800b8c8  0000c8c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b8d0  0800b8d0  0000c8d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b8d4  0800b8d4  0000c8d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000070  24000000  0800b8d8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003d84  24000070  0800b948  0000d070  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24003df4  0800b948  0000ddf4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d070  2**0
                  CONTENTS, READONLY
 10 .debug_info   000176aa  00000000  00000000  0000d09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002b00  00000000  00000000  00024748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000013c0  00000000  00000000  00027248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000f67  00000000  00000000  00028608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003490a  00000000  00000000  0002956f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00018c93  00000000  00000000  0005de79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00153515  00000000  00000000  00076b0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ca021  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005dc0  00000000  00000000  001ca064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000065  00000000  00000000  001cfe24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000070 	.word	0x24000070
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08008d80 	.word	0x08008d80

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000074 	.word	0x24000074
 800030c:	08008d80 	.word	0x08008d80

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <epd_delay>:
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x0, 0x0, 0x0,
};*/

void epd_delay(uint16_t ms)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	80fb      	strh	r3, [r7, #6]
  HAL_Delay(ms);
 80006aa:	88fb      	ldrh	r3, [r7, #6]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f001 fcc9 	bl	8002044 <HAL_Delay>
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
	...

080006bc <epd_res_set>:

void epd_res_set()
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, SPI2_RESET_Pin, GPIO_PIN_SET);
 80006c0:	2201      	movs	r2, #1
 80006c2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006c6:	4802      	ldr	r0, [pc, #8]	@ (80006d0 <epd_res_set+0x14>)
 80006c8:	f001 fffc 	bl	80026c4 <HAL_GPIO_WritePin>
  //GPIO_SetBits(GPIOA, GPIO_Pin_8);
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	58020400 	.word	0x58020400

080006d4 <epd_res_reset>:

void epd_res_reset()
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, SPI2_RESET_Pin, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006de:	4802      	ldr	r0, [pc, #8]	@ (80006e8 <epd_res_reset+0x14>)
 80006e0:	f001 fff0 	bl	80026c4 <HAL_GPIO_WritePin>
  //GPIO_ResetBits(GPIOA, GPIO_Pin_8);
}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	58020400 	.word	0x58020400

080006ec <epd_dc_set>:

void epd_dc_set()
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 80006f0:	2201      	movs	r2, #1
 80006f2:	2102      	movs	r1, #2
 80006f4:	4802      	ldr	r0, [pc, #8]	@ (8000700 <epd_dc_set+0x14>)
 80006f6:	f001 ffe5 	bl	80026c4 <HAL_GPIO_WritePin>
  //GPIO_SetBits(GPIOB, GPIO_Pin_14);
}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	58020400 	.word	0x58020400

08000704 <epd_dc_reset>:

void epd_dc_reset()
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	2102      	movs	r1, #2
 800070c:	4802      	ldr	r0, [pc, #8]	@ (8000718 <epd_dc_reset+0x14>)
 800070e:	f001 ffd9 	bl	80026c4 <HAL_GPIO_WritePin>
  //GPIO_ResetBits(GPIOB, GPIO_Pin_14);
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	58020400 	.word	0x58020400

0800071c <epd_cs_set>:

void epd_cs_set()
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 8000720:	2201      	movs	r2, #1
 8000722:	2104      	movs	r1, #4
 8000724:	4802      	ldr	r0, [pc, #8]	@ (8000730 <epd_cs_set+0x14>)
 8000726:	f001 ffcd 	bl	80026c4 <HAL_GPIO_WritePin>
  //GPIO_SetBits(GPIOB, GPIO_Pin_12);
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	58020400 	.word	0x58020400

08000734 <epd_cs_reset>:

void epd_cs_reset()
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000738:	2200      	movs	r2, #0
 800073a:	2104      	movs	r1, #4
 800073c:	4802      	ldr	r0, [pc, #8]	@ (8000748 <epd_cs_reset+0x14>)
 800073e:	f001 ffc1 	bl	80026c4 <HAL_GPIO_WritePin>
  //GPIO_ResetBits(GPIOB, GPIO_Pin_12);
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	58020400 	.word	0x58020400

0800074c <epd_is_busy>:

uint8_t epd_is_busy()
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin (SPI2_BUSY_GPIO_Port, SPI2_BUSY_Pin);
 8000750:	2101      	movs	r1, #1
 8000752:	4803      	ldr	r0, [pc, #12]	@ (8000760 <epd_is_busy+0x14>)
 8000754:	f001 ff9e 	bl	8002694 <HAL_GPIO_ReadPin>
 8000758:	4603      	mov	r3, r0
  //return GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_15) == Bit_RESET ? 0 : 1;
}
 800075a:	4618      	mov	r0, r3
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	58020400 	.word	0x58020400

08000764 <epd_write_reg>:

void epd_write_reg(uint8_t reg)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
  epd_dc_reset();
 800076e:	f7ff ffc9 	bl	8000704 <epd_dc_reset>
  epd_cs_reset();
 8000772:	f7ff ffdf 	bl	8000734 <epd_cs_reset>

  //SPI_I2S_SendData(SPI2, reg);
  //while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) != RESET)
  //  ;
  _epd_write_data(reg);
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	4618      	mov	r0, r3
 800077a:	f000 f819 	bl	80007b0 <_epd_write_data>
  //HAL_SPI_Transmit(&hspi2, &reg, 1, 1000);
  epd_cs_set();
 800077e:	f7ff ffcd 	bl	800071c <epd_cs_set>
  epd_dc_set();
 8000782:	f7ff ffb3 	bl	80006ec <epd_dc_set>
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <epd_write_data>:

void epd_write_data(uint8_t data)
{
 800078e:	b580      	push	{r7, lr}
 8000790:	b082      	sub	sp, #8
 8000792:	af00      	add	r7, sp, #0
 8000794:	4603      	mov	r3, r0
 8000796:	71fb      	strb	r3, [r7, #7]
  epd_cs_reset();
 8000798:	f7ff ffcc 	bl	8000734 <epd_cs_reset>
  _epd_write_data(data);
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 f806 	bl	80007b0 <_epd_write_data>
  //HAL_SPI_Transmit(&hspi2, &data, 1, 1000);
  //SPI_I2S_SendData(SPI2, data);
  //while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) != RESET)
  //  ;

  epd_cs_set();
 80007a4:	f7ff ffba 	bl	800071c <epd_cs_set>
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <_epd_write_data>:

void _epd_write_data(uint8_t data)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	71fb      	strb	r3, [r7, #7]
  if (HAL_SPI_Transmit(&hspi2, &data, 1, 1000) != HAL_OK)
 80007ba:	1df9      	adds	r1, r7, #7
 80007bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007c0:	2201      	movs	r2, #1
 80007c2:	4818      	ldr	r0, [pc, #96]	@ (8000824 <_epd_write_data+0x74>)
 80007c4:	f004 fe38 	bl	8005438 <HAL_SPI_Transmit>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d026      	beq.n	800081c <_epd_write_data+0x6c>
  {
    // Une erreur s'est produite
    uint32_t error = HAL_SPI_GetError(&hspi2);
 80007ce:	4815      	ldr	r0, [pc, #84]	@ (8000824 <_epd_write_data+0x74>)
 80007d0:	f005 f820 	bl	8005814 <HAL_SPI_GetError>
 80007d4:	60f8      	str	r0, [r7, #12]
    printf("Erreur SPI\r\n");
 80007d6:	4814      	ldr	r0, [pc, #80]	@ (8000828 <_epd_write_data+0x78>)
 80007d8:	f007 fa98 	bl	8007d0c <puts>
    // Vérifier le type d'erreur
    if (error & HAL_SPI_ERROR_MODF)
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d002      	beq.n	80007ec <_epd_write_data+0x3c>
    {
       printf("Erreur : Mode Fault Detected\r\n");
 80007e6:	4811      	ldr	r0, [pc, #68]	@ (800082c <_epd_write_data+0x7c>)
 80007e8:	f007 fa90 	bl	8007d0c <puts>
    }
    if (error & HAL_SPI_ERROR_OVR)
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	f003 0304 	and.w	r3, r3, #4
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d002      	beq.n	80007fc <_epd_write_data+0x4c>
    {
       printf("Erreur : Overrun Detected\r\n");
 80007f6:	480e      	ldr	r0, [pc, #56]	@ (8000830 <_epd_write_data+0x80>)
 80007f8:	f007 fa88 	bl	8007d0c <puts>
    }
    if (error & HAL_SPI_ERROR_CRC)
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	2b00      	cmp	r3, #0
 8000804:	d002      	beq.n	800080c <_epd_write_data+0x5c>
    {
       printf("Erreur : CRC Error Detected\r\n");
 8000806:	480b      	ldr	r0, [pc, #44]	@ (8000834 <_epd_write_data+0x84>)
 8000808:	f007 fa80 	bl	8007d0c <puts>
    }
    if (error & HAL_SPI_ERROR_DMA)
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	f003 0310 	and.w	r3, r3, #16
 8000812:	2b00      	cmp	r3, #0
 8000814:	d002      	beq.n	800081c <_epd_write_data+0x6c>
    {
       printf("Erreur : DMA Error Detected\r\n");
 8000816:	4808      	ldr	r0, [pc, #32]	@ (8000838 <_epd_write_data+0x88>)
 8000818:	f007 fa78 	bl	8007d0c <puts>
    //printf("Transmission SPI réussie\r\n");
  }
  // while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET)
  //  ;
  // SPI_I2S_SendData(SPI2, data);
}
 800081c:	bf00      	nop
 800081e:	3710      	adds	r7, #16
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	240000a0 	.word	0x240000a0
 8000828:	08008d98 	.word	0x08008d98
 800082c:	08008da4 	.word	0x08008da4
 8000830:	08008dc4 	.word	0x08008dc4
 8000834:	08008de0 	.word	0x08008de0
 8000838:	08008e00 	.word	0x08008e00

0800083c <_epd_write_data_over>:

void _epd_write_data_over()
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  //while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) != RESET)
  //  ;
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr

0800084a <epd_wait_busy>:

uint8_t epd_wait_busy()
{
 800084a:	b580      	push	{r7, lr}
 800084c:	b082      	sub	sp, #8
 800084e:	af00      	add	r7, sp, #0
  uint32_t timeout = 0;
 8000850:	2300      	movs	r3, #0
 8000852:	607b      	str	r3, [r7, #4]
  while (epd_is_busy())
 8000854:	e00c      	b.n	8000870 <epd_wait_busy+0x26>
  {
    timeout++;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	3301      	adds	r3, #1
 800085a:	607b      	str	r3, [r7, #4]
    if (timeout > 40000)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8000862:	4293      	cmp	r3, r2
 8000864:	d901      	bls.n	800086a <epd_wait_busy+0x20>
    {
      return 1;
 8000866:	2301      	movs	r3, #1
 8000868:	e008      	b.n	800087c <epd_wait_busy+0x32>
    }
    epd_delay(1);
 800086a:	2001      	movs	r0, #1
 800086c:	f7ff ff18 	bl	80006a0 <epd_delay>
  while (epd_is_busy())
 8000870:	f7ff ff6c 	bl	800074c <epd_is_busy>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d1ed      	bne.n	8000856 <epd_wait_busy+0xc>
  }
  return 0;
 800087a:	2300      	movs	r3, #0
}
 800087c:	4618      	mov	r0, r3
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <epd_reset>:

void epd_reset(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  epd_res_reset();
 8000888:	f7ff ff24 	bl	80006d4 <epd_res_reset>
  epd_delay(50);
 800088c:	2032      	movs	r0, #50	@ 0x32
 800088e:	f7ff ff07 	bl	80006a0 <epd_delay>
  epd_res_set();
 8000892:	f7ff ff13 	bl	80006bc <epd_res_set>
  epd_delay(50);
 8000896:	2032      	movs	r0, #50	@ 0x32
 8000898:	f7ff ff02 	bl	80006a0 <epd_delay>
  _hibernating = 0;
 800089c:	4b02      	ldr	r3, [pc, #8]	@ (80008a8 <epd_reset+0x24>)
 800089e:	2200      	movs	r2, #0
 80008a0:	701a      	strb	r2, [r3, #0]
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	24000000 	.word	0x24000000

080008ac <epd_init>:

uint8_t epd_init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  if (_hibernating)
 80008b0:	4b2b      	ldr	r3, [pc, #172]	@ (8000960 <epd_init+0xb4>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <epd_init+0x10>
    epd_reset();
 80008b8:	f7ff ffe4 	bl	8000884 <epd_reset>

  if (epd_wait_busy())
 80008bc:	f7ff ffc5 	bl	800084a <epd_wait_busy>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <epd_init+0x1e>
    return 1;
 80008c6:	2301      	movs	r3, #1
 80008c8:	e047      	b.n	800095a <epd_init+0xae>

  epd_write_reg(0x12); // SWRESET
 80008ca:	2012      	movs	r0, #18
 80008cc:	f7ff ff4a 	bl	8000764 <epd_write_reg>

  epd_delay(10);
 80008d0:	200a      	movs	r0, #10
 80008d2:	f7ff fee5 	bl	80006a0 <epd_delay>

  if (epd_wait_busy())
 80008d6:	f7ff ffb8 	bl	800084a <epd_wait_busy>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <epd_init+0x38>
    return 1;
 80008e0:	2301      	movs	r3, #1
 80008e2:	e03a      	b.n	800095a <epd_init+0xae>
      epd_write_data(0x00);
      epd_write_data(0x80);
    #endif

  #elif defined(EPD_42)
    epd_write_reg(0x21); // Display Update Control
 80008e4:	2021      	movs	r0, #33	@ 0x21
 80008e6:	f7ff ff3d 	bl	8000764 <epd_write_reg>
    epd_write_data(0x40);
 80008ea:	2040      	movs	r0, #64	@ 0x40
 80008ec:	f7ff ff4f 	bl	800078e <epd_write_data>
    epd_write_data(0x00);
 80008f0:	2000      	movs	r0, #0
 80008f2:	f7ff ff4c 	bl	800078e <epd_write_data>
    epd_write_reg(0x01);  // Set MUX as 300
 80008f6:	2001      	movs	r0, #1
 80008f8:	f7ff ff34 	bl	8000764 <epd_write_reg>
    epd_write_data(0x2B);
 80008fc:	202b      	movs	r0, #43	@ 0x2b
 80008fe:	f7ff ff46 	bl	800078e <epd_write_data>
    epd_write_data(0x01);
 8000902:	2001      	movs	r0, #1
 8000904:	f7ff ff43 	bl	800078e <epd_write_data>
    epd_write_data(0x00);
 8000908:	2000      	movs	r0, #0
 800090a:	f7ff ff40 	bl	800078e <epd_write_data>
    epd_write_reg(0x3C); //BorderWavefrom
 800090e:	203c      	movs	r0, #60	@ 0x3c
 8000910:	f7ff ff28 	bl	8000764 <epd_write_reg>
    epd_write_data(0x01);
 8000914:	2001      	movs	r0, #1
 8000916:	f7ff ff3a 	bl	800078e <epd_write_data>
    epd_write_reg(0x11);  // data  entry  mode
 800091a:	2011      	movs	r0, #17
 800091c:	f7ff ff22 	bl	8000764 <epd_write_reg>
    epd_write_data(0x03);   // X-mode
 8000920:	2003      	movs	r0, #3
 8000922:	f7ff ff34 	bl	800078e <epd_write_data>
    epd_address_set(0,0,EPD_W-1,EPD_H-1);
 8000926:	f240 132b 	movw	r3, #299	@ 0x12b
 800092a:	f240 128f 	movw	r2, #399	@ 0x18f
 800092e:	2100      	movs	r1, #0
 8000930:	2000      	movs	r0, #0
 8000932:	f000 f889 	bl	8000a48 <epd_address_set>
  #endif

  epd_write_reg(0x18); // Read built-in temperature sensor
 8000936:	2018      	movs	r0, #24
 8000938:	f7ff ff14 	bl	8000764 <epd_write_reg>
  epd_write_data(0x80);
 800093c:	2080      	movs	r0, #128	@ 0x80
 800093e:	f7ff ff26 	bl	800078e <epd_write_data>

  epd_setpos(0,0);
 8000942:	2100      	movs	r1, #0
 8000944:	2000      	movs	r0, #0
 8000946:	f000 f8be 	bl	8000ac6 <epd_setpos>

  if (epd_power_on())
 800094a:	f000 f83f 	bl	80009cc <epd_power_on>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <epd_init+0xac>
    return 1;
 8000954:	2301      	movs	r3, #1
 8000956:	e000      	b.n	800095a <epd_init+0xae>

  return 0;
 8000958:	2300      	movs	r3, #0
}
 800095a:	4618      	mov	r0, r3
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	24000000 	.word	0x24000000

08000964 <epd_init_partial>:

uint8_t epd_init_partial(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  if (epd_init())
 8000968:	f7ff ffa0 	bl	80008ac <epd_init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <epd_init_partial+0x12>
    return 1;
 8000972:	2301      	movs	r3, #1
 8000974:	e00f      	b.n	8000996 <epd_init_partial+0x32>
      _epd_write_data(lut_partial[j]);
    }
    _epd_write_data_over();
    epd_cs_set();
    #elif defined(EPD_42)
    epd_write_reg(0x3C); //BorderWavefrom
 8000976:	203c      	movs	r0, #60	@ 0x3c
 8000978:	f7ff fef4 	bl	8000764 <epd_write_reg>
    epd_write_data(0x80);
 800097c:	2080      	movs	r0, #128	@ 0x80
 800097e:	f7ff ff06 	bl	800078e <epd_write_data>
    epd_write_reg(0x21); // Display Update Controll
 8000982:	2021      	movs	r0, #33	@ 0x21
 8000984:	f7ff feee 	bl	8000764 <epd_write_reg>
    epd_write_data(0x00);    // RED normal
 8000988:	2000      	movs	r0, #0
 800098a:	f7ff ff00 	bl	800078e <epd_write_data>
    epd_write_data(0x00);    // single chip application
 800098e:	2000      	movs	r0, #0
 8000990:	f7ff fefd 	bl	800078e <epd_write_data>
  #endif

  return 0;
 8000994:	2300      	movs	r3, #0
}
 8000996:	4618      	mov	r0, r3
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <epd_enter_deepsleepmode>:

void epd_enter_deepsleepmode(uint8_t mode)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
  epd_power_off();
 80009a6:	f000 f821 	bl	80009ec <epd_power_off>
  epd_write_reg(0x10);
 80009aa:	2010      	movs	r0, #16
 80009ac:	f7ff feda 	bl	8000764 <epd_write_reg>
  epd_write_data(mode);
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff feeb 	bl	800078e <epd_write_data>
  _hibernating = 1;
 80009b8:	4b03      	ldr	r3, [pc, #12]	@ (80009c8 <epd_enter_deepsleepmode+0x2c>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	701a      	strb	r2, [r3, #0]
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	24000000 	.word	0x24000000

080009cc <epd_power_on>:

uint8_t epd_power_on(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  #if defined EPD_42
    epd_write_reg(0x22); // Display Update Control
 80009d0:	2022      	movs	r0, #34	@ 0x22
 80009d2:	f7ff fec7 	bl	8000764 <epd_write_reg>
    epd_write_data(0xe0);
 80009d6:	20e0      	movs	r0, #224	@ 0xe0
 80009d8:	f7ff fed9 	bl	800078e <epd_write_data>
  #else
    epd_write_reg(0x22); // Display Update Control
    epd_write_data(0xf8);
  #endif
  epd_write_reg(0x20); // Activate Display Update Sequence
 80009dc:	2020      	movs	r0, #32
 80009de:	f7ff fec1 	bl	8000764 <epd_write_reg>

  return epd_wait_busy();
 80009e2:	f7ff ff32 	bl	800084a <epd_wait_busy>
 80009e6:	4603      	mov	r3, r0
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	bd80      	pop	{r7, pc}

080009ec <epd_power_off>:

uint8_t epd_power_off(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  epd_write_reg(0x22); // Display Update Control
 80009f0:	2022      	movs	r0, #34	@ 0x22
 80009f2:	f7ff feb7 	bl	8000764 <epd_write_reg>
  epd_write_data(0x83);
 80009f6:	2083      	movs	r0, #131	@ 0x83
 80009f8:	f7ff fec9 	bl	800078e <epd_write_data>
  epd_write_reg(0x20); // Activate Display Update Sequence
 80009fc:	2020      	movs	r0, #32
 80009fe:	f7ff feb1 	bl	8000764 <epd_write_reg>

  return epd_wait_busy();
 8000a02:	f7ff ff22 	bl	800084a <epd_wait_busy>
 8000a06:	4603      	mov	r3, r0
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <epd_update>:
  epd_write_reg(0x1A);
  epd_write_data(0x7F);
//  epd_write_data(0xF0);
}

void epd_update(void) {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  #ifdef EPD_154
    epd_write_reg(0x22); // Display Update Control
    epd_write_data(0xF4);
  #elif defined EPD_42
    epd_write_reg(0x22); // Display Update Control
 8000a10:	2022      	movs	r0, #34	@ 0x22
 8000a12:	f7ff fea7 	bl	8000764 <epd_write_reg>
    epd_write_data(0xF7);
 8000a16:	20f7      	movs	r0, #247	@ 0xf7
 8000a18:	f7ff feb9 	bl	800078e <epd_write_data>
  #else
    epd_wr                                                                                                                                                                                                                       zfdcgzsvite_reg(0x22); // Display Update Control
    epd_write_data(0xF7);
  #endif
  epd_write_reg(0x20); // Activate Display Update Sequence
 8000a1c:	2020      	movs	r0, #32
 8000a1e:	f7ff fea1 	bl	8000764 <epd_write_reg>

  epd_wait_busy();
 8000a22:	f7ff ff12 	bl	800084a <epd_wait_busy>
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <epd_update_partial>:

void epd_update_partial(void) {
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	af00      	add	r7, sp, #0
  #ifdef EPD_154
    epd_write_reg(0x22); // Display Update Control
    epd_write_data(0xFC);
  #elif defined EPD_42
    epd_write_reg(0x22); // Display Update Control
 8000a2e:	2022      	movs	r0, #34	@ 0x22
 8000a30:	f7ff fe98 	bl	8000764 <epd_write_reg>
    epd_write_data(0xFF);
 8000a34:	20ff      	movs	r0, #255	@ 0xff
 8000a36:	f7ff feaa 	bl	800078e <epd_write_data>
  #else
    epd_write_reg(0x22); // Display Update Control
    epd_write_data(0xCC);
  #endif
  epd_write_reg(0x20); // Activate Display Update Sequence
 8000a3a:	2020      	movs	r0, #32
 8000a3c:	f7ff fe92 	bl	8000764 <epd_write_reg>

  epd_wait_busy();
 8000a40:	f7ff ff03 	bl	800084a <epd_wait_busy>
}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <epd_address_set>:

void epd_address_set(uint16_t x_start,uint16_t y_start,uint16_t x_end,uint16_t y_end)
{
 8000a48:	b590      	push	{r4, r7, lr}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4604      	mov	r4, r0
 8000a50:	4608      	mov	r0, r1
 8000a52:	4611      	mov	r1, r2
 8000a54:	461a      	mov	r2, r3
 8000a56:	4623      	mov	r3, r4
 8000a58:	80fb      	strh	r3, [r7, #6]
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	80bb      	strh	r3, [r7, #4]
 8000a5e:	460b      	mov	r3, r1
 8000a60:	807b      	strh	r3, [r7, #2]
 8000a62:	4613      	mov	r3, r2
 8000a64:	803b      	strh	r3, [r7, #0]
  epd_write_reg(0x44); // SET_RAM_X_ADDRESS_START_END_POSITION
 8000a66:	2044      	movs	r0, #68	@ 0x44
 8000a68:	f7ff fe7c 	bl	8000764 <epd_write_reg>
  epd_write_data((x_start>>3) & 0xFF);
 8000a6c:	88fb      	ldrh	r3, [r7, #6]
 8000a6e:	08db      	lsrs	r3, r3, #3
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff fe8a 	bl	800078e <epd_write_data>
  epd_write_data((x_end>>3) & 0xFF);
 8000a7a:	887b      	ldrh	r3, [r7, #2]
 8000a7c:	08db      	lsrs	r3, r3, #3
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff fe83 	bl	800078e <epd_write_data>

  epd_write_reg(0x45); // SET_RAM_Y_ADDRESS_START_END_POSITION
 8000a88:	2045      	movs	r0, #69	@ 0x45
 8000a8a:	f7ff fe6b 	bl	8000764 <epd_write_reg>
  epd_write_data(y_start & 0xFF);
 8000a8e:	88bb      	ldrh	r3, [r7, #4]
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff fe7b 	bl	800078e <epd_write_data>
  epd_write_data((y_start >> 8) & 0xFF);
 8000a98:	88bb      	ldrh	r3, [r7, #4]
 8000a9a:	0a1b      	lsrs	r3, r3, #8
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff fe74 	bl	800078e <epd_write_data>
  epd_write_data(y_end & 0xFF);
 8000aa6:	883b      	ldrh	r3, [r7, #0]
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff fe6f 	bl	800078e <epd_write_data>
  epd_write_data((y_end >> 8) & 0xFF);
 8000ab0:	883b      	ldrh	r3, [r7, #0]
 8000ab2:	0a1b      	lsrs	r3, r3, #8
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff fe68 	bl	800078e <epd_write_data>
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd90      	pop	{r4, r7, pc}

08000ac6 <epd_setpos>:

void epd_setpos(uint16_t x, uint16_t y)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b084      	sub	sp, #16
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	4603      	mov	r3, r0
 8000ace:	460a      	mov	r2, r1
 8000ad0:	80fb      	strh	r3, [r7, #6]
 8000ad2:	4613      	mov	r3, r2
 8000ad4:	80bb      	strh	r3, [r7, #4]
  uint8_t _x;
  uint16_t _y;

  _x = x / 8;
 8000ad6:	88fb      	ldrh	r3, [r7, #6]
 8000ad8:	08db      	lsrs	r3, r3, #3
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	73fb      	strb	r3, [r7, #15]
#ifdef EPD_154
  _y = 199 - y;
  #elif defined(EPD_29) || defined(EPD_213)
  _y = 295 - y;
  #elif defined(EPD_42)
  _y = y;
 8000ade:	88bb      	ldrh	r3, [r7, #4]
 8000ae0:	81bb      	strh	r3, [r7, #12]
#endif

  epd_write_reg(0x4E); // set RAM x address count to 0;
 8000ae2:	204e      	movs	r0, #78	@ 0x4e
 8000ae4:	f7ff fe3e 	bl	8000764 <epd_write_reg>
  epd_write_data(_x);
 8000ae8:	7bfb      	ldrb	r3, [r7, #15]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fe4f 	bl	800078e <epd_write_data>
  epd_write_reg(0x4F); // set RAM y address count to 0x127;
 8000af0:	204f      	movs	r0, #79	@ 0x4f
 8000af2:	f7ff fe37 	bl	8000764 <epd_write_reg>
  epd_write_data(_y & 0xff);
 8000af6:	89bb      	ldrh	r3, [r7, #12]
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff fe47 	bl	800078e <epd_write_data>
  epd_write_data(_y >> 8 & 0x01);
 8000b00:	89bb      	ldrh	r3, [r7, #12]
 8000b02:	0a1b      	lsrs	r3, r3, #8
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	f003 0301 	and.w	r3, r3, #1
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff fe3d 	bl	800078e <epd_write_data>
}
 8000b14:	bf00      	nop
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <epd_writedata>:

void epd_writedata(uint8_t *Image1, uint32_t length)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	6039      	str	r1, [r7, #0]
  epd_cs_reset();
 8000b26:	f7ff fe05 	bl	8000734 <epd_cs_reset>
  for (uint32_t j = 0; j < length; j++)
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	e009      	b.n	8000b44 <epd_writedata+0x28>
  {
    _epd_write_data(Image1[j]);
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	4413      	add	r3, r2
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff fe39 	bl	80007b0 <_epd_write_data>
  for (uint32_t j = 0; j < length; j++)
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	3301      	adds	r3, #1
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fa      	ldr	r2, [r7, #12]
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d3f1      	bcc.n	8000b30 <epd_writedata+0x14>
  }
  _epd_write_data_over();
 8000b4c:	f7ff fe76 	bl	800083c <_epd_write_data_over>
  epd_cs_set();
 8000b50:	f7ff fde4 	bl	800071c <epd_cs_set>
}
 8000b54:	bf00      	nop
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <epd_displayBW>:

  epd_update();
}

void epd_displayBW(uint8_t *Image)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  uint32_t Width, Height;

  Width = EPD_H;
 8000b64:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000b68:	60fb      	str	r3, [r7, #12]
  Height = EPD_W_BUFF_SIZE;
 8000b6a:	2332      	movs	r3, #50	@ 0x32
 8000b6c:	60bb      	str	r3, [r7, #8]

  epd_setpos(0, 0);
 8000b6e:	2100      	movs	r1, #0
 8000b70:	2000      	movs	r0, #0
 8000b72:	f7ff ffa8 	bl	8000ac6 <epd_setpos>
  epd_write_reg(0x26);
 8000b76:	2026      	movs	r0, #38	@ 0x26
 8000b78:	f7ff fdf4 	bl	8000764 <epd_write_reg>
  epd_writedata(Image, Width * Height);
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	fb02 f303 	mul.w	r3, r2, r3
 8000b84:	4619      	mov	r1, r3
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f7ff ffc8 	bl	8000b1c <epd_writedata>

  epd_setpos(0, 0);
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f7ff ff99 	bl	8000ac6 <epd_setpos>
  epd_write_reg(0x24);
 8000b94:	2024      	movs	r0, #36	@ 0x24
 8000b96:	f7ff fde5 	bl	8000764 <epd_write_reg>
  epd_writedata(Image, Width * Height);
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	68ba      	ldr	r2, [r7, #8]
 8000b9e:	fb02 f303 	mul.w	r3, r2, r3
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f7ff ffb9 	bl	8000b1c <epd_writedata>

  epd_update();
 8000baa:	f7ff ff2f 	bl	8000a0c <epd_update>
}
 8000bae:	bf00      	nop
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <epd_displayBW_partial>:

void epd_displayBW_partial(uint8_t *Image)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b084      	sub	sp, #16
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
  uint32_t Width, Height;

  Width = EPD_H;
 8000bbe:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000bc2:	60fb      	str	r3, [r7, #12]
  Height = EPD_W_BUFF_SIZE;
 8000bc4:	2332      	movs	r3, #50	@ 0x32
 8000bc6:	60bb      	str	r3, [r7, #8]

  epd_setpos(0, 0);
 8000bc8:	2100      	movs	r1, #0
 8000bca:	2000      	movs	r0, #0
 8000bcc:	f7ff ff7b 	bl	8000ac6 <epd_setpos>
  epd_write_reg(0x24);
 8000bd0:	2024      	movs	r0, #36	@ 0x24
 8000bd2:	f7ff fdc7 	bl	8000764 <epd_write_reg>
  epd_writedata(Image, Width * Height);
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	68ba      	ldr	r2, [r7, #8]
 8000bda:	fb02 f303 	mul.w	r3, r2, r3
 8000bde:	4619      	mov	r1, r3
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f7ff ff9b 	bl	8000b1c <epd_writedata>

  epd_update_partial();
 8000be6:	f7ff ff20 	bl	8000a2a <epd_update_partial>

  epd_setpos(0, 0);
 8000bea:	2100      	movs	r1, #0
 8000bec:	2000      	movs	r0, #0
 8000bee:	f7ff ff6a 	bl	8000ac6 <epd_setpos>
  epd_write_reg(0x26);
 8000bf2:	2026      	movs	r0, #38	@ 0x26
 8000bf4:	f7ff fdb6 	bl	8000764 <epd_write_reg>
  epd_writedata(Image, Width * Height);
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	68ba      	ldr	r2, [r7, #8]
 8000bfc:	fb02 f303 	mul.w	r3, r2, r3
 8000c00:	4619      	mov	r1, r3
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f7ff ff8a 	bl	8000b1c <epd_writedata>
}
 8000c08:	bf00      	nop
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <epd_paint_newimage>:
  #endif
  epd_update();
}

void epd_paint_newimage(uint8_t *image, uint16_t Width, uint16_t Height, uint16_t Rotate, uint16_t Color)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	4608      	mov	r0, r1
 8000c1a:	4611      	mov	r1, r2
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4603      	mov	r3, r0
 8000c20:	817b      	strh	r3, [r7, #10]
 8000c22:	460b      	mov	r3, r1
 8000c24:	813b      	strh	r3, [r7, #8]
 8000c26:	4613      	mov	r3, r2
 8000c28:	80fb      	strh	r3, [r7, #6]
  EPD_Paint.Image = 0x00;
 8000c2a:	4b20      	ldr	r3, [pc, #128]	@ (8000cac <epd_paint_newimage+0x9c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
  EPD_Paint.Image = image;
 8000c30:	4a1e      	ldr	r2, [pc, #120]	@ (8000cac <epd_paint_newimage+0x9c>)
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	6013      	str	r3, [r2, #0]

  EPD_Paint.WidthMemory = Width;
 8000c36:	4a1d      	ldr	r2, [pc, #116]	@ (8000cac <epd_paint_newimage+0x9c>)
 8000c38:	897b      	ldrh	r3, [r7, #10]
 8000c3a:	8113      	strh	r3, [r2, #8]
  EPD_Paint.HeightMemory = Height;
 8000c3c:	4a1b      	ldr	r2, [pc, #108]	@ (8000cac <epd_paint_newimage+0x9c>)
 8000c3e:	893b      	ldrh	r3, [r7, #8]
 8000c40:	8153      	strh	r3, [r2, #10]
  EPD_Paint.Color = Color;
 8000c42:	4a1a      	ldr	r2, [pc, #104]	@ (8000cac <epd_paint_newimage+0x9c>)
 8000c44:	8b3b      	ldrh	r3, [r7, #24]
 8000c46:	8193      	strh	r3, [r2, #12]
  EPD_Paint.WidthByte = (Width % 8 == 0) ? (Width / 8) : (Width / 8 + 1);
 8000c48:	897b      	ldrh	r3, [r7, #10]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d103      	bne.n	8000c5c <epd_paint_newimage+0x4c>
 8000c54:	897b      	ldrh	r3, [r7, #10]
 8000c56:	08db      	lsrs	r3, r3, #3
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	e004      	b.n	8000c66 <epd_paint_newimage+0x56>
 8000c5c:	897b      	ldrh	r3, [r7, #10]
 8000c5e:	08db      	lsrs	r3, r3, #3
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	3301      	adds	r3, #1
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	4a11      	ldr	r2, [pc, #68]	@ (8000cac <epd_paint_newimage+0x9c>)
 8000c68:	8213      	strh	r3, [r2, #16]
  EPD_Paint.HeightByte = Height;
 8000c6a:	4a10      	ldr	r2, [pc, #64]	@ (8000cac <epd_paint_newimage+0x9c>)
 8000c6c:	893b      	ldrh	r3, [r7, #8]
 8000c6e:	8253      	strh	r3, [r2, #18]
  EPD_Paint.Rotate = Rotate;
 8000c70:	4a0e      	ldr	r2, [pc, #56]	@ (8000cac <epd_paint_newimage+0x9c>)
 8000c72:	88fb      	ldrh	r3, [r7, #6]
 8000c74:	81d3      	strh	r3, [r2, #14]
  if (Rotate == EPD_ROTATE_0 || Rotate == EPD_ROTATE_180)
 8000c76:	88fb      	ldrh	r3, [r7, #6]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d002      	beq.n	8000c82 <epd_paint_newimage+0x72>
 8000c7c:	88fb      	ldrh	r3, [r7, #6]
 8000c7e:	2bb4      	cmp	r3, #180	@ 0xb4
 8000c80:	d106      	bne.n	8000c90 <epd_paint_newimage+0x80>
  {

    EPD_Paint.Width = Height;
 8000c82:	4a0a      	ldr	r2, [pc, #40]	@ (8000cac <epd_paint_newimage+0x9c>)
 8000c84:	893b      	ldrh	r3, [r7, #8]
 8000c86:	8093      	strh	r3, [r2, #4]
    EPD_Paint.Height = Width;
 8000c88:	4a08      	ldr	r2, [pc, #32]	@ (8000cac <epd_paint_newimage+0x9c>)
 8000c8a:	897b      	ldrh	r3, [r7, #10]
 8000c8c:	80d3      	strh	r3, [r2, #6]
 8000c8e:	e006      	b.n	8000c9e <epd_paint_newimage+0x8e>
  }
  else
  {
    EPD_Paint.Width = Width;
 8000c90:	4a06      	ldr	r2, [pc, #24]	@ (8000cac <epd_paint_newimage+0x9c>)
 8000c92:	897b      	ldrh	r3, [r7, #10]
 8000c94:	8093      	strh	r3, [r2, #4]
    EPD_Paint.Height = Height;
 8000c96:	4a05      	ldr	r2, [pc, #20]	@ (8000cac <epd_paint_newimage+0x9c>)
 8000c98:	893b      	ldrh	r3, [r7, #8]
 8000c9a:	80d3      	strh	r3, [r2, #6]
  }
}
 8000c9c:	bf00      	nop
 8000c9e:	bf00      	nop
 8000ca0:	3714      	adds	r7, #20
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	2400008c 	.word	0x2400008c

08000cb0 <epd_paint_setpixel>:

void epd_paint_setpixel(uint16_t Xpoint, uint16_t Ypoint, uint16_t Color)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b087      	sub	sp, #28
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	80fb      	strh	r3, [r7, #6]
 8000cba:	460b      	mov	r3, r1
 8000cbc:	80bb      	strh	r3, [r7, #4]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	807b      	strh	r3, [r7, #2]
  uint16_t X, Y;
  uint32_t Addr;
  uint8_t Rdata;
  switch (EPD_Paint.Rotate)
 8000cc2:	4b3c      	ldr	r3, [pc, #240]	@ (8000db4 <epd_paint_setpixel+0x104>)
 8000cc4:	89db      	ldrh	r3, [r3, #14]
 8000cc6:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8000cca:	d02e      	beq.n	8000d2a <epd_paint_setpixel+0x7a>
 8000ccc:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8000cd0:	dc6a      	bgt.n	8000da8 <epd_paint_setpixel+0xf8>
 8000cd2:	2bb4      	cmp	r3, #180	@ 0xb4
 8000cd4:	d01f      	beq.n	8000d16 <epd_paint_setpixel+0x66>
 8000cd6:	2bb4      	cmp	r3, #180	@ 0xb4
 8000cd8:	dc66      	bgt.n	8000da8 <epd_paint_setpixel+0xf8>
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d002      	beq.n	8000ce4 <epd_paint_setpixel+0x34>
 8000cde:	2b5a      	cmp	r3, #90	@ 0x5a
 8000ce0:	d00a      	beq.n	8000cf8 <epd_paint_setpixel+0x48>
  case 270:
    X = Xpoint;
    Y = Ypoint;
    break;
  default:
    return;
 8000ce2:	e061      	b.n	8000da8 <epd_paint_setpixel+0xf8>
    X = EPD_Paint.WidthMemory - Ypoint - 1;
 8000ce4:	4b33      	ldr	r3, [pc, #204]	@ (8000db4 <epd_paint_setpixel+0x104>)
 8000ce6:	891a      	ldrh	r2, [r3, #8]
 8000ce8:	88bb      	ldrh	r3, [r7, #4]
 8000cea:	1ad3      	subs	r3, r2, r3
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	82fb      	strh	r3, [r7, #22]
    Y = Xpoint;
 8000cf2:	88fb      	ldrh	r3, [r7, #6]
 8000cf4:	82bb      	strh	r3, [r7, #20]
    break;
 8000cf6:	e01d      	b.n	8000d34 <epd_paint_setpixel+0x84>
    X = EPD_Paint.WidthMemory - Xpoint - 1;
 8000cf8:	4b2e      	ldr	r3, [pc, #184]	@ (8000db4 <epd_paint_setpixel+0x104>)
 8000cfa:	891a      	ldrh	r2, [r3, #8]
 8000cfc:	88fb      	ldrh	r3, [r7, #6]
 8000cfe:	1ad3      	subs	r3, r2, r3
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	3b01      	subs	r3, #1
 8000d04:	82fb      	strh	r3, [r7, #22]
    Y = EPD_Paint.HeightMemory - Ypoint - 1;
 8000d06:	4b2b      	ldr	r3, [pc, #172]	@ (8000db4 <epd_paint_setpixel+0x104>)
 8000d08:	895a      	ldrh	r2, [r3, #10]
 8000d0a:	88bb      	ldrh	r3, [r7, #4]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	3b01      	subs	r3, #1
 8000d12:	82bb      	strh	r3, [r7, #20]
    break;
 8000d14:	e00e      	b.n	8000d34 <epd_paint_setpixel+0x84>
    X = Ypoint;
 8000d16:	88bb      	ldrh	r3, [r7, #4]
 8000d18:	82fb      	strh	r3, [r7, #22]
    Y = EPD_Paint.HeightMemory - Xpoint - 1;
 8000d1a:	4b26      	ldr	r3, [pc, #152]	@ (8000db4 <epd_paint_setpixel+0x104>)
 8000d1c:	895a      	ldrh	r2, [r3, #10]
 8000d1e:	88fb      	ldrh	r3, [r7, #6]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	3b01      	subs	r3, #1
 8000d26:	82bb      	strh	r3, [r7, #20]
    break;
 8000d28:	e004      	b.n	8000d34 <epd_paint_setpixel+0x84>
    X = Xpoint;
 8000d2a:	88fb      	ldrh	r3, [r7, #6]
 8000d2c:	82fb      	strh	r3, [r7, #22]
    Y = Ypoint;
 8000d2e:	88bb      	ldrh	r3, [r7, #4]
 8000d30:	82bb      	strh	r3, [r7, #20]
    break;
 8000d32:	bf00      	nop
  }
  Addr = X / 8 + Y * EPD_Paint.WidthByte;
 8000d34:	8afb      	ldrh	r3, [r7, #22]
 8000d36:	08db      	lsrs	r3, r3, #3
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	8abb      	ldrh	r3, [r7, #20]
 8000d3e:	4a1d      	ldr	r2, [pc, #116]	@ (8000db4 <epd_paint_setpixel+0x104>)
 8000d40:	8a12      	ldrh	r2, [r2, #16]
 8000d42:	fb02 f303 	mul.w	r3, r2, r3
 8000d46:	440b      	add	r3, r1
 8000d48:	613b      	str	r3, [r7, #16]
  Rdata = EPD_Paint.Image[Addr];
 8000d4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000db4 <epd_paint_setpixel+0x104>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	4413      	add	r3, r2
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	73fb      	strb	r3, [r7, #15]
  if (Color == EPD_COLOR_BLACK)
 8000d56:	887b      	ldrh	r3, [r7, #2]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d113      	bne.n	8000d84 <epd_paint_setpixel+0xd4>
  {
    EPD_Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 8000d5c:	8afb      	ldrh	r3, [r7, #22]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	2280      	movs	r2, #128	@ 0x80
 8000d64:	fa42 f303 	asr.w	r3, r2, r3
 8000d68:	b25b      	sxtb	r3, r3
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	b25a      	sxtb	r2, r3
 8000d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d72:	4013      	ands	r3, r2
 8000d74:	b259      	sxtb	r1, r3
 8000d76:	4b0f      	ldr	r3, [pc, #60]	@ (8000db4 <epd_paint_setpixel+0x104>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	b2ca      	uxtb	r2, r1
 8000d80:	701a      	strb	r2, [r3, #0]
 8000d82:	e012      	b.n	8000daa <epd_paint_setpixel+0xfa>
  }
  else
    EPD_Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 8000d84:	8afb      	ldrh	r3, [r7, #22]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	2280      	movs	r2, #128	@ 0x80
 8000d8c:	fa42 f303 	asr.w	r3, r2, r3
 8000d90:	b25a      	sxtb	r2, r3
 8000d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	b259      	sxtb	r1, r3
 8000d9a:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <epd_paint_setpixel+0x104>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	4413      	add	r3, r2
 8000da2:	b2ca      	uxtb	r2, r1
 8000da4:	701a      	strb	r2, [r3, #0]
 8000da6:	e000      	b.n	8000daa <epd_paint_setpixel+0xfa>
    return;
 8000da8:	bf00      	nop
}
 8000daa:	371c      	adds	r7, #28
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	2400008c 	.word	0x2400008c

08000db8 <epd_paint_clear>:

void epd_paint_clear(uint16_t color)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	80fb      	strh	r3, [r7, #6]
  uint16_t X, Y;
  uint32_t Addr;

  for (Y = 0; Y < EPD_Paint.HeightByte; Y++)
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	81bb      	strh	r3, [r7, #12]
 8000dc6:	e01c      	b.n	8000e02 <epd_paint_clear+0x4a>
  {
    for (X = 0; X < EPD_Paint.WidthByte; X++)
 8000dc8:	2300      	movs	r3, #0
 8000dca:	81fb      	strh	r3, [r7, #14]
 8000dcc:	e011      	b.n	8000df2 <epd_paint_clear+0x3a>
    { // 8 pixel =  1 byte
      Addr = X + Y * EPD_Paint.WidthByte;
 8000dce:	89fa      	ldrh	r2, [r7, #14]
 8000dd0:	89bb      	ldrh	r3, [r7, #12]
 8000dd2:	4912      	ldr	r1, [pc, #72]	@ (8000e1c <epd_paint_clear+0x64>)
 8000dd4:	8a09      	ldrh	r1, [r1, #16]
 8000dd6:	fb01 f303 	mul.w	r3, r1, r3
 8000dda:	4413      	add	r3, r2
 8000ddc:	60bb      	str	r3, [r7, #8]
      EPD_Paint.Image[Addr] = color;
 8000dde:	4b0f      	ldr	r3, [pc, #60]	@ (8000e1c <epd_paint_clear+0x64>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	4413      	add	r3, r2
 8000de6:	88fa      	ldrh	r2, [r7, #6]
 8000de8:	b2d2      	uxtb	r2, r2
 8000dea:	701a      	strb	r2, [r3, #0]
    for (X = 0; X < EPD_Paint.WidthByte; X++)
 8000dec:	89fb      	ldrh	r3, [r7, #14]
 8000dee:	3301      	adds	r3, #1
 8000df0:	81fb      	strh	r3, [r7, #14]
 8000df2:	4b0a      	ldr	r3, [pc, #40]	@ (8000e1c <epd_paint_clear+0x64>)
 8000df4:	8a1b      	ldrh	r3, [r3, #16]
 8000df6:	89fa      	ldrh	r2, [r7, #14]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d3e8      	bcc.n	8000dce <epd_paint_clear+0x16>
  for (Y = 0; Y < EPD_Paint.HeightByte; Y++)
 8000dfc:	89bb      	ldrh	r3, [r7, #12]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	81bb      	strh	r3, [r7, #12]
 8000e02:	4b06      	ldr	r3, [pc, #24]	@ (8000e1c <epd_paint_clear+0x64>)
 8000e04:	8a5b      	ldrh	r3, [r3, #18]
 8000e06:	89ba      	ldrh	r2, [r7, #12]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d3dd      	bcc.n	8000dc8 <epd_paint_clear+0x10>
    }
  }
}
 8000e0c:	bf00      	nop
 8000e0e:	bf00      	nop
 8000e10:	3714      	adds	r7, #20
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	2400008c 	.word	0x2400008c

08000e20 <epd_paint_selectimage>:

void epd_paint_selectimage(uint8_t *image)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  EPD_Paint.Image = image;
 8000e28:	4a04      	ldr	r2, [pc, #16]	@ (8000e3c <epd_paint_selectimage+0x1c>)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6013      	str	r3, [r2, #0]
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	2400008c 	.word	0x2400008c

08000e40 <epd_paint_drawPoint>:

void epd_paint_drawPoint(uint16_t Xpoint, uint16_t Ypoint, uint16_t Color)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	80fb      	strh	r3, [r7, #6]
 8000e4a:	460b      	mov	r3, r1
 8000e4c:	80bb      	strh	r3, [r7, #4]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	807b      	strh	r3, [r7, #2]
  epd_paint_setpixel(Xpoint - 1, Ypoint - 1, Color);
 8000e52:	88fb      	ldrh	r3, [r7, #6]
 8000e54:	3b01      	subs	r3, #1
 8000e56:	b298      	uxth	r0, r3
 8000e58:	88bb      	ldrh	r3, [r7, #4]
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	887a      	ldrh	r2, [r7, #2]
 8000e60:	4619      	mov	r1, r3
 8000e62:	f7ff ff25 	bl	8000cb0 <epd_paint_setpixel>
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <epd_paint_drawLine>:

void epd_paint_drawLine(uint16_t Xstart, uint16_t Ystart, uint16_t Xend, uint16_t Yend, uint16_t Color)
{
 8000e6e:	b590      	push	{r4, r7, lr}
 8000e70:	b08b      	sub	sp, #44	@ 0x2c
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	4604      	mov	r4, r0
 8000e76:	4608      	mov	r0, r1
 8000e78:	4611      	mov	r1, r2
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	4623      	mov	r3, r4
 8000e7e:	80fb      	strh	r3, [r7, #6]
 8000e80:	4603      	mov	r3, r0
 8000e82:	80bb      	strh	r3, [r7, #4]
 8000e84:	460b      	mov	r3, r1
 8000e86:	807b      	strh	r3, [r7, #2]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	803b      	strh	r3, [r7, #0]
  uint16_t Xpoint, Ypoint;
  int32_t dx, dy;
  int32_t XAddway, YAddway;
  int32_t Esp;
  char Dotted_Len;
  Xpoint = Xstart;
 8000e8c:	88fb      	ldrh	r3, [r7, #6]
 8000e8e:	84fb      	strh	r3, [r7, #38]	@ 0x26
  Ypoint = Ystart;
 8000e90:	88bb      	ldrh	r3, [r7, #4]
 8000e92:	84bb      	strh	r3, [r7, #36]	@ 0x24
  dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 8000e94:	887a      	ldrh	r2, [r7, #2]
 8000e96:	88fb      	ldrh	r3, [r7, #6]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	bfb8      	it	lt
 8000e9e:	425b      	neglt	r3, r3
 8000ea0:	61bb      	str	r3, [r7, #24]
  dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 8000ea2:	883a      	ldrh	r2, [r7, #0]
 8000ea4:	88bb      	ldrh	r3, [r7, #4]
 8000ea6:	1ad3      	subs	r3, r2, r3
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	bfb8      	it	lt
 8000eac:	425b      	neglt	r3, r3
 8000eae:	425b      	negs	r3, r3
 8000eb0:	617b      	str	r3, [r7, #20]

  XAddway = Xstart < Xend ? 1 : -1;
 8000eb2:	88fa      	ldrh	r2, [r7, #6]
 8000eb4:	887b      	ldrh	r3, [r7, #2]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d201      	bcs.n	8000ebe <epd_paint_drawLine+0x50>
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e001      	b.n	8000ec2 <epd_paint_drawLine+0x54>
 8000ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec2:	613b      	str	r3, [r7, #16]
  YAddway = Ystart < Yend ? 1 : -1;
 8000ec4:	88ba      	ldrh	r2, [r7, #4]
 8000ec6:	883b      	ldrh	r3, [r7, #0]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d201      	bcs.n	8000ed0 <epd_paint_drawLine+0x62>
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e001      	b.n	8000ed4 <epd_paint_drawLine+0x66>
 8000ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed4:	60fb      	str	r3, [r7, #12]

  Esp = dx + dy;
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	4413      	add	r3, r2
 8000edc:	623b      	str	r3, [r7, #32]
  Dotted_Len = 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	77fb      	strb	r3, [r7, #31]

  for (;;)
  {
    Dotted_Len++;
 8000ee2:	7ffb      	ldrb	r3, [r7, #31]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	77fb      	strb	r3, [r7, #31]
    epd_paint_drawPoint(Xpoint, Ypoint, Color);
 8000ee8:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8000eea:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8000eec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff ffa6 	bl	8000e40 <epd_paint_drawPoint>
    if (2 * Esp >= dy)
 8000ef4:	6a3b      	ldr	r3, [r7, #32]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	697a      	ldr	r2, [r7, #20]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	dc0c      	bgt.n	8000f18 <epd_paint_drawLine+0xaa>
    {
      if (Xpoint == Xend)
 8000efe:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000f00:	887b      	ldrh	r3, [r7, #2]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d01b      	beq.n	8000f3e <epd_paint_drawLine+0xd0>
        break;
      Esp += dy;
 8000f06:	6a3a      	ldr	r2, [r7, #32]
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	623b      	str	r3, [r7, #32]
      Xpoint += XAddway;
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000f14:	4413      	add	r3, r2
 8000f16:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }
    if (2 * Esp <= dx)
 8000f18:	6a3b      	ldr	r3, [r7, #32]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	dbdf      	blt.n	8000ee2 <epd_paint_drawLine+0x74>
    {
      if (Ypoint == Yend)
 8000f22:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000f24:	883b      	ldrh	r3, [r7, #0]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d00b      	beq.n	8000f42 <epd_paint_drawLine+0xd4>
        break;
      Esp += dx;
 8000f2a:	6a3a      	ldr	r2, [r7, #32]
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	4413      	add	r3, r2
 8000f30:	623b      	str	r3, [r7, #32]
      Ypoint += YAddway;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000f38:	4413      	add	r3, r2
 8000f3a:	84bb      	strh	r3, [r7, #36]	@ 0x24
    Dotted_Len++;
 8000f3c:	e7d1      	b.n	8000ee2 <epd_paint_drawLine+0x74>
        break;
 8000f3e:	bf00      	nop
 8000f40:	e000      	b.n	8000f44 <epd_paint_drawLine+0xd6>
        break;
 8000f42:	bf00      	nop
    }
  }
}
 8000f44:	bf00      	nop
 8000f46:	372c      	adds	r7, #44	@ 0x2c
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd90      	pop	{r4, r7, pc}

08000f4c <epd_paint_drawRectangle>:

void epd_paint_drawRectangle(uint16_t Xstart, uint16_t Ystart, uint16_t Xend, uint16_t Yend, uint16_t Color, uint8_t mode)
{
 8000f4c:	b590      	push	{r4, r7, lr}
 8000f4e:	b087      	sub	sp, #28
 8000f50:	af02      	add	r7, sp, #8
 8000f52:	4604      	mov	r4, r0
 8000f54:	4608      	mov	r0, r1
 8000f56:	4611      	mov	r1, r2
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4623      	mov	r3, r4
 8000f5c:	80fb      	strh	r3, [r7, #6]
 8000f5e:	4603      	mov	r3, r0
 8000f60:	80bb      	strh	r3, [r7, #4]
 8000f62:	460b      	mov	r3, r1
 8000f64:	807b      	strh	r3, [r7, #2]
 8000f66:	4613      	mov	r3, r2
 8000f68:	803b      	strh	r3, [r7, #0]
  uint16_t i;
  if (mode)
 8000f6a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d013      	beq.n	8000f9a <epd_paint_drawRectangle+0x4e>
  {
    for (i = Ystart; i < Yend; i++)
 8000f72:	88bb      	ldrh	r3, [r7, #4]
 8000f74:	81fb      	strh	r3, [r7, #14]
 8000f76:	e00b      	b.n	8000f90 <epd_paint_drawRectangle+0x44>
    {
      epd_paint_drawLine(Xstart, i, Xend, i, Color);
 8000f78:	89fc      	ldrh	r4, [r7, #14]
 8000f7a:	887a      	ldrh	r2, [r7, #2]
 8000f7c:	89f9      	ldrh	r1, [r7, #14]
 8000f7e:	88f8      	ldrh	r0, [r7, #6]
 8000f80:	8c3b      	ldrh	r3, [r7, #32]
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	4623      	mov	r3, r4
 8000f86:	f7ff ff72 	bl	8000e6e <epd_paint_drawLine>
    for (i = Ystart; i < Yend; i++)
 8000f8a:	89fb      	ldrh	r3, [r7, #14]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	81fb      	strh	r3, [r7, #14]
 8000f90:	89fa      	ldrh	r2, [r7, #14]
 8000f92:	883b      	ldrh	r3, [r7, #0]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d3ef      	bcc.n	8000f78 <epd_paint_drawRectangle+0x2c>
    epd_paint_drawLine(Xstart, Ystart, Xend, Ystart, Color);
    epd_paint_drawLine(Xstart, Ystart, Xstart, Yend, Color);
    epd_paint_drawLine(Xend, Yend, Xend, Ystart, Color);
    epd_paint_drawLine(Xend, Yend, Xstart, Yend, Color);
  }
}
 8000f98:	e023      	b.n	8000fe2 <epd_paint_drawRectangle+0x96>
    epd_paint_drawLine(Xstart, Ystart, Xend, Ystart, Color);
 8000f9a:	88bc      	ldrh	r4, [r7, #4]
 8000f9c:	887a      	ldrh	r2, [r7, #2]
 8000f9e:	88b9      	ldrh	r1, [r7, #4]
 8000fa0:	88f8      	ldrh	r0, [r7, #6]
 8000fa2:	8c3b      	ldrh	r3, [r7, #32]
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	4623      	mov	r3, r4
 8000fa8:	f7ff ff61 	bl	8000e6e <epd_paint_drawLine>
    epd_paint_drawLine(Xstart, Ystart, Xstart, Yend, Color);
 8000fac:	883c      	ldrh	r4, [r7, #0]
 8000fae:	88fa      	ldrh	r2, [r7, #6]
 8000fb0:	88b9      	ldrh	r1, [r7, #4]
 8000fb2:	88f8      	ldrh	r0, [r7, #6]
 8000fb4:	8c3b      	ldrh	r3, [r7, #32]
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	4623      	mov	r3, r4
 8000fba:	f7ff ff58 	bl	8000e6e <epd_paint_drawLine>
    epd_paint_drawLine(Xend, Yend, Xend, Ystart, Color);
 8000fbe:	88bc      	ldrh	r4, [r7, #4]
 8000fc0:	887a      	ldrh	r2, [r7, #2]
 8000fc2:	8839      	ldrh	r1, [r7, #0]
 8000fc4:	8878      	ldrh	r0, [r7, #2]
 8000fc6:	8c3b      	ldrh	r3, [r7, #32]
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	4623      	mov	r3, r4
 8000fcc:	f7ff ff4f 	bl	8000e6e <epd_paint_drawLine>
    epd_paint_drawLine(Xend, Yend, Xstart, Yend, Color);
 8000fd0:	883c      	ldrh	r4, [r7, #0]
 8000fd2:	88fa      	ldrh	r2, [r7, #6]
 8000fd4:	8839      	ldrh	r1, [r7, #0]
 8000fd6:	8878      	ldrh	r0, [r7, #2]
 8000fd8:	8c3b      	ldrh	r3, [r7, #32]
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	4623      	mov	r3, r4
 8000fde:	f7ff ff46 	bl	8000e6e <epd_paint_drawLine>
}
 8000fe2:	bf00      	nop
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd90      	pop	{r4, r7, pc}
	...

08000fec <epd_paint_showChar>:
    }
  }
}

void epd_paint_showChar(uint16_t x, uint16_t y, uint16_t chr, uint16_t size1, uint16_t color)
{
 8000fec:	b590      	push	{r4, r7, lr}
 8000fee:	b087      	sub	sp, #28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4623      	mov	r3, r4
 8000ffc:	80fb      	strh	r3, [r7, #6]
 8000ffe:	4603      	mov	r3, r0
 8001000:	80bb      	strh	r3, [r7, #4]
 8001002:	460b      	mov	r3, r1
 8001004:	807b      	strh	r3, [r7, #2]
 8001006:	4613      	mov	r3, r2
 8001008:	803b      	strh	r3, [r7, #0]
  uint16_t i, m, temp, size2, chr1;
  uint16_t x0, y0;
  x += 1, y += 1, x0 = x, y0 = y;
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	3301      	adds	r3, #1
 800100e:	80fb      	strh	r3, [r7, #6]
 8001010:	88bb      	ldrh	r3, [r7, #4]
 8001012:	3301      	adds	r3, #1
 8001014:	80bb      	strh	r3, [r7, #4]
 8001016:	88fb      	ldrh	r3, [r7, #6]
 8001018:	81bb      	strh	r3, [r7, #12]
 800101a:	88bb      	ldrh	r3, [r7, #4]
 800101c:	81fb      	strh	r3, [r7, #14]
  if (x - size1 > EPD_H)
 800101e:	88fa      	ldrh	r2, [r7, #6]
 8001020:	883b      	ldrh	r3, [r7, #0]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001028:	f300 809d 	bgt.w	8001166 <epd_paint_showChar+0x17a>
    return;
  if (size1 == 8)
 800102c:	883b      	ldrh	r3, [r7, #0]
 800102e:	2b08      	cmp	r3, #8
 8001030:	d102      	bne.n	8001038 <epd_paint_showChar+0x4c>
    size2 = 6;
 8001032:	2306      	movs	r3, #6
 8001034:	823b      	strh	r3, [r7, #16]
 8001036:	e014      	b.n	8001062 <epd_paint_showChar+0x76>
  else
    size2 = (size1 / 8 + ((size1 % 8) ? 1 : 0)) * (size1 / 2);
 8001038:	883b      	ldrh	r3, [r7, #0]
 800103a:	08db      	lsrs	r3, r3, #3
 800103c:	b29b      	uxth	r3, r3
 800103e:	461a      	mov	r2, r3
 8001040:	883b      	ldrh	r3, [r7, #0]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	b29b      	uxth	r3, r3
 8001048:	2b00      	cmp	r3, #0
 800104a:	bf14      	ite	ne
 800104c:	2301      	movne	r3, #1
 800104e:	2300      	moveq	r3, #0
 8001050:	b2db      	uxtb	r3, r3
 8001052:	4413      	add	r3, r2
 8001054:	b29a      	uxth	r2, r3
 8001056:	883b      	ldrh	r3, [r7, #0]
 8001058:	085b      	lsrs	r3, r3, #1
 800105a:	b29b      	uxth	r3, r3
 800105c:	fb12 f303 	smulbb	r3, r2, r3
 8001060:	823b      	strh	r3, [r7, #16]
  chr1 = chr - ' ';
 8001062:	887b      	ldrh	r3, [r7, #2]
 8001064:	3b20      	subs	r3, #32
 8001066:	817b      	strh	r3, [r7, #10]
  for (i = 0; i < size2; i++)
 8001068:	2300      	movs	r3, #0
 800106a:	82fb      	strh	r3, [r7, #22]
 800106c:	e076      	b.n	800115c <epd_paint_showChar+0x170>
  {
    if (size1 == 8)
 800106e:	883b      	ldrh	r3, [r7, #0]
 8001070:	2b08      	cmp	r3, #8
 8001072:	d10b      	bne.n	800108c <epd_paint_showChar+0xa0>
    {
      temp = asc2_0806[chr1][i];
 8001074:	897a      	ldrh	r2, [r7, #10]
 8001076:	8af9      	ldrh	r1, [r7, #22]
 8001078:	483e      	ldr	r0, [pc, #248]	@ (8001174 <epd_paint_showChar+0x188>)
 800107a:	4613      	mov	r3, r2
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	4413      	add	r3, r2
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	4403      	add	r3, r0
 8001084:	440b      	add	r3, r1
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	827b      	strh	r3, [r7, #18]
 800108a:	e028      	b.n	80010de <epd_paint_showChar+0xf2>
    } // 0806
    else if (size1 == 12)
 800108c:	883b      	ldrh	r3, [r7, #0]
 800108e:	2b0c      	cmp	r3, #12
 8001090:	d10b      	bne.n	80010aa <epd_paint_showChar+0xbe>
    {
      temp = asc2_1206[chr1][i];
 8001092:	897a      	ldrh	r2, [r7, #10]
 8001094:	8af9      	ldrh	r1, [r7, #22]
 8001096:	4838      	ldr	r0, [pc, #224]	@ (8001178 <epd_paint_showChar+0x18c>)
 8001098:	4613      	mov	r3, r2
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	4413      	add	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4403      	add	r3, r0
 80010a2:	440b      	add	r3, r1
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	827b      	strh	r3, [r7, #18]
 80010a8:	e019      	b.n	80010de <epd_paint_showChar+0xf2>
    } // 1206
    else if (size1 == 16)
 80010aa:	883b      	ldrh	r3, [r7, #0]
 80010ac:	2b10      	cmp	r3, #16
 80010ae:	d108      	bne.n	80010c2 <epd_paint_showChar+0xd6>
    {
      temp = asc2_1608[chr1][i];
 80010b0:	897a      	ldrh	r2, [r7, #10]
 80010b2:	8afb      	ldrh	r3, [r7, #22]
 80010b4:	4931      	ldr	r1, [pc, #196]	@ (800117c <epd_paint_showChar+0x190>)
 80010b6:	0112      	lsls	r2, r2, #4
 80010b8:	440a      	add	r2, r1
 80010ba:	4413      	add	r3, r2
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	827b      	strh	r3, [r7, #18]
 80010c0:	e00d      	b.n	80010de <epd_paint_showChar+0xf2>
    } // 1608
    else if (size1 == 24)
 80010c2:	883b      	ldrh	r3, [r7, #0]
 80010c4:	2b18      	cmp	r3, #24
 80010c6:	d150      	bne.n	800116a <epd_paint_showChar+0x17e>
    {
      temp = asc2_2412[chr1][i];
 80010c8:	897a      	ldrh	r2, [r7, #10]
 80010ca:	8af9      	ldrh	r1, [r7, #22]
 80010cc:	482c      	ldr	r0, [pc, #176]	@ (8001180 <epd_paint_showChar+0x194>)
 80010ce:	4613      	mov	r3, r2
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	4413      	add	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	4403      	add	r3, r0
 80010d8:	440b      	add	r3, r1
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	827b      	strh	r3, [r7, #18]
    } // 2412
    else
      return;
    for (m = 0; m < 8; m++)
 80010de:	2300      	movs	r3, #0
 80010e0:	82bb      	strh	r3, [r7, #20]
 80010e2:	e020      	b.n	8001126 <epd_paint_showChar+0x13a>
    {
      if (temp & 0x01)
 80010e4:	8a7b      	ldrh	r3, [r7, #18]
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d006      	beq.n	80010fc <epd_paint_showChar+0x110>
        epd_paint_drawPoint(x, y, color);
 80010ee:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80010f0:	88b9      	ldrh	r1, [r7, #4]
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fea3 	bl	8000e40 <epd_paint_drawPoint>
 80010fa:	e00b      	b.n	8001114 <epd_paint_showChar+0x128>
      else
        epd_paint_drawPoint(x, y, !color);
 80010fc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80010fe:	2b00      	cmp	r3, #0
 8001100:	bf0c      	ite	eq
 8001102:	2301      	moveq	r3, #1
 8001104:	2300      	movne	r3, #0
 8001106:	b2db      	uxtb	r3, r3
 8001108:	461a      	mov	r2, r3
 800110a:	88b9      	ldrh	r1, [r7, #4]
 800110c:	88fb      	ldrh	r3, [r7, #6]
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fe96 	bl	8000e40 <epd_paint_drawPoint>
      temp >>= 1;
 8001114:	8a7b      	ldrh	r3, [r7, #18]
 8001116:	085b      	lsrs	r3, r3, #1
 8001118:	827b      	strh	r3, [r7, #18]
      y++;
 800111a:	88bb      	ldrh	r3, [r7, #4]
 800111c:	3301      	adds	r3, #1
 800111e:	80bb      	strh	r3, [r7, #4]
    for (m = 0; m < 8; m++)
 8001120:	8abb      	ldrh	r3, [r7, #20]
 8001122:	3301      	adds	r3, #1
 8001124:	82bb      	strh	r3, [r7, #20]
 8001126:	8abb      	ldrh	r3, [r7, #20]
 8001128:	2b07      	cmp	r3, #7
 800112a:	d9db      	bls.n	80010e4 <epd_paint_showChar+0xf8>
    }
    x++;
 800112c:	88fb      	ldrh	r3, [r7, #6]
 800112e:	3301      	adds	r3, #1
 8001130:	80fb      	strh	r3, [r7, #6]
    if ((size1 != 8) && ((x - x0) == size1 / 2))
 8001132:	883b      	ldrh	r3, [r7, #0]
 8001134:	2b08      	cmp	r3, #8
 8001136:	d00c      	beq.n	8001152 <epd_paint_showChar+0x166>
 8001138:	88fa      	ldrh	r2, [r7, #6]
 800113a:	89bb      	ldrh	r3, [r7, #12]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	883a      	ldrh	r2, [r7, #0]
 8001140:	0852      	lsrs	r2, r2, #1
 8001142:	b292      	uxth	r2, r2
 8001144:	4293      	cmp	r3, r2
 8001146:	d104      	bne.n	8001152 <epd_paint_showChar+0x166>
    {
      x = x0;
 8001148:	89bb      	ldrh	r3, [r7, #12]
 800114a:	80fb      	strh	r3, [r7, #6]
      y0 = y0 + 8;
 800114c:	89fb      	ldrh	r3, [r7, #14]
 800114e:	3308      	adds	r3, #8
 8001150:	81fb      	strh	r3, [r7, #14]
    }
    y = y0;
 8001152:	89fb      	ldrh	r3, [r7, #14]
 8001154:	80bb      	strh	r3, [r7, #4]
  for (i = 0; i < size2; i++)
 8001156:	8afb      	ldrh	r3, [r7, #22]
 8001158:	3301      	adds	r3, #1
 800115a:	82fb      	strh	r3, [r7, #22]
 800115c:	8afa      	ldrh	r2, [r7, #22]
 800115e:	8a3b      	ldrh	r3, [r7, #16]
 8001160:	429a      	cmp	r2, r3
 8001162:	d384      	bcc.n	800106e <epd_paint_showChar+0x82>
 8001164:	e002      	b.n	800116c <epd_paint_showChar+0x180>
    return;
 8001166:	bf00      	nop
 8001168:	e000      	b.n	800116c <epd_paint_showChar+0x180>
      return;
 800116a:	bf00      	nop
  }
}
 800116c:	371c      	adds	r7, #28
 800116e:	46bd      	mov	sp, r7
 8001170:	bd90      	pop	{r4, r7, pc}
 8001172:	bf00      	nop
 8001174:	08008ed4 	.word	0x08008ed4
 8001178:	080090fc 	.word	0x080090fc
 800117c:	08009570 	.word	0x08009570
 8001180:	08009b60 	.word	0x08009b60

08001184 <epd_paint_showString>:

void epd_paint_showString(uint16_t x, uint16_t y, uint8_t *chr, uint16_t size1, uint16_t color)
{
 8001184:	b590      	push	{r4, r7, lr}
 8001186:	b087      	sub	sp, #28
 8001188:	af02      	add	r7, sp, #8
 800118a:	60ba      	str	r2, [r7, #8]
 800118c:	461a      	mov	r2, r3
 800118e:	4603      	mov	r3, r0
 8001190:	81fb      	strh	r3, [r7, #14]
 8001192:	460b      	mov	r3, r1
 8001194:	81bb      	strh	r3, [r7, #12]
 8001196:	4613      	mov	r3, r2
 8001198:	80fb      	strh	r3, [r7, #6]
  while (*chr != '\0')
 800119a:	e027      	b.n	80011ec <epd_paint_showString+0x68>
  {
    epd_paint_showChar(x, y, *chr, size1, color);
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	461c      	mov	r4, r3
 80011a2:	88fa      	ldrh	r2, [r7, #6]
 80011a4:	89b9      	ldrh	r1, [r7, #12]
 80011a6:	89f8      	ldrh	r0, [r7, #14]
 80011a8:	8c3b      	ldrh	r3, [r7, #32]
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	4613      	mov	r3, r2
 80011ae:	4622      	mov	r2, r4
 80011b0:	f7ff ff1c 	bl	8000fec <epd_paint_showChar>
    chr++;
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	3301      	adds	r3, #1
 80011b8:	60bb      	str	r3, [r7, #8]
    if (size1 == 8)
 80011ba:	88fb      	ldrh	r3, [r7, #6]
 80011bc:	2b08      	cmp	r3, #8
 80011be:	d107      	bne.n	80011d0 <epd_paint_showString+0x4c>
    {
      x += 6;
 80011c0:	89fb      	ldrh	r3, [r7, #14]
 80011c2:	3306      	adds	r3, #6
 80011c4:	81fb      	strh	r3, [r7, #14]
      if(x > EPD_H-6)
 80011c6:	89fb      	ldrh	r3, [r7, #14]
 80011c8:	f5b3 7f93 	cmp.w	r3, #294	@ 0x126
 80011cc:	d90e      	bls.n	80011ec <epd_paint_showString+0x68>
              break;
 80011ce:	e013      	b.n	80011f8 <epd_paint_showString+0x74>
    }
    else
    {
      x += size1 / 2;
 80011d0:	88fb      	ldrh	r3, [r7, #6]
 80011d2:	085b      	lsrs	r3, r3, #1
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	89fb      	ldrh	r3, [r7, #14]
 80011d8:	4413      	add	r3, r2
 80011da:	81fb      	strh	r3, [r7, #14]
      if(x > EPD_H-size1 / 2)
 80011dc:	89fa      	ldrh	r2, [r7, #14]
 80011de:	88fb      	ldrh	r3, [r7, #6]
 80011e0:	085b      	lsrs	r3, r3, #1
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	f5c3 7396 	rsb	r3, r3, #300	@ 0x12c
 80011e8:	429a      	cmp	r2, r3
 80011ea:	dc04      	bgt.n	80011f6 <epd_paint_showString+0x72>
  while (*chr != '\0')
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d1d3      	bne.n	800119c <epd_paint_showString+0x18>
              break;
    }
  }
}
 80011f4:	e000      	b.n	80011f8 <epd_paint_showString+0x74>
              break;
 80011f6:	bf00      	nop
}
 80011f8:	bf00      	nop
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd90      	pop	{r4, r7, pc}

08001200 <epd_paint_showPicture>:
    y = y0;
  }
}

void epd_paint_showPicture(uint16_t x, uint16_t y, uint16_t sizex, uint16_t sizey, const uint8_t BMP[], uint16_t Color)
{
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b087      	sub	sp, #28
 8001204:	af00      	add	r7, sp, #0
 8001206:	4604      	mov	r4, r0
 8001208:	4608      	mov	r0, r1
 800120a:	4611      	mov	r1, r2
 800120c:	461a      	mov	r2, r3
 800120e:	4623      	mov	r3, r4
 8001210:	80fb      	strh	r3, [r7, #6]
 8001212:	4603      	mov	r3, r0
 8001214:	80bb      	strh	r3, [r7, #4]
 8001216:	460b      	mov	r3, r1
 8001218:	807b      	strh	r3, [r7, #2]
 800121a:	4613      	mov	r3, r2
 800121c:	803b      	strh	r3, [r7, #0]
  uint16_t j = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	82fb      	strh	r3, [r7, #22]
  uint16_t i, n = 0, temp = 0, m = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	827b      	strh	r3, [r7, #18]
 8001226:	2300      	movs	r3, #0
 8001228:	823b      	strh	r3, [r7, #16]
 800122a:	2300      	movs	r3, #0
 800122c:	81fb      	strh	r3, [r7, #14]
  uint16_t x0 = 0, y0 = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	817b      	strh	r3, [r7, #10]
 8001232:	2300      	movs	r3, #0
 8001234:	81bb      	strh	r3, [r7, #12]
  x += 1, y += 1, x0 = x, y0 = y;
 8001236:	88fb      	ldrh	r3, [r7, #6]
 8001238:	3301      	adds	r3, #1
 800123a:	80fb      	strh	r3, [r7, #6]
 800123c:	88bb      	ldrh	r3, [r7, #4]
 800123e:	3301      	adds	r3, #1
 8001240:	80bb      	strh	r3, [r7, #4]
 8001242:	88fb      	ldrh	r3, [r7, #6]
 8001244:	817b      	strh	r3, [r7, #10]
 8001246:	88bb      	ldrh	r3, [r7, #4]
 8001248:	81bb      	strh	r3, [r7, #12]
  sizey = sizey / 8 + ((sizey % 8) ? 1 : 0);
 800124a:	883b      	ldrh	r3, [r7, #0]
 800124c:	08db      	lsrs	r3, r3, #3
 800124e:	b29b      	uxth	r3, r3
 8001250:	883a      	ldrh	r2, [r7, #0]
 8001252:	f002 0207 	and.w	r2, r2, #7
 8001256:	b292      	uxth	r2, r2
 8001258:	2a00      	cmp	r2, #0
 800125a:	bf14      	ite	ne
 800125c:	2201      	movne	r2, #1
 800125e:	2200      	moveq	r2, #0
 8001260:	b2d2      	uxtb	r2, r2
 8001262:	4413      	add	r3, r2
 8001264:	803b      	strh	r3, [r7, #0]
  for (n = 0; n < sizey; n++)
 8001266:	2300      	movs	r3, #0
 8001268:	827b      	strh	r3, [r7, #18]
 800126a:	e04b      	b.n	8001304 <epd_paint_showPicture+0x104>
  {
    for (i = 0; i < sizex; i++)
 800126c:	2300      	movs	r3, #0
 800126e:	82bb      	strh	r3, [r7, #20]
 8001270:	e041      	b.n	80012f6 <epd_paint_showPicture+0xf6>
    {
      temp = BMP[j];
 8001272:	8afb      	ldrh	r3, [r7, #22]
 8001274:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001276:	4413      	add	r3, r2
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	823b      	strh	r3, [r7, #16]
      j++;
 800127c:	8afb      	ldrh	r3, [r7, #22]
 800127e:	3301      	adds	r3, #1
 8001280:	82fb      	strh	r3, [r7, #22]
      for (m = 0; m < 8; m++)
 8001282:	2300      	movs	r3, #0
 8001284:	81fb      	strh	r3, [r7, #14]
 8001286:	e020      	b.n	80012ca <epd_paint_showPicture+0xca>
      {
        if (temp & 0x01)
 8001288:	8a3b      	ldrh	r3, [r7, #16]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	2b00      	cmp	r3, #0
 8001290:	d00c      	beq.n	80012ac <epd_paint_showPicture+0xac>
          epd_paint_drawPoint(x, y, !Color);
 8001292:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001294:	2b00      	cmp	r3, #0
 8001296:	bf0c      	ite	eq
 8001298:	2301      	moveq	r3, #1
 800129a:	2300      	movne	r3, #0
 800129c:	b2db      	uxtb	r3, r3
 800129e:	461a      	mov	r2, r3
 80012a0:	88b9      	ldrh	r1, [r7, #4]
 80012a2:	88fb      	ldrh	r3, [r7, #6]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fdcb 	bl	8000e40 <epd_paint_drawPoint>
 80012aa:	e005      	b.n	80012b8 <epd_paint_showPicture+0xb8>
        else
          epd_paint_drawPoint(x, y, Color);
 80012ac:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80012ae:	88b9      	ldrh	r1, [r7, #4]
 80012b0:	88fb      	ldrh	r3, [r7, #6]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fdc4 	bl	8000e40 <epd_paint_drawPoint>
        temp >>= 1;
 80012b8:	8a3b      	ldrh	r3, [r7, #16]
 80012ba:	085b      	lsrs	r3, r3, #1
 80012bc:	823b      	strh	r3, [r7, #16]
        y++;
 80012be:	88bb      	ldrh	r3, [r7, #4]
 80012c0:	3301      	adds	r3, #1
 80012c2:	80bb      	strh	r3, [r7, #4]
      for (m = 0; m < 8; m++)
 80012c4:	89fb      	ldrh	r3, [r7, #14]
 80012c6:	3301      	adds	r3, #1
 80012c8:	81fb      	strh	r3, [r7, #14]
 80012ca:	89fb      	ldrh	r3, [r7, #14]
 80012cc:	2b07      	cmp	r3, #7
 80012ce:	d9db      	bls.n	8001288 <epd_paint_showPicture+0x88>
      }
      x++;
 80012d0:	88fb      	ldrh	r3, [r7, #6]
 80012d2:	3301      	adds	r3, #1
 80012d4:	80fb      	strh	r3, [r7, #6]
      if ((x - x0) == sizex)
 80012d6:	88fa      	ldrh	r2, [r7, #6]
 80012d8:	897b      	ldrh	r3, [r7, #10]
 80012da:	1ad2      	subs	r2, r2, r3
 80012dc:	887b      	ldrh	r3, [r7, #2]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d104      	bne.n	80012ec <epd_paint_showPicture+0xec>
      {
        x = x0;
 80012e2:	897b      	ldrh	r3, [r7, #10]
 80012e4:	80fb      	strh	r3, [r7, #6]
        y0 = y0 + 8;
 80012e6:	89bb      	ldrh	r3, [r7, #12]
 80012e8:	3308      	adds	r3, #8
 80012ea:	81bb      	strh	r3, [r7, #12]
      }
      y = y0;
 80012ec:	89bb      	ldrh	r3, [r7, #12]
 80012ee:	80bb      	strh	r3, [r7, #4]
    for (i = 0; i < sizex; i++)
 80012f0:	8abb      	ldrh	r3, [r7, #20]
 80012f2:	3301      	adds	r3, #1
 80012f4:	82bb      	strh	r3, [r7, #20]
 80012f6:	8aba      	ldrh	r2, [r7, #20]
 80012f8:	887b      	ldrh	r3, [r7, #2]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d3b9      	bcc.n	8001272 <epd_paint_showPicture+0x72>
  for (n = 0; n < sizey; n++)
 80012fe:	8a7b      	ldrh	r3, [r7, #18]
 8001300:	3301      	adds	r3, #1
 8001302:	827b      	strh	r3, [r7, #18]
 8001304:	8a7a      	ldrh	r2, [r7, #18]
 8001306:	883b      	ldrh	r3, [r7, #0]
 8001308:	429a      	cmp	r2, r3
 800130a:	d3af      	bcc.n	800126c <epd_paint_showPicture+0x6c>
    }
  }
}
 800130c:	bf00      	nop
 800130e:	bf00      	nop
 8001310:	371c      	adds	r7, #28
 8001312:	46bd      	mov	sp, r7
 8001314:	bd90      	pop	{r4, r7, pc}
	...

08001318 <__io_putchar>:
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart4, (uint8_t *)&ch, 1, 0xFFFF);
 8001320:	1d39      	adds	r1, r7, #4
 8001322:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001326:	2201      	movs	r2, #1
 8001328:	4803      	ldr	r0, [pc, #12]	@ (8001338 <__io_putchar+0x20>)
 800132a:	f005 f9a7 	bl	800667c <HAL_UART_Transmit>
  return ch;
 800132e:	687b      	ldr	r3, [r7, #4]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	24000174 	.word	0x24000174

0800133c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b088      	sub	sp, #32
 8001340:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  uint8_t text[20];
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001342:	f000 fb15 	bl	8001970 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001346:	f000 fdeb 	bl	8001f20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800134a:	f000 f8e5 	bl	8001518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800134e:	f000 fa89 	bl	8001864 <MX_GPIO_Init>
  MX_TIM8_Init();
 8001352:	f000 f9ab 	bl	80016ac <MX_TIM8_Init>
  MX_UART4_Init();
 8001356:	f000 fa39 	bl	80017cc <MX_UART4_Init>
  MX_SPI2_Init();
 800135a:	f000 f94d 	bl	80015f8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 800135e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001362:	f000 fe6f 	bl	8002044 <HAL_Delay>
  printf("Prog start.\r\n");
 8001366:	485f      	ldr	r0, [pc, #380]	@ (80014e4 <main+0x1a8>)
 8001368:	f006 fcd0 	bl	8007d0c <puts>
  epd_init();
 800136c:	f7ff fa9e 	bl	80008ac <epd_init>
  epd_paint_clear(EPD_COLOR_WHITE);
 8001370:	20ff      	movs	r0, #255	@ 0xff
 8001372:	f7ff fd21 	bl	8000db8 <epd_paint_clear>
  epd_paint_newimage(image_bw, EPD_W, EPD_H, EPD_ROTATE_270, EPD_COLOR_WHITE);
 8001376:	23ff      	movs	r3, #255	@ 0xff
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 800137e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001382:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8001386:	4858      	ldr	r0, [pc, #352]	@ (80014e8 <main+0x1ac>)
 8001388:	f7ff fc42 	bl	8000c10 <epd_paint_newimage>
  epd_paint_selectimage(image_bw);
 800138c:	4856      	ldr	r0, [pc, #344]	@ (80014e8 <main+0x1ac>)
 800138e:	f7ff fd47 	bl	8000e20 <epd_paint_selectimage>
  epd_paint_clear(EPD_COLOR_WHITE);
 8001392:	20ff      	movs	r0, #255	@ 0xff
 8001394:	f7ff fd10 	bl	8000db8 <epd_paint_clear>
  epd_paint_showPicture(
 8001398:	23ff      	movs	r3, #255	@ 0xff
 800139a:	9301      	str	r3, [sp, #4]
 800139c:	4b53      	ldr	r3, [pc, #332]	@ (80014ec <main+0x1b0>)
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	237a      	movs	r3, #122	@ 0x7a
 80013a2:	22fa      	movs	r2, #250	@ 0xfa
 80013a4:	2159      	movs	r1, #89	@ 0x59
 80013a6:	204b      	movs	r0, #75	@ 0x4b
 80013a8:	f7ff ff2a 	bl	8001200 <epd_paint_showPicture>
    (EPD_W - 250) / 2,
    (EPD_H - 122) / 2,
    250, 122,
    gImage_1,
    EPD_COLOR_WHITE);
  epd_displayBW(image_bw);
 80013ac:	484e      	ldr	r0, [pc, #312]	@ (80014e8 <main+0x1ac>)
 80013ae:	f7ff fbd5 	bl	8000b5c <epd_displayBW>
  //epd_enter_deepsleepmode(EPD_DEEPSLEEP_MODE1);

  HAL_Delay(2000);
 80013b2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80013b6:	f000 fe45 	bl	8002044 <HAL_Delay>

  epd_init_partial();
 80013ba:	f7ff fad3 	bl	8000964 <epd_init_partial>

  epd_paint_selectimage(image_bw);
 80013be:	484a      	ldr	r0, [pc, #296]	@ (80014e8 <main+0x1ac>)
 80013c0:	f7ff fd2e 	bl	8000e20 <epd_paint_selectimage>
  epd_paint_clear(EPD_COLOR_WHITE);
 80013c4:	20ff      	movs	r0, #255	@ 0xff
 80013c6:	f7ff fcf7 	bl	8000db8 <epd_paint_clear>

  epd_paint_showString(10, 0, (uint8_t *)&"4.2 Inch Epaper Module", EPD_FONT_SIZE24x12, EPD_COLOR_BLACK);
 80013ca:	2300      	movs	r3, #0
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	2318      	movs	r3, #24
 80013d0:	4a47      	ldr	r2, [pc, #284]	@ (80014f0 <main+0x1b4>)
 80013d2:	2100      	movs	r1, #0
 80013d4:	200a      	movs	r0, #10
 80013d6:	f7ff fed5 	bl	8001184 <epd_paint_showString>
  epd_paint_showString(10, 50, (uint8_t *)&"with 400 x 300 resolution", EPD_FONT_SIZE16x8, EPD_COLOR_BLACK);
 80013da:	2300      	movs	r3, #0
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	2310      	movs	r3, #16
 80013e0:	4a44      	ldr	r2, [pc, #272]	@ (80014f4 <main+0x1b8>)
 80013e2:	2132      	movs	r1, #50	@ 0x32
 80013e4:	200a      	movs	r0, #10
 80013e6:	f7ff fecd 	bl	8001184 <epd_paint_showString>
  epd_paint_showString(10, 29, (uint8_t *)&"Designed By WeAct Studio", EPD_FONT_SIZE16x8, EPD_COLOR_BLACK);
 80013ea:	2300      	movs	r3, #0
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	2310      	movs	r3, #16
 80013f0:	4a41      	ldr	r2, [pc, #260]	@ (80014f8 <main+0x1bc>)
 80013f2:	211d      	movs	r1, #29
 80013f4:	200a      	movs	r0, #10
 80013f6:	f7ff fec5 	bl	8001184 <epd_paint_showString>

  /*#if 0
    epd_paint_showString(10,100,(uint8_t *)&"CH32F103C8T6 Example",EPD_FONT_SIZE16x8,EPD_COLOR_BLACK);
  #else*/
  epd_paint_drawRectangle(10, EPD_W-20, EPD_H - 10, EPD_W-6, EPD_COLOR_BLACK, 1);
 80013fa:	2301      	movs	r3, #1
 80013fc:	9301      	str	r3, [sp, #4]
 80013fe:	2300      	movs	r3, #0
 8001400:	9300      	str	r3, [sp, #0]
 8001402:	f44f 73c5 	mov.w	r3, #394	@ 0x18a
 8001406:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800140a:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800140e:	200a      	movs	r0, #10
 8001410:	f7ff fd9c 	bl	8000f4c <epd_paint_drawRectangle>
  epd_update();
 8001414:	f7ff fafa 	bl	8000a0c <epd_update>
  //#endif
  HAL_Delay(1500);
 8001418:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800141c:	f000 fe12 	bl	8002044 <HAL_Delay>
  HAL_Delay(700);
  epd_paint_clear(EPD_COLOR_WHITE);
  HAL_Delay(700);
  epd_paint_clear(EPD_COLOR_BLACK);
*/
  sprintf((char *)&text, ">> Partial Mode");
 8001420:	463b      	mov	r3, r7
 8001422:	4936      	ldr	r1, [pc, #216]	@ (80014fc <main+0x1c0>)
 8001424:	4618      	mov	r0, r3
 8001426:	f006 fc79 	bl	8007d1c <siprintf>
  epd_paint_showString(10, 71, text, EPD_FONT_SIZE24x12, EPD_COLOR_BLACK);
 800142a:	463a      	mov	r2, r7
 800142c:	2300      	movs	r3, #0
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	2318      	movs	r3, #24
 8001432:	2147      	movs	r1, #71	@ 0x47
 8001434:	200a      	movs	r0, #10
 8001436:	f7ff fea5 	bl	8001184 <epd_paint_showString>

  epd_displayBW_partial(image_bw);
 800143a:	482b      	ldr	r0, [pc, #172]	@ (80014e8 <main+0x1ac>)
 800143c:	f7ff fbbb 	bl	8000bb6 <epd_displayBW_partial>

  printf("Before loop.\r\n");
 8001440:	482f      	ldr	r0, [pc, #188]	@ (8001500 <main+0x1c4>)
 8001442:	f006 fc63 	bl	8007d0c <puts>
  HAL_Delay(500);
 8001446:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800144a:	f000 fdfb 	bl	8002044 <HAL_Delay>

  for (int i = 123; i < 8 * 123; i += 123)
 800144e:	237b      	movs	r3, #123	@ 0x7b
 8001450:	617b      	str	r3, [r7, #20]
 8001452:	e016      	b.n	8001482 <main+0x146>
  {
    sprintf((char *)&text, ">> Num=%d     ", i);
 8001454:	463b      	mov	r3, r7
 8001456:	697a      	ldr	r2, [r7, #20]
 8001458:	492a      	ldr	r1, [pc, #168]	@ (8001504 <main+0x1c8>)
 800145a:	4618      	mov	r0, r3
 800145c:	f006 fc5e 	bl	8007d1c <siprintf>
    epd_paint_showString(10, 71, text, EPD_FONT_SIZE24x12, EPD_COLOR_BLACK);
 8001460:	463a      	mov	r2, r7
 8001462:	2300      	movs	r3, #0
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	2318      	movs	r3, #24
 8001468:	2147      	movs	r1, #71	@ 0x47
 800146a:	200a      	movs	r0, #10
 800146c:	f7ff fe8a 	bl	8001184 <epd_paint_showString>

    epd_displayBW_partial(image_bw);
 8001470:	481d      	ldr	r0, [pc, #116]	@ (80014e8 <main+0x1ac>)
 8001472:	f7ff fba0 	bl	8000bb6 <epd_displayBW_partial>

    HAL_Delay(100);
 8001476:	2064      	movs	r0, #100	@ 0x64
 8001478:	f000 fde4 	bl	8002044 <HAL_Delay>
  for (int i = 123; i < 8 * 123; i += 123)
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	337b      	adds	r3, #123	@ 0x7b
 8001480:	617b      	str	r3, [r7, #20]
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	f5b3 7f76 	cmp.w	r3, #984	@ 0x3d8
 8001488:	dbe4      	blt.n	8001454 <main+0x118>
  }

  sprintf((char *)&text, ">> Hello World.");
 800148a:	463b      	mov	r3, r7
 800148c:	491e      	ldr	r1, [pc, #120]	@ (8001508 <main+0x1cc>)
 800148e:	4618      	mov	r0, r3
 8001490:	f006 fc44 	bl	8007d1c <siprintf>
  epd_paint_showString(10, 71, text, EPD_FONT_SIZE24x12, EPD_COLOR_BLACK);
 8001494:	463a      	mov	r2, r7
 8001496:	2300      	movs	r3, #0
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	2318      	movs	r3, #24
 800149c:	2147      	movs	r1, #71	@ 0x47
 800149e:	200a      	movs	r0, #10
 80014a0:	f7ff fe70 	bl	8001184 <epd_paint_showString>
  epd_displayBW_partial(image_bw);
 80014a4:	4810      	ldr	r0, [pc, #64]	@ (80014e8 <main+0x1ac>)
 80014a6:	f7ff fb86 	bl	8000bb6 <epd_displayBW_partial>

  HAL_Delay(1000);
 80014aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014ae:	f000 fdc9 	bl	8002044 <HAL_Delay>
  epd_paint_clear(EPD_COLOR_WHITE);
 80014b2:	20ff      	movs	r0, #255	@ 0xff
 80014b4:	f7ff fc80 	bl	8000db8 <epd_paint_clear>
  epd_update();
 80014b8:	f7ff faa8 	bl	8000a0c <epd_update>

  epd_enter_deepsleepmode(EPD_DEEPSLEEP_MODE1);
 80014bc:	2001      	movs	r0, #1
 80014be:	f7ff fa6d 	bl	800099c <epd_enter_deepsleepmode>
    /* USER CODE BEGIN 3 */
      /*ITM_SendChar('a');
      ITM_SendChar('b');
      ITM_SendChar('c');
      ITM_SendChar('\n');*/
      printf("DEB ");
 80014c2:	4812      	ldr	r0, [pc, #72]	@ (800150c <main+0x1d0>)
 80014c4:	f006 fbba 	bl	8007c3c <iprintf>
      printf("LED EPAPER\r\n");
 80014c8:	4811      	ldr	r0, [pc, #68]	@ (8001510 <main+0x1d4>)
 80014ca:	f006 fc1f 	bl	8007d0c <puts>
      HAL_GPIO_TogglePin (GPIOE, GPIO_PIN_3);
 80014ce:	2108      	movs	r1, #8
 80014d0:	4810      	ldr	r0, [pc, #64]	@ (8001514 <main+0x1d8>)
 80014d2:	f001 f910 	bl	80026f6 <HAL_GPIO_TogglePin>
      HAL_Delay (4000);   /* Insert delay 100 ms */
 80014d6:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80014da:	f000 fdb3 	bl	8002044 <HAL_Delay>
      printf("DEB ");
 80014de:	bf00      	nop
 80014e0:	e7ef      	b.n	80014c2 <main+0x186>
 80014e2:	bf00      	nop
 80014e4:	08008e20 	.word	0x08008e20
 80014e8:	24000208 	.word	0x24000208
 80014ec:	0800a8bc 	.word	0x0800a8bc
 80014f0:	08008e30 	.word	0x08008e30
 80014f4:	08008e48 	.word	0x08008e48
 80014f8:	08008e64 	.word	0x08008e64
 80014fc:	08008e80 	.word	0x08008e80
 8001500:	08008e90 	.word	0x08008e90
 8001504:	08008ea0 	.word	0x08008ea0
 8001508:	08008eb0 	.word	0x08008eb0
 800150c:	08008ec0 	.word	0x08008ec0
 8001510:	08008ec8 	.word	0x08008ec8
 8001514:	58021000 	.word	0x58021000

08001518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b09c      	sub	sp, #112	@ 0x70
 800151c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800151e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001522:	224c      	movs	r2, #76	@ 0x4c
 8001524:	2100      	movs	r1, #0
 8001526:	4618      	mov	r0, r3
 8001528:	f006 fcf0 	bl	8007f0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	2220      	movs	r2, #32
 8001530:	2100      	movs	r1, #0
 8001532:	4618      	mov	r0, r3
 8001534:	f006 fcea 	bl	8007f0c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001538:	2002      	movs	r0, #2
 800153a:	f001 f8f7 	bl	800272c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800153e:	2300      	movs	r3, #0
 8001540:	603b      	str	r3, [r7, #0]
 8001542:	4b2c      	ldr	r3, [pc, #176]	@ (80015f4 <SystemClock_Config+0xdc>)
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800154a:	4a2a      	ldr	r2, [pc, #168]	@ (80015f4 <SystemClock_Config+0xdc>)
 800154c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001550:	6193      	str	r3, [r2, #24]
 8001552:	4b28      	ldr	r3, [pc, #160]	@ (80015f4 <SystemClock_Config+0xdc>)
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800155a:	603b      	str	r3, [r7, #0]
 800155c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800155e:	bf00      	nop
 8001560:	4b24      	ldr	r3, [pc, #144]	@ (80015f4 <SystemClock_Config+0xdc>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001568:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800156c:	d1f8      	bne.n	8001560 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800156e:	2302      	movs	r3, #2
 8001570:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001572:	2301      	movs	r3, #1
 8001574:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001576:	2340      	movs	r3, #64	@ 0x40
 8001578:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800157a:	2302      	movs	r3, #2
 800157c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800157e:	2300      	movs	r3, #0
 8001580:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001582:	2304      	movs	r3, #4
 8001584:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001586:	230c      	movs	r3, #12
 8001588:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800158a:	2302      	movs	r3, #2
 800158c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800158e:	2303      	movs	r3, #3
 8001590:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001592:	2302      	movs	r3, #2
 8001594:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001596:	230c      	movs	r3, #12
 8001598:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800159a:	2300      	movs	r3, #0
 800159c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015a6:	4618      	mov	r0, r3
 80015a8:	f001 f8fa 	bl	80027a0 <HAL_RCC_OscConfig>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80015b2:	f000 fa09 	bl	80019c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015b6:	233f      	movs	r3, #63	@ 0x3f
 80015b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80015c2:	2300      	movs	r3, #0
 80015c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80015ca:	2340      	movs	r3, #64	@ 0x40
 80015cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80015d2:	2300      	movs	r3, #0
 80015d4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	2101      	movs	r1, #1
 80015da:	4618      	mov	r0, r3
 80015dc:	f001 fcba 	bl	8002f54 <HAL_RCC_ClockConfig>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80015e6:	f000 f9ef 	bl	80019c8 <Error_Handler>
  }
}
 80015ea:	bf00      	nop
 80015ec:	3770      	adds	r7, #112	@ 0x70
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	58024800 	.word	0x58024800

080015f8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80015fc:	4b29      	ldr	r3, [pc, #164]	@ (80016a4 <MX_SPI2_Init+0xac>)
 80015fe:	4a2a      	ldr	r2, [pc, #168]	@ (80016a8 <MX_SPI2_Init+0xb0>)
 8001600:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001602:	4b28      	ldr	r3, [pc, #160]	@ (80016a4 <MX_SPI2_Init+0xac>)
 8001604:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001608:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 800160a:	4b26      	ldr	r3, [pc, #152]	@ (80016a4 <MX_SPI2_Init+0xac>)
 800160c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001610:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001612:	4b24      	ldr	r3, [pc, #144]	@ (80016a4 <MX_SPI2_Init+0xac>)
 8001614:	2207      	movs	r2, #7
 8001616:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001618:	4b22      	ldr	r3, [pc, #136]	@ (80016a4 <MX_SPI2_Init+0xac>)
 800161a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800161e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001620:	4b20      	ldr	r3, [pc, #128]	@ (80016a4 <MX_SPI2_Init+0xac>)
 8001622:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001626:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001628:	4b1e      	ldr	r3, [pc, #120]	@ (80016a4 <MX_SPI2_Init+0xac>)
 800162a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800162e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001630:	4b1c      	ldr	r3, [pc, #112]	@ (80016a4 <MX_SPI2_Init+0xac>)
 8001632:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 8001636:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001638:	4b1a      	ldr	r3, [pc, #104]	@ (80016a4 <MX_SPI2_Init+0xac>)
 800163a:	2200      	movs	r2, #0
 800163c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800163e:	4b19      	ldr	r3, [pc, #100]	@ (80016a4 <MX_SPI2_Init+0xac>)
 8001640:	2200      	movs	r2, #0
 8001642:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001644:	4b17      	ldr	r3, [pc, #92]	@ (80016a4 <MX_SPI2_Init+0xac>)
 8001646:	2200      	movs	r2, #0
 8001648:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800164a:	4b16      	ldr	r3, [pc, #88]	@ (80016a4 <MX_SPI2_Init+0xac>)
 800164c:	2200      	movs	r2, #0
 800164e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001650:	4b14      	ldr	r3, [pc, #80]	@ (80016a4 <MX_SPI2_Init+0xac>)
 8001652:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001656:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001658:	4b12      	ldr	r3, [pc, #72]	@ (80016a4 <MX_SPI2_Init+0xac>)
 800165a:	2200      	movs	r2, #0
 800165c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800165e:	4b11      	ldr	r3, [pc, #68]	@ (80016a4 <MX_SPI2_Init+0xac>)
 8001660:	2200      	movs	r2, #0
 8001662:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001664:	4b0f      	ldr	r3, [pc, #60]	@ (80016a4 <MX_SPI2_Init+0xac>)
 8001666:	2200      	movs	r2, #0
 8001668:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800166a:	4b0e      	ldr	r3, [pc, #56]	@ (80016a4 <MX_SPI2_Init+0xac>)
 800166c:	2200      	movs	r2, #0
 800166e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001670:	4b0c      	ldr	r3, [pc, #48]	@ (80016a4 <MX_SPI2_Init+0xac>)
 8001672:	2200      	movs	r2, #0
 8001674:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001676:	4b0b      	ldr	r3, [pc, #44]	@ (80016a4 <MX_SPI2_Init+0xac>)
 8001678:	2200      	movs	r2, #0
 800167a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800167c:	4b09      	ldr	r3, [pc, #36]	@ (80016a4 <MX_SPI2_Init+0xac>)
 800167e:	2200      	movs	r2, #0
 8001680:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001682:	4b08      	ldr	r3, [pc, #32]	@ (80016a4 <MX_SPI2_Init+0xac>)
 8001684:	2200      	movs	r2, #0
 8001686:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001688:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <MX_SPI2_Init+0xac>)
 800168a:	2200      	movs	r2, #0
 800168c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800168e:	4805      	ldr	r0, [pc, #20]	@ (80016a4 <MX_SPI2_Init+0xac>)
 8001690:	f003 fdae 	bl	80051f0 <HAL_SPI_Init>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_SPI2_Init+0xa6>
  {
    Error_Handler();
 800169a:	f000 f995 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	240000a0 	.word	0x240000a0
 80016a8:	40003800 	.word	0x40003800

080016ac <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08c      	sub	sp, #48	@ 0x30
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80016b2:	f107 031c 	add.w	r3, r7, #28
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
 80016c0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c2:	f107 0310 	add.w	r3, r7, #16
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80016ce:	463b      	mov	r3, r7
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80016da:	4b3a      	ldr	r3, [pc, #232]	@ (80017c4 <MX_TIM8_Init+0x118>)
 80016dc:	4a3a      	ldr	r2, [pc, #232]	@ (80017c8 <MX_TIM8_Init+0x11c>)
 80016de:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80016e0:	4b38      	ldr	r3, [pc, #224]	@ (80017c4 <MX_TIM8_Init+0x118>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e6:	4b37      	ldr	r3, [pc, #220]	@ (80017c4 <MX_TIM8_Init+0x118>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80016ec:	4b35      	ldr	r3, [pc, #212]	@ (80017c4 <MX_TIM8_Init+0x118>)
 80016ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016f2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f4:	4b33      	ldr	r3, [pc, #204]	@ (80017c4 <MX_TIM8_Init+0x118>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80016fa:	4b32      	ldr	r3, [pc, #200]	@ (80017c4 <MX_TIM8_Init+0x118>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001700:	4b30      	ldr	r3, [pc, #192]	@ (80017c4 <MX_TIM8_Init+0x118>)
 8001702:	2200      	movs	r2, #0
 8001704:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001706:	482f      	ldr	r0, [pc, #188]	@ (80017c4 <MX_TIM8_Init+0x118>)
 8001708:	f004 f97b 	bl	8005a02 <HAL_TIM_Base_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM8_Init+0x6a>
  {
    Error_Handler();
 8001712:	f000 f959 	bl	80019c8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8001716:	482b      	ldr	r0, [pc, #172]	@ (80017c4 <MX_TIM8_Init+0x118>)
 8001718:	f004 f9ca 	bl	8005ab0 <HAL_TIM_IC_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001722:	f000 f951 	bl	80019c8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001726:	2307      	movs	r3, #7
 8001728:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800172a:	2300      	movs	r3, #0
 800172c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 800172e:	f107 031c 	add.w	r3, r7, #28
 8001732:	4619      	mov	r1, r3
 8001734:	4823      	ldr	r0, [pc, #140]	@ (80017c4 <MX_TIM8_Init+0x118>)
 8001736:	f004 fab8 	bl	8005caa <HAL_TIM_SlaveConfigSynchro>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001740:	f000 f942 	bl	80019c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001744:	2300      	movs	r3, #0
 8001746:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800174c:	2300      	movs	r3, #0
 800174e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001750:	f107 0310 	add.w	r3, r7, #16
 8001754:	4619      	mov	r1, r3
 8001756:	481b      	ldr	r0, [pc, #108]	@ (80017c4 <MX_TIM8_Init+0x118>)
 8001758:	f004 fe36 	bl	80063c8 <HAL_TIMEx_MasterConfigSynchronization>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_TIM8_Init+0xba>
  {
    Error_Handler();
 8001762:	f000 f931 	bl	80019c8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001766:	2300      	movs	r3, #0
 8001768:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800176a:	2301      	movs	r3, #1
 800176c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800176e:	2300      	movs	r3, #0
 8001770:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001776:	463b      	mov	r3, r7
 8001778:	2200      	movs	r2, #0
 800177a:	4619      	mov	r1, r3
 800177c:	4811      	ldr	r0, [pc, #68]	@ (80017c4 <MX_TIM8_Init+0x118>)
 800177e:	f004 f9f8 	bl	8005b72 <HAL_TIM_IC_ConfigChannel>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM8_Init+0xe0>
  {
    Error_Handler();
 8001788:	f000 f91e 	bl	80019c8 <Error_Handler>
  }
  if (HAL_TIMEx_TISelection(&htim8, TIM_TIM8_TI1_COMP2, TIM_CHANNEL_1) != HAL_OK)
 800178c:	2200      	movs	r2, #0
 800178e:	2101      	movs	r1, #1
 8001790:	480c      	ldr	r0, [pc, #48]	@ (80017c4 <MX_TIM8_Init+0x118>)
 8001792:	f004 feb5 	bl	8006500 <HAL_TIMEx_TISelection>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 800179c:	f000 f914 	bl	80019c8 <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80017a0:	2302      	movs	r3, #2
 80017a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80017a4:	463b      	mov	r3, r7
 80017a6:	2204      	movs	r2, #4
 80017a8:	4619      	mov	r1, r3
 80017aa:	4806      	ldr	r0, [pc, #24]	@ (80017c4 <MX_TIM8_Init+0x118>)
 80017ac:	f004 f9e1 	bl	8005b72 <HAL_TIM_IC_ConfigChannel>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 80017b6:	f000 f907 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80017ba:	bf00      	nop
 80017bc:	3730      	adds	r7, #48	@ 0x30
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	24000128 	.word	0x24000128
 80017c8:	40010400 	.word	0x40010400

080017cc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80017d0:	4b22      	ldr	r3, [pc, #136]	@ (800185c <MX_UART4_Init+0x90>)
 80017d2:	4a23      	ldr	r2, [pc, #140]	@ (8001860 <MX_UART4_Init+0x94>)
 80017d4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80017d6:	4b21      	ldr	r3, [pc, #132]	@ (800185c <MX_UART4_Init+0x90>)
 80017d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017dc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80017de:	4b1f      	ldr	r3, [pc, #124]	@ (800185c <MX_UART4_Init+0x90>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80017e4:	4b1d      	ldr	r3, [pc, #116]	@ (800185c <MX_UART4_Init+0x90>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80017ea:	4b1c      	ldr	r3, [pc, #112]	@ (800185c <MX_UART4_Init+0x90>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80017f0:	4b1a      	ldr	r3, [pc, #104]	@ (800185c <MX_UART4_Init+0x90>)
 80017f2:	220c      	movs	r2, #12
 80017f4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017f6:	4b19      	ldr	r3, [pc, #100]	@ (800185c <MX_UART4_Init+0x90>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80017fc:	4b17      	ldr	r3, [pc, #92]	@ (800185c <MX_UART4_Init+0x90>)
 80017fe:	2200      	movs	r2, #0
 8001800:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001802:	4b16      	ldr	r3, [pc, #88]	@ (800185c <MX_UART4_Init+0x90>)
 8001804:	2200      	movs	r2, #0
 8001806:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001808:	4b14      	ldr	r3, [pc, #80]	@ (800185c <MX_UART4_Init+0x90>)
 800180a:	2200      	movs	r2, #0
 800180c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800180e:	4b13      	ldr	r3, [pc, #76]	@ (800185c <MX_UART4_Init+0x90>)
 8001810:	2200      	movs	r2, #0
 8001812:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001814:	4811      	ldr	r0, [pc, #68]	@ (800185c <MX_UART4_Init+0x90>)
 8001816:	f004 fee1 	bl	80065dc <HAL_UART_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001820:	f000 f8d2 	bl	80019c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001824:	2100      	movs	r1, #0
 8001826:	480d      	ldr	r0, [pc, #52]	@ (800185c <MX_UART4_Init+0x90>)
 8001828:	f006 f87b 	bl	8007922 <HAL_UARTEx_SetTxFifoThreshold>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001832:	f000 f8c9 	bl	80019c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001836:	2100      	movs	r1, #0
 8001838:	4808      	ldr	r0, [pc, #32]	@ (800185c <MX_UART4_Init+0x90>)
 800183a:	f006 f8b0 	bl	800799e <HAL_UARTEx_SetRxFifoThreshold>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001844:	f000 f8c0 	bl	80019c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001848:	4804      	ldr	r0, [pc, #16]	@ (800185c <MX_UART4_Init+0x90>)
 800184a:	f006 f831 	bl	80078b0 <HAL_UARTEx_DisableFifoMode>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001854:	f000 f8b8 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}
 800185c:	24000174 	.word	0x24000174
 8001860:	40004c00 	.word	0x40004c00

08001864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08a      	sub	sp, #40	@ 0x28
 8001868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186a:	f107 0314 	add.w	r3, r7, #20
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	60da      	str	r2, [r3, #12]
 8001878:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800187a:	4b3a      	ldr	r3, [pc, #232]	@ (8001964 <MX_GPIO_Init+0x100>)
 800187c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001880:	4a38      	ldr	r2, [pc, #224]	@ (8001964 <MX_GPIO_Init+0x100>)
 8001882:	f043 0310 	orr.w	r3, r3, #16
 8001886:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800188a:	4b36      	ldr	r3, [pc, #216]	@ (8001964 <MX_GPIO_Init+0x100>)
 800188c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001890:	f003 0310 	and.w	r3, r3, #16
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001898:	4b32      	ldr	r3, [pc, #200]	@ (8001964 <MX_GPIO_Init+0x100>)
 800189a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800189e:	4a31      	ldr	r2, [pc, #196]	@ (8001964 <MX_GPIO_Init+0x100>)
 80018a0:	f043 0304 	orr.w	r3, r3, #4
 80018a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018a8:	4b2e      	ldr	r3, [pc, #184]	@ (8001964 <MX_GPIO_Init+0x100>)
 80018aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ae:	f003 0304 	and.w	r3, r3, #4
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001964 <MX_GPIO_Init+0x100>)
 80018b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018bc:	4a29      	ldr	r2, [pc, #164]	@ (8001964 <MX_GPIO_Init+0x100>)
 80018be:	f043 0301 	orr.w	r3, r3, #1
 80018c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018c6:	4b27      	ldr	r3, [pc, #156]	@ (8001964 <MX_GPIO_Init+0x100>)
 80018c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	60bb      	str	r3, [r7, #8]
 80018d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d4:	4b23      	ldr	r3, [pc, #140]	@ (8001964 <MX_GPIO_Init+0x100>)
 80018d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018da:	4a22      	ldr	r2, [pc, #136]	@ (8001964 <MX_GPIO_Init+0x100>)
 80018dc:	f043 0302 	orr.w	r3, r3, #2
 80018e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001964 <MX_GPIO_Init+0x100>)
 80018e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2108      	movs	r1, #8
 80018f6:	481c      	ldr	r0, [pc, #112]	@ (8001968 <MX_GPIO_Init+0x104>)
 80018f8:	f000 fee4 	bl	80026c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin|SPI2_CS_Pin|SPI2_RESET_Pin, GPIO_PIN_RESET);
 80018fc:	2200      	movs	r2, #0
 80018fe:	f640 0106 	movw	r1, #2054	@ 0x806
 8001902:	481a      	ldr	r0, [pc, #104]	@ (800196c <MX_GPIO_Init+0x108>)
 8001904:	f000 fede 	bl	80026c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001908:	2308      	movs	r3, #8
 800190a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190c:	2301      	movs	r3, #1
 800190e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001914:	2300      	movs	r3, #0
 8001916:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	4619      	mov	r1, r3
 800191e:	4812      	ldr	r0, [pc, #72]	@ (8001968 <MX_GPIO_Init+0x104>)
 8001920:	f000 fd10 	bl	8002344 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_BUSY_Pin */
  GPIO_InitStruct.Pin = SPI2_BUSY_Pin;
 8001924:	2301      	movs	r3, #1
 8001926:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001928:	2300      	movs	r3, #0
 800192a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI2_BUSY_GPIO_Port, &GPIO_InitStruct);
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	4619      	mov	r1, r3
 8001936:	480d      	ldr	r0, [pc, #52]	@ (800196c <MX_GPIO_Init+0x108>)
 8001938:	f000 fd04 	bl	8002344 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_DC_Pin SPI2_CS_Pin SPI2_RESET_Pin */
  GPIO_InitStruct.Pin = SPI2_DC_Pin|SPI2_CS_Pin|SPI2_RESET_Pin;
 800193c:	f640 0306 	movw	r3, #2054	@ 0x806
 8001940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001942:	2301      	movs	r3, #1
 8001944:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800194a:	2301      	movs	r3, #1
 800194c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800194e:	f107 0314 	add.w	r3, r7, #20
 8001952:	4619      	mov	r1, r3
 8001954:	4805      	ldr	r0, [pc, #20]	@ (800196c <MX_GPIO_Init+0x108>)
 8001956:	f000 fcf5 	bl	8002344 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800195a:	bf00      	nop
 800195c:	3728      	adds	r7, #40	@ 0x28
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	58024400 	.word	0x58024400
 8001968:	58021000 	.word	0x58021000
 800196c:	58020400 	.word	0x58020400

08001970 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001976:	463b      	mov	r3, r7
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001982:	f000 fc67 	bl	8002254 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001986:	2301      	movs	r3, #1
 8001988:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800198a:	2300      	movs	r3, #0
 800198c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800198e:	2300      	movs	r3, #0
 8001990:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001992:	231f      	movs	r3, #31
 8001994:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001996:	2387      	movs	r3, #135	@ 0x87
 8001998:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800199a:	2300      	movs	r3, #0
 800199c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800199e:	2300      	movs	r3, #0
 80019a0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80019a2:	2301      	movs	r3, #1
 80019a4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80019a6:	2301      	movs	r3, #1
 80019a8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80019aa:	2300      	movs	r3, #0
 80019ac:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80019ae:	2300      	movs	r3, #0
 80019b0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80019b2:	463b      	mov	r3, r7
 80019b4:	4618      	mov	r0, r3
 80019b6:	f000 fc85 	bl	80022c4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80019ba:	2004      	movs	r0, #4
 80019bc:	f000 fc62 	bl	8002284 <HAL_MPU_Enable>

}
 80019c0:	bf00      	nop
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019cc:	b672      	cpsid	i
}
 80019ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019d0:	bf00      	nop
 80019d2:	e7fd      	b.n	80019d0 <Error_Handler+0x8>

080019d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019da:	4b0a      	ldr	r3, [pc, #40]	@ (8001a04 <HAL_MspInit+0x30>)
 80019dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80019e0:	4a08      	ldr	r2, [pc, #32]	@ (8001a04 <HAL_MspInit+0x30>)
 80019e2:	f043 0302 	orr.w	r3, r3, #2
 80019e6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80019ea:	4b06      	ldr	r3, [pc, #24]	@ (8001a04 <HAL_MspInit+0x30>)
 80019ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	607b      	str	r3, [r7, #4]
 80019f6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	58024400 	.word	0x58024400

08001a08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b0ba      	sub	sp, #232	@ 0xe8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a10:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a20:	f107 0318 	add.w	r3, r7, #24
 8001a24:	22b8      	movs	r2, #184	@ 0xb8
 8001a26:	2100      	movs	r1, #0
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f006 fa6f 	bl	8007f0c <memset>
  if(hspi->Instance==SPI2)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a38      	ldr	r2, [pc, #224]	@ (8001b14 <HAL_SPI_MspInit+0x10c>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d169      	bne.n	8001b0c <HAL_SPI_MspInit+0x104>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001a38:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a3c:	f04f 0300 	mov.w	r3, #0
 8001a40:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a48:	f107 0318 	add.w	r3, r7, #24
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f001 fe0d 	bl	800366c <HAL_RCCEx_PeriphCLKConfig>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001a58:	f7ff ffb6 	bl	80019c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a5c:	4b2e      	ldr	r3, [pc, #184]	@ (8001b18 <HAL_SPI_MspInit+0x110>)
 8001a5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a62:	4a2d      	ldr	r2, [pc, #180]	@ (8001b18 <HAL_SPI_MspInit+0x110>)
 8001a64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a68:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a6c:	4b2a      	ldr	r3, [pc, #168]	@ (8001b18 <HAL_SPI_MspInit+0x110>)
 8001a6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a76:	617b      	str	r3, [r7, #20]
 8001a78:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a7a:	4b27      	ldr	r3, [pc, #156]	@ (8001b18 <HAL_SPI_MspInit+0x110>)
 8001a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a80:	4a25      	ldr	r2, [pc, #148]	@ (8001b18 <HAL_SPI_MspInit+0x110>)
 8001a82:	f043 0304 	orr.w	r3, r3, #4
 8001a86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a8a:	4b23      	ldr	r3, [pc, #140]	@ (8001b18 <HAL_SPI_MspInit+0x110>)
 8001a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a98:	4b1f      	ldr	r3, [pc, #124]	@ (8001b18 <HAL_SPI_MspInit+0x110>)
 8001a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a9e:	4a1e      	ldr	r2, [pc, #120]	@ (8001b18 <HAL_SPI_MspInit+0x110>)
 8001aa0:	f043 0302 	orr.w	r3, r3, #2
 8001aa4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b18 <HAL_SPI_MspInit+0x110>)
 8001aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abc:	2302      	movs	r3, #2
 8001abe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ace:	2305      	movs	r3, #5
 8001ad0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ad4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4810      	ldr	r0, [pc, #64]	@ (8001b1c <HAL_SPI_MspInit+0x114>)
 8001adc:	f000 fc32 	bl	8002344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ae0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ae4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af4:	2300      	movs	r3, #0
 8001af6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001afa:	2305      	movs	r3, #5
 8001afc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b00:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001b04:	4619      	mov	r1, r3
 8001b06:	4806      	ldr	r0, [pc, #24]	@ (8001b20 <HAL_SPI_MspInit+0x118>)
 8001b08:	f000 fc1c 	bl	8002344 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001b0c:	bf00      	nop
 8001b0e:	37e8      	adds	r7, #232	@ 0xe8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40003800 	.word	0x40003800
 8001b18:	58024400 	.word	0x58024400
 8001b1c:	58020800 	.word	0x58020800
 8001b20:	58020400 	.word	0x58020400

08001b24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a0b      	ldr	r2, [pc, #44]	@ (8001b60 <HAL_TIM_Base_MspInit+0x3c>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d10e      	bne.n	8001b54 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001b36:	4b0b      	ldr	r3, [pc, #44]	@ (8001b64 <HAL_TIM_Base_MspInit+0x40>)
 8001b38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b3c:	4a09      	ldr	r2, [pc, #36]	@ (8001b64 <HAL_TIM_Base_MspInit+0x40>)
 8001b3e:	f043 0302 	orr.w	r3, r3, #2
 8001b42:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001b46:	4b07      	ldr	r3, [pc, #28]	@ (8001b64 <HAL_TIM_Base_MspInit+0x40>)
 8001b48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM8_MspInit 1 */

  }

}
 8001b54:	bf00      	nop
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	40010400 	.word	0x40010400
 8001b64:	58024400 	.word	0x58024400

08001b68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b0b8      	sub	sp, #224	@ 0xe0
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b70:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
 8001b7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b80:	f107 0310 	add.w	r3, r7, #16
 8001b84:	22b8      	movs	r2, #184	@ 0xb8
 8001b86:	2100      	movs	r1, #0
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f006 f9bf 	bl	8007f0c <memset>
  if(huart->Instance==UART4)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a26      	ldr	r2, [pc, #152]	@ (8001c2c <HAL_UART_MspInit+0xc4>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d145      	bne.n	8001c24 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001b98:	f04f 0202 	mov.w	r2, #2
 8001b9c:	f04f 0300 	mov.w	r3, #0
 8001ba0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001baa:	f107 0310 	add.w	r3, r7, #16
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f001 fd5c 	bl	800366c <HAL_RCCEx_PeriphCLKConfig>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001bba:	f7ff ff05 	bl	80019c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8001c30 <HAL_UART_MspInit+0xc8>)
 8001bc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001bc4:	4a1a      	ldr	r2, [pc, #104]	@ (8001c30 <HAL_UART_MspInit+0xc8>)
 8001bc6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001bca:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001bce:	4b18      	ldr	r3, [pc, #96]	@ (8001c30 <HAL_UART_MspInit+0xc8>)
 8001bd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001bd4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bdc:	4b14      	ldr	r3, [pc, #80]	@ (8001c30 <HAL_UART_MspInit+0xc8>)
 8001bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001be2:	4a13      	ldr	r2, [pc, #76]	@ (8001c30 <HAL_UART_MspInit+0xc8>)
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bec:	4b10      	ldr	r3, [pc, #64]	@ (8001c30 <HAL_UART_MspInit+0xc8>)
 8001bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	60bb      	str	r3, [r7, #8]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c00:	2302      	movs	r3, #2
 8001c02:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001c12:	2308      	movs	r3, #8
 8001c14:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c18:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4805      	ldr	r0, [pc, #20]	@ (8001c34 <HAL_UART_MspInit+0xcc>)
 8001c20:	f000 fb90 	bl	8002344 <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8001c24:	bf00      	nop
 8001c26:	37e0      	adds	r7, #224	@ 0xe0
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40004c00 	.word	0x40004c00
 8001c30:	58024400 	.word	0x58024400
 8001c34:	58020000 	.word	0x58020000

08001c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c3c:	bf00      	nop
 8001c3e:	e7fd      	b.n	8001c3c <NMI_Handler+0x4>

08001c40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c44:	bf00      	nop
 8001c46:	e7fd      	b.n	8001c44 <HardFault_Handler+0x4>

08001c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c4c:	bf00      	nop
 8001c4e:	e7fd      	b.n	8001c4c <MemManage_Handler+0x4>

08001c50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c54:	bf00      	nop
 8001c56:	e7fd      	b.n	8001c54 <BusFault_Handler+0x4>

08001c58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c5c:	bf00      	nop
 8001c5e:	e7fd      	b.n	8001c5c <UsageFault_Handler+0x4>

08001c60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c8e:	f000 f9b9 	bl	8002004 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b086      	sub	sp, #24
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	60f8      	str	r0, [r7, #12]
 8001c9e:	60b9      	str	r1, [r7, #8]
 8001ca0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	e00a      	b.n	8001cbe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ca8:	f3af 8000 	nop.w
 8001cac:	4601      	mov	r1, r0
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	1c5a      	adds	r2, r3, #1
 8001cb2:	60ba      	str	r2, [r7, #8]
 8001cb4:	b2ca      	uxtb	r2, r1
 8001cb6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	617b      	str	r3, [r7, #20]
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	dbf0      	blt.n	8001ca8 <_read+0x12>
  }

  return len;
 8001cc6:	687b      	ldr	r3, [r7, #4]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	e009      	b.n	8001cf6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	1c5a      	adds	r2, r3, #1
 8001ce6:	60ba      	str	r2, [r7, #8]
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff fb14 	bl	8001318 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	617b      	str	r3, [r7, #20]
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	dbf1      	blt.n	8001ce2 <_write+0x12>
  }
  return len;
 8001cfe:	687b      	ldr	r3, [r7, #4]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <_close>:

int _close(int file)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d30:	605a      	str	r2, [r3, #4]
  return 0;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <_isatty>:

int _isatty(int file)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d48:	2301      	movs	r3, #1
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b085      	sub	sp, #20
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	60f8      	str	r0, [r7, #12]
 8001d5e:	60b9      	str	r1, [r7, #8]
 8001d60:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d78:	4a14      	ldr	r2, [pc, #80]	@ (8001dcc <_sbrk+0x5c>)
 8001d7a:	4b15      	ldr	r3, [pc, #84]	@ (8001dd0 <_sbrk+0x60>)
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d84:	4b13      	ldr	r3, [pc, #76]	@ (8001dd4 <_sbrk+0x64>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d102      	bne.n	8001d92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d8c:	4b11      	ldr	r3, [pc, #68]	@ (8001dd4 <_sbrk+0x64>)
 8001d8e:	4a12      	ldr	r2, [pc, #72]	@ (8001dd8 <_sbrk+0x68>)
 8001d90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d92:	4b10      	ldr	r3, [pc, #64]	@ (8001dd4 <_sbrk+0x64>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4413      	add	r3, r2
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d207      	bcs.n	8001db0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001da0:	f006 f902 	bl	8007fa8 <__errno>
 8001da4:	4603      	mov	r3, r0
 8001da6:	220c      	movs	r2, #12
 8001da8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001daa:	f04f 33ff 	mov.w	r3, #4294967295
 8001dae:	e009      	b.n	8001dc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001db0:	4b08      	ldr	r3, [pc, #32]	@ (8001dd4 <_sbrk+0x64>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001db6:	4b07      	ldr	r3, [pc, #28]	@ (8001dd4 <_sbrk+0x64>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	4a05      	ldr	r2, [pc, #20]	@ (8001dd4 <_sbrk+0x64>)
 8001dc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	24050000 	.word	0x24050000
 8001dd0:	00000400 	.word	0x00000400
 8001dd4:	24003ca0 	.word	0x24003ca0
 8001dd8:	24003df8 	.word	0x24003df8

08001ddc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001de0:	4b32      	ldr	r3, [pc, #200]	@ (8001eac <SystemInit+0xd0>)
 8001de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001de6:	4a31      	ldr	r2, [pc, #196]	@ (8001eac <SystemInit+0xd0>)
 8001de8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001df0:	4b2f      	ldr	r3, [pc, #188]	@ (8001eb0 <SystemInit+0xd4>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 030f 	and.w	r3, r3, #15
 8001df8:	2b06      	cmp	r3, #6
 8001dfa:	d807      	bhi.n	8001e0c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001dfc:	4b2c      	ldr	r3, [pc, #176]	@ (8001eb0 <SystemInit+0xd4>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f023 030f 	bic.w	r3, r3, #15
 8001e04:	4a2a      	ldr	r2, [pc, #168]	@ (8001eb0 <SystemInit+0xd4>)
 8001e06:	f043 0307 	orr.w	r3, r3, #7
 8001e0a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001e0c:	4b29      	ldr	r3, [pc, #164]	@ (8001eb4 <SystemInit+0xd8>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a28      	ldr	r2, [pc, #160]	@ (8001eb4 <SystemInit+0xd8>)
 8001e12:	f043 0301 	orr.w	r3, r3, #1
 8001e16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001e18:	4b26      	ldr	r3, [pc, #152]	@ (8001eb4 <SystemInit+0xd8>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001e1e:	4b25      	ldr	r3, [pc, #148]	@ (8001eb4 <SystemInit+0xd8>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	4924      	ldr	r1, [pc, #144]	@ (8001eb4 <SystemInit+0xd8>)
 8001e24:	4b24      	ldr	r3, [pc, #144]	@ (8001eb8 <SystemInit+0xdc>)
 8001e26:	4013      	ands	r3, r2
 8001e28:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001e2a:	4b21      	ldr	r3, [pc, #132]	@ (8001eb0 <SystemInit+0xd4>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0308 	and.w	r3, r3, #8
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d007      	beq.n	8001e46 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001e36:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb0 <SystemInit+0xd4>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f023 030f 	bic.w	r3, r3, #15
 8001e3e:	4a1c      	ldr	r2, [pc, #112]	@ (8001eb0 <SystemInit+0xd4>)
 8001e40:	f043 0307 	orr.w	r3, r3, #7
 8001e44:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001e46:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb4 <SystemInit+0xd8>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001e4c:	4b19      	ldr	r3, [pc, #100]	@ (8001eb4 <SystemInit+0xd8>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001e52:	4b18      	ldr	r3, [pc, #96]	@ (8001eb4 <SystemInit+0xd8>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001e58:	4b16      	ldr	r3, [pc, #88]	@ (8001eb4 <SystemInit+0xd8>)
 8001e5a:	4a18      	ldr	r2, [pc, #96]	@ (8001ebc <SystemInit+0xe0>)
 8001e5c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001e5e:	4b15      	ldr	r3, [pc, #84]	@ (8001eb4 <SystemInit+0xd8>)
 8001e60:	4a17      	ldr	r2, [pc, #92]	@ (8001ec0 <SystemInit+0xe4>)
 8001e62:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001e64:	4b13      	ldr	r3, [pc, #76]	@ (8001eb4 <SystemInit+0xd8>)
 8001e66:	4a17      	ldr	r2, [pc, #92]	@ (8001ec4 <SystemInit+0xe8>)
 8001e68:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001e6a:	4b12      	ldr	r3, [pc, #72]	@ (8001eb4 <SystemInit+0xd8>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001e70:	4b10      	ldr	r3, [pc, #64]	@ (8001eb4 <SystemInit+0xd8>)
 8001e72:	4a14      	ldr	r2, [pc, #80]	@ (8001ec4 <SystemInit+0xe8>)
 8001e74:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001e76:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb4 <SystemInit+0xd8>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001e7c:	4b0d      	ldr	r3, [pc, #52]	@ (8001eb4 <SystemInit+0xd8>)
 8001e7e:	4a11      	ldr	r2, [pc, #68]	@ (8001ec4 <SystemInit+0xe8>)
 8001e80:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001e82:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb4 <SystemInit+0xd8>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e88:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb4 <SystemInit+0xd8>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a09      	ldr	r2, [pc, #36]	@ (8001eb4 <SystemInit+0xd8>)
 8001e8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e92:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001e94:	4b07      	ldr	r3, [pc, #28]	@ (8001eb4 <SystemInit+0xd8>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec8 <SystemInit+0xec>)
 8001e9c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001ea0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001ea2:	bf00      	nop
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	e000ed00 	.word	0xe000ed00
 8001eb0:	52002000 	.word	0x52002000
 8001eb4:	58024400 	.word	0x58024400
 8001eb8:	eaf6ed7f 	.word	0xeaf6ed7f
 8001ebc:	02020200 	.word	0x02020200
 8001ec0:	01ff0000 	.word	0x01ff0000
 8001ec4:	01010280 	.word	0x01010280
 8001ec8:	52004000 	.word	0x52004000

08001ecc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001ecc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f04 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ed0:	f7ff ff84 	bl	8001ddc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ed4:	480c      	ldr	r0, [pc, #48]	@ (8001f08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ed6:	490d      	ldr	r1, [pc, #52]	@ (8001f0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ed8:	4a0d      	ldr	r2, [pc, #52]	@ (8001f10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001eda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001edc:	e002      	b.n	8001ee4 <LoopCopyDataInit>

08001ede <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ede:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ee0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ee2:	3304      	adds	r3, #4

08001ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ee4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ee6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee8:	d3f9      	bcc.n	8001ede <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eea:	4a0a      	ldr	r2, [pc, #40]	@ (8001f14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001eec:	4c0a      	ldr	r4, [pc, #40]	@ (8001f18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001eee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ef0:	e001      	b.n	8001ef6 <LoopFillZerobss>

08001ef2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ef2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ef4:	3204      	adds	r2, #4

08001ef6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ef6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef8:	d3fb      	bcc.n	8001ef2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001efa:	f006 f85b 	bl	8007fb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001efe:	f7ff fa1d 	bl	800133c <main>
  bx  lr
 8001f02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f04:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001f08:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001f0c:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 8001f10:	0800b8d8 	.word	0x0800b8d8
  ldr r2, =_sbss
 8001f14:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 8001f18:	24003df4 	.word	0x24003df4

08001f1c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f1c:	e7fe      	b.n	8001f1c <ADC3_IRQHandler>
	...

08001f20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f26:	2003      	movs	r0, #3
 8001f28:	f000 f962 	bl	80021f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f2c:	f001 f9c8 	bl	80032c0 <HAL_RCC_GetSysClockFreq>
 8001f30:	4602      	mov	r2, r0
 8001f32:	4b15      	ldr	r3, [pc, #84]	@ (8001f88 <HAL_Init+0x68>)
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	0a1b      	lsrs	r3, r3, #8
 8001f38:	f003 030f 	and.w	r3, r3, #15
 8001f3c:	4913      	ldr	r1, [pc, #76]	@ (8001f8c <HAL_Init+0x6c>)
 8001f3e:	5ccb      	ldrb	r3, [r1, r3]
 8001f40:	f003 031f 	and.w	r3, r3, #31
 8001f44:	fa22 f303 	lsr.w	r3, r2, r3
 8001f48:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f4a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f88 <HAL_Init+0x68>)
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	4a0e      	ldr	r2, [pc, #56]	@ (8001f8c <HAL_Init+0x6c>)
 8001f54:	5cd3      	ldrb	r3, [r2, r3]
 8001f56:	f003 031f 	and.w	r3, r3, #31
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f60:	4a0b      	ldr	r2, [pc, #44]	@ (8001f90 <HAL_Init+0x70>)
 8001f62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f64:	4a0b      	ldr	r2, [pc, #44]	@ (8001f94 <HAL_Init+0x74>)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f6a:	200f      	movs	r0, #15
 8001f6c:	f000 f814 	bl	8001f98 <HAL_InitTick>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e002      	b.n	8001f80 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f7a:	f7ff fd2b 	bl	80019d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	58024400 	.word	0x58024400
 8001f8c:	0800b85c 	.word	0x0800b85c
 8001f90:	24000008 	.word	0x24000008
 8001f94:	24000004 	.word	0x24000004

08001f98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001fa0:	4b15      	ldr	r3, [pc, #84]	@ (8001ff8 <HAL_InitTick+0x60>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e021      	b.n	8001ff0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001fac:	4b13      	ldr	r3, [pc, #76]	@ (8001ffc <HAL_InitTick+0x64>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	4b11      	ldr	r3, [pc, #68]	@ (8001ff8 <HAL_InitTick+0x60>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f000 f939 	bl	800223a <HAL_SYSTICK_Config>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e00e      	b.n	8001ff0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b0f      	cmp	r3, #15
 8001fd6:	d80a      	bhi.n	8001fee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	6879      	ldr	r1, [r7, #4]
 8001fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe0:	f000 f911 	bl	8002206 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fe4:	4a06      	ldr	r2, [pc, #24]	@ (8002000 <HAL_InitTick+0x68>)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	e000      	b.n	8001ff0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	24000010 	.word	0x24000010
 8001ffc:	24000004 	.word	0x24000004
 8002000:	2400000c 	.word	0x2400000c

08002004 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002008:	4b06      	ldr	r3, [pc, #24]	@ (8002024 <HAL_IncTick+0x20>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	461a      	mov	r2, r3
 800200e:	4b06      	ldr	r3, [pc, #24]	@ (8002028 <HAL_IncTick+0x24>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4413      	add	r3, r2
 8002014:	4a04      	ldr	r2, [pc, #16]	@ (8002028 <HAL_IncTick+0x24>)
 8002016:	6013      	str	r3, [r2, #0]
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	24000010 	.word	0x24000010
 8002028:	24003ca4 	.word	0x24003ca4

0800202c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  return uwTick;
 8002030:	4b03      	ldr	r3, [pc, #12]	@ (8002040 <HAL_GetTick+0x14>)
 8002032:	681b      	ldr	r3, [r3, #0]
}
 8002034:	4618      	mov	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	24003ca4 	.word	0x24003ca4

08002044 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800204c:	f7ff ffee 	bl	800202c <HAL_GetTick>
 8002050:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800205c:	d005      	beq.n	800206a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800205e:	4b0a      	ldr	r3, [pc, #40]	@ (8002088 <HAL_Delay+0x44>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	461a      	mov	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	4413      	add	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800206a:	bf00      	nop
 800206c:	f7ff ffde 	bl	800202c <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	429a      	cmp	r2, r3
 800207a:	d8f7      	bhi.n	800206c <HAL_Delay+0x28>
  {
  }
}
 800207c:	bf00      	nop
 800207e:	bf00      	nop
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	24000010 	.word	0x24000010

0800208c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800209c:	4b0b      	ldr	r3, [pc, #44]	@ (80020cc <__NVIC_SetPriorityGrouping+0x40>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020a8:	4013      	ands	r3, r2
 80020aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80020b4:	4b06      	ldr	r3, [pc, #24]	@ (80020d0 <__NVIC_SetPriorityGrouping+0x44>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ba:	4a04      	ldr	r2, [pc, #16]	@ (80020cc <__NVIC_SetPriorityGrouping+0x40>)
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	60d3      	str	r3, [r2, #12]
}
 80020c0:	bf00      	nop
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	e000ed00 	.word	0xe000ed00
 80020d0:	05fa0000 	.word	0x05fa0000

080020d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020d8:	4b04      	ldr	r3, [pc, #16]	@ (80020ec <__NVIC_GetPriorityGrouping+0x18>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	0a1b      	lsrs	r3, r3, #8
 80020de:	f003 0307 	and.w	r3, r3, #7
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	e000ed00 	.word	0xe000ed00

080020f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	6039      	str	r1, [r7, #0]
 80020fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80020fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002100:	2b00      	cmp	r3, #0
 8002102:	db0a      	blt.n	800211a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	b2da      	uxtb	r2, r3
 8002108:	490c      	ldr	r1, [pc, #48]	@ (800213c <__NVIC_SetPriority+0x4c>)
 800210a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800210e:	0112      	lsls	r2, r2, #4
 8002110:	b2d2      	uxtb	r2, r2
 8002112:	440b      	add	r3, r1
 8002114:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002118:	e00a      	b.n	8002130 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	b2da      	uxtb	r2, r3
 800211e:	4908      	ldr	r1, [pc, #32]	@ (8002140 <__NVIC_SetPriority+0x50>)
 8002120:	88fb      	ldrh	r3, [r7, #6]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	3b04      	subs	r3, #4
 8002128:	0112      	lsls	r2, r2, #4
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	440b      	add	r3, r1
 800212e:	761a      	strb	r2, [r3, #24]
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	e000e100 	.word	0xe000e100
 8002140:	e000ed00 	.word	0xe000ed00

08002144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002144:	b480      	push	{r7}
 8002146:	b089      	sub	sp, #36	@ 0x24
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	f1c3 0307 	rsb	r3, r3, #7
 800215e:	2b04      	cmp	r3, #4
 8002160:	bf28      	it	cs
 8002162:	2304      	movcs	r3, #4
 8002164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3304      	adds	r3, #4
 800216a:	2b06      	cmp	r3, #6
 800216c:	d902      	bls.n	8002174 <NVIC_EncodePriority+0x30>
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	3b03      	subs	r3, #3
 8002172:	e000      	b.n	8002176 <NVIC_EncodePriority+0x32>
 8002174:	2300      	movs	r3, #0
 8002176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002178:	f04f 32ff 	mov.w	r2, #4294967295
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43da      	mvns	r2, r3
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	401a      	ands	r2, r3
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800218c:	f04f 31ff 	mov.w	r1, #4294967295
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	fa01 f303 	lsl.w	r3, r1, r3
 8002196:	43d9      	mvns	r1, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800219c:	4313      	orrs	r3, r2
         );
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3724      	adds	r7, #36	@ 0x24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
	...

080021ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021bc:	d301      	bcc.n	80021c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021be:	2301      	movs	r3, #1
 80021c0:	e00f      	b.n	80021e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021c2:	4a0a      	ldr	r2, [pc, #40]	@ (80021ec <SysTick_Config+0x40>)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ca:	210f      	movs	r1, #15
 80021cc:	f04f 30ff 	mov.w	r0, #4294967295
 80021d0:	f7ff ff8e 	bl	80020f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021d4:	4b05      	ldr	r3, [pc, #20]	@ (80021ec <SysTick_Config+0x40>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021da:	4b04      	ldr	r3, [pc, #16]	@ (80021ec <SysTick_Config+0x40>)
 80021dc:	2207      	movs	r2, #7
 80021de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	e000e010 	.word	0xe000e010

080021f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f7ff ff47 	bl	800208c <__NVIC_SetPriorityGrouping>
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b086      	sub	sp, #24
 800220a:	af00      	add	r7, sp, #0
 800220c:	4603      	mov	r3, r0
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	607a      	str	r2, [r7, #4]
 8002212:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002214:	f7ff ff5e 	bl	80020d4 <__NVIC_GetPriorityGrouping>
 8002218:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	68b9      	ldr	r1, [r7, #8]
 800221e:	6978      	ldr	r0, [r7, #20]
 8002220:	f7ff ff90 	bl	8002144 <NVIC_EncodePriority>
 8002224:	4602      	mov	r2, r0
 8002226:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800222a:	4611      	mov	r1, r2
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff ff5f 	bl	80020f0 <__NVIC_SetPriority>
}
 8002232:	bf00      	nop
 8002234:	3718      	adds	r7, #24
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b082      	sub	sp, #8
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7ff ffb2 	bl	80021ac <SysTick_Config>
 8002248:	4603      	mov	r3, r0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
	...

08002254 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002258:	f3bf 8f5f 	dmb	sy
}
 800225c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800225e:	4b07      	ldr	r3, [pc, #28]	@ (800227c <HAL_MPU_Disable+0x28>)
 8002260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002262:	4a06      	ldr	r2, [pc, #24]	@ (800227c <HAL_MPU_Disable+0x28>)
 8002264:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002268:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800226a:	4b05      	ldr	r3, [pc, #20]	@ (8002280 <HAL_MPU_Disable+0x2c>)
 800226c:	2200      	movs	r2, #0
 800226e:	605a      	str	r2, [r3, #4]
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	e000ed00 	.word	0xe000ed00
 8002280:	e000ed90 	.word	0xe000ed90

08002284 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800228c:	4a0b      	ldr	r2, [pc, #44]	@ (80022bc <HAL_MPU_Enable+0x38>)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f043 0301 	orr.w	r3, r3, #1
 8002294:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002296:	4b0a      	ldr	r3, [pc, #40]	@ (80022c0 <HAL_MPU_Enable+0x3c>)
 8002298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229a:	4a09      	ldr	r2, [pc, #36]	@ (80022c0 <HAL_MPU_Enable+0x3c>)
 800229c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022a0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80022a2:	f3bf 8f4f 	dsb	sy
}
 80022a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80022a8:	f3bf 8f6f 	isb	sy
}
 80022ac:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	e000ed90 	.word	0xe000ed90
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	785a      	ldrb	r2, [r3, #1]
 80022d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002340 <HAL_MPU_ConfigRegion+0x7c>)
 80022d2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80022d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002340 <HAL_MPU_ConfigRegion+0x7c>)
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	4a19      	ldr	r2, [pc, #100]	@ (8002340 <HAL_MPU_ConfigRegion+0x7c>)
 80022da:	f023 0301 	bic.w	r3, r3, #1
 80022de:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80022e0:	4a17      	ldr	r2, [pc, #92]	@ (8002340 <HAL_MPU_ConfigRegion+0x7c>)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	7b1b      	ldrb	r3, [r3, #12]
 80022ec:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	7adb      	ldrb	r3, [r3, #11]
 80022f2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80022f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	7a9b      	ldrb	r3, [r3, #10]
 80022fa:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80022fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	7b5b      	ldrb	r3, [r3, #13]
 8002302:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002304:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	7b9b      	ldrb	r3, [r3, #14]
 800230a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800230c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	7bdb      	ldrb	r3, [r3, #15]
 8002312:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002314:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	7a5b      	ldrb	r3, [r3, #9]
 800231a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800231c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	7a1b      	ldrb	r3, [r3, #8]
 8002322:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002324:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	7812      	ldrb	r2, [r2, #0]
 800232a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800232c:	4a04      	ldr	r2, [pc, #16]	@ (8002340 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800232e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002330:	6113      	str	r3, [r2, #16]
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	e000ed90 	.word	0xe000ed90

08002344 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002344:	b480      	push	{r7}
 8002346:	b089      	sub	sp, #36	@ 0x24
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002352:	4b86      	ldr	r3, [pc, #536]	@ (800256c <HAL_GPIO_Init+0x228>)
 8002354:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002356:	e18c      	b.n	8002672 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	2101      	movs	r1, #1
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	fa01 f303 	lsl.w	r3, r1, r3
 8002364:	4013      	ands	r3, r2
 8002366:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	2b00      	cmp	r3, #0
 800236c:	f000 817e 	beq.w	800266c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 0303 	and.w	r3, r3, #3
 8002378:	2b01      	cmp	r3, #1
 800237a:	d005      	beq.n	8002388 <HAL_GPIO_Init+0x44>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 0303 	and.w	r3, r3, #3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d130      	bne.n	80023ea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	2203      	movs	r2, #3
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	43db      	mvns	r3, r3
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4013      	ands	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	68da      	ldr	r2, [r3, #12]
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023be:	2201      	movs	r2, #1
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43db      	mvns	r3, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4013      	ands	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	091b      	lsrs	r3, r3, #4
 80023d4:	f003 0201 	and.w	r2, r3, #1
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f003 0303 	and.w	r3, r3, #3
 80023f2:	2b03      	cmp	r3, #3
 80023f4:	d017      	beq.n	8002426 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	2203      	movs	r2, #3
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	43db      	mvns	r3, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4013      	ands	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	689a      	ldr	r2, [r3, #8]
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4313      	orrs	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d123      	bne.n	800247a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	08da      	lsrs	r2, r3, #3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3208      	adds	r2, #8
 800243a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	220f      	movs	r2, #15
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43db      	mvns	r3, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4013      	ands	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	691a      	ldr	r2, [r3, #16]
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4313      	orrs	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	08da      	lsrs	r2, r3, #3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3208      	adds	r2, #8
 8002474:	69b9      	ldr	r1, [r7, #24]
 8002476:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	2203      	movs	r2, #3
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	43db      	mvns	r3, r3
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4013      	ands	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f003 0203 	and.w	r2, r3, #3
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 80d8 	beq.w	800266c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024bc:	4b2c      	ldr	r3, [pc, #176]	@ (8002570 <HAL_GPIO_Init+0x22c>)
 80024be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80024c2:	4a2b      	ldr	r2, [pc, #172]	@ (8002570 <HAL_GPIO_Init+0x22c>)
 80024c4:	f043 0302 	orr.w	r3, r3, #2
 80024c8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80024cc:	4b28      	ldr	r3, [pc, #160]	@ (8002570 <HAL_GPIO_Init+0x22c>)
 80024ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024da:	4a26      	ldr	r2, [pc, #152]	@ (8002574 <HAL_GPIO_Init+0x230>)
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	089b      	lsrs	r3, r3, #2
 80024e0:	3302      	adds	r3, #2
 80024e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	220f      	movs	r2, #15
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	43db      	mvns	r3, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4013      	ands	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a1d      	ldr	r2, [pc, #116]	@ (8002578 <HAL_GPIO_Init+0x234>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d04a      	beq.n	800259c <HAL_GPIO_Init+0x258>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a1c      	ldr	r2, [pc, #112]	@ (800257c <HAL_GPIO_Init+0x238>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d02b      	beq.n	8002566 <HAL_GPIO_Init+0x222>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a1b      	ldr	r2, [pc, #108]	@ (8002580 <HAL_GPIO_Init+0x23c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d025      	beq.n	8002562 <HAL_GPIO_Init+0x21e>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a1a      	ldr	r2, [pc, #104]	@ (8002584 <HAL_GPIO_Init+0x240>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d01f      	beq.n	800255e <HAL_GPIO_Init+0x21a>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a19      	ldr	r2, [pc, #100]	@ (8002588 <HAL_GPIO_Init+0x244>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d019      	beq.n	800255a <HAL_GPIO_Init+0x216>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a18      	ldr	r2, [pc, #96]	@ (800258c <HAL_GPIO_Init+0x248>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d013      	beq.n	8002556 <HAL_GPIO_Init+0x212>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a17      	ldr	r2, [pc, #92]	@ (8002590 <HAL_GPIO_Init+0x24c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d00d      	beq.n	8002552 <HAL_GPIO_Init+0x20e>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a16      	ldr	r2, [pc, #88]	@ (8002594 <HAL_GPIO_Init+0x250>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d007      	beq.n	800254e <HAL_GPIO_Init+0x20a>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a15      	ldr	r2, [pc, #84]	@ (8002598 <HAL_GPIO_Init+0x254>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d101      	bne.n	800254a <HAL_GPIO_Init+0x206>
 8002546:	2309      	movs	r3, #9
 8002548:	e029      	b.n	800259e <HAL_GPIO_Init+0x25a>
 800254a:	230a      	movs	r3, #10
 800254c:	e027      	b.n	800259e <HAL_GPIO_Init+0x25a>
 800254e:	2307      	movs	r3, #7
 8002550:	e025      	b.n	800259e <HAL_GPIO_Init+0x25a>
 8002552:	2306      	movs	r3, #6
 8002554:	e023      	b.n	800259e <HAL_GPIO_Init+0x25a>
 8002556:	2305      	movs	r3, #5
 8002558:	e021      	b.n	800259e <HAL_GPIO_Init+0x25a>
 800255a:	2304      	movs	r3, #4
 800255c:	e01f      	b.n	800259e <HAL_GPIO_Init+0x25a>
 800255e:	2303      	movs	r3, #3
 8002560:	e01d      	b.n	800259e <HAL_GPIO_Init+0x25a>
 8002562:	2302      	movs	r3, #2
 8002564:	e01b      	b.n	800259e <HAL_GPIO_Init+0x25a>
 8002566:	2301      	movs	r3, #1
 8002568:	e019      	b.n	800259e <HAL_GPIO_Init+0x25a>
 800256a:	bf00      	nop
 800256c:	58000080 	.word	0x58000080
 8002570:	58024400 	.word	0x58024400
 8002574:	58000400 	.word	0x58000400
 8002578:	58020000 	.word	0x58020000
 800257c:	58020400 	.word	0x58020400
 8002580:	58020800 	.word	0x58020800
 8002584:	58020c00 	.word	0x58020c00
 8002588:	58021000 	.word	0x58021000
 800258c:	58021400 	.word	0x58021400
 8002590:	58021800 	.word	0x58021800
 8002594:	58021c00 	.word	0x58021c00
 8002598:	58022400 	.word	0x58022400
 800259c:	2300      	movs	r3, #0
 800259e:	69fa      	ldr	r2, [r7, #28]
 80025a0:	f002 0203 	and.w	r2, r2, #3
 80025a4:	0092      	lsls	r2, r2, #2
 80025a6:	4093      	lsls	r3, r2
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025ae:	4938      	ldr	r1, [pc, #224]	@ (8002690 <HAL_GPIO_Init+0x34c>)
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	089b      	lsrs	r3, r3, #2
 80025b4:	3302      	adds	r3, #2
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	43db      	mvns	r3, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4013      	ands	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	4313      	orrs	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80025e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80025ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	43db      	mvns	r3, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4013      	ands	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d003      	beq.n	8002610 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	4313      	orrs	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002610:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	43db      	mvns	r3, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4013      	ands	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d003      	beq.n	800263c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	4313      	orrs	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	43db      	mvns	r3, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4013      	ands	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	4313      	orrs	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	3301      	adds	r3, #1
 8002670:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	fa22 f303 	lsr.w	r3, r2, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	f47f ae6b 	bne.w	8002358 <HAL_GPIO_Init+0x14>
  }
}
 8002682:	bf00      	nop
 8002684:	bf00      	nop
 8002686:	3724      	adds	r7, #36	@ 0x24
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	58000400 	.word	0x58000400

08002694 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	460b      	mov	r3, r1
 800269e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691a      	ldr	r2, [r3, #16]
 80026a4:	887b      	ldrh	r3, [r7, #2]
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d002      	beq.n	80026b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026ac:	2301      	movs	r3, #1
 80026ae:	73fb      	strb	r3, [r7, #15]
 80026b0:	e001      	b.n	80026b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026b2:	2300      	movs	r3, #0
 80026b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3714      	adds	r7, #20
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	460b      	mov	r3, r1
 80026ce:	807b      	strh	r3, [r7, #2]
 80026d0:	4613      	mov	r3, r2
 80026d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026d4:	787b      	ldrb	r3, [r7, #1]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026da:	887a      	ldrh	r2, [r7, #2]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80026e0:	e003      	b.n	80026ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80026e2:	887b      	ldrh	r3, [r7, #2]
 80026e4:	041a      	lsls	r2, r3, #16
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	619a      	str	r2, [r3, #24]
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026f6:	b480      	push	{r7}
 80026f8:	b085      	sub	sp, #20
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
 80026fe:	460b      	mov	r3, r1
 8002700:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002708:	887a      	ldrh	r2, [r7, #2]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	4013      	ands	r3, r2
 800270e:	041a      	lsls	r2, r3, #16
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	43d9      	mvns	r1, r3
 8002714:	887b      	ldrh	r3, [r7, #2]
 8002716:	400b      	ands	r3, r1
 8002718:	431a      	orrs	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	619a      	str	r2, [r3, #24]
}
 800271e:	bf00      	nop
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
	...

0800272c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002734:	4b19      	ldr	r3, [pc, #100]	@ (800279c <HAL_PWREx_ConfigSupply+0x70>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	f003 0304 	and.w	r3, r3, #4
 800273c:	2b04      	cmp	r3, #4
 800273e:	d00a      	beq.n	8002756 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002740:	4b16      	ldr	r3, [pc, #88]	@ (800279c <HAL_PWREx_ConfigSupply+0x70>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	f003 0307 	and.w	r3, r3, #7
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	429a      	cmp	r2, r3
 800274c:	d001      	beq.n	8002752 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e01f      	b.n	8002792 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002752:	2300      	movs	r3, #0
 8002754:	e01d      	b.n	8002792 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002756:	4b11      	ldr	r3, [pc, #68]	@ (800279c <HAL_PWREx_ConfigSupply+0x70>)
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	f023 0207 	bic.w	r2, r3, #7
 800275e:	490f      	ldr	r1, [pc, #60]	@ (800279c <HAL_PWREx_ConfigSupply+0x70>)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4313      	orrs	r3, r2
 8002764:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002766:	f7ff fc61 	bl	800202c <HAL_GetTick>
 800276a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800276c:	e009      	b.n	8002782 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800276e:	f7ff fc5d 	bl	800202c <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800277c:	d901      	bls.n	8002782 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e007      	b.n	8002792 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002782:	4b06      	ldr	r3, [pc, #24]	@ (800279c <HAL_PWREx_ConfigSupply+0x70>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800278a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800278e:	d1ee      	bne.n	800276e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	58024800 	.word	0x58024800

080027a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08c      	sub	sp, #48	@ 0x30
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e3c8      	b.n	8002f44 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f000 8087 	beq.w	80028ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027c0:	4b88      	ldr	r3, [pc, #544]	@ (80029e4 <HAL_RCC_OscConfig+0x244>)
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027ca:	4b86      	ldr	r3, [pc, #536]	@ (80029e4 <HAL_RCC_OscConfig+0x244>)
 80027cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80027d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027d2:	2b10      	cmp	r3, #16
 80027d4:	d007      	beq.n	80027e6 <HAL_RCC_OscConfig+0x46>
 80027d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027d8:	2b18      	cmp	r3, #24
 80027da:	d110      	bne.n	80027fe <HAL_RCC_OscConfig+0x5e>
 80027dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d10b      	bne.n	80027fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e6:	4b7f      	ldr	r3, [pc, #508]	@ (80029e4 <HAL_RCC_OscConfig+0x244>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d06c      	beq.n	80028cc <HAL_RCC_OscConfig+0x12c>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d168      	bne.n	80028cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e3a2      	b.n	8002f44 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002806:	d106      	bne.n	8002816 <HAL_RCC_OscConfig+0x76>
 8002808:	4b76      	ldr	r3, [pc, #472]	@ (80029e4 <HAL_RCC_OscConfig+0x244>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a75      	ldr	r2, [pc, #468]	@ (80029e4 <HAL_RCC_OscConfig+0x244>)
 800280e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002812:	6013      	str	r3, [r2, #0]
 8002814:	e02e      	b.n	8002874 <HAL_RCC_OscConfig+0xd4>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10c      	bne.n	8002838 <HAL_RCC_OscConfig+0x98>
 800281e:	4b71      	ldr	r3, [pc, #452]	@ (80029e4 <HAL_RCC_OscConfig+0x244>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a70      	ldr	r2, [pc, #448]	@ (80029e4 <HAL_RCC_OscConfig+0x244>)
 8002824:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	4b6e      	ldr	r3, [pc, #440]	@ (80029e4 <HAL_RCC_OscConfig+0x244>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a6d      	ldr	r2, [pc, #436]	@ (80029e4 <HAL_RCC_OscConfig+0x244>)
 8002830:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	e01d      	b.n	8002874 <HAL_RCC_OscConfig+0xd4>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002840:	d10c      	bne.n	800285c <HAL_RCC_OscConfig+0xbc>
 8002842:	4b68      	ldr	r3, [pc, #416]	@ (80029e4 <HAL_RCC_OscConfig+0x244>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a67      	ldr	r2, [pc, #412]	@ (80029e4 <HAL_RCC_OscConfig+0x244>)
 8002848:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	4b65      	ldr	r3, [pc, #404]	@ (80029e4 <HAL_RCC_OscConfig+0x244>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a64      	ldr	r2, [pc, #400]	@ (80029e4 <HAL_RCC_OscConfig+0x244>)
 8002854:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002858:	6013      	str	r3, [r2, #0]
 800285a:	e00b      	b.n	8002874 <HAL_RCC_OscConfig+0xd4>
 800285c:	4b61      	ldr	r3, [pc, #388]	@ (80029e4 <HAL_RCC_OscConfig+0x244>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a60      	ldr	r2, [pc, #384]	@ (80029e4 <HAL_RCC_OscConfig+0x244>)
 8002862:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002866:	6013      	str	r3, [r2, #0]
 8002868:	4b5e      	ldr	r3, [pc, #376]	@ (80029e4 <HAL_RCC_OscConfig+0x244>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a5d      	ldr	r2, [pc, #372]	@ (80029e4 <HAL_RCC_OscConfig+0x244>)
 800286e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002872:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d013      	beq.n	80028a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287c:	f7ff fbd6 	bl	800202c <HAL_GetTick>
 8002880:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002884:	f7ff fbd2 	bl	800202c <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b64      	cmp	r3, #100	@ 0x64
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e356      	b.n	8002f44 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002896:	4b53      	ldr	r3, [pc, #332]	@ (80029e4 <HAL_RCC_OscConfig+0x244>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0f0      	beq.n	8002884 <HAL_RCC_OscConfig+0xe4>
 80028a2:	e014      	b.n	80028ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a4:	f7ff fbc2 	bl	800202c <HAL_GetTick>
 80028a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028ac:	f7ff fbbe 	bl	800202c <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b64      	cmp	r3, #100	@ 0x64
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e342      	b.n	8002f44 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028be:	4b49      	ldr	r3, [pc, #292]	@ (80029e4 <HAL_RCC_OscConfig+0x244>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1f0      	bne.n	80028ac <HAL_RCC_OscConfig+0x10c>
 80028ca:	e000      	b.n	80028ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f000 808c 	beq.w	80029f4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028dc:	4b41      	ldr	r3, [pc, #260]	@ (80029e4 <HAL_RCC_OscConfig+0x244>)
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028e4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028e6:	4b3f      	ldr	r3, [pc, #252]	@ (80029e4 <HAL_RCC_OscConfig+0x244>)
 80028e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ea:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80028ec:	6a3b      	ldr	r3, [r7, #32]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d007      	beq.n	8002902 <HAL_RCC_OscConfig+0x162>
 80028f2:	6a3b      	ldr	r3, [r7, #32]
 80028f4:	2b18      	cmp	r3, #24
 80028f6:	d137      	bne.n	8002968 <HAL_RCC_OscConfig+0x1c8>
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d132      	bne.n	8002968 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002902:	4b38      	ldr	r3, [pc, #224]	@ (80029e4 <HAL_RCC_OscConfig+0x244>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0304 	and.w	r3, r3, #4
 800290a:	2b00      	cmp	r3, #0
 800290c:	d005      	beq.n	800291a <HAL_RCC_OscConfig+0x17a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e314      	b.n	8002f44 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800291a:	4b32      	ldr	r3, [pc, #200]	@ (80029e4 <HAL_RCC_OscConfig+0x244>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f023 0219 	bic.w	r2, r3, #25
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	492f      	ldr	r1, [pc, #188]	@ (80029e4 <HAL_RCC_OscConfig+0x244>)
 8002928:	4313      	orrs	r3, r2
 800292a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292c:	f7ff fb7e 	bl	800202c <HAL_GetTick>
 8002930:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002934:	f7ff fb7a 	bl	800202c <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e2fe      	b.n	8002f44 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002946:	4b27      	ldr	r3, [pc, #156]	@ (80029e4 <HAL_RCC_OscConfig+0x244>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0304 	and.w	r3, r3, #4
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002952:	4b24      	ldr	r3, [pc, #144]	@ (80029e4 <HAL_RCC_OscConfig+0x244>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	061b      	lsls	r3, r3, #24
 8002960:	4920      	ldr	r1, [pc, #128]	@ (80029e4 <HAL_RCC_OscConfig+0x244>)
 8002962:	4313      	orrs	r3, r2
 8002964:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002966:	e045      	b.n	80029f4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d026      	beq.n	80029be <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002970:	4b1c      	ldr	r3, [pc, #112]	@ (80029e4 <HAL_RCC_OscConfig+0x244>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f023 0219 	bic.w	r2, r3, #25
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	4919      	ldr	r1, [pc, #100]	@ (80029e4 <HAL_RCC_OscConfig+0x244>)
 800297e:	4313      	orrs	r3, r2
 8002980:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002982:	f7ff fb53 	bl	800202c <HAL_GetTick>
 8002986:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800298a:	f7ff fb4f 	bl	800202c <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e2d3      	b.n	8002f44 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800299c:	4b11      	ldr	r3, [pc, #68]	@ (80029e4 <HAL_RCC_OscConfig+0x244>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0f0      	beq.n	800298a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a8:	4b0e      	ldr	r3, [pc, #56]	@ (80029e4 <HAL_RCC_OscConfig+0x244>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	061b      	lsls	r3, r3, #24
 80029b6:	490b      	ldr	r1, [pc, #44]	@ (80029e4 <HAL_RCC_OscConfig+0x244>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	604b      	str	r3, [r1, #4]
 80029bc:	e01a      	b.n	80029f4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029be:	4b09      	ldr	r3, [pc, #36]	@ (80029e4 <HAL_RCC_OscConfig+0x244>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a08      	ldr	r2, [pc, #32]	@ (80029e4 <HAL_RCC_OscConfig+0x244>)
 80029c4:	f023 0301 	bic.w	r3, r3, #1
 80029c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ca:	f7ff fb2f 	bl	800202c <HAL_GetTick>
 80029ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029d0:	e00a      	b.n	80029e8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029d2:	f7ff fb2b 	bl	800202c <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d903      	bls.n	80029e8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e2af      	b.n	8002f44 <HAL_RCC_OscConfig+0x7a4>
 80029e4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029e8:	4b96      	ldr	r3, [pc, #600]	@ (8002c44 <HAL_RCC_OscConfig+0x4a4>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1ee      	bne.n	80029d2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0310 	and.w	r3, r3, #16
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d06a      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a00:	4b90      	ldr	r3, [pc, #576]	@ (8002c44 <HAL_RCC_OscConfig+0x4a4>)
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a08:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a0a:	4b8e      	ldr	r3, [pc, #568]	@ (8002c44 <HAL_RCC_OscConfig+0x4a4>)
 8002a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a0e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	2b08      	cmp	r3, #8
 8002a14:	d007      	beq.n	8002a26 <HAL_RCC_OscConfig+0x286>
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	2b18      	cmp	r3, #24
 8002a1a:	d11b      	bne.n	8002a54 <HAL_RCC_OscConfig+0x2b4>
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	f003 0303 	and.w	r3, r3, #3
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d116      	bne.n	8002a54 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a26:	4b87      	ldr	r3, [pc, #540]	@ (8002c44 <HAL_RCC_OscConfig+0x4a4>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d005      	beq.n	8002a3e <HAL_RCC_OscConfig+0x29e>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	2b80      	cmp	r3, #128	@ 0x80
 8002a38:	d001      	beq.n	8002a3e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e282      	b.n	8002f44 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a3e:	4b81      	ldr	r3, [pc, #516]	@ (8002c44 <HAL_RCC_OscConfig+0x4a4>)
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	061b      	lsls	r3, r3, #24
 8002a4c:	497d      	ldr	r1, [pc, #500]	@ (8002c44 <HAL_RCC_OscConfig+0x4a4>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a52:	e040      	b.n	8002ad6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d023      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002a5c:	4b79      	ldr	r3, [pc, #484]	@ (8002c44 <HAL_RCC_OscConfig+0x4a4>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a78      	ldr	r2, [pc, #480]	@ (8002c44 <HAL_RCC_OscConfig+0x4a4>)
 8002a62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a68:	f7ff fae0 	bl	800202c <HAL_GetTick>
 8002a6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002a70:	f7ff fadc 	bl	800202c <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e260      	b.n	8002f44 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a82:	4b70      	ldr	r3, [pc, #448]	@ (8002c44 <HAL_RCC_OscConfig+0x4a4>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d0f0      	beq.n	8002a70 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a8e:	4b6d      	ldr	r3, [pc, #436]	@ (8002c44 <HAL_RCC_OscConfig+0x4a4>)
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	061b      	lsls	r3, r3, #24
 8002a9c:	4969      	ldr	r1, [pc, #420]	@ (8002c44 <HAL_RCC_OscConfig+0x4a4>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	60cb      	str	r3, [r1, #12]
 8002aa2:	e018      	b.n	8002ad6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002aa4:	4b67      	ldr	r3, [pc, #412]	@ (8002c44 <HAL_RCC_OscConfig+0x4a4>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a66      	ldr	r2, [pc, #408]	@ (8002c44 <HAL_RCC_OscConfig+0x4a4>)
 8002aaa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002aae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab0:	f7ff fabc 	bl	800202c <HAL_GetTick>
 8002ab4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002ab8:	f7ff fab8 	bl	800202c <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e23c      	b.n	8002f44 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002aca:	4b5e      	ldr	r3, [pc, #376]	@ (8002c44 <HAL_RCC_OscConfig+0x4a4>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f0      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d036      	beq.n	8002b50 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d019      	beq.n	8002b1e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aea:	4b56      	ldr	r3, [pc, #344]	@ (8002c44 <HAL_RCC_OscConfig+0x4a4>)
 8002aec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aee:	4a55      	ldr	r2, [pc, #340]	@ (8002c44 <HAL_RCC_OscConfig+0x4a4>)
 8002af0:	f043 0301 	orr.w	r3, r3, #1
 8002af4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af6:	f7ff fa99 	bl	800202c <HAL_GetTick>
 8002afa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002afc:	e008      	b.n	8002b10 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002afe:	f7ff fa95 	bl	800202c <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e219      	b.n	8002f44 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b10:	4b4c      	ldr	r3, [pc, #304]	@ (8002c44 <HAL_RCC_OscConfig+0x4a4>)
 8002b12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0f0      	beq.n	8002afe <HAL_RCC_OscConfig+0x35e>
 8002b1c:	e018      	b.n	8002b50 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b1e:	4b49      	ldr	r3, [pc, #292]	@ (8002c44 <HAL_RCC_OscConfig+0x4a4>)
 8002b20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b22:	4a48      	ldr	r2, [pc, #288]	@ (8002c44 <HAL_RCC_OscConfig+0x4a4>)
 8002b24:	f023 0301 	bic.w	r3, r3, #1
 8002b28:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2a:	f7ff fa7f 	bl	800202c <HAL_GetTick>
 8002b2e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b32:	f7ff fa7b 	bl	800202c <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e1ff      	b.n	8002f44 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b44:	4b3f      	ldr	r3, [pc, #252]	@ (8002c44 <HAL_RCC_OscConfig+0x4a4>)
 8002b46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1f0      	bne.n	8002b32 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0320 	and.w	r3, r3, #32
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d036      	beq.n	8002bca <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d019      	beq.n	8002b98 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b64:	4b37      	ldr	r3, [pc, #220]	@ (8002c44 <HAL_RCC_OscConfig+0x4a4>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a36      	ldr	r2, [pc, #216]	@ (8002c44 <HAL_RCC_OscConfig+0x4a4>)
 8002b6a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b6e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b70:	f7ff fa5c 	bl	800202c <HAL_GetTick>
 8002b74:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b78:	f7ff fa58 	bl	800202c <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e1dc      	b.n	8002f44 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b8a:	4b2e      	ldr	r3, [pc, #184]	@ (8002c44 <HAL_RCC_OscConfig+0x4a4>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0f0      	beq.n	8002b78 <HAL_RCC_OscConfig+0x3d8>
 8002b96:	e018      	b.n	8002bca <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b98:	4b2a      	ldr	r3, [pc, #168]	@ (8002c44 <HAL_RCC_OscConfig+0x4a4>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a29      	ldr	r2, [pc, #164]	@ (8002c44 <HAL_RCC_OscConfig+0x4a4>)
 8002b9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002ba2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ba4:	f7ff fa42 	bl	800202c <HAL_GetTick>
 8002ba8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bac:	f7ff fa3e 	bl	800202c <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e1c2      	b.n	8002f44 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002bbe:	4b21      	ldr	r3, [pc, #132]	@ (8002c44 <HAL_RCC_OscConfig+0x4a4>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1f0      	bne.n	8002bac <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0304 	and.w	r3, r3, #4
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f000 8086 	beq.w	8002ce4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c48 <HAL_RCC_OscConfig+0x4a8>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a1a      	ldr	r2, [pc, #104]	@ (8002c48 <HAL_RCC_OscConfig+0x4a8>)
 8002bde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002be2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002be4:	f7ff fa22 	bl	800202c <HAL_GetTick>
 8002be8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bec:	f7ff fa1e 	bl	800202c <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b64      	cmp	r3, #100	@ 0x64
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e1a2      	b.n	8002f44 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bfe:	4b12      	ldr	r3, [pc, #72]	@ (8002c48 <HAL_RCC_OscConfig+0x4a8>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0f0      	beq.n	8002bec <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d106      	bne.n	8002c20 <HAL_RCC_OscConfig+0x480>
 8002c12:	4b0c      	ldr	r3, [pc, #48]	@ (8002c44 <HAL_RCC_OscConfig+0x4a4>)
 8002c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c16:	4a0b      	ldr	r2, [pc, #44]	@ (8002c44 <HAL_RCC_OscConfig+0x4a4>)
 8002c18:	f043 0301 	orr.w	r3, r3, #1
 8002c1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c1e:	e032      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e6>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d111      	bne.n	8002c4c <HAL_RCC_OscConfig+0x4ac>
 8002c28:	4b06      	ldr	r3, [pc, #24]	@ (8002c44 <HAL_RCC_OscConfig+0x4a4>)
 8002c2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c2c:	4a05      	ldr	r2, [pc, #20]	@ (8002c44 <HAL_RCC_OscConfig+0x4a4>)
 8002c2e:	f023 0301 	bic.w	r3, r3, #1
 8002c32:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c34:	4b03      	ldr	r3, [pc, #12]	@ (8002c44 <HAL_RCC_OscConfig+0x4a4>)
 8002c36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c38:	4a02      	ldr	r2, [pc, #8]	@ (8002c44 <HAL_RCC_OscConfig+0x4a4>)
 8002c3a:	f023 0304 	bic.w	r3, r3, #4
 8002c3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c40:	e021      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e6>
 8002c42:	bf00      	nop
 8002c44:	58024400 	.word	0x58024400
 8002c48:	58024800 	.word	0x58024800
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	2b05      	cmp	r3, #5
 8002c52:	d10c      	bne.n	8002c6e <HAL_RCC_OscConfig+0x4ce>
 8002c54:	4b83      	ldr	r3, [pc, #524]	@ (8002e64 <HAL_RCC_OscConfig+0x6c4>)
 8002c56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c58:	4a82      	ldr	r2, [pc, #520]	@ (8002e64 <HAL_RCC_OscConfig+0x6c4>)
 8002c5a:	f043 0304 	orr.w	r3, r3, #4
 8002c5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c60:	4b80      	ldr	r3, [pc, #512]	@ (8002e64 <HAL_RCC_OscConfig+0x6c4>)
 8002c62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c64:	4a7f      	ldr	r2, [pc, #508]	@ (8002e64 <HAL_RCC_OscConfig+0x6c4>)
 8002c66:	f043 0301 	orr.w	r3, r3, #1
 8002c6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c6c:	e00b      	b.n	8002c86 <HAL_RCC_OscConfig+0x4e6>
 8002c6e:	4b7d      	ldr	r3, [pc, #500]	@ (8002e64 <HAL_RCC_OscConfig+0x6c4>)
 8002c70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c72:	4a7c      	ldr	r2, [pc, #496]	@ (8002e64 <HAL_RCC_OscConfig+0x6c4>)
 8002c74:	f023 0301 	bic.w	r3, r3, #1
 8002c78:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c7a:	4b7a      	ldr	r3, [pc, #488]	@ (8002e64 <HAL_RCC_OscConfig+0x6c4>)
 8002c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c7e:	4a79      	ldr	r2, [pc, #484]	@ (8002e64 <HAL_RCC_OscConfig+0x6c4>)
 8002c80:	f023 0304 	bic.w	r3, r3, #4
 8002c84:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d015      	beq.n	8002cba <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8e:	f7ff f9cd 	bl	800202c <HAL_GetTick>
 8002c92:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c94:	e00a      	b.n	8002cac <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c96:	f7ff f9c9 	bl	800202c <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e14b      	b.n	8002f44 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cac:	4b6d      	ldr	r3, [pc, #436]	@ (8002e64 <HAL_RCC_OscConfig+0x6c4>)
 8002cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d0ee      	beq.n	8002c96 <HAL_RCC_OscConfig+0x4f6>
 8002cb8:	e014      	b.n	8002ce4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cba:	f7ff f9b7 	bl	800202c <HAL_GetTick>
 8002cbe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cc0:	e00a      	b.n	8002cd8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc2:	f7ff f9b3 	bl	800202c <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e135      	b.n	8002f44 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cd8:	4b62      	ldr	r3, [pc, #392]	@ (8002e64 <HAL_RCC_OscConfig+0x6c4>)
 8002cda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1ee      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f000 812a 	beq.w	8002f42 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002cee:	4b5d      	ldr	r3, [pc, #372]	@ (8002e64 <HAL_RCC_OscConfig+0x6c4>)
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002cf6:	2b18      	cmp	r3, #24
 8002cf8:	f000 80ba 	beq.w	8002e70 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	f040 8095 	bne.w	8002e30 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d06:	4b57      	ldr	r3, [pc, #348]	@ (8002e64 <HAL_RCC_OscConfig+0x6c4>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a56      	ldr	r2, [pc, #344]	@ (8002e64 <HAL_RCC_OscConfig+0x6c4>)
 8002d0c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d12:	f7ff f98b 	bl	800202c <HAL_GetTick>
 8002d16:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d18:	e008      	b.n	8002d2c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d1a:	f7ff f987 	bl	800202c <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e10b      	b.n	8002f44 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d2c:	4b4d      	ldr	r3, [pc, #308]	@ (8002e64 <HAL_RCC_OscConfig+0x6c4>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1f0      	bne.n	8002d1a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d38:	4b4a      	ldr	r3, [pc, #296]	@ (8002e64 <HAL_RCC_OscConfig+0x6c4>)
 8002d3a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d3c:	4b4a      	ldr	r3, [pc, #296]	@ (8002e68 <HAL_RCC_OscConfig+0x6c8>)
 8002d3e:	4013      	ands	r3, r2
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002d48:	0112      	lsls	r2, r2, #4
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	4945      	ldr	r1, [pc, #276]	@ (8002e64 <HAL_RCC_OscConfig+0x6c4>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	628b      	str	r3, [r1, #40]	@ 0x28
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d56:	3b01      	subs	r3, #1
 8002d58:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d60:	3b01      	subs	r3, #1
 8002d62:	025b      	lsls	r3, r3, #9
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	431a      	orrs	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	041b      	lsls	r3, r3, #16
 8002d70:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002d74:	431a      	orrs	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	061b      	lsls	r3, r3, #24
 8002d7e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002d82:	4938      	ldr	r1, [pc, #224]	@ (8002e64 <HAL_RCC_OscConfig+0x6c4>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002d88:	4b36      	ldr	r3, [pc, #216]	@ (8002e64 <HAL_RCC_OscConfig+0x6c4>)
 8002d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d8c:	4a35      	ldr	r2, [pc, #212]	@ (8002e64 <HAL_RCC_OscConfig+0x6c4>)
 8002d8e:	f023 0301 	bic.w	r3, r3, #1
 8002d92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d94:	4b33      	ldr	r3, [pc, #204]	@ (8002e64 <HAL_RCC_OscConfig+0x6c4>)
 8002d96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d98:	4b34      	ldr	r3, [pc, #208]	@ (8002e6c <HAL_RCC_OscConfig+0x6cc>)
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002da0:	00d2      	lsls	r2, r2, #3
 8002da2:	4930      	ldr	r1, [pc, #192]	@ (8002e64 <HAL_RCC_OscConfig+0x6c4>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002da8:	4b2e      	ldr	r3, [pc, #184]	@ (8002e64 <HAL_RCC_OscConfig+0x6c4>)
 8002daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dac:	f023 020c 	bic.w	r2, r3, #12
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db4:	492b      	ldr	r1, [pc, #172]	@ (8002e64 <HAL_RCC_OscConfig+0x6c4>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002dba:	4b2a      	ldr	r3, [pc, #168]	@ (8002e64 <HAL_RCC_OscConfig+0x6c4>)
 8002dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dbe:	f023 0202 	bic.w	r2, r3, #2
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dc6:	4927      	ldr	r1, [pc, #156]	@ (8002e64 <HAL_RCC_OscConfig+0x6c4>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002dcc:	4b25      	ldr	r3, [pc, #148]	@ (8002e64 <HAL_RCC_OscConfig+0x6c4>)
 8002dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd0:	4a24      	ldr	r2, [pc, #144]	@ (8002e64 <HAL_RCC_OscConfig+0x6c4>)
 8002dd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dd8:	4b22      	ldr	r3, [pc, #136]	@ (8002e64 <HAL_RCC_OscConfig+0x6c4>)
 8002dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ddc:	4a21      	ldr	r2, [pc, #132]	@ (8002e64 <HAL_RCC_OscConfig+0x6c4>)
 8002dde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002de2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002de4:	4b1f      	ldr	r3, [pc, #124]	@ (8002e64 <HAL_RCC_OscConfig+0x6c4>)
 8002de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de8:	4a1e      	ldr	r2, [pc, #120]	@ (8002e64 <HAL_RCC_OscConfig+0x6c4>)
 8002dea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002df0:	4b1c      	ldr	r3, [pc, #112]	@ (8002e64 <HAL_RCC_OscConfig+0x6c4>)
 8002df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002df4:	4a1b      	ldr	r2, [pc, #108]	@ (8002e64 <HAL_RCC_OscConfig+0x6c4>)
 8002df6:	f043 0301 	orr.w	r3, r3, #1
 8002dfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dfc:	4b19      	ldr	r3, [pc, #100]	@ (8002e64 <HAL_RCC_OscConfig+0x6c4>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a18      	ldr	r2, [pc, #96]	@ (8002e64 <HAL_RCC_OscConfig+0x6c4>)
 8002e02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e08:	f7ff f910 	bl	800202c <HAL_GetTick>
 8002e0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e10:	f7ff f90c 	bl	800202c <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e090      	b.n	8002f44 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e22:	4b10      	ldr	r3, [pc, #64]	@ (8002e64 <HAL_RCC_OscConfig+0x6c4>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d0f0      	beq.n	8002e10 <HAL_RCC_OscConfig+0x670>
 8002e2e:	e088      	b.n	8002f42 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e30:	4b0c      	ldr	r3, [pc, #48]	@ (8002e64 <HAL_RCC_OscConfig+0x6c4>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a0b      	ldr	r2, [pc, #44]	@ (8002e64 <HAL_RCC_OscConfig+0x6c4>)
 8002e36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3c:	f7ff f8f6 	bl	800202c <HAL_GetTick>
 8002e40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e44:	f7ff f8f2 	bl	800202c <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e076      	b.n	8002f44 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e56:	4b03      	ldr	r3, [pc, #12]	@ (8002e64 <HAL_RCC_OscConfig+0x6c4>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1f0      	bne.n	8002e44 <HAL_RCC_OscConfig+0x6a4>
 8002e62:	e06e      	b.n	8002f42 <HAL_RCC_OscConfig+0x7a2>
 8002e64:	58024400 	.word	0x58024400
 8002e68:	fffffc0c 	.word	0xfffffc0c
 8002e6c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002e70:	4b36      	ldr	r3, [pc, #216]	@ (8002f4c <HAL_RCC_OscConfig+0x7ac>)
 8002e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e74:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e76:	4b35      	ldr	r3, [pc, #212]	@ (8002f4c <HAL_RCC_OscConfig+0x7ac>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d031      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	f003 0203 	and.w	r2, r3, #3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d12a      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	091b      	lsrs	r3, r3, #4
 8002e96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d122      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d11a      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	0a5b      	lsrs	r3, r3, #9
 8002eb6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ebe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d111      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	0c1b      	lsrs	r3, r3, #16
 8002ec8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ed0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d108      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	0e1b      	lsrs	r3, r3, #24
 8002eda:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ee2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d001      	beq.n	8002eec <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e02b      	b.n	8002f44 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002eec:	4b17      	ldr	r3, [pc, #92]	@ (8002f4c <HAL_RCC_OscConfig+0x7ac>)
 8002eee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ef0:	08db      	lsrs	r3, r3, #3
 8002ef2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ef6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d01f      	beq.n	8002f42 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002f02:	4b12      	ldr	r3, [pc, #72]	@ (8002f4c <HAL_RCC_OscConfig+0x7ac>)
 8002f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f06:	4a11      	ldr	r2, [pc, #68]	@ (8002f4c <HAL_RCC_OscConfig+0x7ac>)
 8002f08:	f023 0301 	bic.w	r3, r3, #1
 8002f0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f0e:	f7ff f88d 	bl	800202c <HAL_GetTick>
 8002f12:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002f14:	bf00      	nop
 8002f16:	f7ff f889 	bl	800202c <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d0f9      	beq.n	8002f16 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f22:	4b0a      	ldr	r3, [pc, #40]	@ (8002f4c <HAL_RCC_OscConfig+0x7ac>)
 8002f24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f26:	4b0a      	ldr	r3, [pc, #40]	@ (8002f50 <HAL_RCC_OscConfig+0x7b0>)
 8002f28:	4013      	ands	r3, r2
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002f2e:	00d2      	lsls	r2, r2, #3
 8002f30:	4906      	ldr	r1, [pc, #24]	@ (8002f4c <HAL_RCC_OscConfig+0x7ac>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002f36:	4b05      	ldr	r3, [pc, #20]	@ (8002f4c <HAL_RCC_OscConfig+0x7ac>)
 8002f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f3a:	4a04      	ldr	r2, [pc, #16]	@ (8002f4c <HAL_RCC_OscConfig+0x7ac>)
 8002f3c:	f043 0301 	orr.w	r3, r3, #1
 8002f40:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3730      	adds	r7, #48	@ 0x30
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	58024400 	.word	0x58024400
 8002f50:	ffff0007 	.word	0xffff0007

08002f54 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e19c      	b.n	80032a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f68:	4b8a      	ldr	r3, [pc, #552]	@ (8003194 <HAL_RCC_ClockConfig+0x240>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 030f 	and.w	r3, r3, #15
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d910      	bls.n	8002f98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f76:	4b87      	ldr	r3, [pc, #540]	@ (8003194 <HAL_RCC_ClockConfig+0x240>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f023 020f 	bic.w	r2, r3, #15
 8002f7e:	4985      	ldr	r1, [pc, #532]	@ (8003194 <HAL_RCC_ClockConfig+0x240>)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f86:	4b83      	ldr	r3, [pc, #524]	@ (8003194 <HAL_RCC_ClockConfig+0x240>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d001      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e184      	b.n	80032a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d010      	beq.n	8002fc6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	691a      	ldr	r2, [r3, #16]
 8002fa8:	4b7b      	ldr	r3, [pc, #492]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d908      	bls.n	8002fc6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002fb4:	4b78      	ldr	r3, [pc, #480]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	4975      	ldr	r1, [pc, #468]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0308 	and.w	r3, r3, #8
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d010      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	695a      	ldr	r2, [r3, #20]
 8002fd6:	4b70      	ldr	r3, [pc, #448]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d908      	bls.n	8002ff4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002fe2:	4b6d      	ldr	r3, [pc, #436]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 8002fe4:	69db      	ldr	r3, [r3, #28]
 8002fe6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	496a      	ldr	r1, [pc, #424]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0310 	and.w	r3, r3, #16
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d010      	beq.n	8003022 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	699a      	ldr	r2, [r3, #24]
 8003004:	4b64      	ldr	r3, [pc, #400]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800300c:	429a      	cmp	r2, r3
 800300e:	d908      	bls.n	8003022 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003010:	4b61      	ldr	r3, [pc, #388]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	495e      	ldr	r1, [pc, #376]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 800301e:	4313      	orrs	r3, r2
 8003020:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0320 	and.w	r3, r3, #32
 800302a:	2b00      	cmp	r3, #0
 800302c:	d010      	beq.n	8003050 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69da      	ldr	r2, [r3, #28]
 8003032:	4b59      	ldr	r3, [pc, #356]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800303a:	429a      	cmp	r2, r3
 800303c:	d908      	bls.n	8003050 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800303e:	4b56      	ldr	r3, [pc, #344]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	4953      	ldr	r1, [pc, #332]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 800304c:	4313      	orrs	r3, r2
 800304e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d010      	beq.n	800307e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68da      	ldr	r2, [r3, #12]
 8003060:	4b4d      	ldr	r3, [pc, #308]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	f003 030f 	and.w	r3, r3, #15
 8003068:	429a      	cmp	r2, r3
 800306a:	d908      	bls.n	800307e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800306c:	4b4a      	ldr	r3, [pc, #296]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	f023 020f 	bic.w	r2, r3, #15
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	4947      	ldr	r1, [pc, #284]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 800307a:	4313      	orrs	r3, r2
 800307c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b00      	cmp	r3, #0
 8003088:	d055      	beq.n	8003136 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800308a:	4b43      	ldr	r3, [pc, #268]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	4940      	ldr	r1, [pc, #256]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003098:	4313      	orrs	r3, r2
 800309a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d107      	bne.n	80030b4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030a4:	4b3c      	ldr	r3, [pc, #240]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d121      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e0f6      	b.n	80032a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	2b03      	cmp	r3, #3
 80030ba:	d107      	bne.n	80030cc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030bc:	4b36      	ldr	r3, [pc, #216]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d115      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0ea      	b.n	80032a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d107      	bne.n	80030e4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030d4:	4b30      	ldr	r3, [pc, #192]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d109      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e0de      	b.n	80032a2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030e4:	4b2c      	ldr	r3, [pc, #176]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0304 	and.w	r3, r3, #4
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e0d6      	b.n	80032a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030f4:	4b28      	ldr	r3, [pc, #160]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	f023 0207 	bic.w	r2, r3, #7
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	4925      	ldr	r1, [pc, #148]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003102:	4313      	orrs	r3, r2
 8003104:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003106:	f7fe ff91 	bl	800202c <HAL_GetTick>
 800310a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800310c:	e00a      	b.n	8003124 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800310e:	f7fe ff8d 	bl	800202c <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	f241 3288 	movw	r2, #5000	@ 0x1388
 800311c:	4293      	cmp	r3, r2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e0be      	b.n	80032a2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003124:	4b1c      	ldr	r3, [pc, #112]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	429a      	cmp	r2, r3
 8003134:	d1eb      	bne.n	800310e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d010      	beq.n	8003164 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	4b14      	ldr	r3, [pc, #80]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	429a      	cmp	r2, r3
 8003150:	d208      	bcs.n	8003164 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003152:	4b11      	ldr	r3, [pc, #68]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	f023 020f 	bic.w	r2, r3, #15
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	490e      	ldr	r1, [pc, #56]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003160:	4313      	orrs	r3, r2
 8003162:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003164:	4b0b      	ldr	r3, [pc, #44]	@ (8003194 <HAL_RCC_ClockConfig+0x240>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 030f 	and.w	r3, r3, #15
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d214      	bcs.n	800319c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003172:	4b08      	ldr	r3, [pc, #32]	@ (8003194 <HAL_RCC_ClockConfig+0x240>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f023 020f 	bic.w	r2, r3, #15
 800317a:	4906      	ldr	r1, [pc, #24]	@ (8003194 <HAL_RCC_ClockConfig+0x240>)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	4313      	orrs	r3, r2
 8003180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003182:	4b04      	ldr	r3, [pc, #16]	@ (8003194 <HAL_RCC_ClockConfig+0x240>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d005      	beq.n	800319c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e086      	b.n	80032a2 <HAL_RCC_ClockConfig+0x34e>
 8003194:	52002000 	.word	0x52002000
 8003198:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d010      	beq.n	80031ca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	691a      	ldr	r2, [r3, #16]
 80031ac:	4b3f      	ldr	r3, [pc, #252]	@ (80032ac <HAL_RCC_ClockConfig+0x358>)
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d208      	bcs.n	80031ca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80031b8:	4b3c      	ldr	r3, [pc, #240]	@ (80032ac <HAL_RCC_ClockConfig+0x358>)
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	4939      	ldr	r1, [pc, #228]	@ (80032ac <HAL_RCC_ClockConfig+0x358>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0308 	and.w	r3, r3, #8
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d010      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	695a      	ldr	r2, [r3, #20]
 80031da:	4b34      	ldr	r3, [pc, #208]	@ (80032ac <HAL_RCC_ClockConfig+0x358>)
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d208      	bcs.n	80031f8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031e6:	4b31      	ldr	r3, [pc, #196]	@ (80032ac <HAL_RCC_ClockConfig+0x358>)
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	492e      	ldr	r1, [pc, #184]	@ (80032ac <HAL_RCC_ClockConfig+0x358>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0310 	and.w	r3, r3, #16
 8003200:	2b00      	cmp	r3, #0
 8003202:	d010      	beq.n	8003226 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	699a      	ldr	r2, [r3, #24]
 8003208:	4b28      	ldr	r3, [pc, #160]	@ (80032ac <HAL_RCC_ClockConfig+0x358>)
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003210:	429a      	cmp	r2, r3
 8003212:	d208      	bcs.n	8003226 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003214:	4b25      	ldr	r3, [pc, #148]	@ (80032ac <HAL_RCC_ClockConfig+0x358>)
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	4922      	ldr	r1, [pc, #136]	@ (80032ac <HAL_RCC_ClockConfig+0x358>)
 8003222:	4313      	orrs	r3, r2
 8003224:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0320 	and.w	r3, r3, #32
 800322e:	2b00      	cmp	r3, #0
 8003230:	d010      	beq.n	8003254 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	69da      	ldr	r2, [r3, #28]
 8003236:	4b1d      	ldr	r3, [pc, #116]	@ (80032ac <HAL_RCC_ClockConfig+0x358>)
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800323e:	429a      	cmp	r2, r3
 8003240:	d208      	bcs.n	8003254 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003242:	4b1a      	ldr	r3, [pc, #104]	@ (80032ac <HAL_RCC_ClockConfig+0x358>)
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	4917      	ldr	r1, [pc, #92]	@ (80032ac <HAL_RCC_ClockConfig+0x358>)
 8003250:	4313      	orrs	r3, r2
 8003252:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003254:	f000 f834 	bl	80032c0 <HAL_RCC_GetSysClockFreq>
 8003258:	4602      	mov	r2, r0
 800325a:	4b14      	ldr	r3, [pc, #80]	@ (80032ac <HAL_RCC_ClockConfig+0x358>)
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	0a1b      	lsrs	r3, r3, #8
 8003260:	f003 030f 	and.w	r3, r3, #15
 8003264:	4912      	ldr	r1, [pc, #72]	@ (80032b0 <HAL_RCC_ClockConfig+0x35c>)
 8003266:	5ccb      	ldrb	r3, [r1, r3]
 8003268:	f003 031f 	and.w	r3, r3, #31
 800326c:	fa22 f303 	lsr.w	r3, r2, r3
 8003270:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003272:	4b0e      	ldr	r3, [pc, #56]	@ (80032ac <HAL_RCC_ClockConfig+0x358>)
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	4a0d      	ldr	r2, [pc, #52]	@ (80032b0 <HAL_RCC_ClockConfig+0x35c>)
 800327c:	5cd3      	ldrb	r3, [r2, r3]
 800327e:	f003 031f 	and.w	r3, r3, #31
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	fa22 f303 	lsr.w	r3, r2, r3
 8003288:	4a0a      	ldr	r2, [pc, #40]	@ (80032b4 <HAL_RCC_ClockConfig+0x360>)
 800328a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800328c:	4a0a      	ldr	r2, [pc, #40]	@ (80032b8 <HAL_RCC_ClockConfig+0x364>)
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003292:	4b0a      	ldr	r3, [pc, #40]	@ (80032bc <HAL_RCC_ClockConfig+0x368>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f7fe fe7e 	bl	8001f98 <HAL_InitTick>
 800329c:	4603      	mov	r3, r0
 800329e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3718      	adds	r7, #24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	58024400 	.word	0x58024400
 80032b0:	0800b85c 	.word	0x0800b85c
 80032b4:	24000008 	.word	0x24000008
 80032b8:	24000004 	.word	0x24000004
 80032bc:	2400000c 	.word	0x2400000c

080032c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b089      	sub	sp, #36	@ 0x24
 80032c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032c6:	4bb3      	ldr	r3, [pc, #716]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80032ce:	2b18      	cmp	r3, #24
 80032d0:	f200 8155 	bhi.w	800357e <HAL_RCC_GetSysClockFreq+0x2be>
 80032d4:	a201      	add	r2, pc, #4	@ (adr r2, 80032dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80032d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032da:	bf00      	nop
 80032dc:	08003341 	.word	0x08003341
 80032e0:	0800357f 	.word	0x0800357f
 80032e4:	0800357f 	.word	0x0800357f
 80032e8:	0800357f 	.word	0x0800357f
 80032ec:	0800357f 	.word	0x0800357f
 80032f0:	0800357f 	.word	0x0800357f
 80032f4:	0800357f 	.word	0x0800357f
 80032f8:	0800357f 	.word	0x0800357f
 80032fc:	08003367 	.word	0x08003367
 8003300:	0800357f 	.word	0x0800357f
 8003304:	0800357f 	.word	0x0800357f
 8003308:	0800357f 	.word	0x0800357f
 800330c:	0800357f 	.word	0x0800357f
 8003310:	0800357f 	.word	0x0800357f
 8003314:	0800357f 	.word	0x0800357f
 8003318:	0800357f 	.word	0x0800357f
 800331c:	0800336d 	.word	0x0800336d
 8003320:	0800357f 	.word	0x0800357f
 8003324:	0800357f 	.word	0x0800357f
 8003328:	0800357f 	.word	0x0800357f
 800332c:	0800357f 	.word	0x0800357f
 8003330:	0800357f 	.word	0x0800357f
 8003334:	0800357f 	.word	0x0800357f
 8003338:	0800357f 	.word	0x0800357f
 800333c:	08003373 	.word	0x08003373
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003340:	4b94      	ldr	r3, [pc, #592]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0320 	and.w	r3, r3, #32
 8003348:	2b00      	cmp	r3, #0
 800334a:	d009      	beq.n	8003360 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800334c:	4b91      	ldr	r3, [pc, #580]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	08db      	lsrs	r3, r3, #3
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	4a90      	ldr	r2, [pc, #576]	@ (8003598 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003358:	fa22 f303 	lsr.w	r3, r2, r3
 800335c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800335e:	e111      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003360:	4b8d      	ldr	r3, [pc, #564]	@ (8003598 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003362:	61bb      	str	r3, [r7, #24]
      break;
 8003364:	e10e      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003366:	4b8d      	ldr	r3, [pc, #564]	@ (800359c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003368:	61bb      	str	r3, [r7, #24]
      break;
 800336a:	e10b      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800336c:	4b8c      	ldr	r3, [pc, #560]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800336e:	61bb      	str	r3, [r7, #24]
      break;
 8003370:	e108      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003372:	4b88      	ldr	r3, [pc, #544]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003376:	f003 0303 	and.w	r3, r3, #3
 800337a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800337c:	4b85      	ldr	r3, [pc, #532]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800337e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003380:	091b      	lsrs	r3, r3, #4
 8003382:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003386:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003388:	4b82      	ldr	r3, [pc, #520]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800338a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003392:	4b80      	ldr	r3, [pc, #512]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003396:	08db      	lsrs	r3, r3, #3
 8003398:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	fb02 f303 	mul.w	r3, r2, r3
 80033a2:	ee07 3a90 	vmov	s15, r3
 80033a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033aa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 80e1 	beq.w	8003578 <HAL_RCC_GetSysClockFreq+0x2b8>
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	f000 8083 	beq.w	80034c4 <HAL_RCC_GetSysClockFreq+0x204>
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	f200 80a1 	bhi.w	8003508 <HAL_RCC_GetSysClockFreq+0x248>
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d003      	beq.n	80033d4 <HAL_RCC_GetSysClockFreq+0x114>
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d056      	beq.n	8003480 <HAL_RCC_GetSysClockFreq+0x1c0>
 80033d2:	e099      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033d4:	4b6f      	ldr	r3, [pc, #444]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0320 	and.w	r3, r3, #32
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d02d      	beq.n	800343c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80033e0:	4b6c      	ldr	r3, [pc, #432]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	08db      	lsrs	r3, r3, #3
 80033e6:	f003 0303 	and.w	r3, r3, #3
 80033ea:	4a6b      	ldr	r2, [pc, #428]	@ (8003598 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033ec:	fa22 f303 	lsr.w	r3, r2, r3
 80033f0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	ee07 3a90 	vmov	s15, r3
 80033f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	ee07 3a90 	vmov	s15, r3
 8003402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800340a:	4b62      	ldr	r3, [pc, #392]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800340e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003412:	ee07 3a90 	vmov	s15, r3
 8003416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800341a:	ed97 6a02 	vldr	s12, [r7, #8]
 800341e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80035a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800342a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800342e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003436:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800343a:	e087      	b.n	800354c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	ee07 3a90 	vmov	s15, r3
 8003442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003446:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80035a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800344a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800344e:	4b51      	ldr	r3, [pc, #324]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003456:	ee07 3a90 	vmov	s15, r3
 800345a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800345e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003462:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80035a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800346a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800346e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800347a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800347e:	e065      	b.n	800354c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	ee07 3a90 	vmov	s15, r3
 8003486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800348a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80035ac <HAL_RCC_GetSysClockFreq+0x2ec>
 800348e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003492:	4b40      	ldr	r3, [pc, #256]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800349a:	ee07 3a90 	vmov	s15, r3
 800349e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80034a6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80035a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80034c2:	e043      	b.n	800354c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	ee07 3a90 	vmov	s15, r3
 80034ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ce:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80035b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80034d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034d6:	4b2f      	ldr	r3, [pc, #188]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034de:	ee07 3a90 	vmov	s15, r3
 80034e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80034ea:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80035a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003502:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003506:	e021      	b.n	800354c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	ee07 3a90 	vmov	s15, r3
 800350e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003512:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80035ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8003516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800351a:	4b1e      	ldr	r3, [pc, #120]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800351c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003522:	ee07 3a90 	vmov	s15, r3
 8003526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800352a:	ed97 6a02 	vldr	s12, [r7, #8]
 800352e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80035a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800353a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800353e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003546:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800354a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800354c:	4b11      	ldr	r3, [pc, #68]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800354e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003550:	0a5b      	lsrs	r3, r3, #9
 8003552:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003556:	3301      	adds	r3, #1
 8003558:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	ee07 3a90 	vmov	s15, r3
 8003560:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003564:	edd7 6a07 	vldr	s13, [r7, #28]
 8003568:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800356c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003570:	ee17 3a90 	vmov	r3, s15
 8003574:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003576:	e005      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	61bb      	str	r3, [r7, #24]
      break;
 800357c:	e002      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800357e:	4b07      	ldr	r3, [pc, #28]	@ (800359c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003580:	61bb      	str	r3, [r7, #24]
      break;
 8003582:	bf00      	nop
  }

  return sysclockfreq;
 8003584:	69bb      	ldr	r3, [r7, #24]
}
 8003586:	4618      	mov	r0, r3
 8003588:	3724      	adds	r7, #36	@ 0x24
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	58024400 	.word	0x58024400
 8003598:	03d09000 	.word	0x03d09000
 800359c:	003d0900 	.word	0x003d0900
 80035a0:	017d7840 	.word	0x017d7840
 80035a4:	46000000 	.word	0x46000000
 80035a8:	4c742400 	.word	0x4c742400
 80035ac:	4a742400 	.word	0x4a742400
 80035b0:	4bbebc20 	.word	0x4bbebc20

080035b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80035ba:	f7ff fe81 	bl	80032c0 <HAL_RCC_GetSysClockFreq>
 80035be:	4602      	mov	r2, r0
 80035c0:	4b10      	ldr	r3, [pc, #64]	@ (8003604 <HAL_RCC_GetHCLKFreq+0x50>)
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	0a1b      	lsrs	r3, r3, #8
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	490f      	ldr	r1, [pc, #60]	@ (8003608 <HAL_RCC_GetHCLKFreq+0x54>)
 80035cc:	5ccb      	ldrb	r3, [r1, r3]
 80035ce:	f003 031f 	and.w	r3, r3, #31
 80035d2:	fa22 f303 	lsr.w	r3, r2, r3
 80035d6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80035d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003604 <HAL_RCC_GetHCLKFreq+0x50>)
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	f003 030f 	and.w	r3, r3, #15
 80035e0:	4a09      	ldr	r2, [pc, #36]	@ (8003608 <HAL_RCC_GetHCLKFreq+0x54>)
 80035e2:	5cd3      	ldrb	r3, [r2, r3]
 80035e4:	f003 031f 	and.w	r3, r3, #31
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	fa22 f303 	lsr.w	r3, r2, r3
 80035ee:	4a07      	ldr	r2, [pc, #28]	@ (800360c <HAL_RCC_GetHCLKFreq+0x58>)
 80035f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80035f2:	4a07      	ldr	r2, [pc, #28]	@ (8003610 <HAL_RCC_GetHCLKFreq+0x5c>)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80035f8:	4b04      	ldr	r3, [pc, #16]	@ (800360c <HAL_RCC_GetHCLKFreq+0x58>)
 80035fa:	681b      	ldr	r3, [r3, #0]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	58024400 	.word	0x58024400
 8003608:	0800b85c 	.word	0x0800b85c
 800360c:	24000008 	.word	0x24000008
 8003610:	24000004 	.word	0x24000004

08003614 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003618:	f7ff ffcc 	bl	80035b4 <HAL_RCC_GetHCLKFreq>
 800361c:	4602      	mov	r2, r0
 800361e:	4b06      	ldr	r3, [pc, #24]	@ (8003638 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	091b      	lsrs	r3, r3, #4
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	4904      	ldr	r1, [pc, #16]	@ (800363c <HAL_RCC_GetPCLK1Freq+0x28>)
 800362a:	5ccb      	ldrb	r3, [r1, r3]
 800362c:	f003 031f 	and.w	r3, r3, #31
 8003630:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003634:	4618      	mov	r0, r3
 8003636:	bd80      	pop	{r7, pc}
 8003638:	58024400 	.word	0x58024400
 800363c:	0800b85c 	.word	0x0800b85c

08003640 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003644:	f7ff ffb6 	bl	80035b4 <HAL_RCC_GetHCLKFreq>
 8003648:	4602      	mov	r2, r0
 800364a:	4b06      	ldr	r3, [pc, #24]	@ (8003664 <HAL_RCC_GetPCLK2Freq+0x24>)
 800364c:	69db      	ldr	r3, [r3, #28]
 800364e:	0a1b      	lsrs	r3, r3, #8
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	4904      	ldr	r1, [pc, #16]	@ (8003668 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003656:	5ccb      	ldrb	r3, [r1, r3]
 8003658:	f003 031f 	and.w	r3, r3, #31
 800365c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003660:	4618      	mov	r0, r3
 8003662:	bd80      	pop	{r7, pc}
 8003664:	58024400 	.word	0x58024400
 8003668:	0800b85c 	.word	0x0800b85c

0800366c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800366c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003670:	b0c6      	sub	sp, #280	@ 0x118
 8003672:	af00      	add	r7, sp, #0
 8003674:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003678:	2300      	movs	r3, #0
 800367a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800367e:	2300      	movs	r3, #0
 8003680:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003690:	2500      	movs	r5, #0
 8003692:	ea54 0305 	orrs.w	r3, r4, r5
 8003696:	d049      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800369c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800369e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80036a2:	d02f      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80036a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80036a8:	d828      	bhi.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80036aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80036ae:	d01a      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80036b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80036b4:	d822      	bhi.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d003      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80036ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036be:	d007      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80036c0:	e01c      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036c2:	4bab      	ldr	r3, [pc, #684]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c6:	4aaa      	ldr	r2, [pc, #680]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80036ce:	e01a      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036d4:	3308      	adds	r3, #8
 80036d6:	2102      	movs	r1, #2
 80036d8:	4618      	mov	r0, r3
 80036da:	f001 fc25 	bl	8004f28 <RCCEx_PLL2_Config>
 80036de:	4603      	mov	r3, r0
 80036e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80036e4:	e00f      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036ea:	3328      	adds	r3, #40	@ 0x28
 80036ec:	2102      	movs	r1, #2
 80036ee:	4618      	mov	r0, r3
 80036f0:	f001 fccc 	bl	800508c <RCCEx_PLL3_Config>
 80036f4:	4603      	mov	r3, r0
 80036f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80036fa:	e004      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003702:	e000      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003704:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003706:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10a      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800370e:	4b98      	ldr	r3, [pc, #608]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003710:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003712:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003716:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800371a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800371c:	4a94      	ldr	r2, [pc, #592]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800371e:	430b      	orrs	r3, r1
 8003720:	6513      	str	r3, [r2, #80]	@ 0x50
 8003722:	e003      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003724:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003728:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800372c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003734:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003738:	f04f 0900 	mov.w	r9, #0
 800373c:	ea58 0309 	orrs.w	r3, r8, r9
 8003740:	d047      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003742:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003748:	2b04      	cmp	r3, #4
 800374a:	d82a      	bhi.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800374c:	a201      	add	r2, pc, #4	@ (adr r2, 8003754 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800374e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003752:	bf00      	nop
 8003754:	08003769 	.word	0x08003769
 8003758:	08003777 	.word	0x08003777
 800375c:	0800378d 	.word	0x0800378d
 8003760:	080037ab 	.word	0x080037ab
 8003764:	080037ab 	.word	0x080037ab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003768:	4b81      	ldr	r3, [pc, #516]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800376a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800376c:	4a80      	ldr	r2, [pc, #512]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800376e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003772:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003774:	e01a      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003776:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800377a:	3308      	adds	r3, #8
 800377c:	2100      	movs	r1, #0
 800377e:	4618      	mov	r0, r3
 8003780:	f001 fbd2 	bl	8004f28 <RCCEx_PLL2_Config>
 8003784:	4603      	mov	r3, r0
 8003786:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800378a:	e00f      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800378c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003790:	3328      	adds	r3, #40	@ 0x28
 8003792:	2100      	movs	r1, #0
 8003794:	4618      	mov	r0, r3
 8003796:	f001 fc79 	bl	800508c <RCCEx_PLL3_Config>
 800379a:	4603      	mov	r3, r0
 800379c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037a0:	e004      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80037a8:	e000      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80037aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10a      	bne.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037b4:	4b6e      	ldr	r3, [pc, #440]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80037b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037b8:	f023 0107 	bic.w	r1, r3, #7
 80037bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037c2:	4a6b      	ldr	r2, [pc, #428]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80037c4:	430b      	orrs	r3, r1
 80037c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80037c8:	e003      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037ce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80037d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037da:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80037de:	f04f 0b00 	mov.w	fp, #0
 80037e2:	ea5a 030b 	orrs.w	r3, sl, fp
 80037e6:	d05b      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80037e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80037f0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80037f4:	d03b      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x202>
 80037f6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80037fa:	d834      	bhi.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80037fc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003800:	d037      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003802:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003806:	d82e      	bhi.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003808:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800380c:	d033      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800380e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003812:	d828      	bhi.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003814:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003818:	d01a      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800381a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800381e:	d822      	bhi.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003820:	2b00      	cmp	r3, #0
 8003822:	d003      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003824:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003828:	d007      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800382a:	e01c      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800382c:	4b50      	ldr	r3, [pc, #320]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800382e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003830:	4a4f      	ldr	r2, [pc, #316]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003832:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003836:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003838:	e01e      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800383a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800383e:	3308      	adds	r3, #8
 8003840:	2100      	movs	r1, #0
 8003842:	4618      	mov	r0, r3
 8003844:	f001 fb70 	bl	8004f28 <RCCEx_PLL2_Config>
 8003848:	4603      	mov	r3, r0
 800384a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800384e:	e013      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003850:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003854:	3328      	adds	r3, #40	@ 0x28
 8003856:	2100      	movs	r1, #0
 8003858:	4618      	mov	r0, r3
 800385a:	f001 fc17 	bl	800508c <RCCEx_PLL3_Config>
 800385e:	4603      	mov	r3, r0
 8003860:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003864:	e008      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800386c:	e004      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800386e:	bf00      	nop
 8003870:	e002      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003872:	bf00      	nop
 8003874:	e000      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003876:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003878:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10b      	bne.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003880:	4b3b      	ldr	r3, [pc, #236]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003884:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003888:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800388c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003890:	4a37      	ldr	r2, [pc, #220]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003892:	430b      	orrs	r3, r1
 8003894:	6593      	str	r3, [r2, #88]	@ 0x58
 8003896:	e003      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003898:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800389c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80038a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80038ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80038b0:	2300      	movs	r3, #0
 80038b2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80038b6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80038ba:	460b      	mov	r3, r1
 80038bc:	4313      	orrs	r3, r2
 80038be:	d05d      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80038c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80038c8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80038cc:	d03b      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80038ce:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80038d2:	d834      	bhi.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80038d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80038d8:	d037      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80038da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80038de:	d82e      	bhi.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80038e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80038e4:	d033      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80038e6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80038ea:	d828      	bhi.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80038ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80038f0:	d01a      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80038f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80038f6:	d822      	bhi.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d003      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80038fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003900:	d007      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003902:	e01c      	b.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003904:	4b1a      	ldr	r3, [pc, #104]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003908:	4a19      	ldr	r2, [pc, #100]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800390a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800390e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003910:	e01e      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003912:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003916:	3308      	adds	r3, #8
 8003918:	2100      	movs	r1, #0
 800391a:	4618      	mov	r0, r3
 800391c:	f001 fb04 	bl	8004f28 <RCCEx_PLL2_Config>
 8003920:	4603      	mov	r3, r0
 8003922:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003926:	e013      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003928:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800392c:	3328      	adds	r3, #40	@ 0x28
 800392e:	2100      	movs	r1, #0
 8003930:	4618      	mov	r0, r3
 8003932:	f001 fbab 	bl	800508c <RCCEx_PLL3_Config>
 8003936:	4603      	mov	r3, r0
 8003938:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800393c:	e008      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003944:	e004      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003946:	bf00      	nop
 8003948:	e002      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800394a:	bf00      	nop
 800394c:	e000      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800394e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003950:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10d      	bne.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003958:	4b05      	ldr	r3, [pc, #20]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800395a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800395c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003964:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003968:	4a01      	ldr	r2, [pc, #4]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800396a:	430b      	orrs	r3, r1
 800396c:	6593      	str	r3, [r2, #88]	@ 0x58
 800396e:	e005      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003970:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003974:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003978:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800397c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003984:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003988:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800398c:	2300      	movs	r3, #0
 800398e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003992:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003996:	460b      	mov	r3, r1
 8003998:	4313      	orrs	r3, r2
 800399a:	d03a      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800399c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039a2:	2b30      	cmp	r3, #48	@ 0x30
 80039a4:	d01f      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80039a6:	2b30      	cmp	r3, #48	@ 0x30
 80039a8:	d819      	bhi.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x372>
 80039aa:	2b20      	cmp	r3, #32
 80039ac:	d00c      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80039ae:	2b20      	cmp	r3, #32
 80039b0:	d815      	bhi.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x372>
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d019      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80039b6:	2b10      	cmp	r3, #16
 80039b8:	d111      	bne.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039ba:	4baa      	ldr	r3, [pc, #680]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039be:	4aa9      	ldr	r2, [pc, #676]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80039c6:	e011      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039cc:	3308      	adds	r3, #8
 80039ce:	2102      	movs	r1, #2
 80039d0:	4618      	mov	r0, r3
 80039d2:	f001 faa9 	bl	8004f28 <RCCEx_PLL2_Config>
 80039d6:	4603      	mov	r3, r0
 80039d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80039dc:	e006      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80039e4:	e002      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80039e6:	bf00      	nop
 80039e8:	e000      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80039ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10a      	bne.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80039f4:	4b9b      	ldr	r3, [pc, #620]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039f8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80039fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a02:	4a98      	ldr	r2, [pc, #608]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a04:	430b      	orrs	r3, r1
 8003a06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a08:	e003      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a0e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003a1e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a22:	2300      	movs	r3, #0
 8003a24:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003a28:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	d051      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a3c:	d035      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8003a3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a42:	d82e      	bhi.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003a44:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003a48:	d031      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x442>
 8003a4a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003a4e:	d828      	bhi.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003a50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a54:	d01a      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003a56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a5a:	d822      	bhi.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d003      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003a60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a64:	d007      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8003a66:	e01c      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a68:	4b7e      	ldr	r3, [pc, #504]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a6c:	4a7d      	ldr	r2, [pc, #500]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a74:	e01c      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a7a:	3308      	adds	r3, #8
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f001 fa52 	bl	8004f28 <RCCEx_PLL2_Config>
 8003a84:	4603      	mov	r3, r0
 8003a86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a8a:	e011      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a90:	3328      	adds	r3, #40	@ 0x28
 8003a92:	2100      	movs	r1, #0
 8003a94:	4618      	mov	r0, r3
 8003a96:	f001 faf9 	bl	800508c <RCCEx_PLL3_Config>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003aa0:	e006      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003aa8:	e002      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003aaa:	bf00      	nop
 8003aac:	e000      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003aae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ab0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d10a      	bne.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003ab8:	4b6a      	ldr	r3, [pc, #424]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003aba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003abc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ac6:	4a67      	ldr	r2, [pc, #412]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ac8:	430b      	orrs	r3, r1
 8003aca:	6513      	str	r3, [r2, #80]	@ 0x50
 8003acc:	e003      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ace:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ad2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ade:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003ae2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003aec:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003af0:	460b      	mov	r3, r1
 8003af2:	4313      	orrs	r3, r2
 8003af4:	d053      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003afa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003afc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b00:	d033      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8003b02:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b06:	d82c      	bhi.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003b08:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b0c:	d02f      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x502>
 8003b0e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b12:	d826      	bhi.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003b14:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b18:	d02b      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003b1a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b1e:	d820      	bhi.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003b20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b24:	d012      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8003b26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b2a:	d81a      	bhi.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d022      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003b30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b34:	d115      	bne.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b3a:	3308      	adds	r3, #8
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f001 f9f2 	bl	8004f28 <RCCEx_PLL2_Config>
 8003b44:	4603      	mov	r3, r0
 8003b46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003b4a:	e015      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b50:	3328      	adds	r3, #40	@ 0x28
 8003b52:	2101      	movs	r1, #1
 8003b54:	4618      	mov	r0, r3
 8003b56:	f001 fa99 	bl	800508c <RCCEx_PLL3_Config>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003b60:	e00a      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003b68:	e006      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003b6a:	bf00      	nop
 8003b6c:	e004      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003b6e:	bf00      	nop
 8003b70:	e002      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003b72:	bf00      	nop
 8003b74:	e000      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003b76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10a      	bne.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003b80:	4b38      	ldr	r3, [pc, #224]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003b82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b84:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b8e:	4a35      	ldr	r2, [pc, #212]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003b90:	430b      	orrs	r3, r1
 8003b92:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b94:	e003      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b9a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003baa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003bae:	2300      	movs	r3, #0
 8003bb0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003bb4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003bb8:	460b      	mov	r3, r1
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	d058      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bc2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003bc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bca:	d033      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003bcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bd0:	d82c      	bhi.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bd6:	d02f      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bdc:	d826      	bhi.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003bde:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003be2:	d02b      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003be4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003be8:	d820      	bhi.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003bea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bee:	d012      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003bf0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bf4:	d81a      	bhi.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d022      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003bfa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bfe:	d115      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c04:	3308      	adds	r3, #8
 8003c06:	2101      	movs	r1, #1
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f001 f98d 	bl	8004f28 <RCCEx_PLL2_Config>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003c14:	e015      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c1a:	3328      	adds	r3, #40	@ 0x28
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f001 fa34 	bl	800508c <RCCEx_PLL3_Config>
 8003c24:	4603      	mov	r3, r0
 8003c26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003c2a:	e00a      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003c32:	e006      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003c34:	bf00      	nop
 8003c36:	e004      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003c38:	bf00      	nop
 8003c3a:	e002      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003c3c:	bf00      	nop
 8003c3e:	e000      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003c40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10e      	bne.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003c4a:	4b06      	ldr	r3, [pc, #24]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c4e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c56:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003c5a:	4a02      	ldr	r2, [pc, #8]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003c5c:	430b      	orrs	r3, r1
 8003c5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c60:	e006      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003c62:	bf00      	nop
 8003c64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c78:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003c7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c80:	2300      	movs	r3, #0
 8003c82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003c86:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	d037      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c9a:	d00e      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003c9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ca0:	d816      	bhi.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d018      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003ca6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003caa:	d111      	bne.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cac:	4bc4      	ldr	r3, [pc, #784]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb0:	4ac3      	ldr	r2, [pc, #780]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003cb8:	e00f      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cbe:	3308      	adds	r3, #8
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f001 f930 	bl	8004f28 <RCCEx_PLL2_Config>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003cce:	e004      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003cd6:	e000      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003cd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10a      	bne.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ce2:	4bb7      	ldr	r3, [pc, #732]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ce4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ce6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cf0:	4ab3      	ldr	r2, [pc, #716]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cf2:	430b      	orrs	r3, r1
 8003cf4:	6513      	str	r3, [r2, #80]	@ 0x50
 8003cf6:	e003      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cf8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003cfc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d08:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003d0c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d10:	2300      	movs	r3, #0
 8003d12:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003d16:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	d039      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d26:	2b03      	cmp	r3, #3
 8003d28:	d81c      	bhi.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8003d30 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d30:	08003d6d 	.word	0x08003d6d
 8003d34:	08003d41 	.word	0x08003d41
 8003d38:	08003d4f 	.word	0x08003d4f
 8003d3c:	08003d6d 	.word	0x08003d6d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d40:	4b9f      	ldr	r3, [pc, #636]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d44:	4a9e      	ldr	r2, [pc, #632]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003d4c:	e00f      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d52:	3308      	adds	r3, #8
 8003d54:	2102      	movs	r1, #2
 8003d56:	4618      	mov	r0, r3
 8003d58:	f001 f8e6 	bl	8004f28 <RCCEx_PLL2_Config>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003d62:	e004      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003d6a:	e000      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003d6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10a      	bne.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003d76:	4b92      	ldr	r3, [pc, #584]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d7a:	f023 0103 	bic.w	r1, r3, #3
 8003d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d84:	4a8e      	ldr	r2, [pc, #568]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d86:	430b      	orrs	r3, r1
 8003d88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d8a:	e003      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003da0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003da4:	2300      	movs	r3, #0
 8003da6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003daa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003dae:	460b      	mov	r3, r1
 8003db0:	4313      	orrs	r3, r2
 8003db2:	f000 8099 	beq.w	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003db6:	4b83      	ldr	r3, [pc, #524]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a82      	ldr	r2, [pc, #520]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003dbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dc0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dc2:	f7fe f933 	bl	800202c <HAL_GetTick>
 8003dc6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dca:	e00b      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dcc:	f7fe f92e 	bl	800202c <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b64      	cmp	r3, #100	@ 0x64
 8003dda:	d903      	bls.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003de2:	e005      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003de4:	4b77      	ldr	r3, [pc, #476]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0ed      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003df0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d173      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003df8:	4b71      	ldr	r3, [pc, #452]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003dfa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003e04:	4053      	eors	r3, r2
 8003e06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d015      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e0e:	4b6c      	ldr	r3, [pc, #432]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e16:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e1a:	4b69      	ldr	r3, [pc, #420]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e1e:	4a68      	ldr	r2, [pc, #416]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e24:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e26:	4b66      	ldr	r3, [pc, #408]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e2a:	4a65      	ldr	r2, [pc, #404]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e30:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003e32:	4a63      	ldr	r2, [pc, #396]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e38:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003e42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e46:	d118      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e48:	f7fe f8f0 	bl	800202c <HAL_GetTick>
 8003e4c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e50:	e00d      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e52:	f7fe f8eb 	bl	800202c <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003e5c:	1ad2      	subs	r2, r2, r3
 8003e5e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d903      	bls.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8003e6c:	e005      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e6e:	4b54      	ldr	r3, [pc, #336]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0eb      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003e7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d129      	bne.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003e8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e92:	d10e      	bne.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003e94:	4b4a      	ldr	r3, [pc, #296]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ea0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003ea4:	091a      	lsrs	r2, r3, #4
 8003ea6:	4b48      	ldr	r3, [pc, #288]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	4a45      	ldr	r2, [pc, #276]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003eac:	430b      	orrs	r3, r1
 8003eae:	6113      	str	r3, [r2, #16]
 8003eb0:	e005      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003eb2:	4b43      	ldr	r3, [pc, #268]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	4a42      	ldr	r2, [pc, #264]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003eb8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003ebc:	6113      	str	r3, [r2, #16]
 8003ebe:	4b40      	ldr	r3, [pc, #256]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ec0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ec6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003eca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ece:	4a3c      	ldr	r2, [pc, #240]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ed0:	430b      	orrs	r3, r1
 8003ed2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ed4:	e008      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ed6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003eda:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8003ede:	e003      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ee0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ee4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef0:	f002 0301 	and.w	r3, r2, #1
 8003ef4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ef8:	2300      	movs	r3, #0
 8003efa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003efe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003f02:	460b      	mov	r3, r1
 8003f04:	4313      	orrs	r3, r2
 8003f06:	f000 808f 	beq.w	8004028 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f10:	2b28      	cmp	r3, #40	@ 0x28
 8003f12:	d871      	bhi.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003f14:	a201      	add	r2, pc, #4	@ (adr r2, 8003f1c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f1a:	bf00      	nop
 8003f1c:	08004001 	.word	0x08004001
 8003f20:	08003ff9 	.word	0x08003ff9
 8003f24:	08003ff9 	.word	0x08003ff9
 8003f28:	08003ff9 	.word	0x08003ff9
 8003f2c:	08003ff9 	.word	0x08003ff9
 8003f30:	08003ff9 	.word	0x08003ff9
 8003f34:	08003ff9 	.word	0x08003ff9
 8003f38:	08003ff9 	.word	0x08003ff9
 8003f3c:	08003fcd 	.word	0x08003fcd
 8003f40:	08003ff9 	.word	0x08003ff9
 8003f44:	08003ff9 	.word	0x08003ff9
 8003f48:	08003ff9 	.word	0x08003ff9
 8003f4c:	08003ff9 	.word	0x08003ff9
 8003f50:	08003ff9 	.word	0x08003ff9
 8003f54:	08003ff9 	.word	0x08003ff9
 8003f58:	08003ff9 	.word	0x08003ff9
 8003f5c:	08003fe3 	.word	0x08003fe3
 8003f60:	08003ff9 	.word	0x08003ff9
 8003f64:	08003ff9 	.word	0x08003ff9
 8003f68:	08003ff9 	.word	0x08003ff9
 8003f6c:	08003ff9 	.word	0x08003ff9
 8003f70:	08003ff9 	.word	0x08003ff9
 8003f74:	08003ff9 	.word	0x08003ff9
 8003f78:	08003ff9 	.word	0x08003ff9
 8003f7c:	08004001 	.word	0x08004001
 8003f80:	08003ff9 	.word	0x08003ff9
 8003f84:	08003ff9 	.word	0x08003ff9
 8003f88:	08003ff9 	.word	0x08003ff9
 8003f8c:	08003ff9 	.word	0x08003ff9
 8003f90:	08003ff9 	.word	0x08003ff9
 8003f94:	08003ff9 	.word	0x08003ff9
 8003f98:	08003ff9 	.word	0x08003ff9
 8003f9c:	08004001 	.word	0x08004001
 8003fa0:	08003ff9 	.word	0x08003ff9
 8003fa4:	08003ff9 	.word	0x08003ff9
 8003fa8:	08003ff9 	.word	0x08003ff9
 8003fac:	08003ff9 	.word	0x08003ff9
 8003fb0:	08003ff9 	.word	0x08003ff9
 8003fb4:	08003ff9 	.word	0x08003ff9
 8003fb8:	08003ff9 	.word	0x08003ff9
 8003fbc:	08004001 	.word	0x08004001
 8003fc0:	58024400 	.word	0x58024400
 8003fc4:	58024800 	.word	0x58024800
 8003fc8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fd0:	3308      	adds	r3, #8
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f000 ffa7 	bl	8004f28 <RCCEx_PLL2_Config>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003fe0:	e00f      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fe6:	3328      	adds	r3, #40	@ 0x28
 8003fe8:	2101      	movs	r1, #1
 8003fea:	4618      	mov	r0, r3
 8003fec:	f001 f84e 	bl	800508c <RCCEx_PLL3_Config>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003ff6:	e004      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003ffe:	e000      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004000:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004002:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10a      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800400a:	4bbf      	ldr	r3, [pc, #764]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800400c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800400e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004012:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004016:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004018:	4abb      	ldr	r2, [pc, #748]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800401a:	430b      	orrs	r3, r1
 800401c:	6553      	str	r3, [r2, #84]	@ 0x54
 800401e:	e003      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004020:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004024:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004028:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800402c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004030:	f002 0302 	and.w	r3, r2, #2
 8004034:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004038:	2300      	movs	r3, #0
 800403a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800403e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004042:	460b      	mov	r3, r1
 8004044:	4313      	orrs	r3, r2
 8004046:	d041      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800404c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800404e:	2b05      	cmp	r3, #5
 8004050:	d824      	bhi.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8004052:	a201      	add	r2, pc, #4	@ (adr r2, 8004058 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8004054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004058:	080040a5 	.word	0x080040a5
 800405c:	08004071 	.word	0x08004071
 8004060:	08004087 	.word	0x08004087
 8004064:	080040a5 	.word	0x080040a5
 8004068:	080040a5 	.word	0x080040a5
 800406c:	080040a5 	.word	0x080040a5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004070:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004074:	3308      	adds	r3, #8
 8004076:	2101      	movs	r1, #1
 8004078:	4618      	mov	r0, r3
 800407a:	f000 ff55 	bl	8004f28 <RCCEx_PLL2_Config>
 800407e:	4603      	mov	r3, r0
 8004080:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004084:	e00f      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004086:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800408a:	3328      	adds	r3, #40	@ 0x28
 800408c:	2101      	movs	r1, #1
 800408e:	4618      	mov	r0, r3
 8004090:	f000 fffc 	bl	800508c <RCCEx_PLL3_Config>
 8004094:	4603      	mov	r3, r0
 8004096:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800409a:	e004      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80040a2:	e000      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80040a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10a      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80040ae:	4b96      	ldr	r3, [pc, #600]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80040b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040b2:	f023 0107 	bic.w	r1, r3, #7
 80040b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040bc:	4a92      	ldr	r2, [pc, #584]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80040be:	430b      	orrs	r3, r1
 80040c0:	6553      	str	r3, [r2, #84]	@ 0x54
 80040c2:	e003      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d4:	f002 0304 	and.w	r3, r2, #4
 80040d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80040dc:	2300      	movs	r3, #0
 80040de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80040e2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80040e6:	460b      	mov	r3, r1
 80040e8:	4313      	orrs	r3, r2
 80040ea:	d044      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80040ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040f4:	2b05      	cmp	r3, #5
 80040f6:	d825      	bhi.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80040f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004100 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80040fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040fe:	bf00      	nop
 8004100:	0800414d 	.word	0x0800414d
 8004104:	08004119 	.word	0x08004119
 8004108:	0800412f 	.word	0x0800412f
 800410c:	0800414d 	.word	0x0800414d
 8004110:	0800414d 	.word	0x0800414d
 8004114:	0800414d 	.word	0x0800414d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800411c:	3308      	adds	r3, #8
 800411e:	2101      	movs	r1, #1
 8004120:	4618      	mov	r0, r3
 8004122:	f000 ff01 	bl	8004f28 <RCCEx_PLL2_Config>
 8004126:	4603      	mov	r3, r0
 8004128:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800412c:	e00f      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800412e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004132:	3328      	adds	r3, #40	@ 0x28
 8004134:	2101      	movs	r1, #1
 8004136:	4618      	mov	r0, r3
 8004138:	f000 ffa8 	bl	800508c <RCCEx_PLL3_Config>
 800413c:	4603      	mov	r3, r0
 800413e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004142:	e004      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800414a:	e000      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800414c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800414e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10b      	bne.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004156:	4b6c      	ldr	r3, [pc, #432]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800415a:	f023 0107 	bic.w	r1, r3, #7
 800415e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004166:	4a68      	ldr	r2, [pc, #416]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004168:	430b      	orrs	r3, r1
 800416a:	6593      	str	r3, [r2, #88]	@ 0x58
 800416c:	e003      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800416e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004172:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004176:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800417a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417e:	f002 0320 	and.w	r3, r2, #32
 8004182:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004186:	2300      	movs	r3, #0
 8004188:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800418c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004190:	460b      	mov	r3, r1
 8004192:	4313      	orrs	r3, r2
 8004194:	d055      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004196:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800419a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800419e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041a2:	d033      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80041a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041a8:	d82c      	bhi.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80041aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041ae:	d02f      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80041b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041b4:	d826      	bhi.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80041b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80041ba:	d02b      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80041bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80041c0:	d820      	bhi.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80041c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041c6:	d012      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80041c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041cc:	d81a      	bhi.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d022      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80041d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041d6:	d115      	bne.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041dc:	3308      	adds	r3, #8
 80041de:	2100      	movs	r1, #0
 80041e0:	4618      	mov	r0, r3
 80041e2:	f000 fea1 	bl	8004f28 <RCCEx_PLL2_Config>
 80041e6:	4603      	mov	r3, r0
 80041e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80041ec:	e015      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041f2:	3328      	adds	r3, #40	@ 0x28
 80041f4:	2102      	movs	r1, #2
 80041f6:	4618      	mov	r0, r3
 80041f8:	f000 ff48 	bl	800508c <RCCEx_PLL3_Config>
 80041fc:	4603      	mov	r3, r0
 80041fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004202:	e00a      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800420a:	e006      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800420c:	bf00      	nop
 800420e:	e004      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004210:	bf00      	nop
 8004212:	e002      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004214:	bf00      	nop
 8004216:	e000      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004218:	bf00      	nop
    }

    if (ret == HAL_OK)
 800421a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10b      	bne.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004222:	4b39      	ldr	r3, [pc, #228]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004226:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800422a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800422e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004232:	4a35      	ldr	r2, [pc, #212]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004234:	430b      	orrs	r3, r1
 8004236:	6553      	str	r3, [r2, #84]	@ 0x54
 8004238:	e003      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800423a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800423e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004242:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800424e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004252:	2300      	movs	r3, #0
 8004254:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004258:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800425c:	460b      	mov	r3, r1
 800425e:	4313      	orrs	r3, r2
 8004260:	d058      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004262:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004266:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800426a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800426e:	d033      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8004270:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004274:	d82c      	bhi.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004276:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800427a:	d02f      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800427c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004280:	d826      	bhi.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004282:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004286:	d02b      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004288:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800428c:	d820      	bhi.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800428e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004292:	d012      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8004294:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004298:	d81a      	bhi.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800429a:	2b00      	cmp	r3, #0
 800429c:	d022      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800429e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042a2:	d115      	bne.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042a8:	3308      	adds	r3, #8
 80042aa:	2100      	movs	r1, #0
 80042ac:	4618      	mov	r0, r3
 80042ae:	f000 fe3b 	bl	8004f28 <RCCEx_PLL2_Config>
 80042b2:	4603      	mov	r3, r0
 80042b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80042b8:	e015      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042be:	3328      	adds	r3, #40	@ 0x28
 80042c0:	2102      	movs	r1, #2
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 fee2 	bl	800508c <RCCEx_PLL3_Config>
 80042c8:	4603      	mov	r3, r0
 80042ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80042ce:	e00a      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80042d6:	e006      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80042d8:	bf00      	nop
 80042da:	e004      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80042dc:	bf00      	nop
 80042de:	e002      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80042e0:	bf00      	nop
 80042e2:	e000      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80042e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10e      	bne.n	800430c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042ee:	4b06      	ldr	r3, [pc, #24]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80042f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042f2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80042f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042fe:	4a02      	ldr	r2, [pc, #8]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004300:	430b      	orrs	r3, r1
 8004302:	6593      	str	r3, [r2, #88]	@ 0x58
 8004304:	e006      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8004306:	bf00      	nop
 8004308:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800430c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004310:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004314:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004320:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004324:	2300      	movs	r3, #0
 8004326:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800432a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800432e:	460b      	mov	r3, r1
 8004330:	4313      	orrs	r3, r2
 8004332:	d055      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004334:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004338:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800433c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004340:	d033      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8004342:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004346:	d82c      	bhi.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004348:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800434c:	d02f      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800434e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004352:	d826      	bhi.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004354:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004358:	d02b      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800435a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800435e:	d820      	bhi.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004360:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004364:	d012      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8004366:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800436a:	d81a      	bhi.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800436c:	2b00      	cmp	r3, #0
 800436e:	d022      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004370:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004374:	d115      	bne.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004376:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800437a:	3308      	adds	r3, #8
 800437c:	2100      	movs	r1, #0
 800437e:	4618      	mov	r0, r3
 8004380:	f000 fdd2 	bl	8004f28 <RCCEx_PLL2_Config>
 8004384:	4603      	mov	r3, r0
 8004386:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800438a:	e015      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800438c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004390:	3328      	adds	r3, #40	@ 0x28
 8004392:	2102      	movs	r1, #2
 8004394:	4618      	mov	r0, r3
 8004396:	f000 fe79 	bl	800508c <RCCEx_PLL3_Config>
 800439a:	4603      	mov	r3, r0
 800439c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80043a0:	e00a      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80043a8:	e006      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80043aa:	bf00      	nop
 80043ac:	e004      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80043ae:	bf00      	nop
 80043b0:	e002      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80043b2:	bf00      	nop
 80043b4:	e000      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80043b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10b      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80043c0:	4ba0      	ldr	r3, [pc, #640]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80043c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043c4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80043c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043d0:	4a9c      	ldr	r2, [pc, #624]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80043d2:	430b      	orrs	r3, r1
 80043d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80043d6:	e003      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80043e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e8:	f002 0308 	and.w	r3, r2, #8
 80043ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043f0:	2300      	movs	r3, #0
 80043f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80043f6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80043fa:	460b      	mov	r3, r1
 80043fc:	4313      	orrs	r3, r2
 80043fe:	d01e      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8004400:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004404:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004408:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800440c:	d10c      	bne.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800440e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004412:	3328      	adds	r3, #40	@ 0x28
 8004414:	2102      	movs	r1, #2
 8004416:	4618      	mov	r0, r3
 8004418:	f000 fe38 	bl	800508c <RCCEx_PLL3_Config>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d002      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004428:	4b86      	ldr	r3, [pc, #536]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800442a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800442c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004430:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004434:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004438:	4a82      	ldr	r2, [pc, #520]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800443a:	430b      	orrs	r3, r1
 800443c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800443e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004446:	f002 0310 	and.w	r3, r2, #16
 800444a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800444e:	2300      	movs	r3, #0
 8004450:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004454:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004458:	460b      	mov	r3, r1
 800445a:	4313      	orrs	r3, r2
 800445c:	d01e      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800445e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004462:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004466:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800446a:	d10c      	bne.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800446c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004470:	3328      	adds	r3, #40	@ 0x28
 8004472:	2102      	movs	r1, #2
 8004474:	4618      	mov	r0, r3
 8004476:	f000 fe09 	bl	800508c <RCCEx_PLL3_Config>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d002      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004486:	4b6f      	ldr	r3, [pc, #444]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800448a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800448e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004492:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004496:	4a6b      	ldr	r2, [pc, #428]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004498:	430b      	orrs	r3, r1
 800449a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800449c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80044a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80044aa:	2300      	movs	r3, #0
 80044ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80044ae:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80044b2:	460b      	mov	r3, r1
 80044b4:	4313      	orrs	r3, r2
 80044b6:	d03e      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80044b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80044c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044c4:	d022      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80044c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044ca:	d81b      	bhi.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d003      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80044d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044d4:	d00b      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80044d6:	e015      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044dc:	3308      	adds	r3, #8
 80044de:	2100      	movs	r1, #0
 80044e0:	4618      	mov	r0, r3
 80044e2:	f000 fd21 	bl	8004f28 <RCCEx_PLL2_Config>
 80044e6:	4603      	mov	r3, r0
 80044e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80044ec:	e00f      	b.n	800450e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044f2:	3328      	adds	r3, #40	@ 0x28
 80044f4:	2102      	movs	r1, #2
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 fdc8 	bl	800508c <RCCEx_PLL3_Config>
 80044fc:	4603      	mov	r3, r0
 80044fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004502:	e004      	b.n	800450e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800450a:	e000      	b.n	800450e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800450c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800450e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10b      	bne.n	800452e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004516:	4b4b      	ldr	r3, [pc, #300]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800451a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800451e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004522:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004526:	4a47      	ldr	r2, [pc, #284]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004528:	430b      	orrs	r3, r1
 800452a:	6593      	str	r3, [r2, #88]	@ 0x58
 800452c:	e003      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800452e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004532:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004536:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800453a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004542:	673b      	str	r3, [r7, #112]	@ 0x70
 8004544:	2300      	movs	r3, #0
 8004546:	677b      	str	r3, [r7, #116]	@ 0x74
 8004548:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800454c:	460b      	mov	r3, r1
 800454e:	4313      	orrs	r3, r2
 8004550:	d03b      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004552:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004556:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800455a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800455e:	d01f      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004560:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004564:	d818      	bhi.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004566:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800456a:	d003      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800456c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004570:	d007      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8004572:	e011      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004574:	4b33      	ldr	r3, [pc, #204]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004578:	4a32      	ldr	r2, [pc, #200]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800457a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800457e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004580:	e00f      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004582:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004586:	3328      	adds	r3, #40	@ 0x28
 8004588:	2101      	movs	r1, #1
 800458a:	4618      	mov	r0, r3
 800458c:	f000 fd7e 	bl	800508c <RCCEx_PLL3_Config>
 8004590:	4603      	mov	r3, r0
 8004592:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8004596:	e004      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800459e:	e000      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80045a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10b      	bne.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045aa:	4b26      	ldr	r3, [pc, #152]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80045ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80045b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045ba:	4a22      	ldr	r2, [pc, #136]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80045bc:	430b      	orrs	r3, r1
 80045be:	6553      	str	r3, [r2, #84]	@ 0x54
 80045c0:	e003      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045c6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80045ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80045d6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045d8:	2300      	movs	r3, #0
 80045da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80045dc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80045e0:	460b      	mov	r3, r1
 80045e2:	4313      	orrs	r3, r2
 80045e4:	d034      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80045e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80045f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045f4:	d007      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80045f6:	e011      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045f8:	4b12      	ldr	r3, [pc, #72]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80045fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045fc:	4a11      	ldr	r2, [pc, #68]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80045fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004602:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004604:	e00e      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004606:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800460a:	3308      	adds	r3, #8
 800460c:	2102      	movs	r1, #2
 800460e:	4618      	mov	r0, r3
 8004610:	f000 fc8a 	bl	8004f28 <RCCEx_PLL2_Config>
 8004614:	4603      	mov	r3, r0
 8004616:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800461a:	e003      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004622:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004624:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10d      	bne.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800462c:	4b05      	ldr	r3, [pc, #20]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800462e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004630:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004634:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004638:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800463a:	4a02      	ldr	r2, [pc, #8]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800463c:	430b      	orrs	r3, r1
 800463e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004640:	e006      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8004642:	bf00      	nop
 8004644:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004648:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800464c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004650:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004658:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800465c:	663b      	str	r3, [r7, #96]	@ 0x60
 800465e:	2300      	movs	r3, #0
 8004660:	667b      	str	r3, [r7, #100]	@ 0x64
 8004662:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004666:	460b      	mov	r3, r1
 8004668:	4313      	orrs	r3, r2
 800466a:	d00c      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800466c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004670:	3328      	adds	r3, #40	@ 0x28
 8004672:	2102      	movs	r1, #2
 8004674:	4618      	mov	r0, r3
 8004676:	f000 fd09 	bl	800508c <RCCEx_PLL3_Config>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d002      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004686:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800468a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004692:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004694:	2300      	movs	r3, #0
 8004696:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004698:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800469c:	460b      	mov	r3, r1
 800469e:	4313      	orrs	r3, r2
 80046a0:	d036      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80046a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046ac:	d018      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80046ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046b2:	d811      	bhi.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80046b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046b8:	d014      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80046ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046be:	d80b      	bhi.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d011      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80046c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046c8:	d106      	bne.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046ca:	4bb7      	ldr	r3, [pc, #732]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80046cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ce:	4ab6      	ldr	r2, [pc, #728]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80046d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80046d6:	e008      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80046de:	e004      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80046e0:	bf00      	nop
 80046e2:	e002      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80046e4:	bf00      	nop
 80046e6:	e000      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80046e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10a      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046f2:	4bad      	ldr	r3, [pc, #692]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80046f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046f6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80046fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004700:	4aa9      	ldr	r2, [pc, #676]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004702:	430b      	orrs	r3, r1
 8004704:	6553      	str	r3, [r2, #84]	@ 0x54
 8004706:	e003      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004708:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800470c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004718:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800471c:	653b      	str	r3, [r7, #80]	@ 0x50
 800471e:	2300      	movs	r3, #0
 8004720:	657b      	str	r3, [r7, #84]	@ 0x54
 8004722:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004726:	460b      	mov	r3, r1
 8004728:	4313      	orrs	r3, r2
 800472a:	d009      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800472c:	4b9e      	ldr	r3, [pc, #632]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800472e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004730:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004734:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800473a:	4a9b      	ldr	r2, [pc, #620]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800473c:	430b      	orrs	r3, r1
 800473e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004740:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004748:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800474c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800474e:	2300      	movs	r3, #0
 8004750:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004752:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004756:	460b      	mov	r3, r1
 8004758:	4313      	orrs	r3, r2
 800475a:	d009      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800475c:	4b92      	ldr	r3, [pc, #584]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800475e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004760:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004764:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004768:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800476a:	4a8f      	ldr	r2, [pc, #572]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800476c:	430b      	orrs	r3, r1
 800476e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004778:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800477c:	643b      	str	r3, [r7, #64]	@ 0x40
 800477e:	2300      	movs	r3, #0
 8004780:	647b      	str	r3, [r7, #68]	@ 0x44
 8004782:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004786:	460b      	mov	r3, r1
 8004788:	4313      	orrs	r3, r2
 800478a:	d00e      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800478c:	4b86      	ldr	r3, [pc, #536]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	4a85      	ldr	r2, [pc, #532]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004792:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004796:	6113      	str	r3, [r2, #16]
 8004798:	4b83      	ldr	r3, [pc, #524]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800479a:	6919      	ldr	r1, [r3, #16]
 800479c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80047a4:	4a80      	ldr	r2, [pc, #512]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80047a6:	430b      	orrs	r3, r1
 80047a8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80047aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80047b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80047b8:	2300      	movs	r3, #0
 80047ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047bc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80047c0:	460b      	mov	r3, r1
 80047c2:	4313      	orrs	r3, r2
 80047c4:	d009      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80047c6:	4b78      	ldr	r3, [pc, #480]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80047c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047ca:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80047ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047d4:	4a74      	ldr	r2, [pc, #464]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80047d6:	430b      	orrs	r3, r1
 80047d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80047da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80047e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80047e8:	2300      	movs	r3, #0
 80047ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80047ec:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80047f0:	460b      	mov	r3, r1
 80047f2:	4313      	orrs	r3, r2
 80047f4:	d00a      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80047f6:	4b6c      	ldr	r3, [pc, #432]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80047f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047fa:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80047fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004806:	4a68      	ldr	r2, [pc, #416]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004808:	430b      	orrs	r3, r1
 800480a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800480c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004814:	2100      	movs	r1, #0
 8004816:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800481e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004822:	460b      	mov	r3, r1
 8004824:	4313      	orrs	r3, r2
 8004826:	d011      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004828:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800482c:	3308      	adds	r3, #8
 800482e:	2100      	movs	r1, #0
 8004830:	4618      	mov	r0, r3
 8004832:	f000 fb79 	bl	8004f28 <RCCEx_PLL2_Config>
 8004836:	4603      	mov	r3, r0
 8004838:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800483c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004840:	2b00      	cmp	r3, #0
 8004842:	d003      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004844:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004848:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800484c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004854:	2100      	movs	r1, #0
 8004856:	6239      	str	r1, [r7, #32]
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	627b      	str	r3, [r7, #36]	@ 0x24
 800485e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004862:	460b      	mov	r3, r1
 8004864:	4313      	orrs	r3, r2
 8004866:	d011      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004868:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800486c:	3308      	adds	r3, #8
 800486e:	2101      	movs	r1, #1
 8004870:	4618      	mov	r0, r3
 8004872:	f000 fb59 	bl	8004f28 <RCCEx_PLL2_Config>
 8004876:	4603      	mov	r3, r0
 8004878:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800487c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004880:	2b00      	cmp	r3, #0
 8004882:	d003      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004884:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004888:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800488c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004894:	2100      	movs	r1, #0
 8004896:	61b9      	str	r1, [r7, #24]
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	61fb      	str	r3, [r7, #28]
 800489e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80048a2:	460b      	mov	r3, r1
 80048a4:	4313      	orrs	r3, r2
 80048a6:	d011      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80048a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048ac:	3308      	adds	r3, #8
 80048ae:	2102      	movs	r1, #2
 80048b0:	4618      	mov	r0, r3
 80048b2:	f000 fb39 	bl	8004f28 <RCCEx_PLL2_Config>
 80048b6:	4603      	mov	r3, r0
 80048b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80048bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d003      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80048cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d4:	2100      	movs	r1, #0
 80048d6:	6139      	str	r1, [r7, #16]
 80048d8:	f003 0308 	and.w	r3, r3, #8
 80048dc:	617b      	str	r3, [r7, #20]
 80048de:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80048e2:	460b      	mov	r3, r1
 80048e4:	4313      	orrs	r3, r2
 80048e6:	d011      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048ec:	3328      	adds	r3, #40	@ 0x28
 80048ee:	2100      	movs	r1, #0
 80048f0:	4618      	mov	r0, r3
 80048f2:	f000 fbcb 	bl	800508c <RCCEx_PLL3_Config>
 80048f6:	4603      	mov	r3, r0
 80048f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80048fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004900:	2b00      	cmp	r3, #0
 8004902:	d003      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004904:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004908:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800490c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004914:	2100      	movs	r1, #0
 8004916:	60b9      	str	r1, [r7, #8]
 8004918:	f003 0310 	and.w	r3, r3, #16
 800491c:	60fb      	str	r3, [r7, #12]
 800491e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004922:	460b      	mov	r3, r1
 8004924:	4313      	orrs	r3, r2
 8004926:	d011      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004928:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800492c:	3328      	adds	r3, #40	@ 0x28
 800492e:	2101      	movs	r1, #1
 8004930:	4618      	mov	r0, r3
 8004932:	f000 fbab 	bl	800508c <RCCEx_PLL3_Config>
 8004936:	4603      	mov	r3, r0
 8004938:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800493c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004940:	2b00      	cmp	r3, #0
 8004942:	d003      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004944:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004948:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800494c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004954:	2100      	movs	r1, #0
 8004956:	6039      	str	r1, [r7, #0]
 8004958:	f003 0320 	and.w	r3, r3, #32
 800495c:	607b      	str	r3, [r7, #4]
 800495e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004962:	460b      	mov	r3, r1
 8004964:	4313      	orrs	r3, r2
 8004966:	d011      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004968:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800496c:	3328      	adds	r3, #40	@ 0x28
 800496e:	2102      	movs	r1, #2
 8004970:	4618      	mov	r0, r3
 8004972:	f000 fb8b 	bl	800508c <RCCEx_PLL3_Config>
 8004976:	4603      	mov	r3, r0
 8004978:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800497c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004980:	2b00      	cmp	r3, #0
 8004982:	d003      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004984:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004988:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800498c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8004990:	2b00      	cmp	r3, #0
 8004992:	d101      	bne.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8004994:	2300      	movs	r3, #0
 8004996:	e000      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
}
 800499a:	4618      	mov	r0, r3
 800499c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80049a0:	46bd      	mov	sp, r7
 80049a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049a6:	bf00      	nop
 80049a8:	58024400 	.word	0x58024400

080049ac <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80049b0:	f7fe fe00 	bl	80035b4 <HAL_RCC_GetHCLKFreq>
 80049b4:	4602      	mov	r2, r0
 80049b6:	4b06      	ldr	r3, [pc, #24]	@ (80049d0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	091b      	lsrs	r3, r3, #4
 80049bc:	f003 0307 	and.w	r3, r3, #7
 80049c0:	4904      	ldr	r1, [pc, #16]	@ (80049d4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80049c2:	5ccb      	ldrb	r3, [r1, r3]
 80049c4:	f003 031f 	and.w	r3, r3, #31
 80049c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	58024400 	.word	0x58024400
 80049d4:	0800b85c 	.word	0x0800b85c

080049d8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80049d8:	b480      	push	{r7}
 80049da:	b089      	sub	sp, #36	@ 0x24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049e0:	4ba1      	ldr	r3, [pc, #644]	@ (8004c68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e4:	f003 0303 	and.w	r3, r3, #3
 80049e8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80049ea:	4b9f      	ldr	r3, [pc, #636]	@ (8004c68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ee:	0b1b      	lsrs	r3, r3, #12
 80049f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049f4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80049f6:	4b9c      	ldr	r3, [pc, #624]	@ (8004c68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049fa:	091b      	lsrs	r3, r3, #4
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004a02:	4b99      	ldr	r3, [pc, #612]	@ (8004c68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a06:	08db      	lsrs	r3, r3, #3
 8004a08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	fb02 f303 	mul.w	r3, r2, r3
 8004a12:	ee07 3a90 	vmov	s15, r3
 8004a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a1a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f000 8111 	beq.w	8004c48 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	f000 8083 	beq.w	8004b34 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	f200 80a1 	bhi.w	8004b78 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d003      	beq.n	8004a44 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d056      	beq.n	8004af0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004a42:	e099      	b.n	8004b78 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a44:	4b88      	ldr	r3, [pc, #544]	@ (8004c68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0320 	and.w	r3, r3, #32
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d02d      	beq.n	8004aac <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a50:	4b85      	ldr	r3, [pc, #532]	@ (8004c68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	08db      	lsrs	r3, r3, #3
 8004a56:	f003 0303 	and.w	r3, r3, #3
 8004a5a:	4a84      	ldr	r2, [pc, #528]	@ (8004c6c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a60:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	ee07 3a90 	vmov	s15, r3
 8004a68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	ee07 3a90 	vmov	s15, r3
 8004a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a7a:	4b7b      	ldr	r3, [pc, #492]	@ (8004c68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a82:	ee07 3a90 	vmov	s15, r3
 8004a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a8e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004c70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aa6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004aaa:	e087      	b.n	8004bbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	ee07 3a90 	vmov	s15, r3
 8004ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ab6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004c74 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004abe:	4b6a      	ldr	r3, [pc, #424]	@ (8004c68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ac6:	ee07 3a90 	vmov	s15, r3
 8004aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ace:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ad2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004c70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ade:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004aee:	e065      	b.n	8004bbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	ee07 3a90 	vmov	s15, r3
 8004af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004afa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004c78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b02:	4b59      	ldr	r3, [pc, #356]	@ (8004c68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b0a:	ee07 3a90 	vmov	s15, r3
 8004b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b12:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b16:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004c70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b32:	e043      	b.n	8004bbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	ee07 3a90 	vmov	s15, r3
 8004b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b3e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004c7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b46:	4b48      	ldr	r3, [pc, #288]	@ (8004c68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b4e:	ee07 3a90 	vmov	s15, r3
 8004b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b56:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b5a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004c70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b76:	e021      	b.n	8004bbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	ee07 3a90 	vmov	s15, r3
 8004b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b82:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004c78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b8a:	4b37      	ldr	r3, [pc, #220]	@ (8004c68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b92:	ee07 3a90 	vmov	s15, r3
 8004b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b9e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004c70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004baa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bba:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004bbc:	4b2a      	ldr	r3, [pc, #168]	@ (8004c68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bc0:	0a5b      	lsrs	r3, r3, #9
 8004bc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bc6:	ee07 3a90 	vmov	s15, r3
 8004bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004be2:	ee17 2a90 	vmov	r2, s15
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004bea:	4b1f      	ldr	r3, [pc, #124]	@ (8004c68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bee:	0c1b      	lsrs	r3, r3, #16
 8004bf0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bf4:	ee07 3a90 	vmov	s15, r3
 8004bf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bfc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c00:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c04:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c10:	ee17 2a90 	vmov	r2, s15
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004c18:	4b13      	ldr	r3, [pc, #76]	@ (8004c68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c1c:	0e1b      	lsrs	r3, r3, #24
 8004c1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c22:	ee07 3a90 	vmov	s15, r3
 8004c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c32:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c3e:	ee17 2a90 	vmov	r2, s15
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004c46:	e008      	b.n	8004c5a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	609a      	str	r2, [r3, #8]
}
 8004c5a:	bf00      	nop
 8004c5c:	3724      	adds	r7, #36	@ 0x24
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	58024400 	.word	0x58024400
 8004c6c:	03d09000 	.word	0x03d09000
 8004c70:	46000000 	.word	0x46000000
 8004c74:	4c742400 	.word	0x4c742400
 8004c78:	4a742400 	.word	0x4a742400
 8004c7c:	4bbebc20 	.word	0x4bbebc20

08004c80 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b089      	sub	sp, #36	@ 0x24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c88:	4ba1      	ldr	r3, [pc, #644]	@ (8004f10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c8c:	f003 0303 	and.w	r3, r3, #3
 8004c90:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004c92:	4b9f      	ldr	r3, [pc, #636]	@ (8004f10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c96:	0d1b      	lsrs	r3, r3, #20
 8004c98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c9c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004c9e:	4b9c      	ldr	r3, [pc, #624]	@ (8004f10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca2:	0a1b      	lsrs	r3, r3, #8
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004caa:	4b99      	ldr	r3, [pc, #612]	@ (8004f10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cae:	08db      	lsrs	r3, r3, #3
 8004cb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004cb4:	693a      	ldr	r2, [r7, #16]
 8004cb6:	fb02 f303 	mul.w	r3, r2, r3
 8004cba:	ee07 3a90 	vmov	s15, r3
 8004cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cc2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 8111 	beq.w	8004ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	f000 8083 	beq.w	8004ddc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	f200 80a1 	bhi.w	8004e20 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d003      	beq.n	8004cec <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d056      	beq.n	8004d98 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004cea:	e099      	b.n	8004e20 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004cec:	4b88      	ldr	r3, [pc, #544]	@ (8004f10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0320 	and.w	r3, r3, #32
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d02d      	beq.n	8004d54 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004cf8:	4b85      	ldr	r3, [pc, #532]	@ (8004f10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	08db      	lsrs	r3, r3, #3
 8004cfe:	f003 0303 	and.w	r3, r3, #3
 8004d02:	4a84      	ldr	r2, [pc, #528]	@ (8004f14 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004d04:	fa22 f303 	lsr.w	r3, r2, r3
 8004d08:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	ee07 3a90 	vmov	s15, r3
 8004d10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	ee07 3a90 	vmov	s15, r3
 8004d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d22:	4b7b      	ldr	r3, [pc, #492]	@ (8004f10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d2a:	ee07 3a90 	vmov	s15, r3
 8004d2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d32:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d36:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004f18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d4e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004d52:	e087      	b.n	8004e64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	ee07 3a90 	vmov	s15, r3
 8004d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d5e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004f1c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004d62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d66:	4b6a      	ldr	r3, [pc, #424]	@ (8004f10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d6e:	ee07 3a90 	vmov	s15, r3
 8004d72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d76:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d7a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004f18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d96:	e065      	b.n	8004e64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	ee07 3a90 	vmov	s15, r3
 8004d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004da2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004f20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004da6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004daa:	4b59      	ldr	r3, [pc, #356]	@ (8004f10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004db2:	ee07 3a90 	vmov	s15, r3
 8004db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dba:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dbe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004f18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004dc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dda:	e043      	b.n	8004e64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	ee07 3a90 	vmov	s15, r3
 8004de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004de6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004f24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004dea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dee:	4b48      	ldr	r3, [pc, #288]	@ (8004f10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004df6:	ee07 3a90 	vmov	s15, r3
 8004dfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e02:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004f18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e1e:	e021      	b.n	8004e64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	ee07 3a90 	vmov	s15, r3
 8004e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e2a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004f20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004e2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e32:	4b37      	ldr	r3, [pc, #220]	@ (8004f10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e3a:	ee07 3a90 	vmov	s15, r3
 8004e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e42:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e46:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004f18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e62:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004e64:	4b2a      	ldr	r3, [pc, #168]	@ (8004f10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e68:	0a5b      	lsrs	r3, r3, #9
 8004e6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e6e:	ee07 3a90 	vmov	s15, r3
 8004e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e8a:	ee17 2a90 	vmov	r2, s15
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004e92:	4b1f      	ldr	r3, [pc, #124]	@ (8004f10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e96:	0c1b      	lsrs	r3, r3, #16
 8004e98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e9c:	ee07 3a90 	vmov	s15, r3
 8004ea0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ea4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ea8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004eac:	edd7 6a07 	vldr	s13, [r7, #28]
 8004eb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004eb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004eb8:	ee17 2a90 	vmov	r2, s15
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004ec0:	4b13      	ldr	r3, [pc, #76]	@ (8004f10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec4:	0e1b      	lsrs	r3, r3, #24
 8004ec6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004eca:	ee07 3a90 	vmov	s15, r3
 8004ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ed2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ed6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004eda:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ede:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ee2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ee6:	ee17 2a90 	vmov	r2, s15
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004eee:	e008      	b.n	8004f02 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	609a      	str	r2, [r3, #8]
}
 8004f02:	bf00      	nop
 8004f04:	3724      	adds	r7, #36	@ 0x24
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	58024400 	.word	0x58024400
 8004f14:	03d09000 	.word	0x03d09000
 8004f18:	46000000 	.word	0x46000000
 8004f1c:	4c742400 	.word	0x4c742400
 8004f20:	4a742400 	.word	0x4a742400
 8004f24:	4bbebc20 	.word	0x4bbebc20

08004f28 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f32:	2300      	movs	r3, #0
 8004f34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f36:	4b53      	ldr	r3, [pc, #332]	@ (8005084 <RCCEx_PLL2_Config+0x15c>)
 8004f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f3a:	f003 0303 	and.w	r3, r3, #3
 8004f3e:	2b03      	cmp	r3, #3
 8004f40:	d101      	bne.n	8004f46 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e099      	b.n	800507a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004f46:	4b4f      	ldr	r3, [pc, #316]	@ (8005084 <RCCEx_PLL2_Config+0x15c>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a4e      	ldr	r2, [pc, #312]	@ (8005084 <RCCEx_PLL2_Config+0x15c>)
 8004f4c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004f50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f52:	f7fd f86b 	bl	800202c <HAL_GetTick>
 8004f56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f58:	e008      	b.n	8004f6c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f5a:	f7fd f867 	bl	800202c <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d901      	bls.n	8004f6c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e086      	b.n	800507a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f6c:	4b45      	ldr	r3, [pc, #276]	@ (8005084 <RCCEx_PLL2_Config+0x15c>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1f0      	bne.n	8004f5a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004f78:	4b42      	ldr	r3, [pc, #264]	@ (8005084 <RCCEx_PLL2_Config+0x15c>)
 8004f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f7c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	031b      	lsls	r3, r3, #12
 8004f86:	493f      	ldr	r1, [pc, #252]	@ (8005084 <RCCEx_PLL2_Config+0x15c>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	3b01      	subs	r3, #1
 8004f92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	025b      	lsls	r3, r3, #9
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	431a      	orrs	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	041b      	lsls	r3, r3, #16
 8004faa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	061b      	lsls	r3, r3, #24
 8004fb8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004fbc:	4931      	ldr	r1, [pc, #196]	@ (8005084 <RCCEx_PLL2_Config+0x15c>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004fc2:	4b30      	ldr	r3, [pc, #192]	@ (8005084 <RCCEx_PLL2_Config+0x15c>)
 8004fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	492d      	ldr	r1, [pc, #180]	@ (8005084 <RCCEx_PLL2_Config+0x15c>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004fd4:	4b2b      	ldr	r3, [pc, #172]	@ (8005084 <RCCEx_PLL2_Config+0x15c>)
 8004fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd8:	f023 0220 	bic.w	r2, r3, #32
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	4928      	ldr	r1, [pc, #160]	@ (8005084 <RCCEx_PLL2_Config+0x15c>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004fe6:	4b27      	ldr	r3, [pc, #156]	@ (8005084 <RCCEx_PLL2_Config+0x15c>)
 8004fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fea:	4a26      	ldr	r2, [pc, #152]	@ (8005084 <RCCEx_PLL2_Config+0x15c>)
 8004fec:	f023 0310 	bic.w	r3, r3, #16
 8004ff0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004ff2:	4b24      	ldr	r3, [pc, #144]	@ (8005084 <RCCEx_PLL2_Config+0x15c>)
 8004ff4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ff6:	4b24      	ldr	r3, [pc, #144]	@ (8005088 <RCCEx_PLL2_Config+0x160>)
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	69d2      	ldr	r2, [r2, #28]
 8004ffe:	00d2      	lsls	r2, r2, #3
 8005000:	4920      	ldr	r1, [pc, #128]	@ (8005084 <RCCEx_PLL2_Config+0x15c>)
 8005002:	4313      	orrs	r3, r2
 8005004:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005006:	4b1f      	ldr	r3, [pc, #124]	@ (8005084 <RCCEx_PLL2_Config+0x15c>)
 8005008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800500a:	4a1e      	ldr	r2, [pc, #120]	@ (8005084 <RCCEx_PLL2_Config+0x15c>)
 800500c:	f043 0310 	orr.w	r3, r3, #16
 8005010:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d106      	bne.n	8005026 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005018:	4b1a      	ldr	r3, [pc, #104]	@ (8005084 <RCCEx_PLL2_Config+0x15c>)
 800501a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800501c:	4a19      	ldr	r2, [pc, #100]	@ (8005084 <RCCEx_PLL2_Config+0x15c>)
 800501e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005022:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005024:	e00f      	b.n	8005046 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d106      	bne.n	800503a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800502c:	4b15      	ldr	r3, [pc, #84]	@ (8005084 <RCCEx_PLL2_Config+0x15c>)
 800502e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005030:	4a14      	ldr	r2, [pc, #80]	@ (8005084 <RCCEx_PLL2_Config+0x15c>)
 8005032:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005036:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005038:	e005      	b.n	8005046 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800503a:	4b12      	ldr	r3, [pc, #72]	@ (8005084 <RCCEx_PLL2_Config+0x15c>)
 800503c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800503e:	4a11      	ldr	r2, [pc, #68]	@ (8005084 <RCCEx_PLL2_Config+0x15c>)
 8005040:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005044:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005046:	4b0f      	ldr	r3, [pc, #60]	@ (8005084 <RCCEx_PLL2_Config+0x15c>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a0e      	ldr	r2, [pc, #56]	@ (8005084 <RCCEx_PLL2_Config+0x15c>)
 800504c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005050:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005052:	f7fc ffeb 	bl	800202c <HAL_GetTick>
 8005056:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005058:	e008      	b.n	800506c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800505a:	f7fc ffe7 	bl	800202c <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	2b02      	cmp	r3, #2
 8005066:	d901      	bls.n	800506c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e006      	b.n	800507a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800506c:	4b05      	ldr	r3, [pc, #20]	@ (8005084 <RCCEx_PLL2_Config+0x15c>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d0f0      	beq.n	800505a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005078:	7bfb      	ldrb	r3, [r7, #15]
}
 800507a:	4618      	mov	r0, r3
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	58024400 	.word	0x58024400
 8005088:	ffff0007 	.word	0xffff0007

0800508c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005096:	2300      	movs	r3, #0
 8005098:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800509a:	4b53      	ldr	r3, [pc, #332]	@ (80051e8 <RCCEx_PLL3_Config+0x15c>)
 800509c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800509e:	f003 0303 	and.w	r3, r3, #3
 80050a2:	2b03      	cmp	r3, #3
 80050a4:	d101      	bne.n	80050aa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e099      	b.n	80051de <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80050aa:	4b4f      	ldr	r3, [pc, #316]	@ (80051e8 <RCCEx_PLL3_Config+0x15c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a4e      	ldr	r2, [pc, #312]	@ (80051e8 <RCCEx_PLL3_Config+0x15c>)
 80050b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050b6:	f7fc ffb9 	bl	800202c <HAL_GetTick>
 80050ba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80050bc:	e008      	b.n	80050d0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80050be:	f7fc ffb5 	bl	800202c <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d901      	bls.n	80050d0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e086      	b.n	80051de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80050d0:	4b45      	ldr	r3, [pc, #276]	@ (80051e8 <RCCEx_PLL3_Config+0x15c>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1f0      	bne.n	80050be <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80050dc:	4b42      	ldr	r3, [pc, #264]	@ (80051e8 <RCCEx_PLL3_Config+0x15c>)
 80050de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	051b      	lsls	r3, r3, #20
 80050ea:	493f      	ldr	r1, [pc, #252]	@ (80051e8 <RCCEx_PLL3_Config+0x15c>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	628b      	str	r3, [r1, #40]	@ 0x28
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	3b01      	subs	r3, #1
 80050f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	3b01      	subs	r3, #1
 8005100:	025b      	lsls	r3, r3, #9
 8005102:	b29b      	uxth	r3, r3
 8005104:	431a      	orrs	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	3b01      	subs	r3, #1
 800510c:	041b      	lsls	r3, r3, #16
 800510e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005112:	431a      	orrs	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	3b01      	subs	r3, #1
 800511a:	061b      	lsls	r3, r3, #24
 800511c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005120:	4931      	ldr	r1, [pc, #196]	@ (80051e8 <RCCEx_PLL3_Config+0x15c>)
 8005122:	4313      	orrs	r3, r2
 8005124:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005126:	4b30      	ldr	r3, [pc, #192]	@ (80051e8 <RCCEx_PLL3_Config+0x15c>)
 8005128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800512a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	492d      	ldr	r1, [pc, #180]	@ (80051e8 <RCCEx_PLL3_Config+0x15c>)
 8005134:	4313      	orrs	r3, r2
 8005136:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005138:	4b2b      	ldr	r3, [pc, #172]	@ (80051e8 <RCCEx_PLL3_Config+0x15c>)
 800513a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800513c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	4928      	ldr	r1, [pc, #160]	@ (80051e8 <RCCEx_PLL3_Config+0x15c>)
 8005146:	4313      	orrs	r3, r2
 8005148:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800514a:	4b27      	ldr	r3, [pc, #156]	@ (80051e8 <RCCEx_PLL3_Config+0x15c>)
 800514c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800514e:	4a26      	ldr	r2, [pc, #152]	@ (80051e8 <RCCEx_PLL3_Config+0x15c>)
 8005150:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005154:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005156:	4b24      	ldr	r3, [pc, #144]	@ (80051e8 <RCCEx_PLL3_Config+0x15c>)
 8005158:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800515a:	4b24      	ldr	r3, [pc, #144]	@ (80051ec <RCCEx_PLL3_Config+0x160>)
 800515c:	4013      	ands	r3, r2
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	69d2      	ldr	r2, [r2, #28]
 8005162:	00d2      	lsls	r2, r2, #3
 8005164:	4920      	ldr	r1, [pc, #128]	@ (80051e8 <RCCEx_PLL3_Config+0x15c>)
 8005166:	4313      	orrs	r3, r2
 8005168:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800516a:	4b1f      	ldr	r3, [pc, #124]	@ (80051e8 <RCCEx_PLL3_Config+0x15c>)
 800516c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800516e:	4a1e      	ldr	r2, [pc, #120]	@ (80051e8 <RCCEx_PLL3_Config+0x15c>)
 8005170:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005174:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d106      	bne.n	800518a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800517c:	4b1a      	ldr	r3, [pc, #104]	@ (80051e8 <RCCEx_PLL3_Config+0x15c>)
 800517e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005180:	4a19      	ldr	r2, [pc, #100]	@ (80051e8 <RCCEx_PLL3_Config+0x15c>)
 8005182:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005186:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005188:	e00f      	b.n	80051aa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d106      	bne.n	800519e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005190:	4b15      	ldr	r3, [pc, #84]	@ (80051e8 <RCCEx_PLL3_Config+0x15c>)
 8005192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005194:	4a14      	ldr	r2, [pc, #80]	@ (80051e8 <RCCEx_PLL3_Config+0x15c>)
 8005196:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800519a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800519c:	e005      	b.n	80051aa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800519e:	4b12      	ldr	r3, [pc, #72]	@ (80051e8 <RCCEx_PLL3_Config+0x15c>)
 80051a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a2:	4a11      	ldr	r2, [pc, #68]	@ (80051e8 <RCCEx_PLL3_Config+0x15c>)
 80051a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80051aa:	4b0f      	ldr	r3, [pc, #60]	@ (80051e8 <RCCEx_PLL3_Config+0x15c>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a0e      	ldr	r2, [pc, #56]	@ (80051e8 <RCCEx_PLL3_Config+0x15c>)
 80051b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051b6:	f7fc ff39 	bl	800202c <HAL_GetTick>
 80051ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80051bc:	e008      	b.n	80051d0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80051be:	f7fc ff35 	bl	800202c <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d901      	bls.n	80051d0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e006      	b.n	80051de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80051d0:	4b05      	ldr	r3, [pc, #20]	@ (80051e8 <RCCEx_PLL3_Config+0x15c>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d0f0      	beq.n	80051be <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80051dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	58024400 	.word	0x58024400
 80051ec:	ffff0007 	.word	0xffff0007

080051f0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e10f      	b.n	8005422 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a87      	ldr	r2, [pc, #540]	@ (800542c <HAL_SPI_Init+0x23c>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d00f      	beq.n	8005232 <HAL_SPI_Init+0x42>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a86      	ldr	r2, [pc, #536]	@ (8005430 <HAL_SPI_Init+0x240>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d00a      	beq.n	8005232 <HAL_SPI_Init+0x42>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a84      	ldr	r2, [pc, #528]	@ (8005434 <HAL_SPI_Init+0x244>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d005      	beq.n	8005232 <HAL_SPI_Init+0x42>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	2b0f      	cmp	r3, #15
 800522c:	d901      	bls.n	8005232 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e0f7      	b.n	8005422 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 fbca 	bl	80059cc <SPI_GetPacketSize>
 8005238:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a7b      	ldr	r2, [pc, #492]	@ (800542c <HAL_SPI_Init+0x23c>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d00c      	beq.n	800525e <HAL_SPI_Init+0x6e>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a79      	ldr	r2, [pc, #484]	@ (8005430 <HAL_SPI_Init+0x240>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d007      	beq.n	800525e <HAL_SPI_Init+0x6e>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a78      	ldr	r2, [pc, #480]	@ (8005434 <HAL_SPI_Init+0x244>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d002      	beq.n	800525e <HAL_SPI_Init+0x6e>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2b08      	cmp	r3, #8
 800525c:	d811      	bhi.n	8005282 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005262:	4a72      	ldr	r2, [pc, #456]	@ (800542c <HAL_SPI_Init+0x23c>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d009      	beq.n	800527c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a70      	ldr	r2, [pc, #448]	@ (8005430 <HAL_SPI_Init+0x240>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d004      	beq.n	800527c <HAL_SPI_Init+0x8c>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a6f      	ldr	r2, [pc, #444]	@ (8005434 <HAL_SPI_Init+0x244>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d104      	bne.n	8005286 <HAL_SPI_Init+0x96>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2b10      	cmp	r3, #16
 8005280:	d901      	bls.n	8005286 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e0cd      	b.n	8005422 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d106      	bne.n	80052a0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f7fc fbb4 	bl	8001a08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2202      	movs	r2, #2
 80052a4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f022 0201 	bic.w	r2, r2, #1
 80052b6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80052c2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80052cc:	d119      	bne.n	8005302 <HAL_SPI_Init+0x112>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052d6:	d103      	bne.n	80052e0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d008      	beq.n	80052f2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10c      	bne.n	8005302 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80052ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052f0:	d107      	bne.n	8005302 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005300:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00f      	beq.n	800532e <HAL_SPI_Init+0x13e>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	2b06      	cmp	r3, #6
 8005314:	d90b      	bls.n	800532e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	430a      	orrs	r2, r1
 800532a:	601a      	str	r2, [r3, #0]
 800532c:	e007      	b.n	800533e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800533c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	69da      	ldr	r2, [r3, #28]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005346:	431a      	orrs	r2, r3
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	431a      	orrs	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005350:	ea42 0103 	orr.w	r1, r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	68da      	ldr	r2, [r3, #12]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	430a      	orrs	r2, r1
 800535e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005368:	431a      	orrs	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800536e:	431a      	orrs	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	431a      	orrs	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	431a      	orrs	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	695b      	ldr	r3, [r3, #20]
 8005380:	431a      	orrs	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	431a      	orrs	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	431a      	orrs	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005392:	431a      	orrs	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	431a      	orrs	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800539e:	ea42 0103 	orr.w	r1, r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d113      	bne.n	80053de <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053c8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80053dc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f022 0201 	bic.w	r2, r2, #1
 80053ec:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00a      	beq.n	8005410 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	430a      	orrs	r2, r1
 800540e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	40013000 	.word	0x40013000
 8005430:	40003800 	.word	0x40003800
 8005434:	40003c00 	.word	0x40003c00

08005438 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b088      	sub	sp, #32
 800543c:	af02      	add	r7, sp, #8
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	603b      	str	r3, [r7, #0]
 8005444:	4613      	mov	r3, r2
 8005446:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	3320      	adds	r3, #32
 800544e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005450:	f7fc fdec 	bl	800202c <HAL_GetTick>
 8005454:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800545c:	b2db      	uxtb	r3, r3
 800545e:	2b01      	cmp	r3, #1
 8005460:	d001      	beq.n	8005466 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8005462:	2302      	movs	r3, #2
 8005464:	e1d1      	b.n	800580a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d002      	beq.n	8005472 <HAL_SPI_Transmit+0x3a>
 800546c:	88fb      	ldrh	r3, [r7, #6]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d101      	bne.n	8005476 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e1c9      	b.n	800580a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800547c:	2b01      	cmp	r3, #1
 800547e:	d101      	bne.n	8005484 <HAL_SPI_Transmit+0x4c>
 8005480:	2302      	movs	r3, #2
 8005482:	e1c2      	b.n	800580a <HAL_SPI_Transmit+0x3d2>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2203      	movs	r2, #3
 8005490:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	68ba      	ldr	r2, [r7, #8]
 80054a0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	88fa      	ldrh	r2, [r7, #6]
 80054a6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	88fa      	ldrh	r2, [r7, #6]
 80054ae:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2200      	movs	r2, #0
 80054b6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80054dc:	d108      	bne.n	80054f0 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054ec:	601a      	str	r2, [r3, #0]
 80054ee:	e009      	b.n	8005504 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005502:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	685a      	ldr	r2, [r3, #4]
 800550a:	4b96      	ldr	r3, [pc, #600]	@ (8005764 <HAL_SPI_Transmit+0x32c>)
 800550c:	4013      	ands	r3, r2
 800550e:	88f9      	ldrh	r1, [r7, #6]
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	6812      	ldr	r2, [r2, #0]
 8005514:	430b      	orrs	r3, r1
 8005516:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f042 0201 	orr.w	r2, r2, #1
 8005526:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005530:	d107      	bne.n	8005542 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005540:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	2b0f      	cmp	r3, #15
 8005548:	d947      	bls.n	80055da <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800554a:	e03f      	b.n	80055cc <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	f003 0302 	and.w	r3, r3, #2
 8005556:	2b02      	cmp	r3, #2
 8005558:	d114      	bne.n	8005584 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	6812      	ldr	r2, [r2, #0]
 8005564:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800556a:	1d1a      	adds	r2, r3, #4
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005576:	b29b      	uxth	r3, r3
 8005578:	3b01      	subs	r3, #1
 800557a:	b29a      	uxth	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005582:	e023      	b.n	80055cc <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005584:	f7fc fd52 	bl	800202c <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	683a      	ldr	r2, [r7, #0]
 8005590:	429a      	cmp	r2, r3
 8005592:	d803      	bhi.n	800559c <HAL_SPI_Transmit+0x164>
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800559a:	d102      	bne.n	80055a2 <HAL_SPI_Transmit+0x16a>
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d114      	bne.n	80055cc <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	f000 f944 	bl	8005830 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055ae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e11e      	b.n	800580a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1b9      	bne.n	800554c <HAL_SPI_Transmit+0x114>
 80055d8:	e0f1      	b.n	80057be <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	2b07      	cmp	r3, #7
 80055e0:	f240 80e6 	bls.w	80057b0 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80055e4:	e05d      	b.n	80056a2 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	695b      	ldr	r3, [r3, #20]
 80055ec:	f003 0302 	and.w	r3, r3, #2
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d132      	bne.n	800565a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d918      	bls.n	8005632 <HAL_SPI_Transmit+0x1fa>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005604:	2b00      	cmp	r3, #0
 8005606:	d014      	beq.n	8005632 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6812      	ldr	r2, [r2, #0]
 8005612:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005618:	1d1a      	adds	r2, r3, #4
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005624:	b29b      	uxth	r3, r3
 8005626:	3b02      	subs	r3, #2
 8005628:	b29a      	uxth	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005630:	e037      	b.n	80056a2 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005636:	881a      	ldrh	r2, [r3, #0]
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005640:	1c9a      	adds	r2, r3, #2
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800564c:	b29b      	uxth	r3, r3
 800564e:	3b01      	subs	r3, #1
 8005650:	b29a      	uxth	r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005658:	e023      	b.n	80056a2 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800565a:	f7fc fce7 	bl	800202c <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	683a      	ldr	r2, [r7, #0]
 8005666:	429a      	cmp	r2, r3
 8005668:	d803      	bhi.n	8005672 <HAL_SPI_Transmit+0x23a>
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005670:	d102      	bne.n	8005678 <HAL_SPI_Transmit+0x240>
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d114      	bne.n	80056a2 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f000 f8d9 	bl	8005830 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005684:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e0b3      	b.n	800580a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d19b      	bne.n	80055e6 <HAL_SPI_Transmit+0x1ae>
 80056ae:	e086      	b.n	80057be <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	f003 0302 	and.w	r3, r3, #2
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d154      	bne.n	8005768 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	2b03      	cmp	r3, #3
 80056c8:	d918      	bls.n	80056fc <HAL_SPI_Transmit+0x2c4>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ce:	2b40      	cmp	r3, #64	@ 0x40
 80056d0:	d914      	bls.n	80056fc <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	6812      	ldr	r2, [r2, #0]
 80056dc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056e2:	1d1a      	adds	r2, r3, #4
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	3b04      	subs	r3, #4
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80056fa:	e059      	b.n	80057b0 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005702:	b29b      	uxth	r3, r3
 8005704:	2b01      	cmp	r3, #1
 8005706:	d917      	bls.n	8005738 <HAL_SPI_Transmit+0x300>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800570c:	2b00      	cmp	r3, #0
 800570e:	d013      	beq.n	8005738 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005714:	881a      	ldrh	r2, [r3, #0]
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800571e:	1c9a      	adds	r2, r3, #2
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800572a:	b29b      	uxth	r3, r3
 800572c:	3b02      	subs	r3, #2
 800572e:	b29a      	uxth	r2, r3
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005736:	e03b      	b.n	80057b0 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	3320      	adds	r3, #32
 8005742:	7812      	ldrb	r2, [r2, #0]
 8005744:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800574a:	1c5a      	adds	r2, r3, #1
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005756:	b29b      	uxth	r3, r3
 8005758:	3b01      	subs	r3, #1
 800575a:	b29a      	uxth	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005762:	e025      	b.n	80057b0 <HAL_SPI_Transmit+0x378>
 8005764:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005768:	f7fc fc60 	bl	800202c <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	683a      	ldr	r2, [r7, #0]
 8005774:	429a      	cmp	r2, r3
 8005776:	d803      	bhi.n	8005780 <HAL_SPI_Transmit+0x348>
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800577e:	d102      	bne.n	8005786 <HAL_SPI_Transmit+0x34e>
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d114      	bne.n	80057b0 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005786:	68f8      	ldr	r0, [r7, #12]
 8005788:	f000 f852 	bl	8005830 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005792:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e02c      	b.n	800580a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f47f af79 	bne.w	80056b0 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	9300      	str	r3, [sp, #0]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	2200      	movs	r2, #0
 80057c6:	2108      	movs	r1, #8
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f000 f8d1 	bl	8005970 <SPI_WaitOnFlagUntilTimeout>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d007      	beq.n	80057e4 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057da:	f043 0220 	orr.w	r2, r3, #32
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f000 f823 	bl	8005830 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005800:	2b00      	cmp	r3, #0
 8005802:	d001      	beq.n	8005808 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e000      	b.n	800580a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8005808:	2300      	movs	r3, #0
  }
}
 800580a:	4618      	mov	r0, r3
 800580c:	3718      	adds	r7, #24
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop

08005814 <HAL_SPI_GetError>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(const SPI_HandleTypeDef *hspi)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
}
 8005822:	4618      	mov	r0, r3
 8005824:	370c      	adds	r7, #12
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
	...

08005830 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	699a      	ldr	r2, [r3, #24]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f042 0208 	orr.w	r2, r2, #8
 800584e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	699a      	ldr	r2, [r3, #24]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f042 0210 	orr.w	r2, r2, #16
 800585e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f022 0201 	bic.w	r2, r2, #1
 800586e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6919      	ldr	r1, [r3, #16]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	4b3c      	ldr	r3, [pc, #240]	@ (800596c <SPI_CloseTransfer+0x13c>)
 800587c:	400b      	ands	r3, r1
 800587e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689a      	ldr	r2, [r3, #8]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800588e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005896:	b2db      	uxtb	r3, r3
 8005898:	2b04      	cmp	r3, #4
 800589a:	d014      	beq.n	80058c6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f003 0320 	and.w	r3, r3, #32
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00f      	beq.n	80058c6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058ac:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	699a      	ldr	r2, [r3, #24]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f042 0220 	orr.w	r2, r2, #32
 80058c4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b03      	cmp	r3, #3
 80058d0:	d014      	beq.n	80058fc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00f      	beq.n	80058fc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058e2:	f043 0204 	orr.w	r2, r3, #4
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	699a      	ldr	r2, [r3, #24]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058fa:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00f      	beq.n	8005926 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800590c:	f043 0201 	orr.w	r2, r3, #1
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	699a      	ldr	r2, [r3, #24]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005924:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00f      	beq.n	8005950 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005936:	f043 0208 	orr.w	r2, r3, #8
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	699a      	ldr	r2, [r3, #24]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800594e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8005960:	bf00      	nop
 8005962:	3714      	adds	r7, #20
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	fffffc90 	.word	0xfffffc90

08005970 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	603b      	str	r3, [r7, #0]
 800597c:	4613      	mov	r3, r2
 800597e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005980:	e010      	b.n	80059a4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005982:	f7fc fb53 	bl	800202c <HAL_GetTick>
 8005986:	4602      	mov	r2, r0
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	683a      	ldr	r2, [r7, #0]
 800598e:	429a      	cmp	r2, r3
 8005990:	d803      	bhi.n	800599a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005998:	d102      	bne.n	80059a0 <SPI_WaitOnFlagUntilTimeout+0x30>
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d101      	bne.n	80059a4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e00f      	b.n	80059c4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	695a      	ldr	r2, [r3, #20]
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	4013      	ands	r3, r2
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	bf0c      	ite	eq
 80059b4:	2301      	moveq	r3, #1
 80059b6:	2300      	movne	r3, #0
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	461a      	mov	r2, r3
 80059bc:	79fb      	ldrb	r3, [r7, #7]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d0df      	beq.n	8005982 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3710      	adds	r7, #16
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059d8:	095b      	lsrs	r3, r3, #5
 80059da:	3301      	adds	r3, #1
 80059dc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	3301      	adds	r3, #1
 80059e4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	3307      	adds	r3, #7
 80059ea:	08db      	lsrs	r3, r3, #3
 80059ec:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	fb02 f303 	mul.w	r3, r2, r3
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3714      	adds	r7, #20
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b082      	sub	sp, #8
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d101      	bne.n	8005a14 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e049      	b.n	8005aa8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d106      	bne.n	8005a2e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f7fc f87b 	bl	8001b24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2202      	movs	r2, #2
 8005a32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	4619      	mov	r1, r3
 8005a40:	4610      	mov	r0, r2
 8005a42:	f000 f975 	bl	8005d30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2201      	movs	r2, #1
 8005a62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2201      	movs	r2, #1
 8005a92:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3708      	adds	r7, #8
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d101      	bne.n	8005ac2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e049      	b.n	8005b56 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d106      	bne.n	8005adc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f841 	bl	8005b5e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	3304      	adds	r3, #4
 8005aec:	4619      	mov	r1, r3
 8005aee:	4610      	mov	r0, r2
 8005af0:	f000 f91e 	bl	8005d30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3708      	adds	r7, #8
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}

08005b5e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005b5e:	b480      	push	{r7}
 8005b60:	b083      	sub	sp, #12
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005b66:	bf00      	nop
 8005b68:	370c      	adds	r7, #12
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b086      	sub	sp, #24
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	60f8      	str	r0, [r7, #12]
 8005b7a:	60b9      	str	r1, [r7, #8]
 8005b7c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d101      	bne.n	8005b90 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	e088      	b.n	8005ca2 <HAL_TIM_IC_ConfigChannel+0x130>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d11b      	bne.n	8005bd6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005bae:	f000 fa55 	bl	800605c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	699a      	ldr	r2, [r3, #24]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f022 020c 	bic.w	r2, r2, #12
 8005bc0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	6999      	ldr	r1, [r3, #24]
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	689a      	ldr	r2, [r3, #8]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	619a      	str	r2, [r3, #24]
 8005bd4:	e060      	b.n	8005c98 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2b04      	cmp	r3, #4
 8005bda:	d11c      	bne.n	8005c16 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005bec:	f000 fae5 	bl	80061ba <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	699a      	ldr	r2, [r3, #24]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005bfe:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6999      	ldr	r1, [r3, #24]
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	021a      	lsls	r2, r3, #8
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	430a      	orrs	r2, r1
 8005c12:	619a      	str	r2, [r3, #24]
 8005c14:	e040      	b.n	8005c98 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2b08      	cmp	r3, #8
 8005c1a:	d11b      	bne.n	8005c54 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005c2c:	f000 fb32 	bl	8006294 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	69da      	ldr	r2, [r3, #28]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f022 020c 	bic.w	r2, r2, #12
 8005c3e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	69d9      	ldr	r1, [r3, #28]
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	689a      	ldr	r2, [r3, #8]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	61da      	str	r2, [r3, #28]
 8005c52:	e021      	b.n	8005c98 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b0c      	cmp	r3, #12
 8005c58:	d11c      	bne.n	8005c94 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005c6a:	f000 fb4f 	bl	800630c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	69da      	ldr	r2, [r3, #28]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005c7c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	69d9      	ldr	r1, [r3, #28]
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	021a      	lsls	r2, r3, #8
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	61da      	str	r2, [r3, #28]
 8005c92:	e001      	b.n	8005c98 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ca0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3718      	adds	r7, #24
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b082      	sub	sp, #8
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
 8005cb2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d101      	bne.n	8005cc2 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005cbe:	2302      	movs	r3, #2
 8005cc0:	e031      	b.n	8005d26 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2202      	movs	r2, #2
 8005cce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005cd2:	6839      	ldr	r1, [r7, #0]
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 f8d7 	bl	8005e88 <TIM_SlaveTimer_SetConfig>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d009      	beq.n	8005cf4 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e018      	b.n	8005d26 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68da      	ldr	r2, [r3, #12]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d02:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68da      	ldr	r2, [r3, #12]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005d12:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3708      	adds	r7, #8
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
	...

08005d30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a47      	ldr	r2, [pc, #284]	@ (8005e60 <TIM_Base_SetConfig+0x130>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d013      	beq.n	8005d70 <TIM_Base_SetConfig+0x40>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d4e:	d00f      	beq.n	8005d70 <TIM_Base_SetConfig+0x40>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a44      	ldr	r2, [pc, #272]	@ (8005e64 <TIM_Base_SetConfig+0x134>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d00b      	beq.n	8005d70 <TIM_Base_SetConfig+0x40>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a43      	ldr	r2, [pc, #268]	@ (8005e68 <TIM_Base_SetConfig+0x138>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d007      	beq.n	8005d70 <TIM_Base_SetConfig+0x40>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a42      	ldr	r2, [pc, #264]	@ (8005e6c <TIM_Base_SetConfig+0x13c>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d003      	beq.n	8005d70 <TIM_Base_SetConfig+0x40>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a41      	ldr	r2, [pc, #260]	@ (8005e70 <TIM_Base_SetConfig+0x140>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d108      	bne.n	8005d82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a36      	ldr	r2, [pc, #216]	@ (8005e60 <TIM_Base_SetConfig+0x130>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d027      	beq.n	8005dda <TIM_Base_SetConfig+0xaa>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d90:	d023      	beq.n	8005dda <TIM_Base_SetConfig+0xaa>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a33      	ldr	r2, [pc, #204]	@ (8005e64 <TIM_Base_SetConfig+0x134>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d01f      	beq.n	8005dda <TIM_Base_SetConfig+0xaa>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a32      	ldr	r2, [pc, #200]	@ (8005e68 <TIM_Base_SetConfig+0x138>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d01b      	beq.n	8005dda <TIM_Base_SetConfig+0xaa>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a31      	ldr	r2, [pc, #196]	@ (8005e6c <TIM_Base_SetConfig+0x13c>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d017      	beq.n	8005dda <TIM_Base_SetConfig+0xaa>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a30      	ldr	r2, [pc, #192]	@ (8005e70 <TIM_Base_SetConfig+0x140>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d013      	beq.n	8005dda <TIM_Base_SetConfig+0xaa>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a2f      	ldr	r2, [pc, #188]	@ (8005e74 <TIM_Base_SetConfig+0x144>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d00f      	beq.n	8005dda <TIM_Base_SetConfig+0xaa>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a2e      	ldr	r2, [pc, #184]	@ (8005e78 <TIM_Base_SetConfig+0x148>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d00b      	beq.n	8005dda <TIM_Base_SetConfig+0xaa>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a2d      	ldr	r2, [pc, #180]	@ (8005e7c <TIM_Base_SetConfig+0x14c>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d007      	beq.n	8005dda <TIM_Base_SetConfig+0xaa>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a2c      	ldr	r2, [pc, #176]	@ (8005e80 <TIM_Base_SetConfig+0x150>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d003      	beq.n	8005dda <TIM_Base_SetConfig+0xaa>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a2b      	ldr	r2, [pc, #172]	@ (8005e84 <TIM_Base_SetConfig+0x154>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d108      	bne.n	8005dec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005de0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	689a      	ldr	r2, [r3, #8]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a14      	ldr	r2, [pc, #80]	@ (8005e60 <TIM_Base_SetConfig+0x130>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d00f      	beq.n	8005e32 <TIM_Base_SetConfig+0x102>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a16      	ldr	r2, [pc, #88]	@ (8005e70 <TIM_Base_SetConfig+0x140>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d00b      	beq.n	8005e32 <TIM_Base_SetConfig+0x102>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a15      	ldr	r2, [pc, #84]	@ (8005e74 <TIM_Base_SetConfig+0x144>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d007      	beq.n	8005e32 <TIM_Base_SetConfig+0x102>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a14      	ldr	r2, [pc, #80]	@ (8005e78 <TIM_Base_SetConfig+0x148>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d003      	beq.n	8005e32 <TIM_Base_SetConfig+0x102>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a13      	ldr	r2, [pc, #76]	@ (8005e7c <TIM_Base_SetConfig+0x14c>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d103      	bne.n	8005e3a <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	691a      	ldr	r2, [r3, #16]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f043 0204 	orr.w	r2, r3, #4
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	601a      	str	r2, [r3, #0]
}
 8005e52:	bf00      	nop
 8005e54:	3714      	adds	r7, #20
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	40010000 	.word	0x40010000
 8005e64:	40000400 	.word	0x40000400
 8005e68:	40000800 	.word	0x40000800
 8005e6c:	40000c00 	.word	0x40000c00
 8005e70:	40010400 	.word	0x40010400
 8005e74:	40014000 	.word	0x40014000
 8005e78:	40014400 	.word	0x40014400
 8005e7c:	40014800 	.word	0x40014800
 8005e80:	4000e000 	.word	0x4000e000
 8005e84:	4000e400 	.word	0x4000e400

08005e88 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b086      	sub	sp, #24
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e92:	2300      	movs	r3, #0
 8005e94:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	4b65      	ldr	r3, [pc, #404]	@ (8006038 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	4b62      	ldr	r3, [pc, #392]	@ (800603c <TIM_SlaveTimer_SetConfig+0x1b4>)
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	4a5c      	ldr	r2, [pc, #368]	@ (8006040 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	f000 80ab 	beq.w	800602c <TIM_SlaveTimer_SetConfig+0x1a4>
 8005ed6:	4a5a      	ldr	r2, [pc, #360]	@ (8006040 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	f200 80a4 	bhi.w	8006026 <TIM_SlaveTimer_SetConfig+0x19e>
 8005ede:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ee2:	f000 80a3 	beq.w	800602c <TIM_SlaveTimer_SetConfig+0x1a4>
 8005ee6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005eea:	f200 809c 	bhi.w	8006026 <TIM_SlaveTimer_SetConfig+0x19e>
 8005eee:	4a55      	ldr	r2, [pc, #340]	@ (8006044 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	f000 809b 	beq.w	800602c <TIM_SlaveTimer_SetConfig+0x1a4>
 8005ef6:	4a53      	ldr	r2, [pc, #332]	@ (8006044 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	f200 8094 	bhi.w	8006026 <TIM_SlaveTimer_SetConfig+0x19e>
 8005efe:	4a52      	ldr	r2, [pc, #328]	@ (8006048 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	f000 8093 	beq.w	800602c <TIM_SlaveTimer_SetConfig+0x1a4>
 8005f06:	4a50      	ldr	r2, [pc, #320]	@ (8006048 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	f200 808c 	bhi.w	8006026 <TIM_SlaveTimer_SetConfig+0x19e>
 8005f0e:	4a4f      	ldr	r2, [pc, #316]	@ (800604c <TIM_SlaveTimer_SetConfig+0x1c4>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	f000 808b 	beq.w	800602c <TIM_SlaveTimer_SetConfig+0x1a4>
 8005f16:	4a4d      	ldr	r2, [pc, #308]	@ (800604c <TIM_SlaveTimer_SetConfig+0x1c4>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	f200 8084 	bhi.w	8006026 <TIM_SlaveTimer_SetConfig+0x19e>
 8005f1e:	4a4c      	ldr	r2, [pc, #304]	@ (8006050 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	f000 8083 	beq.w	800602c <TIM_SlaveTimer_SetConfig+0x1a4>
 8005f26:	4a4a      	ldr	r2, [pc, #296]	@ (8006050 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d87c      	bhi.n	8006026 <TIM_SlaveTimer_SetConfig+0x19e>
 8005f2c:	4a49      	ldr	r2, [pc, #292]	@ (8006054 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d07c      	beq.n	800602c <TIM_SlaveTimer_SetConfig+0x1a4>
 8005f32:	4a48      	ldr	r2, [pc, #288]	@ (8006054 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d876      	bhi.n	8006026 <TIM_SlaveTimer_SetConfig+0x19e>
 8005f38:	4a47      	ldr	r2, [pc, #284]	@ (8006058 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d076      	beq.n	800602c <TIM_SlaveTimer_SetConfig+0x1a4>
 8005f3e:	4a46      	ldr	r2, [pc, #280]	@ (8006058 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d870      	bhi.n	8006026 <TIM_SlaveTimer_SetConfig+0x19e>
 8005f44:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005f48:	d070      	beq.n	800602c <TIM_SlaveTimer_SetConfig+0x1a4>
 8005f4a:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005f4e:	d86a      	bhi.n	8006026 <TIM_SlaveTimer_SetConfig+0x19e>
 8005f50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f54:	d06a      	beq.n	800602c <TIM_SlaveTimer_SetConfig+0x1a4>
 8005f56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f5a:	d864      	bhi.n	8006026 <TIM_SlaveTimer_SetConfig+0x19e>
 8005f5c:	2b70      	cmp	r3, #112	@ 0x70
 8005f5e:	d01a      	beq.n	8005f96 <TIM_SlaveTimer_SetConfig+0x10e>
 8005f60:	2b70      	cmp	r3, #112	@ 0x70
 8005f62:	d860      	bhi.n	8006026 <TIM_SlaveTimer_SetConfig+0x19e>
 8005f64:	2b60      	cmp	r3, #96	@ 0x60
 8005f66:	d054      	beq.n	8006012 <TIM_SlaveTimer_SetConfig+0x18a>
 8005f68:	2b60      	cmp	r3, #96	@ 0x60
 8005f6a:	d85c      	bhi.n	8006026 <TIM_SlaveTimer_SetConfig+0x19e>
 8005f6c:	2b50      	cmp	r3, #80	@ 0x50
 8005f6e:	d046      	beq.n	8005ffe <TIM_SlaveTimer_SetConfig+0x176>
 8005f70:	2b50      	cmp	r3, #80	@ 0x50
 8005f72:	d858      	bhi.n	8006026 <TIM_SlaveTimer_SetConfig+0x19e>
 8005f74:	2b40      	cmp	r3, #64	@ 0x40
 8005f76:	d019      	beq.n	8005fac <TIM_SlaveTimer_SetConfig+0x124>
 8005f78:	2b40      	cmp	r3, #64	@ 0x40
 8005f7a:	d854      	bhi.n	8006026 <TIM_SlaveTimer_SetConfig+0x19e>
 8005f7c:	2b30      	cmp	r3, #48	@ 0x30
 8005f7e:	d055      	beq.n	800602c <TIM_SlaveTimer_SetConfig+0x1a4>
 8005f80:	2b30      	cmp	r3, #48	@ 0x30
 8005f82:	d850      	bhi.n	8006026 <TIM_SlaveTimer_SetConfig+0x19e>
 8005f84:	2b20      	cmp	r3, #32
 8005f86:	d051      	beq.n	800602c <TIM_SlaveTimer_SetConfig+0x1a4>
 8005f88:	2b20      	cmp	r3, #32
 8005f8a:	d84c      	bhi.n	8006026 <TIM_SlaveTimer_SetConfig+0x19e>
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d04d      	beq.n	800602c <TIM_SlaveTimer_SetConfig+0x1a4>
 8005f90:	2b10      	cmp	r3, #16
 8005f92:	d04b      	beq.n	800602c <TIM_SlaveTimer_SetConfig+0x1a4>
 8005f94:	e047      	b.n	8006026 <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005fa6:	f000 f9ee 	bl	8006386 <TIM_ETR_SetConfig>
      break;
 8005faa:	e040      	b.n	800602e <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2b05      	cmp	r3, #5
 8005fb2:	d101      	bne.n	8005fb8 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e03b      	b.n	8006030 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6a1b      	ldr	r3, [r3, #32]
 8005fbe:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	6a1a      	ldr	r2, [r3, #32]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f022 0201 	bic.w	r2, r2, #1
 8005fce:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005fde:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	011b      	lsls	r3, r3, #4
 8005fe6:	68ba      	ldr	r2, [r7, #8]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68ba      	ldr	r2, [r7, #8]
 8005ff2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	621a      	str	r2, [r3, #32]
      break;
 8005ffc:	e017      	b.n	800602e <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800600a:	461a      	mov	r2, r3
 800600c:	f000 f8a6 	bl	800615c <TIM_TI1_ConfigInputStage>
      break;
 8006010:	e00d      	b.n	800602e <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800601e:	461a      	mov	r2, r3
 8006020:	f000 f908 	bl	8006234 <TIM_TI2_ConfigInputStage>
      break;
 8006024:	e003      	b.n	800602e <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	75fb      	strb	r3, [r7, #23]
      break;
 800602a:	e000      	b.n	800602e <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 800602c:	bf00      	nop
  }

  return status;
 800602e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006030:	4618      	mov	r0, r3
 8006032:	3718      	adds	r7, #24
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	ffcfff8f 	.word	0xffcfff8f
 800603c:	fffefff8 	.word	0xfffefff8
 8006040:	00200010 	.word	0x00200010
 8006044:	00100070 	.word	0x00100070
 8006048:	00100060 	.word	0x00100060
 800604c:	00100050 	.word	0x00100050
 8006050:	00100040 	.word	0x00100040
 8006054:	00100030 	.word	0x00100030
 8006058:	00100020 	.word	0x00100020

0800605c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800605c:	b480      	push	{r7}
 800605e:	b087      	sub	sp, #28
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
 8006068:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6a1b      	ldr	r3, [r3, #32]
 8006074:	f023 0201 	bic.w	r2, r3, #1
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	699b      	ldr	r3, [r3, #24]
 8006080:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	4a2c      	ldr	r2, [pc, #176]	@ (8006138 <TIM_TI1_SetConfig+0xdc>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d023      	beq.n	80060d2 <TIM_TI1_SetConfig+0x76>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006090:	d01f      	beq.n	80060d2 <TIM_TI1_SetConfig+0x76>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	4a29      	ldr	r2, [pc, #164]	@ (800613c <TIM_TI1_SetConfig+0xe0>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d01b      	beq.n	80060d2 <TIM_TI1_SetConfig+0x76>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	4a28      	ldr	r2, [pc, #160]	@ (8006140 <TIM_TI1_SetConfig+0xe4>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d017      	beq.n	80060d2 <TIM_TI1_SetConfig+0x76>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	4a27      	ldr	r2, [pc, #156]	@ (8006144 <TIM_TI1_SetConfig+0xe8>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d013      	beq.n	80060d2 <TIM_TI1_SetConfig+0x76>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	4a26      	ldr	r2, [pc, #152]	@ (8006148 <TIM_TI1_SetConfig+0xec>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d00f      	beq.n	80060d2 <TIM_TI1_SetConfig+0x76>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	4a25      	ldr	r2, [pc, #148]	@ (800614c <TIM_TI1_SetConfig+0xf0>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d00b      	beq.n	80060d2 <TIM_TI1_SetConfig+0x76>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	4a24      	ldr	r2, [pc, #144]	@ (8006150 <TIM_TI1_SetConfig+0xf4>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d007      	beq.n	80060d2 <TIM_TI1_SetConfig+0x76>
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	4a23      	ldr	r2, [pc, #140]	@ (8006154 <TIM_TI1_SetConfig+0xf8>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d003      	beq.n	80060d2 <TIM_TI1_SetConfig+0x76>
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	4a22      	ldr	r2, [pc, #136]	@ (8006158 <TIM_TI1_SetConfig+0xfc>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d101      	bne.n	80060d6 <TIM_TI1_SetConfig+0x7a>
 80060d2:	2301      	movs	r3, #1
 80060d4:	e000      	b.n	80060d8 <TIM_TI1_SetConfig+0x7c>
 80060d6:	2300      	movs	r3, #0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d008      	beq.n	80060ee <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	f023 0303 	bic.w	r3, r3, #3
 80060e2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80060e4:	697a      	ldr	r2, [r7, #20]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	617b      	str	r3, [r7, #20]
 80060ec:	e003      	b.n	80060f6 <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	f043 0301 	orr.w	r3, r3, #1
 80060f4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80060fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	011b      	lsls	r3, r3, #4
 8006102:	b2db      	uxtb	r3, r3
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	4313      	orrs	r3, r2
 8006108:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	f023 030a 	bic.w	r3, r3, #10
 8006110:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	f003 030a 	and.w	r3, r3, #10
 8006118:	693a      	ldr	r2, [r7, #16]
 800611a:	4313      	orrs	r3, r2
 800611c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	697a      	ldr	r2, [r7, #20]
 8006122:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	621a      	str	r2, [r3, #32]
}
 800612a:	bf00      	nop
 800612c:	371c      	adds	r7, #28
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	40010000 	.word	0x40010000
 800613c:	40000400 	.word	0x40000400
 8006140:	40000800 	.word	0x40000800
 8006144:	40000c00 	.word	0x40000c00
 8006148:	40010400 	.word	0x40010400
 800614c:	40001800 	.word	0x40001800
 8006150:	40014000 	.word	0x40014000
 8006154:	4000e000 	.word	0x4000e000
 8006158:	4000e400 	.word	0x4000e400

0800615c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6a1b      	ldr	r3, [r3, #32]
 800616c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6a1b      	ldr	r3, [r3, #32]
 8006172:	f023 0201 	bic.w	r2, r3, #1
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006186:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	011b      	lsls	r3, r3, #4
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	4313      	orrs	r3, r2
 8006190:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	f023 030a 	bic.w	r3, r3, #10
 8006198:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	4313      	orrs	r3, r2
 80061a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	621a      	str	r2, [r3, #32]
}
 80061ae:	bf00      	nop
 80061b0:	371c      	adds	r7, #28
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b087      	sub	sp, #28
 80061be:	af00      	add	r7, sp, #0
 80061c0:	60f8      	str	r0, [r7, #12]
 80061c2:	60b9      	str	r1, [r7, #8]
 80061c4:	607a      	str	r2, [r7, #4]
 80061c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6a1b      	ldr	r3, [r3, #32]
 80061cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	f023 0210 	bic.w	r2, r3, #16
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	021b      	lsls	r3, r3, #8
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80061f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	031b      	lsls	r3, r3, #12
 80061fe:	b29b      	uxth	r3, r3
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	4313      	orrs	r3, r2
 8006204:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800620c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	011b      	lsls	r3, r3, #4
 8006212:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	4313      	orrs	r3, r2
 800621a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	697a      	ldr	r2, [r7, #20]
 8006226:	621a      	str	r2, [r3, #32]
}
 8006228:	bf00      	nop
 800622a:	371c      	adds	r7, #28
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006234:	b480      	push	{r7}
 8006236:	b087      	sub	sp, #28
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6a1b      	ldr	r3, [r3, #32]
 8006244:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	f023 0210 	bic.w	r2, r3, #16
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800625e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	031b      	lsls	r3, r3, #12
 8006264:	693a      	ldr	r2, [r7, #16]
 8006266:	4313      	orrs	r3, r2
 8006268:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006270:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	011b      	lsls	r3, r3, #4
 8006276:	697a      	ldr	r2, [r7, #20]
 8006278:	4313      	orrs	r3, r2
 800627a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	697a      	ldr	r2, [r7, #20]
 8006286:	621a      	str	r2, [r3, #32]
}
 8006288:	bf00      	nop
 800628a:	371c      	adds	r7, #28
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006294:	b480      	push	{r7}
 8006296:	b087      	sub	sp, #28
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
 80062a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6a1b      	ldr	r3, [r3, #32]
 80062a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6a1b      	ldr	r3, [r3, #32]
 80062ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	69db      	ldr	r3, [r3, #28]
 80062b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	f023 0303 	bic.w	r3, r3, #3
 80062c0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80062c2:	693a      	ldr	r2, [r7, #16]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062d0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	011b      	lsls	r3, r3, #4
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	4313      	orrs	r3, r2
 80062dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80062e4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	021b      	lsls	r3, r3, #8
 80062ea:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	693a      	ldr	r2, [r7, #16]
 80062f8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	697a      	ldr	r2, [r7, #20]
 80062fe:	621a      	str	r2, [r3, #32]
}
 8006300:	bf00      	nop
 8006302:	371c      	adds	r7, #28
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800630c:	b480      	push	{r7}
 800630e:	b087      	sub	sp, #28
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
 8006318:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6a1b      	ldr	r3, [r3, #32]
 8006324:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	69db      	ldr	r3, [r3, #28]
 8006330:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006338:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	021b      	lsls	r3, r3, #8
 800633e:	693a      	ldr	r2, [r7, #16]
 8006340:	4313      	orrs	r3, r2
 8006342:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800634a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	031b      	lsls	r3, r3, #12
 8006350:	b29b      	uxth	r3, r3
 8006352:	693a      	ldr	r2, [r7, #16]
 8006354:	4313      	orrs	r3, r2
 8006356:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800635e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	031b      	lsls	r3, r3, #12
 8006364:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	4313      	orrs	r3, r2
 800636c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	693a      	ldr	r2, [r7, #16]
 8006372:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	621a      	str	r2, [r3, #32]
}
 800637a:	bf00      	nop
 800637c:	371c      	adds	r7, #28
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr

08006386 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006386:	b480      	push	{r7}
 8006388:	b087      	sub	sp, #28
 800638a:	af00      	add	r7, sp, #0
 800638c:	60f8      	str	r0, [r7, #12]
 800638e:	60b9      	str	r1, [r7, #8]
 8006390:	607a      	str	r2, [r7, #4]
 8006392:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80063a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	021a      	lsls	r2, r3, #8
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	431a      	orrs	r2, r3
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	697a      	ldr	r2, [r7, #20]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	697a      	ldr	r2, [r7, #20]
 80063b8:	609a      	str	r2, [r3, #8]
}
 80063ba:	bf00      	nop
 80063bc:	371c      	adds	r7, #28
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
	...

080063c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d101      	bne.n	80063e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063dc:	2302      	movs	r3, #2
 80063de:	e077      	b.n	80064d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2202      	movs	r2, #2
 80063ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a35      	ldr	r2, [pc, #212]	@ (80064dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d004      	beq.n	8006414 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a34      	ldr	r2, [pc, #208]	@ (80064e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d108      	bne.n	8006426 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800641a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	4313      	orrs	r3, r2
 8006424:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800642c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	4313      	orrs	r3, r2
 8006436:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a25      	ldr	r2, [pc, #148]	@ (80064dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d02c      	beq.n	80064a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006452:	d027      	beq.n	80064a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a22      	ldr	r2, [pc, #136]	@ (80064e4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d022      	beq.n	80064a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a21      	ldr	r2, [pc, #132]	@ (80064e8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d01d      	beq.n	80064a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a1f      	ldr	r2, [pc, #124]	@ (80064ec <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d018      	beq.n	80064a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a1a      	ldr	r2, [pc, #104]	@ (80064e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d013      	beq.n	80064a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a1b      	ldr	r2, [pc, #108]	@ (80064f0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d00e      	beq.n	80064a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a1a      	ldr	r2, [pc, #104]	@ (80064f4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d009      	beq.n	80064a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a18      	ldr	r2, [pc, #96]	@ (80064f8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d004      	beq.n	80064a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a17      	ldr	r2, [pc, #92]	@ (80064fc <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d10c      	bne.n	80064be <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	68ba      	ldr	r2, [r7, #8]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68ba      	ldr	r2, [r7, #8]
 80064bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3714      	adds	r7, #20
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr
 80064dc:	40010000 	.word	0x40010000
 80064e0:	40010400 	.word	0x40010400
 80064e4:	40000400 	.word	0x40000400
 80064e8:	40000800 	.word	0x40000800
 80064ec:	40000c00 	.word	0x40000c00
 80064f0:	40001800 	.word	0x40001800
 80064f4:	40014000 	.word	0x40014000
 80064f8:	4000e000 	.word	0x4000e000
 80064fc:	4000e400 	.word	0x4000e400

08006500 <HAL_TIMEx_TISelection>:
  *
  *         (*)  Value not defined in all devices. \n
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_TIMEx_TISelection(TIM_HandleTypeDef *htim, uint32_t TISelection, uint32_t Channel)
{
 8006500:	b480      	push	{r7}
 8006502:	b087      	sub	sp, #28
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800650c:	2300      	movs	r3, #0
 800650e:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_TIM_TISEL_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TISEL(TISelection));

  __HAL_LOCK(htim);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006516:	2b01      	cmp	r3, #1
 8006518:	d101      	bne.n	800651e <HAL_TIMEx_TISelection+0x1e>
 800651a:	2302      	movs	r3, #2
 800651c:	e058      	b.n	80065d0 <HAL_TIMEx_TISelection+0xd0>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2b0c      	cmp	r3, #12
 800652a:	d849      	bhi.n	80065c0 <HAL_TIMEx_TISelection+0xc0>
 800652c:	a201      	add	r2, pc, #4	@ (adr r2, 8006534 <HAL_TIMEx_TISelection+0x34>)
 800652e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006532:	bf00      	nop
 8006534:	08006569 	.word	0x08006569
 8006538:	080065c1 	.word	0x080065c1
 800653c:	080065c1 	.word	0x080065c1
 8006540:	080065c1 	.word	0x080065c1
 8006544:	0800657f 	.word	0x0800657f
 8006548:	080065c1 	.word	0x080065c1
 800654c:	080065c1 	.word	0x080065c1
 8006550:	080065c1 	.word	0x080065c1
 8006554:	08006595 	.word	0x08006595
 8006558:	080065c1 	.word	0x080065c1
 800655c:	080065c1 	.word	0x080065c1
 8006560:	080065c1 	.word	0x080065c1
 8006564:	080065ab 	.word	0x080065ab
  {
    case TIM_CHANNEL_1:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI1SEL, TISelection);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800656e:	f023 010f 	bic.w	r1, r3, #15
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68ba      	ldr	r2, [r7, #8]
 8006578:	430a      	orrs	r2, r1
 800657a:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800657c:	e023      	b.n	80065c6 <HAL_TIMEx_TISelection+0xc6>
    case TIM_CHANNEL_2:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI2SEL, TISelection);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006584:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	430a      	orrs	r2, r1
 8006590:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8006592:	e018      	b.n	80065c6 <HAL_TIMEx_TISelection+0xc6>
    case TIM_CHANNEL_3:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI3SEL, TISelection);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800659a:	f423 2170 	bic.w	r1, r3, #983040	@ 0xf0000
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68ba      	ldr	r2, [r7, #8]
 80065a4:	430a      	orrs	r2, r1
 80065a6:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 80065a8:	e00d      	b.n	80065c6 <HAL_TIMEx_TISelection+0xc6>
    case TIM_CHANNEL_4:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI4SEL, TISelection);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065b0:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68ba      	ldr	r2, [r7, #8]
 80065ba:	430a      	orrs	r2, r1
 80065bc:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 80065be:	e002      	b.n	80065c6 <HAL_TIMEx_TISelection+0xc6>
    default:
      status = HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	75fb      	strb	r3, [r7, #23]
      break;
 80065c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80065ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	371c      	adds	r7, #28
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b082      	sub	sp, #8
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d101      	bne.n	80065ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e042      	b.n	8006674 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d106      	bne.n	8006606 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f7fb fab1 	bl	8001b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2224      	movs	r2, #36	@ 0x24
 800660a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f022 0201 	bic.w	r2, r2, #1
 800661c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006622:	2b00      	cmp	r3, #0
 8006624:	d002      	beq.n	800662c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 ff22 	bl	8007470 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 f8b3 	bl	8006798 <UART_SetConfig>
 8006632:	4603      	mov	r3, r0
 8006634:	2b01      	cmp	r3, #1
 8006636:	d101      	bne.n	800663c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	e01b      	b.n	8006674 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	685a      	ldr	r2, [r3, #4]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800664a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	689a      	ldr	r2, [r3, #8]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800665a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f042 0201 	orr.w	r2, r2, #1
 800666a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 ffa1 	bl	80075b4 <UART_CheckIdleState>
 8006672:	4603      	mov	r3, r0
}
 8006674:	4618      	mov	r0, r3
 8006676:	3708      	adds	r7, #8
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b08a      	sub	sp, #40	@ 0x28
 8006680:	af02      	add	r7, sp, #8
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	603b      	str	r3, [r7, #0]
 8006688:	4613      	mov	r3, r2
 800668a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006692:	2b20      	cmp	r3, #32
 8006694:	d17b      	bne.n	800678e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d002      	beq.n	80066a2 <HAL_UART_Transmit+0x26>
 800669c:	88fb      	ldrh	r3, [r7, #6]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d101      	bne.n	80066a6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e074      	b.n	8006790 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2221      	movs	r2, #33	@ 0x21
 80066b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066b6:	f7fb fcb9 	bl	800202c <HAL_GetTick>
 80066ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	88fa      	ldrh	r2, [r7, #6]
 80066c0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	88fa      	ldrh	r2, [r7, #6]
 80066c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066d4:	d108      	bne.n	80066e8 <HAL_UART_Transmit+0x6c>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d104      	bne.n	80066e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80066de:	2300      	movs	r3, #0
 80066e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	61bb      	str	r3, [r7, #24]
 80066e6:	e003      	b.n	80066f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066ec:	2300      	movs	r3, #0
 80066ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80066f0:	e030      	b.n	8006754 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	2200      	movs	r2, #0
 80066fa:	2180      	movs	r1, #128	@ 0x80
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f001 f803 	bl	8007708 <UART_WaitOnFlagUntilTimeout>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d005      	beq.n	8006714 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2220      	movs	r2, #32
 800670c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	e03d      	b.n	8006790 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d10b      	bne.n	8006732 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	881b      	ldrh	r3, [r3, #0]
 800671e:	461a      	mov	r2, r3
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006728:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	3302      	adds	r3, #2
 800672e:	61bb      	str	r3, [r7, #24]
 8006730:	e007      	b.n	8006742 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	781a      	ldrb	r2, [r3, #0]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	3301      	adds	r3, #1
 8006740:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006748:	b29b      	uxth	r3, r3
 800674a:	3b01      	subs	r3, #1
 800674c:	b29a      	uxth	r2, r3
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800675a:	b29b      	uxth	r3, r3
 800675c:	2b00      	cmp	r3, #0
 800675e:	d1c8      	bne.n	80066f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	9300      	str	r3, [sp, #0]
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	2200      	movs	r2, #0
 8006768:	2140      	movs	r1, #64	@ 0x40
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f000 ffcc 	bl	8007708 <UART_WaitOnFlagUntilTimeout>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d005      	beq.n	8006782 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2220      	movs	r2, #32
 800677a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	e006      	b.n	8006790 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2220      	movs	r2, #32
 8006786:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800678a:	2300      	movs	r3, #0
 800678c:	e000      	b.n	8006790 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800678e:	2302      	movs	r3, #2
  }
}
 8006790:	4618      	mov	r0, r3
 8006792:	3720      	adds	r7, #32
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800679c:	b092      	sub	sp, #72	@ 0x48
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80067a2:	2300      	movs	r3, #0
 80067a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	689a      	ldr	r2, [r3, #8]
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	431a      	orrs	r2, r3
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	695b      	ldr	r3, [r3, #20]
 80067b6:	431a      	orrs	r2, r3
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	69db      	ldr	r3, [r3, #28]
 80067bc:	4313      	orrs	r3, r2
 80067be:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	4bbe      	ldr	r3, [pc, #760]	@ (8006ac0 <UART_SetConfig+0x328>)
 80067c8:	4013      	ands	r3, r2
 80067ca:	697a      	ldr	r2, [r7, #20]
 80067cc:	6812      	ldr	r2, [r2, #0]
 80067ce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80067d0:	430b      	orrs	r3, r1
 80067d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	68da      	ldr	r2, [r3, #12]
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	430a      	orrs	r2, r1
 80067e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4ab3      	ldr	r2, [pc, #716]	@ (8006ac4 <UART_SetConfig+0x32c>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d004      	beq.n	8006804 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	6a1b      	ldr	r3, [r3, #32]
 80067fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006800:	4313      	orrs	r3, r2
 8006802:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	689a      	ldr	r2, [r3, #8]
 800680a:	4baf      	ldr	r3, [pc, #700]	@ (8006ac8 <UART_SetConfig+0x330>)
 800680c:	4013      	ands	r3, r2
 800680e:	697a      	ldr	r2, [r7, #20]
 8006810:	6812      	ldr	r2, [r2, #0]
 8006812:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006814:	430b      	orrs	r3, r1
 8006816:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800681e:	f023 010f 	bic.w	r1, r3, #15
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	430a      	orrs	r2, r1
 800682c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4aa6      	ldr	r2, [pc, #664]	@ (8006acc <UART_SetConfig+0x334>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d177      	bne.n	8006928 <UART_SetConfig+0x190>
 8006838:	4ba5      	ldr	r3, [pc, #660]	@ (8006ad0 <UART_SetConfig+0x338>)
 800683a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800683c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006840:	2b28      	cmp	r3, #40	@ 0x28
 8006842:	d86d      	bhi.n	8006920 <UART_SetConfig+0x188>
 8006844:	a201      	add	r2, pc, #4	@ (adr r2, 800684c <UART_SetConfig+0xb4>)
 8006846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800684a:	bf00      	nop
 800684c:	080068f1 	.word	0x080068f1
 8006850:	08006921 	.word	0x08006921
 8006854:	08006921 	.word	0x08006921
 8006858:	08006921 	.word	0x08006921
 800685c:	08006921 	.word	0x08006921
 8006860:	08006921 	.word	0x08006921
 8006864:	08006921 	.word	0x08006921
 8006868:	08006921 	.word	0x08006921
 800686c:	080068f9 	.word	0x080068f9
 8006870:	08006921 	.word	0x08006921
 8006874:	08006921 	.word	0x08006921
 8006878:	08006921 	.word	0x08006921
 800687c:	08006921 	.word	0x08006921
 8006880:	08006921 	.word	0x08006921
 8006884:	08006921 	.word	0x08006921
 8006888:	08006921 	.word	0x08006921
 800688c:	08006901 	.word	0x08006901
 8006890:	08006921 	.word	0x08006921
 8006894:	08006921 	.word	0x08006921
 8006898:	08006921 	.word	0x08006921
 800689c:	08006921 	.word	0x08006921
 80068a0:	08006921 	.word	0x08006921
 80068a4:	08006921 	.word	0x08006921
 80068a8:	08006921 	.word	0x08006921
 80068ac:	08006909 	.word	0x08006909
 80068b0:	08006921 	.word	0x08006921
 80068b4:	08006921 	.word	0x08006921
 80068b8:	08006921 	.word	0x08006921
 80068bc:	08006921 	.word	0x08006921
 80068c0:	08006921 	.word	0x08006921
 80068c4:	08006921 	.word	0x08006921
 80068c8:	08006921 	.word	0x08006921
 80068cc:	08006911 	.word	0x08006911
 80068d0:	08006921 	.word	0x08006921
 80068d4:	08006921 	.word	0x08006921
 80068d8:	08006921 	.word	0x08006921
 80068dc:	08006921 	.word	0x08006921
 80068e0:	08006921 	.word	0x08006921
 80068e4:	08006921 	.word	0x08006921
 80068e8:	08006921 	.word	0x08006921
 80068ec:	08006919 	.word	0x08006919
 80068f0:	2301      	movs	r3, #1
 80068f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068f6:	e326      	b.n	8006f46 <UART_SetConfig+0x7ae>
 80068f8:	2304      	movs	r3, #4
 80068fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068fe:	e322      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006900:	2308      	movs	r3, #8
 8006902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006906:	e31e      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006908:	2310      	movs	r3, #16
 800690a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800690e:	e31a      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006910:	2320      	movs	r3, #32
 8006912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006916:	e316      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006918:	2340      	movs	r3, #64	@ 0x40
 800691a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800691e:	e312      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006920:	2380      	movs	r3, #128	@ 0x80
 8006922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006926:	e30e      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a69      	ldr	r2, [pc, #420]	@ (8006ad4 <UART_SetConfig+0x33c>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d130      	bne.n	8006994 <UART_SetConfig+0x1fc>
 8006932:	4b67      	ldr	r3, [pc, #412]	@ (8006ad0 <UART_SetConfig+0x338>)
 8006934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006936:	f003 0307 	and.w	r3, r3, #7
 800693a:	2b05      	cmp	r3, #5
 800693c:	d826      	bhi.n	800698c <UART_SetConfig+0x1f4>
 800693e:	a201      	add	r2, pc, #4	@ (adr r2, 8006944 <UART_SetConfig+0x1ac>)
 8006940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006944:	0800695d 	.word	0x0800695d
 8006948:	08006965 	.word	0x08006965
 800694c:	0800696d 	.word	0x0800696d
 8006950:	08006975 	.word	0x08006975
 8006954:	0800697d 	.word	0x0800697d
 8006958:	08006985 	.word	0x08006985
 800695c:	2300      	movs	r3, #0
 800695e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006962:	e2f0      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006964:	2304      	movs	r3, #4
 8006966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800696a:	e2ec      	b.n	8006f46 <UART_SetConfig+0x7ae>
 800696c:	2308      	movs	r3, #8
 800696e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006972:	e2e8      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006974:	2310      	movs	r3, #16
 8006976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800697a:	e2e4      	b.n	8006f46 <UART_SetConfig+0x7ae>
 800697c:	2320      	movs	r3, #32
 800697e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006982:	e2e0      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006984:	2340      	movs	r3, #64	@ 0x40
 8006986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800698a:	e2dc      	b.n	8006f46 <UART_SetConfig+0x7ae>
 800698c:	2380      	movs	r3, #128	@ 0x80
 800698e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006992:	e2d8      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a4f      	ldr	r2, [pc, #316]	@ (8006ad8 <UART_SetConfig+0x340>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d130      	bne.n	8006a00 <UART_SetConfig+0x268>
 800699e:	4b4c      	ldr	r3, [pc, #304]	@ (8006ad0 <UART_SetConfig+0x338>)
 80069a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069a2:	f003 0307 	and.w	r3, r3, #7
 80069a6:	2b05      	cmp	r3, #5
 80069a8:	d826      	bhi.n	80069f8 <UART_SetConfig+0x260>
 80069aa:	a201      	add	r2, pc, #4	@ (adr r2, 80069b0 <UART_SetConfig+0x218>)
 80069ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b0:	080069c9 	.word	0x080069c9
 80069b4:	080069d1 	.word	0x080069d1
 80069b8:	080069d9 	.word	0x080069d9
 80069bc:	080069e1 	.word	0x080069e1
 80069c0:	080069e9 	.word	0x080069e9
 80069c4:	080069f1 	.word	0x080069f1
 80069c8:	2300      	movs	r3, #0
 80069ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069ce:	e2ba      	b.n	8006f46 <UART_SetConfig+0x7ae>
 80069d0:	2304      	movs	r3, #4
 80069d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069d6:	e2b6      	b.n	8006f46 <UART_SetConfig+0x7ae>
 80069d8:	2308      	movs	r3, #8
 80069da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069de:	e2b2      	b.n	8006f46 <UART_SetConfig+0x7ae>
 80069e0:	2310      	movs	r3, #16
 80069e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069e6:	e2ae      	b.n	8006f46 <UART_SetConfig+0x7ae>
 80069e8:	2320      	movs	r3, #32
 80069ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069ee:	e2aa      	b.n	8006f46 <UART_SetConfig+0x7ae>
 80069f0:	2340      	movs	r3, #64	@ 0x40
 80069f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069f6:	e2a6      	b.n	8006f46 <UART_SetConfig+0x7ae>
 80069f8:	2380      	movs	r3, #128	@ 0x80
 80069fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069fe:	e2a2      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a35      	ldr	r2, [pc, #212]	@ (8006adc <UART_SetConfig+0x344>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d130      	bne.n	8006a6c <UART_SetConfig+0x2d4>
 8006a0a:	4b31      	ldr	r3, [pc, #196]	@ (8006ad0 <UART_SetConfig+0x338>)
 8006a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a0e:	f003 0307 	and.w	r3, r3, #7
 8006a12:	2b05      	cmp	r3, #5
 8006a14:	d826      	bhi.n	8006a64 <UART_SetConfig+0x2cc>
 8006a16:	a201      	add	r2, pc, #4	@ (adr r2, 8006a1c <UART_SetConfig+0x284>)
 8006a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1c:	08006a35 	.word	0x08006a35
 8006a20:	08006a3d 	.word	0x08006a3d
 8006a24:	08006a45 	.word	0x08006a45
 8006a28:	08006a4d 	.word	0x08006a4d
 8006a2c:	08006a55 	.word	0x08006a55
 8006a30:	08006a5d 	.word	0x08006a5d
 8006a34:	2300      	movs	r3, #0
 8006a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a3a:	e284      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006a3c:	2304      	movs	r3, #4
 8006a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a42:	e280      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006a44:	2308      	movs	r3, #8
 8006a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a4a:	e27c      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006a4c:	2310      	movs	r3, #16
 8006a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a52:	e278      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006a54:	2320      	movs	r3, #32
 8006a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a5a:	e274      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006a5c:	2340      	movs	r3, #64	@ 0x40
 8006a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a62:	e270      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006a64:	2380      	movs	r3, #128	@ 0x80
 8006a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a6a:	e26c      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a1b      	ldr	r2, [pc, #108]	@ (8006ae0 <UART_SetConfig+0x348>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d142      	bne.n	8006afc <UART_SetConfig+0x364>
 8006a76:	4b16      	ldr	r3, [pc, #88]	@ (8006ad0 <UART_SetConfig+0x338>)
 8006a78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a7a:	f003 0307 	and.w	r3, r3, #7
 8006a7e:	2b05      	cmp	r3, #5
 8006a80:	d838      	bhi.n	8006af4 <UART_SetConfig+0x35c>
 8006a82:	a201      	add	r2, pc, #4	@ (adr r2, 8006a88 <UART_SetConfig+0x2f0>)
 8006a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a88:	08006aa1 	.word	0x08006aa1
 8006a8c:	08006aa9 	.word	0x08006aa9
 8006a90:	08006ab1 	.word	0x08006ab1
 8006a94:	08006ab9 	.word	0x08006ab9
 8006a98:	08006ae5 	.word	0x08006ae5
 8006a9c:	08006aed 	.word	0x08006aed
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aa6:	e24e      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006aa8:	2304      	movs	r3, #4
 8006aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aae:	e24a      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006ab0:	2308      	movs	r3, #8
 8006ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ab6:	e246      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006ab8:	2310      	movs	r3, #16
 8006aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006abe:	e242      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006ac0:	cfff69f3 	.word	0xcfff69f3
 8006ac4:	58000c00 	.word	0x58000c00
 8006ac8:	11fff4ff 	.word	0x11fff4ff
 8006acc:	40011000 	.word	0x40011000
 8006ad0:	58024400 	.word	0x58024400
 8006ad4:	40004400 	.word	0x40004400
 8006ad8:	40004800 	.word	0x40004800
 8006adc:	40004c00 	.word	0x40004c00
 8006ae0:	40005000 	.word	0x40005000
 8006ae4:	2320      	movs	r3, #32
 8006ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aea:	e22c      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006aec:	2340      	movs	r3, #64	@ 0x40
 8006aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006af2:	e228      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006af4:	2380      	movs	r3, #128	@ 0x80
 8006af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006afa:	e224      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4ab1      	ldr	r2, [pc, #708]	@ (8006dc8 <UART_SetConfig+0x630>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d176      	bne.n	8006bf4 <UART_SetConfig+0x45c>
 8006b06:	4bb1      	ldr	r3, [pc, #708]	@ (8006dcc <UART_SetConfig+0x634>)
 8006b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b0a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b0e:	2b28      	cmp	r3, #40	@ 0x28
 8006b10:	d86c      	bhi.n	8006bec <UART_SetConfig+0x454>
 8006b12:	a201      	add	r2, pc, #4	@ (adr r2, 8006b18 <UART_SetConfig+0x380>)
 8006b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b18:	08006bbd 	.word	0x08006bbd
 8006b1c:	08006bed 	.word	0x08006bed
 8006b20:	08006bed 	.word	0x08006bed
 8006b24:	08006bed 	.word	0x08006bed
 8006b28:	08006bed 	.word	0x08006bed
 8006b2c:	08006bed 	.word	0x08006bed
 8006b30:	08006bed 	.word	0x08006bed
 8006b34:	08006bed 	.word	0x08006bed
 8006b38:	08006bc5 	.word	0x08006bc5
 8006b3c:	08006bed 	.word	0x08006bed
 8006b40:	08006bed 	.word	0x08006bed
 8006b44:	08006bed 	.word	0x08006bed
 8006b48:	08006bed 	.word	0x08006bed
 8006b4c:	08006bed 	.word	0x08006bed
 8006b50:	08006bed 	.word	0x08006bed
 8006b54:	08006bed 	.word	0x08006bed
 8006b58:	08006bcd 	.word	0x08006bcd
 8006b5c:	08006bed 	.word	0x08006bed
 8006b60:	08006bed 	.word	0x08006bed
 8006b64:	08006bed 	.word	0x08006bed
 8006b68:	08006bed 	.word	0x08006bed
 8006b6c:	08006bed 	.word	0x08006bed
 8006b70:	08006bed 	.word	0x08006bed
 8006b74:	08006bed 	.word	0x08006bed
 8006b78:	08006bd5 	.word	0x08006bd5
 8006b7c:	08006bed 	.word	0x08006bed
 8006b80:	08006bed 	.word	0x08006bed
 8006b84:	08006bed 	.word	0x08006bed
 8006b88:	08006bed 	.word	0x08006bed
 8006b8c:	08006bed 	.word	0x08006bed
 8006b90:	08006bed 	.word	0x08006bed
 8006b94:	08006bed 	.word	0x08006bed
 8006b98:	08006bdd 	.word	0x08006bdd
 8006b9c:	08006bed 	.word	0x08006bed
 8006ba0:	08006bed 	.word	0x08006bed
 8006ba4:	08006bed 	.word	0x08006bed
 8006ba8:	08006bed 	.word	0x08006bed
 8006bac:	08006bed 	.word	0x08006bed
 8006bb0:	08006bed 	.word	0x08006bed
 8006bb4:	08006bed 	.word	0x08006bed
 8006bb8:	08006be5 	.word	0x08006be5
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bc2:	e1c0      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006bc4:	2304      	movs	r3, #4
 8006bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bca:	e1bc      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006bcc:	2308      	movs	r3, #8
 8006bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bd2:	e1b8      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006bd4:	2310      	movs	r3, #16
 8006bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bda:	e1b4      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006bdc:	2320      	movs	r3, #32
 8006bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006be2:	e1b0      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006be4:	2340      	movs	r3, #64	@ 0x40
 8006be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bea:	e1ac      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006bec:	2380      	movs	r3, #128	@ 0x80
 8006bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bf2:	e1a8      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a75      	ldr	r2, [pc, #468]	@ (8006dd0 <UART_SetConfig+0x638>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d130      	bne.n	8006c60 <UART_SetConfig+0x4c8>
 8006bfe:	4b73      	ldr	r3, [pc, #460]	@ (8006dcc <UART_SetConfig+0x634>)
 8006c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c02:	f003 0307 	and.w	r3, r3, #7
 8006c06:	2b05      	cmp	r3, #5
 8006c08:	d826      	bhi.n	8006c58 <UART_SetConfig+0x4c0>
 8006c0a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c10 <UART_SetConfig+0x478>)
 8006c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c10:	08006c29 	.word	0x08006c29
 8006c14:	08006c31 	.word	0x08006c31
 8006c18:	08006c39 	.word	0x08006c39
 8006c1c:	08006c41 	.word	0x08006c41
 8006c20:	08006c49 	.word	0x08006c49
 8006c24:	08006c51 	.word	0x08006c51
 8006c28:	2300      	movs	r3, #0
 8006c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c2e:	e18a      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006c30:	2304      	movs	r3, #4
 8006c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c36:	e186      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006c38:	2308      	movs	r3, #8
 8006c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c3e:	e182      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006c40:	2310      	movs	r3, #16
 8006c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c46:	e17e      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006c48:	2320      	movs	r3, #32
 8006c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c4e:	e17a      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006c50:	2340      	movs	r3, #64	@ 0x40
 8006c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c56:	e176      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006c58:	2380      	movs	r3, #128	@ 0x80
 8006c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c5e:	e172      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a5b      	ldr	r2, [pc, #364]	@ (8006dd4 <UART_SetConfig+0x63c>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d130      	bne.n	8006ccc <UART_SetConfig+0x534>
 8006c6a:	4b58      	ldr	r3, [pc, #352]	@ (8006dcc <UART_SetConfig+0x634>)
 8006c6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c6e:	f003 0307 	and.w	r3, r3, #7
 8006c72:	2b05      	cmp	r3, #5
 8006c74:	d826      	bhi.n	8006cc4 <UART_SetConfig+0x52c>
 8006c76:	a201      	add	r2, pc, #4	@ (adr r2, 8006c7c <UART_SetConfig+0x4e4>)
 8006c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c7c:	08006c95 	.word	0x08006c95
 8006c80:	08006c9d 	.word	0x08006c9d
 8006c84:	08006ca5 	.word	0x08006ca5
 8006c88:	08006cad 	.word	0x08006cad
 8006c8c:	08006cb5 	.word	0x08006cb5
 8006c90:	08006cbd 	.word	0x08006cbd
 8006c94:	2300      	movs	r3, #0
 8006c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c9a:	e154      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006c9c:	2304      	movs	r3, #4
 8006c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ca2:	e150      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006ca4:	2308      	movs	r3, #8
 8006ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006caa:	e14c      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006cac:	2310      	movs	r3, #16
 8006cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cb2:	e148      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006cb4:	2320      	movs	r3, #32
 8006cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cba:	e144      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006cbc:	2340      	movs	r3, #64	@ 0x40
 8006cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cc2:	e140      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006cc4:	2380      	movs	r3, #128	@ 0x80
 8006cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cca:	e13c      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a41      	ldr	r2, [pc, #260]	@ (8006dd8 <UART_SetConfig+0x640>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	f040 8082 	bne.w	8006ddc <UART_SetConfig+0x644>
 8006cd8:	4b3c      	ldr	r3, [pc, #240]	@ (8006dcc <UART_SetConfig+0x634>)
 8006cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cdc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ce0:	2b28      	cmp	r3, #40	@ 0x28
 8006ce2:	d86d      	bhi.n	8006dc0 <UART_SetConfig+0x628>
 8006ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8006cec <UART_SetConfig+0x554>)
 8006ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cea:	bf00      	nop
 8006cec:	08006d91 	.word	0x08006d91
 8006cf0:	08006dc1 	.word	0x08006dc1
 8006cf4:	08006dc1 	.word	0x08006dc1
 8006cf8:	08006dc1 	.word	0x08006dc1
 8006cfc:	08006dc1 	.word	0x08006dc1
 8006d00:	08006dc1 	.word	0x08006dc1
 8006d04:	08006dc1 	.word	0x08006dc1
 8006d08:	08006dc1 	.word	0x08006dc1
 8006d0c:	08006d99 	.word	0x08006d99
 8006d10:	08006dc1 	.word	0x08006dc1
 8006d14:	08006dc1 	.word	0x08006dc1
 8006d18:	08006dc1 	.word	0x08006dc1
 8006d1c:	08006dc1 	.word	0x08006dc1
 8006d20:	08006dc1 	.word	0x08006dc1
 8006d24:	08006dc1 	.word	0x08006dc1
 8006d28:	08006dc1 	.word	0x08006dc1
 8006d2c:	08006da1 	.word	0x08006da1
 8006d30:	08006dc1 	.word	0x08006dc1
 8006d34:	08006dc1 	.word	0x08006dc1
 8006d38:	08006dc1 	.word	0x08006dc1
 8006d3c:	08006dc1 	.word	0x08006dc1
 8006d40:	08006dc1 	.word	0x08006dc1
 8006d44:	08006dc1 	.word	0x08006dc1
 8006d48:	08006dc1 	.word	0x08006dc1
 8006d4c:	08006da9 	.word	0x08006da9
 8006d50:	08006dc1 	.word	0x08006dc1
 8006d54:	08006dc1 	.word	0x08006dc1
 8006d58:	08006dc1 	.word	0x08006dc1
 8006d5c:	08006dc1 	.word	0x08006dc1
 8006d60:	08006dc1 	.word	0x08006dc1
 8006d64:	08006dc1 	.word	0x08006dc1
 8006d68:	08006dc1 	.word	0x08006dc1
 8006d6c:	08006db1 	.word	0x08006db1
 8006d70:	08006dc1 	.word	0x08006dc1
 8006d74:	08006dc1 	.word	0x08006dc1
 8006d78:	08006dc1 	.word	0x08006dc1
 8006d7c:	08006dc1 	.word	0x08006dc1
 8006d80:	08006dc1 	.word	0x08006dc1
 8006d84:	08006dc1 	.word	0x08006dc1
 8006d88:	08006dc1 	.word	0x08006dc1
 8006d8c:	08006db9 	.word	0x08006db9
 8006d90:	2301      	movs	r3, #1
 8006d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d96:	e0d6      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006d98:	2304      	movs	r3, #4
 8006d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d9e:	e0d2      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006da0:	2308      	movs	r3, #8
 8006da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006da6:	e0ce      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006da8:	2310      	movs	r3, #16
 8006daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dae:	e0ca      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006db0:	2320      	movs	r3, #32
 8006db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006db6:	e0c6      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006db8:	2340      	movs	r3, #64	@ 0x40
 8006dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dbe:	e0c2      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006dc0:	2380      	movs	r3, #128	@ 0x80
 8006dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dc6:	e0be      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006dc8:	40011400 	.word	0x40011400
 8006dcc:	58024400 	.word	0x58024400
 8006dd0:	40007800 	.word	0x40007800
 8006dd4:	40007c00 	.word	0x40007c00
 8006dd8:	40011800 	.word	0x40011800
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4aad      	ldr	r2, [pc, #692]	@ (8007098 <UART_SetConfig+0x900>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d176      	bne.n	8006ed4 <UART_SetConfig+0x73c>
 8006de6:	4bad      	ldr	r3, [pc, #692]	@ (800709c <UART_SetConfig+0x904>)
 8006de8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006dee:	2b28      	cmp	r3, #40	@ 0x28
 8006df0:	d86c      	bhi.n	8006ecc <UART_SetConfig+0x734>
 8006df2:	a201      	add	r2, pc, #4	@ (adr r2, 8006df8 <UART_SetConfig+0x660>)
 8006df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df8:	08006e9d 	.word	0x08006e9d
 8006dfc:	08006ecd 	.word	0x08006ecd
 8006e00:	08006ecd 	.word	0x08006ecd
 8006e04:	08006ecd 	.word	0x08006ecd
 8006e08:	08006ecd 	.word	0x08006ecd
 8006e0c:	08006ecd 	.word	0x08006ecd
 8006e10:	08006ecd 	.word	0x08006ecd
 8006e14:	08006ecd 	.word	0x08006ecd
 8006e18:	08006ea5 	.word	0x08006ea5
 8006e1c:	08006ecd 	.word	0x08006ecd
 8006e20:	08006ecd 	.word	0x08006ecd
 8006e24:	08006ecd 	.word	0x08006ecd
 8006e28:	08006ecd 	.word	0x08006ecd
 8006e2c:	08006ecd 	.word	0x08006ecd
 8006e30:	08006ecd 	.word	0x08006ecd
 8006e34:	08006ecd 	.word	0x08006ecd
 8006e38:	08006ead 	.word	0x08006ead
 8006e3c:	08006ecd 	.word	0x08006ecd
 8006e40:	08006ecd 	.word	0x08006ecd
 8006e44:	08006ecd 	.word	0x08006ecd
 8006e48:	08006ecd 	.word	0x08006ecd
 8006e4c:	08006ecd 	.word	0x08006ecd
 8006e50:	08006ecd 	.word	0x08006ecd
 8006e54:	08006ecd 	.word	0x08006ecd
 8006e58:	08006eb5 	.word	0x08006eb5
 8006e5c:	08006ecd 	.word	0x08006ecd
 8006e60:	08006ecd 	.word	0x08006ecd
 8006e64:	08006ecd 	.word	0x08006ecd
 8006e68:	08006ecd 	.word	0x08006ecd
 8006e6c:	08006ecd 	.word	0x08006ecd
 8006e70:	08006ecd 	.word	0x08006ecd
 8006e74:	08006ecd 	.word	0x08006ecd
 8006e78:	08006ebd 	.word	0x08006ebd
 8006e7c:	08006ecd 	.word	0x08006ecd
 8006e80:	08006ecd 	.word	0x08006ecd
 8006e84:	08006ecd 	.word	0x08006ecd
 8006e88:	08006ecd 	.word	0x08006ecd
 8006e8c:	08006ecd 	.word	0x08006ecd
 8006e90:	08006ecd 	.word	0x08006ecd
 8006e94:	08006ecd 	.word	0x08006ecd
 8006e98:	08006ec5 	.word	0x08006ec5
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ea2:	e050      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006ea4:	2304      	movs	r3, #4
 8006ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eaa:	e04c      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006eac:	2308      	movs	r3, #8
 8006eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eb2:	e048      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006eb4:	2310      	movs	r3, #16
 8006eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eba:	e044      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006ebc:	2320      	movs	r3, #32
 8006ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ec2:	e040      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006ec4:	2340      	movs	r3, #64	@ 0x40
 8006ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eca:	e03c      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006ecc:	2380      	movs	r3, #128	@ 0x80
 8006ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ed2:	e038      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a71      	ldr	r2, [pc, #452]	@ (80070a0 <UART_SetConfig+0x908>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d130      	bne.n	8006f40 <UART_SetConfig+0x7a8>
 8006ede:	4b6f      	ldr	r3, [pc, #444]	@ (800709c <UART_SetConfig+0x904>)
 8006ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ee2:	f003 0307 	and.w	r3, r3, #7
 8006ee6:	2b05      	cmp	r3, #5
 8006ee8:	d826      	bhi.n	8006f38 <UART_SetConfig+0x7a0>
 8006eea:	a201      	add	r2, pc, #4	@ (adr r2, 8006ef0 <UART_SetConfig+0x758>)
 8006eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef0:	08006f09 	.word	0x08006f09
 8006ef4:	08006f11 	.word	0x08006f11
 8006ef8:	08006f19 	.word	0x08006f19
 8006efc:	08006f21 	.word	0x08006f21
 8006f00:	08006f29 	.word	0x08006f29
 8006f04:	08006f31 	.word	0x08006f31
 8006f08:	2302      	movs	r3, #2
 8006f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f0e:	e01a      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006f10:	2304      	movs	r3, #4
 8006f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f16:	e016      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006f18:	2308      	movs	r3, #8
 8006f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f1e:	e012      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006f20:	2310      	movs	r3, #16
 8006f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f26:	e00e      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006f28:	2320      	movs	r3, #32
 8006f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f2e:	e00a      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006f30:	2340      	movs	r3, #64	@ 0x40
 8006f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f36:	e006      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006f38:	2380      	movs	r3, #128	@ 0x80
 8006f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f3e:	e002      	b.n	8006f46 <UART_SetConfig+0x7ae>
 8006f40:	2380      	movs	r3, #128	@ 0x80
 8006f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a55      	ldr	r2, [pc, #340]	@ (80070a0 <UART_SetConfig+0x908>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	f040 80f8 	bne.w	8007142 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f52:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006f56:	2b20      	cmp	r3, #32
 8006f58:	dc46      	bgt.n	8006fe8 <UART_SetConfig+0x850>
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	db75      	blt.n	800704a <UART_SetConfig+0x8b2>
 8006f5e:	3b02      	subs	r3, #2
 8006f60:	2b1e      	cmp	r3, #30
 8006f62:	d872      	bhi.n	800704a <UART_SetConfig+0x8b2>
 8006f64:	a201      	add	r2, pc, #4	@ (adr r2, 8006f6c <UART_SetConfig+0x7d4>)
 8006f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f6a:	bf00      	nop
 8006f6c:	08006fef 	.word	0x08006fef
 8006f70:	0800704b 	.word	0x0800704b
 8006f74:	08006ff7 	.word	0x08006ff7
 8006f78:	0800704b 	.word	0x0800704b
 8006f7c:	0800704b 	.word	0x0800704b
 8006f80:	0800704b 	.word	0x0800704b
 8006f84:	08007007 	.word	0x08007007
 8006f88:	0800704b 	.word	0x0800704b
 8006f8c:	0800704b 	.word	0x0800704b
 8006f90:	0800704b 	.word	0x0800704b
 8006f94:	0800704b 	.word	0x0800704b
 8006f98:	0800704b 	.word	0x0800704b
 8006f9c:	0800704b 	.word	0x0800704b
 8006fa0:	0800704b 	.word	0x0800704b
 8006fa4:	08007017 	.word	0x08007017
 8006fa8:	0800704b 	.word	0x0800704b
 8006fac:	0800704b 	.word	0x0800704b
 8006fb0:	0800704b 	.word	0x0800704b
 8006fb4:	0800704b 	.word	0x0800704b
 8006fb8:	0800704b 	.word	0x0800704b
 8006fbc:	0800704b 	.word	0x0800704b
 8006fc0:	0800704b 	.word	0x0800704b
 8006fc4:	0800704b 	.word	0x0800704b
 8006fc8:	0800704b 	.word	0x0800704b
 8006fcc:	0800704b 	.word	0x0800704b
 8006fd0:	0800704b 	.word	0x0800704b
 8006fd4:	0800704b 	.word	0x0800704b
 8006fd8:	0800704b 	.word	0x0800704b
 8006fdc:	0800704b 	.word	0x0800704b
 8006fe0:	0800704b 	.word	0x0800704b
 8006fe4:	0800703d 	.word	0x0800703d
 8006fe8:	2b40      	cmp	r3, #64	@ 0x40
 8006fea:	d02a      	beq.n	8007042 <UART_SetConfig+0x8aa>
 8006fec:	e02d      	b.n	800704a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006fee:	f7fd fcdd 	bl	80049ac <HAL_RCCEx_GetD3PCLK1Freq>
 8006ff2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006ff4:	e02f      	b.n	8007056 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ff6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f7fd fcec 	bl	80049d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007002:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007004:	e027      	b.n	8007056 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007006:	f107 0318 	add.w	r3, r7, #24
 800700a:	4618      	mov	r0, r3
 800700c:	f7fd fe38 	bl	8004c80 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007014:	e01f      	b.n	8007056 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007016:	4b21      	ldr	r3, [pc, #132]	@ (800709c <UART_SetConfig+0x904>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f003 0320 	and.w	r3, r3, #32
 800701e:	2b00      	cmp	r3, #0
 8007020:	d009      	beq.n	8007036 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007022:	4b1e      	ldr	r3, [pc, #120]	@ (800709c <UART_SetConfig+0x904>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	08db      	lsrs	r3, r3, #3
 8007028:	f003 0303 	and.w	r3, r3, #3
 800702c:	4a1d      	ldr	r2, [pc, #116]	@ (80070a4 <UART_SetConfig+0x90c>)
 800702e:	fa22 f303 	lsr.w	r3, r2, r3
 8007032:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007034:	e00f      	b.n	8007056 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007036:	4b1b      	ldr	r3, [pc, #108]	@ (80070a4 <UART_SetConfig+0x90c>)
 8007038:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800703a:	e00c      	b.n	8007056 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800703c:	4b1a      	ldr	r3, [pc, #104]	@ (80070a8 <UART_SetConfig+0x910>)
 800703e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007040:	e009      	b.n	8007056 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007042:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007046:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007048:	e005      	b.n	8007056 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800704a:	2300      	movs	r3, #0
 800704c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007054:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007056:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007058:	2b00      	cmp	r3, #0
 800705a:	f000 81ee 	beq.w	800743a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007062:	4a12      	ldr	r2, [pc, #72]	@ (80070ac <UART_SetConfig+0x914>)
 8007064:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007068:	461a      	mov	r2, r3
 800706a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800706c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007070:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	685a      	ldr	r2, [r3, #4]
 8007076:	4613      	mov	r3, r2
 8007078:	005b      	lsls	r3, r3, #1
 800707a:	4413      	add	r3, r2
 800707c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800707e:	429a      	cmp	r2, r3
 8007080:	d305      	bcc.n	800708e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007088:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800708a:	429a      	cmp	r2, r3
 800708c:	d910      	bls.n	80070b0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007094:	e1d1      	b.n	800743a <UART_SetConfig+0xca2>
 8007096:	bf00      	nop
 8007098:	40011c00 	.word	0x40011c00
 800709c:	58024400 	.word	0x58024400
 80070a0:	58000c00 	.word	0x58000c00
 80070a4:	03d09000 	.word	0x03d09000
 80070a8:	003d0900 	.word	0x003d0900
 80070ac:	0800b86c 	.word	0x0800b86c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070b2:	2200      	movs	r2, #0
 80070b4:	60bb      	str	r3, [r7, #8]
 80070b6:	60fa      	str	r2, [r7, #12]
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070bc:	4ac0      	ldr	r2, [pc, #768]	@ (80073c0 <UART_SetConfig+0xc28>)
 80070be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	2200      	movs	r2, #0
 80070c6:	603b      	str	r3, [r7, #0]
 80070c8:	607a      	str	r2, [r7, #4]
 80070ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80070d2:	f7f9 f96d 	bl	80003b0 <__aeabi_uldivmod>
 80070d6:	4602      	mov	r2, r0
 80070d8:	460b      	mov	r3, r1
 80070da:	4610      	mov	r0, r2
 80070dc:	4619      	mov	r1, r3
 80070de:	f04f 0200 	mov.w	r2, #0
 80070e2:	f04f 0300 	mov.w	r3, #0
 80070e6:	020b      	lsls	r3, r1, #8
 80070e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80070ec:	0202      	lsls	r2, r0, #8
 80070ee:	6979      	ldr	r1, [r7, #20]
 80070f0:	6849      	ldr	r1, [r1, #4]
 80070f2:	0849      	lsrs	r1, r1, #1
 80070f4:	2000      	movs	r0, #0
 80070f6:	460c      	mov	r4, r1
 80070f8:	4605      	mov	r5, r0
 80070fa:	eb12 0804 	adds.w	r8, r2, r4
 80070fe:	eb43 0905 	adc.w	r9, r3, r5
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	469a      	mov	sl, r3
 800710a:	4693      	mov	fp, r2
 800710c:	4652      	mov	r2, sl
 800710e:	465b      	mov	r3, fp
 8007110:	4640      	mov	r0, r8
 8007112:	4649      	mov	r1, r9
 8007114:	f7f9 f94c 	bl	80003b0 <__aeabi_uldivmod>
 8007118:	4602      	mov	r2, r0
 800711a:	460b      	mov	r3, r1
 800711c:	4613      	mov	r3, r2
 800711e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007122:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007126:	d308      	bcc.n	800713a <UART_SetConfig+0x9a2>
 8007128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800712a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800712e:	d204      	bcs.n	800713a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007136:	60da      	str	r2, [r3, #12]
 8007138:	e17f      	b.n	800743a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007140:	e17b      	b.n	800743a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	69db      	ldr	r3, [r3, #28]
 8007146:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800714a:	f040 80bd 	bne.w	80072c8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800714e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007152:	2b20      	cmp	r3, #32
 8007154:	dc48      	bgt.n	80071e8 <UART_SetConfig+0xa50>
 8007156:	2b00      	cmp	r3, #0
 8007158:	db7b      	blt.n	8007252 <UART_SetConfig+0xaba>
 800715a:	2b20      	cmp	r3, #32
 800715c:	d879      	bhi.n	8007252 <UART_SetConfig+0xaba>
 800715e:	a201      	add	r2, pc, #4	@ (adr r2, 8007164 <UART_SetConfig+0x9cc>)
 8007160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007164:	080071ef 	.word	0x080071ef
 8007168:	080071f7 	.word	0x080071f7
 800716c:	08007253 	.word	0x08007253
 8007170:	08007253 	.word	0x08007253
 8007174:	080071ff 	.word	0x080071ff
 8007178:	08007253 	.word	0x08007253
 800717c:	08007253 	.word	0x08007253
 8007180:	08007253 	.word	0x08007253
 8007184:	0800720f 	.word	0x0800720f
 8007188:	08007253 	.word	0x08007253
 800718c:	08007253 	.word	0x08007253
 8007190:	08007253 	.word	0x08007253
 8007194:	08007253 	.word	0x08007253
 8007198:	08007253 	.word	0x08007253
 800719c:	08007253 	.word	0x08007253
 80071a0:	08007253 	.word	0x08007253
 80071a4:	0800721f 	.word	0x0800721f
 80071a8:	08007253 	.word	0x08007253
 80071ac:	08007253 	.word	0x08007253
 80071b0:	08007253 	.word	0x08007253
 80071b4:	08007253 	.word	0x08007253
 80071b8:	08007253 	.word	0x08007253
 80071bc:	08007253 	.word	0x08007253
 80071c0:	08007253 	.word	0x08007253
 80071c4:	08007253 	.word	0x08007253
 80071c8:	08007253 	.word	0x08007253
 80071cc:	08007253 	.word	0x08007253
 80071d0:	08007253 	.word	0x08007253
 80071d4:	08007253 	.word	0x08007253
 80071d8:	08007253 	.word	0x08007253
 80071dc:	08007253 	.word	0x08007253
 80071e0:	08007253 	.word	0x08007253
 80071e4:	08007245 	.word	0x08007245
 80071e8:	2b40      	cmp	r3, #64	@ 0x40
 80071ea:	d02e      	beq.n	800724a <UART_SetConfig+0xab2>
 80071ec:	e031      	b.n	8007252 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071ee:	f7fc fa11 	bl	8003614 <HAL_RCC_GetPCLK1Freq>
 80071f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80071f4:	e033      	b.n	800725e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071f6:	f7fc fa23 	bl	8003640 <HAL_RCC_GetPCLK2Freq>
 80071fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80071fc:	e02f      	b.n	800725e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007202:	4618      	mov	r0, r3
 8007204:	f7fd fbe8 	bl	80049d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800720a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800720c:	e027      	b.n	800725e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800720e:	f107 0318 	add.w	r3, r7, #24
 8007212:	4618      	mov	r0, r3
 8007214:	f7fd fd34 	bl	8004c80 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800721c:	e01f      	b.n	800725e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800721e:	4b69      	ldr	r3, [pc, #420]	@ (80073c4 <UART_SetConfig+0xc2c>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 0320 	and.w	r3, r3, #32
 8007226:	2b00      	cmp	r3, #0
 8007228:	d009      	beq.n	800723e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800722a:	4b66      	ldr	r3, [pc, #408]	@ (80073c4 <UART_SetConfig+0xc2c>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	08db      	lsrs	r3, r3, #3
 8007230:	f003 0303 	and.w	r3, r3, #3
 8007234:	4a64      	ldr	r2, [pc, #400]	@ (80073c8 <UART_SetConfig+0xc30>)
 8007236:	fa22 f303 	lsr.w	r3, r2, r3
 800723a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800723c:	e00f      	b.n	800725e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800723e:	4b62      	ldr	r3, [pc, #392]	@ (80073c8 <UART_SetConfig+0xc30>)
 8007240:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007242:	e00c      	b.n	800725e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007244:	4b61      	ldr	r3, [pc, #388]	@ (80073cc <UART_SetConfig+0xc34>)
 8007246:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007248:	e009      	b.n	800725e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800724a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800724e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007250:	e005      	b.n	800725e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8007252:	2300      	movs	r3, #0
 8007254:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800725c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800725e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007260:	2b00      	cmp	r3, #0
 8007262:	f000 80ea 	beq.w	800743a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800726a:	4a55      	ldr	r2, [pc, #340]	@ (80073c0 <UART_SetConfig+0xc28>)
 800726c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007270:	461a      	mov	r2, r3
 8007272:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007274:	fbb3 f3f2 	udiv	r3, r3, r2
 8007278:	005a      	lsls	r2, r3, #1
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	085b      	lsrs	r3, r3, #1
 8007280:	441a      	add	r2, r3
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	fbb2 f3f3 	udiv	r3, r2, r3
 800728a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800728c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800728e:	2b0f      	cmp	r3, #15
 8007290:	d916      	bls.n	80072c0 <UART_SetConfig+0xb28>
 8007292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007294:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007298:	d212      	bcs.n	80072c0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800729a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800729c:	b29b      	uxth	r3, r3
 800729e:	f023 030f 	bic.w	r3, r3, #15
 80072a2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80072a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072a6:	085b      	lsrs	r3, r3, #1
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	f003 0307 	and.w	r3, r3, #7
 80072ae:	b29a      	uxth	r2, r3
 80072b0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80072b2:	4313      	orrs	r3, r2
 80072b4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80072bc:	60da      	str	r2, [r3, #12]
 80072be:	e0bc      	b.n	800743a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80072c6:	e0b8      	b.n	800743a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80072c8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80072cc:	2b20      	cmp	r3, #32
 80072ce:	dc4b      	bgt.n	8007368 <UART_SetConfig+0xbd0>
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f2c0 8087 	blt.w	80073e4 <UART_SetConfig+0xc4c>
 80072d6:	2b20      	cmp	r3, #32
 80072d8:	f200 8084 	bhi.w	80073e4 <UART_SetConfig+0xc4c>
 80072dc:	a201      	add	r2, pc, #4	@ (adr r2, 80072e4 <UART_SetConfig+0xb4c>)
 80072de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e2:	bf00      	nop
 80072e4:	0800736f 	.word	0x0800736f
 80072e8:	08007377 	.word	0x08007377
 80072ec:	080073e5 	.word	0x080073e5
 80072f0:	080073e5 	.word	0x080073e5
 80072f4:	0800737f 	.word	0x0800737f
 80072f8:	080073e5 	.word	0x080073e5
 80072fc:	080073e5 	.word	0x080073e5
 8007300:	080073e5 	.word	0x080073e5
 8007304:	0800738f 	.word	0x0800738f
 8007308:	080073e5 	.word	0x080073e5
 800730c:	080073e5 	.word	0x080073e5
 8007310:	080073e5 	.word	0x080073e5
 8007314:	080073e5 	.word	0x080073e5
 8007318:	080073e5 	.word	0x080073e5
 800731c:	080073e5 	.word	0x080073e5
 8007320:	080073e5 	.word	0x080073e5
 8007324:	0800739f 	.word	0x0800739f
 8007328:	080073e5 	.word	0x080073e5
 800732c:	080073e5 	.word	0x080073e5
 8007330:	080073e5 	.word	0x080073e5
 8007334:	080073e5 	.word	0x080073e5
 8007338:	080073e5 	.word	0x080073e5
 800733c:	080073e5 	.word	0x080073e5
 8007340:	080073e5 	.word	0x080073e5
 8007344:	080073e5 	.word	0x080073e5
 8007348:	080073e5 	.word	0x080073e5
 800734c:	080073e5 	.word	0x080073e5
 8007350:	080073e5 	.word	0x080073e5
 8007354:	080073e5 	.word	0x080073e5
 8007358:	080073e5 	.word	0x080073e5
 800735c:	080073e5 	.word	0x080073e5
 8007360:	080073e5 	.word	0x080073e5
 8007364:	080073d7 	.word	0x080073d7
 8007368:	2b40      	cmp	r3, #64	@ 0x40
 800736a:	d037      	beq.n	80073dc <UART_SetConfig+0xc44>
 800736c:	e03a      	b.n	80073e4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800736e:	f7fc f951 	bl	8003614 <HAL_RCC_GetPCLK1Freq>
 8007372:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007374:	e03c      	b.n	80073f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007376:	f7fc f963 	bl	8003640 <HAL_RCC_GetPCLK2Freq>
 800737a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800737c:	e038      	b.n	80073f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800737e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007382:	4618      	mov	r0, r3
 8007384:	f7fd fb28 	bl	80049d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800738a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800738c:	e030      	b.n	80073f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800738e:	f107 0318 	add.w	r3, r7, #24
 8007392:	4618      	mov	r0, r3
 8007394:	f7fd fc74 	bl	8004c80 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800739c:	e028      	b.n	80073f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800739e:	4b09      	ldr	r3, [pc, #36]	@ (80073c4 <UART_SetConfig+0xc2c>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 0320 	and.w	r3, r3, #32
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d012      	beq.n	80073d0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80073aa:	4b06      	ldr	r3, [pc, #24]	@ (80073c4 <UART_SetConfig+0xc2c>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	08db      	lsrs	r3, r3, #3
 80073b0:	f003 0303 	and.w	r3, r3, #3
 80073b4:	4a04      	ldr	r2, [pc, #16]	@ (80073c8 <UART_SetConfig+0xc30>)
 80073b6:	fa22 f303 	lsr.w	r3, r2, r3
 80073ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80073bc:	e018      	b.n	80073f0 <UART_SetConfig+0xc58>
 80073be:	bf00      	nop
 80073c0:	0800b86c 	.word	0x0800b86c
 80073c4:	58024400 	.word	0x58024400
 80073c8:	03d09000 	.word	0x03d09000
 80073cc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80073d0:	4b24      	ldr	r3, [pc, #144]	@ (8007464 <UART_SetConfig+0xccc>)
 80073d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073d4:	e00c      	b.n	80073f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80073d6:	4b24      	ldr	r3, [pc, #144]	@ (8007468 <UART_SetConfig+0xcd0>)
 80073d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073da:	e009      	b.n	80073f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073e2:	e005      	b.n	80073f0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80073e4:	2300      	movs	r3, #0
 80073e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80073e8:	2301      	movs	r3, #1
 80073ea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80073ee:	bf00      	nop
    }

    if (pclk != 0U)
 80073f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d021      	beq.n	800743a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073fa:	4a1c      	ldr	r2, [pc, #112]	@ (800746c <UART_SetConfig+0xcd4>)
 80073fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007400:	461a      	mov	r2, r3
 8007402:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007404:	fbb3 f2f2 	udiv	r2, r3, r2
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	085b      	lsrs	r3, r3, #1
 800740e:	441a      	add	r2, r3
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	fbb2 f3f3 	udiv	r3, r2, r3
 8007418:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800741a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800741c:	2b0f      	cmp	r3, #15
 800741e:	d909      	bls.n	8007434 <UART_SetConfig+0xc9c>
 8007420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007422:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007426:	d205      	bcs.n	8007434 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800742a:	b29a      	uxth	r2, r3
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	60da      	str	r2, [r3, #12]
 8007432:	e002      	b.n	800743a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	2201      	movs	r2, #1
 800743e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	2201      	movs	r2, #1
 8007446:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	2200      	movs	r2, #0
 800744e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	2200      	movs	r2, #0
 8007454:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007456:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800745a:	4618      	mov	r0, r3
 800745c:	3748      	adds	r7, #72	@ 0x48
 800745e:	46bd      	mov	sp, r7
 8007460:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007464:	03d09000 	.word	0x03d09000
 8007468:	003d0900 	.word	0x003d0900
 800746c:	0800b86c 	.word	0x0800b86c

08007470 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800747c:	f003 0308 	and.w	r3, r3, #8
 8007480:	2b00      	cmp	r3, #0
 8007482:	d00a      	beq.n	800749a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	430a      	orrs	r2, r1
 8007498:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800749e:	f003 0301 	and.w	r3, r3, #1
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00a      	beq.n	80074bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	430a      	orrs	r2, r1
 80074ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074c0:	f003 0302 	and.w	r3, r3, #2
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00a      	beq.n	80074de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	430a      	orrs	r2, r1
 80074dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074e2:	f003 0304 	and.w	r3, r3, #4
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00a      	beq.n	8007500 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	430a      	orrs	r2, r1
 80074fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007504:	f003 0310 	and.w	r3, r3, #16
 8007508:	2b00      	cmp	r3, #0
 800750a:	d00a      	beq.n	8007522 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	430a      	orrs	r2, r1
 8007520:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007526:	f003 0320 	and.w	r3, r3, #32
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00a      	beq.n	8007544 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	430a      	orrs	r2, r1
 8007542:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800754c:	2b00      	cmp	r3, #0
 800754e:	d01a      	beq.n	8007586 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	430a      	orrs	r2, r1
 8007564:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800756a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800756e:	d10a      	bne.n	8007586 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	430a      	orrs	r2, r1
 8007584:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800758a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00a      	beq.n	80075a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	430a      	orrs	r2, r1
 80075a6:	605a      	str	r2, [r3, #4]
  }
}
 80075a8:	bf00      	nop
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b098      	sub	sp, #96	@ 0x60
 80075b8:	af02      	add	r7, sp, #8
 80075ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80075c4:	f7fa fd32 	bl	800202c <HAL_GetTick>
 80075c8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 0308 	and.w	r3, r3, #8
 80075d4:	2b08      	cmp	r3, #8
 80075d6:	d12f      	bne.n	8007638 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80075dc:	9300      	str	r3, [sp, #0]
 80075de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075e0:	2200      	movs	r2, #0
 80075e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 f88e 	bl	8007708 <UART_WaitOnFlagUntilTimeout>
 80075ec:	4603      	mov	r3, r0
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d022      	beq.n	8007638 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075fa:	e853 3f00 	ldrex	r3, [r3]
 80075fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007602:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007606:	653b      	str	r3, [r7, #80]	@ 0x50
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	461a      	mov	r2, r3
 800760e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007610:	647b      	str	r3, [r7, #68]	@ 0x44
 8007612:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007614:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007616:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007618:	e841 2300 	strex	r3, r2, [r1]
 800761c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800761e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007620:	2b00      	cmp	r3, #0
 8007622:	d1e6      	bne.n	80075f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2220      	movs	r2, #32
 8007628:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007634:	2303      	movs	r3, #3
 8007636:	e063      	b.n	8007700 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 0304 	and.w	r3, r3, #4
 8007642:	2b04      	cmp	r3, #4
 8007644:	d149      	bne.n	80076da <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007646:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800764a:	9300      	str	r3, [sp, #0]
 800764c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800764e:	2200      	movs	r2, #0
 8007650:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 f857 	bl	8007708 <UART_WaitOnFlagUntilTimeout>
 800765a:	4603      	mov	r3, r0
 800765c:	2b00      	cmp	r3, #0
 800765e:	d03c      	beq.n	80076da <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007668:	e853 3f00 	ldrex	r3, [r3]
 800766c:	623b      	str	r3, [r7, #32]
   return(result);
 800766e:	6a3b      	ldr	r3, [r7, #32]
 8007670:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007674:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	461a      	mov	r2, r3
 800767c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800767e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007680:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007682:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007684:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007686:	e841 2300 	strex	r3, r2, [r1]
 800768a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800768c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800768e:	2b00      	cmp	r3, #0
 8007690:	d1e6      	bne.n	8007660 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	3308      	adds	r3, #8
 8007698:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	e853 3f00 	ldrex	r3, [r3]
 80076a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f023 0301 	bic.w	r3, r3, #1
 80076a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	3308      	adds	r3, #8
 80076b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076b2:	61fa      	str	r2, [r7, #28]
 80076b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b6:	69b9      	ldr	r1, [r7, #24]
 80076b8:	69fa      	ldr	r2, [r7, #28]
 80076ba:	e841 2300 	strex	r3, r2, [r1]
 80076be:	617b      	str	r3, [r7, #20]
   return(result);
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d1e5      	bne.n	8007692 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2220      	movs	r2, #32
 80076ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076d6:	2303      	movs	r3, #3
 80076d8:	e012      	b.n	8007700 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2220      	movs	r2, #32
 80076de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2220      	movs	r2, #32
 80076e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2200      	movs	r2, #0
 80076ee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3758      	adds	r7, #88	@ 0x58
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	603b      	str	r3, [r7, #0]
 8007714:	4613      	mov	r3, r2
 8007716:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007718:	e04f      	b.n	80077ba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007720:	d04b      	beq.n	80077ba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007722:	f7fa fc83 	bl	800202c <HAL_GetTick>
 8007726:	4602      	mov	r2, r0
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	1ad3      	subs	r3, r2, r3
 800772c:	69ba      	ldr	r2, [r7, #24]
 800772e:	429a      	cmp	r2, r3
 8007730:	d302      	bcc.n	8007738 <UART_WaitOnFlagUntilTimeout+0x30>
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d101      	bne.n	800773c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007738:	2303      	movs	r3, #3
 800773a:	e04e      	b.n	80077da <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f003 0304 	and.w	r3, r3, #4
 8007746:	2b00      	cmp	r3, #0
 8007748:	d037      	beq.n	80077ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	2b80      	cmp	r3, #128	@ 0x80
 800774e:	d034      	beq.n	80077ba <UART_WaitOnFlagUntilTimeout+0xb2>
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	2b40      	cmp	r3, #64	@ 0x40
 8007754:	d031      	beq.n	80077ba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	69db      	ldr	r3, [r3, #28]
 800775c:	f003 0308 	and.w	r3, r3, #8
 8007760:	2b08      	cmp	r3, #8
 8007762:	d110      	bne.n	8007786 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2208      	movs	r2, #8
 800776a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800776c:	68f8      	ldr	r0, [r7, #12]
 800776e:	f000 f839 	bl	80077e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2208      	movs	r2, #8
 8007776:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	e029      	b.n	80077da <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	69db      	ldr	r3, [r3, #28]
 800778c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007790:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007794:	d111      	bne.n	80077ba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800779e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f000 f81f 	bl	80077e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2220      	movs	r2, #32
 80077aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2200      	movs	r2, #0
 80077b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80077b6:	2303      	movs	r3, #3
 80077b8:	e00f      	b.n	80077da <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	69da      	ldr	r2, [r3, #28]
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	4013      	ands	r3, r2
 80077c4:	68ba      	ldr	r2, [r7, #8]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	bf0c      	ite	eq
 80077ca:	2301      	moveq	r3, #1
 80077cc:	2300      	movne	r3, #0
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	461a      	mov	r2, r3
 80077d2:	79fb      	ldrb	r3, [r7, #7]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d0a0      	beq.n	800771a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3710      	adds	r7, #16
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
	...

080077e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b095      	sub	sp, #84	@ 0x54
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077f4:	e853 3f00 	ldrex	r3, [r3]
 80077f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80077fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007800:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	461a      	mov	r2, r3
 8007808:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800780a:	643b      	str	r3, [r7, #64]	@ 0x40
 800780c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007810:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007812:	e841 2300 	strex	r3, r2, [r1]
 8007816:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1e6      	bne.n	80077ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	3308      	adds	r3, #8
 8007824:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007826:	6a3b      	ldr	r3, [r7, #32]
 8007828:	e853 3f00 	ldrex	r3, [r3]
 800782c:	61fb      	str	r3, [r7, #28]
   return(result);
 800782e:	69fa      	ldr	r2, [r7, #28]
 8007830:	4b1e      	ldr	r3, [pc, #120]	@ (80078ac <UART_EndRxTransfer+0xc8>)
 8007832:	4013      	ands	r3, r2
 8007834:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	3308      	adds	r3, #8
 800783c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800783e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007840:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007842:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007844:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007846:	e841 2300 	strex	r3, r2, [r1]
 800784a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800784c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800784e:	2b00      	cmp	r3, #0
 8007850:	d1e5      	bne.n	800781e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007856:	2b01      	cmp	r3, #1
 8007858:	d118      	bne.n	800788c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	e853 3f00 	ldrex	r3, [r3]
 8007866:	60bb      	str	r3, [r7, #8]
   return(result);
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	f023 0310 	bic.w	r3, r3, #16
 800786e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	461a      	mov	r2, r3
 8007876:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007878:	61bb      	str	r3, [r7, #24]
 800787a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787c:	6979      	ldr	r1, [r7, #20]
 800787e:	69ba      	ldr	r2, [r7, #24]
 8007880:	e841 2300 	strex	r3, r2, [r1]
 8007884:	613b      	str	r3, [r7, #16]
   return(result);
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d1e6      	bne.n	800785a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2220      	movs	r2, #32
 8007890:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80078a0:	bf00      	nop
 80078a2:	3754      	adds	r7, #84	@ 0x54
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr
 80078ac:	effffffe 	.word	0xeffffffe

080078b0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b085      	sub	sp, #20
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d101      	bne.n	80078c6 <HAL_UARTEx_DisableFifoMode+0x16>
 80078c2:	2302      	movs	r3, #2
 80078c4:	e027      	b.n	8007916 <HAL_UARTEx_DisableFifoMode+0x66>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2201      	movs	r2, #1
 80078ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2224      	movs	r2, #36	@ 0x24
 80078d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f022 0201 	bic.w	r2, r2, #1
 80078ec:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80078f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2220      	movs	r2, #32
 8007908:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3714      	adds	r7, #20
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr

08007922 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007922:	b580      	push	{r7, lr}
 8007924:	b084      	sub	sp, #16
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
 800792a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007932:	2b01      	cmp	r3, #1
 8007934:	d101      	bne.n	800793a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007936:	2302      	movs	r3, #2
 8007938:	e02d      	b.n	8007996 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2201      	movs	r2, #1
 800793e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2224      	movs	r2, #36	@ 0x24
 8007946:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f022 0201 	bic.w	r2, r2, #1
 8007960:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	683a      	ldr	r2, [r7, #0]
 8007972:	430a      	orrs	r2, r1
 8007974:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 f850 	bl	8007a1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	68fa      	ldr	r2, [r7, #12]
 8007982:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2220      	movs	r2, #32
 8007988:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	3710      	adds	r7, #16
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}

0800799e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800799e:	b580      	push	{r7, lr}
 80079a0:	b084      	sub	sp, #16
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
 80079a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d101      	bne.n	80079b6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80079b2:	2302      	movs	r3, #2
 80079b4:	e02d      	b.n	8007a12 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2201      	movs	r2, #1
 80079ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2224      	movs	r2, #36	@ 0x24
 80079c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f022 0201 	bic.w	r2, r2, #1
 80079dc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	683a      	ldr	r2, [r7, #0]
 80079ee:	430a      	orrs	r2, r1
 80079f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 f812 	bl	8007a1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	68fa      	ldr	r2, [r7, #12]
 80079fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2220      	movs	r2, #32
 8007a04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a10:	2300      	movs	r3, #0
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
	...

08007a1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b085      	sub	sp, #20
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d108      	bne.n	8007a3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007a3c:	e031      	b.n	8007aa2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007a3e:	2310      	movs	r3, #16
 8007a40:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007a42:	2310      	movs	r3, #16
 8007a44:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	0e5b      	lsrs	r3, r3, #25
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	f003 0307 	and.w	r3, r3, #7
 8007a54:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	0f5b      	lsrs	r3, r3, #29
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	f003 0307 	and.w	r3, r3, #7
 8007a64:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a66:	7bbb      	ldrb	r3, [r7, #14]
 8007a68:	7b3a      	ldrb	r2, [r7, #12]
 8007a6a:	4911      	ldr	r1, [pc, #68]	@ (8007ab0 <UARTEx_SetNbDataToProcess+0x94>)
 8007a6c:	5c8a      	ldrb	r2, [r1, r2]
 8007a6e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007a72:	7b3a      	ldrb	r2, [r7, #12]
 8007a74:	490f      	ldr	r1, [pc, #60]	@ (8007ab4 <UARTEx_SetNbDataToProcess+0x98>)
 8007a76:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a78:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a7c:	b29a      	uxth	r2, r3
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a84:	7bfb      	ldrb	r3, [r7, #15]
 8007a86:	7b7a      	ldrb	r2, [r7, #13]
 8007a88:	4909      	ldr	r1, [pc, #36]	@ (8007ab0 <UARTEx_SetNbDataToProcess+0x94>)
 8007a8a:	5c8a      	ldrb	r2, [r1, r2]
 8007a8c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007a90:	7b7a      	ldrb	r2, [r7, #13]
 8007a92:	4908      	ldr	r1, [pc, #32]	@ (8007ab4 <UARTEx_SetNbDataToProcess+0x98>)
 8007a94:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a96:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a9a:	b29a      	uxth	r2, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007aa2:	bf00      	nop
 8007aa4:	3714      	adds	r7, #20
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	0800b884 	.word	0x0800b884
 8007ab4:	0800b88c 	.word	0x0800b88c

08007ab8 <std>:
 8007ab8:	2300      	movs	r3, #0
 8007aba:	b510      	push	{r4, lr}
 8007abc:	4604      	mov	r4, r0
 8007abe:	e9c0 3300 	strd	r3, r3, [r0]
 8007ac2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ac6:	6083      	str	r3, [r0, #8]
 8007ac8:	8181      	strh	r1, [r0, #12]
 8007aca:	6643      	str	r3, [r0, #100]	@ 0x64
 8007acc:	81c2      	strh	r2, [r0, #14]
 8007ace:	6183      	str	r3, [r0, #24]
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	2208      	movs	r2, #8
 8007ad4:	305c      	adds	r0, #92	@ 0x5c
 8007ad6:	f000 fa19 	bl	8007f0c <memset>
 8007ada:	4b0d      	ldr	r3, [pc, #52]	@ (8007b10 <std+0x58>)
 8007adc:	6263      	str	r3, [r4, #36]	@ 0x24
 8007ade:	4b0d      	ldr	r3, [pc, #52]	@ (8007b14 <std+0x5c>)
 8007ae0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8007b18 <std+0x60>)
 8007ae4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8007b1c <std+0x64>)
 8007ae8:	6323      	str	r3, [r4, #48]	@ 0x30
 8007aea:	4b0d      	ldr	r3, [pc, #52]	@ (8007b20 <std+0x68>)
 8007aec:	6224      	str	r4, [r4, #32]
 8007aee:	429c      	cmp	r4, r3
 8007af0:	d006      	beq.n	8007b00 <std+0x48>
 8007af2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007af6:	4294      	cmp	r4, r2
 8007af8:	d002      	beq.n	8007b00 <std+0x48>
 8007afa:	33d0      	adds	r3, #208	@ 0xd0
 8007afc:	429c      	cmp	r4, r3
 8007afe:	d105      	bne.n	8007b0c <std+0x54>
 8007b00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b08:	f000 ba78 	b.w	8007ffc <__retarget_lock_init_recursive>
 8007b0c:	bd10      	pop	{r4, pc}
 8007b0e:	bf00      	nop
 8007b10:	08007d5d 	.word	0x08007d5d
 8007b14:	08007d7f 	.word	0x08007d7f
 8007b18:	08007db7 	.word	0x08007db7
 8007b1c:	08007ddb 	.word	0x08007ddb
 8007b20:	24003ca8 	.word	0x24003ca8

08007b24 <stdio_exit_handler>:
 8007b24:	4a02      	ldr	r2, [pc, #8]	@ (8007b30 <stdio_exit_handler+0xc>)
 8007b26:	4903      	ldr	r1, [pc, #12]	@ (8007b34 <stdio_exit_handler+0x10>)
 8007b28:	4803      	ldr	r0, [pc, #12]	@ (8007b38 <stdio_exit_handler+0x14>)
 8007b2a:	f000 b869 	b.w	8007c00 <_fwalk_sglue>
 8007b2e:	bf00      	nop
 8007b30:	24000014 	.word	0x24000014
 8007b34:	08008b4d 	.word	0x08008b4d
 8007b38:	24000024 	.word	0x24000024

08007b3c <cleanup_stdio>:
 8007b3c:	6841      	ldr	r1, [r0, #4]
 8007b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8007b70 <cleanup_stdio+0x34>)
 8007b40:	4299      	cmp	r1, r3
 8007b42:	b510      	push	{r4, lr}
 8007b44:	4604      	mov	r4, r0
 8007b46:	d001      	beq.n	8007b4c <cleanup_stdio+0x10>
 8007b48:	f001 f800 	bl	8008b4c <_fflush_r>
 8007b4c:	68a1      	ldr	r1, [r4, #8]
 8007b4e:	4b09      	ldr	r3, [pc, #36]	@ (8007b74 <cleanup_stdio+0x38>)
 8007b50:	4299      	cmp	r1, r3
 8007b52:	d002      	beq.n	8007b5a <cleanup_stdio+0x1e>
 8007b54:	4620      	mov	r0, r4
 8007b56:	f000 fff9 	bl	8008b4c <_fflush_r>
 8007b5a:	68e1      	ldr	r1, [r4, #12]
 8007b5c:	4b06      	ldr	r3, [pc, #24]	@ (8007b78 <cleanup_stdio+0x3c>)
 8007b5e:	4299      	cmp	r1, r3
 8007b60:	d004      	beq.n	8007b6c <cleanup_stdio+0x30>
 8007b62:	4620      	mov	r0, r4
 8007b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b68:	f000 bff0 	b.w	8008b4c <_fflush_r>
 8007b6c:	bd10      	pop	{r4, pc}
 8007b6e:	bf00      	nop
 8007b70:	24003ca8 	.word	0x24003ca8
 8007b74:	24003d10 	.word	0x24003d10
 8007b78:	24003d78 	.word	0x24003d78

08007b7c <global_stdio_init.part.0>:
 8007b7c:	b510      	push	{r4, lr}
 8007b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8007bac <global_stdio_init.part.0+0x30>)
 8007b80:	4c0b      	ldr	r4, [pc, #44]	@ (8007bb0 <global_stdio_init.part.0+0x34>)
 8007b82:	4a0c      	ldr	r2, [pc, #48]	@ (8007bb4 <global_stdio_init.part.0+0x38>)
 8007b84:	601a      	str	r2, [r3, #0]
 8007b86:	4620      	mov	r0, r4
 8007b88:	2200      	movs	r2, #0
 8007b8a:	2104      	movs	r1, #4
 8007b8c:	f7ff ff94 	bl	8007ab8 <std>
 8007b90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007b94:	2201      	movs	r2, #1
 8007b96:	2109      	movs	r1, #9
 8007b98:	f7ff ff8e 	bl	8007ab8 <std>
 8007b9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007ba0:	2202      	movs	r2, #2
 8007ba2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ba6:	2112      	movs	r1, #18
 8007ba8:	f7ff bf86 	b.w	8007ab8 <std>
 8007bac:	24003de0 	.word	0x24003de0
 8007bb0:	24003ca8 	.word	0x24003ca8
 8007bb4:	08007b25 	.word	0x08007b25

08007bb8 <__sfp_lock_acquire>:
 8007bb8:	4801      	ldr	r0, [pc, #4]	@ (8007bc0 <__sfp_lock_acquire+0x8>)
 8007bba:	f000 ba20 	b.w	8007ffe <__retarget_lock_acquire_recursive>
 8007bbe:	bf00      	nop
 8007bc0:	24003de9 	.word	0x24003de9

08007bc4 <__sfp_lock_release>:
 8007bc4:	4801      	ldr	r0, [pc, #4]	@ (8007bcc <__sfp_lock_release+0x8>)
 8007bc6:	f000 ba1b 	b.w	8008000 <__retarget_lock_release_recursive>
 8007bca:	bf00      	nop
 8007bcc:	24003de9 	.word	0x24003de9

08007bd0 <__sinit>:
 8007bd0:	b510      	push	{r4, lr}
 8007bd2:	4604      	mov	r4, r0
 8007bd4:	f7ff fff0 	bl	8007bb8 <__sfp_lock_acquire>
 8007bd8:	6a23      	ldr	r3, [r4, #32]
 8007bda:	b11b      	cbz	r3, 8007be4 <__sinit+0x14>
 8007bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007be0:	f7ff bff0 	b.w	8007bc4 <__sfp_lock_release>
 8007be4:	4b04      	ldr	r3, [pc, #16]	@ (8007bf8 <__sinit+0x28>)
 8007be6:	6223      	str	r3, [r4, #32]
 8007be8:	4b04      	ldr	r3, [pc, #16]	@ (8007bfc <__sinit+0x2c>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d1f5      	bne.n	8007bdc <__sinit+0xc>
 8007bf0:	f7ff ffc4 	bl	8007b7c <global_stdio_init.part.0>
 8007bf4:	e7f2      	b.n	8007bdc <__sinit+0xc>
 8007bf6:	bf00      	nop
 8007bf8:	08007b3d 	.word	0x08007b3d
 8007bfc:	24003de0 	.word	0x24003de0

08007c00 <_fwalk_sglue>:
 8007c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c04:	4607      	mov	r7, r0
 8007c06:	4688      	mov	r8, r1
 8007c08:	4614      	mov	r4, r2
 8007c0a:	2600      	movs	r6, #0
 8007c0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c10:	f1b9 0901 	subs.w	r9, r9, #1
 8007c14:	d505      	bpl.n	8007c22 <_fwalk_sglue+0x22>
 8007c16:	6824      	ldr	r4, [r4, #0]
 8007c18:	2c00      	cmp	r4, #0
 8007c1a:	d1f7      	bne.n	8007c0c <_fwalk_sglue+0xc>
 8007c1c:	4630      	mov	r0, r6
 8007c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c22:	89ab      	ldrh	r3, [r5, #12]
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d907      	bls.n	8007c38 <_fwalk_sglue+0x38>
 8007c28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	d003      	beq.n	8007c38 <_fwalk_sglue+0x38>
 8007c30:	4629      	mov	r1, r5
 8007c32:	4638      	mov	r0, r7
 8007c34:	47c0      	blx	r8
 8007c36:	4306      	orrs	r6, r0
 8007c38:	3568      	adds	r5, #104	@ 0x68
 8007c3a:	e7e9      	b.n	8007c10 <_fwalk_sglue+0x10>

08007c3c <iprintf>:
 8007c3c:	b40f      	push	{r0, r1, r2, r3}
 8007c3e:	b507      	push	{r0, r1, r2, lr}
 8007c40:	4906      	ldr	r1, [pc, #24]	@ (8007c5c <iprintf+0x20>)
 8007c42:	ab04      	add	r3, sp, #16
 8007c44:	6808      	ldr	r0, [r1, #0]
 8007c46:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c4a:	6881      	ldr	r1, [r0, #8]
 8007c4c:	9301      	str	r3, [sp, #4]
 8007c4e:	f000 fc53 	bl	80084f8 <_vfiprintf_r>
 8007c52:	b003      	add	sp, #12
 8007c54:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c58:	b004      	add	sp, #16
 8007c5a:	4770      	bx	lr
 8007c5c:	24000020 	.word	0x24000020

08007c60 <_puts_r>:
 8007c60:	6a03      	ldr	r3, [r0, #32]
 8007c62:	b570      	push	{r4, r5, r6, lr}
 8007c64:	6884      	ldr	r4, [r0, #8]
 8007c66:	4605      	mov	r5, r0
 8007c68:	460e      	mov	r6, r1
 8007c6a:	b90b      	cbnz	r3, 8007c70 <_puts_r+0x10>
 8007c6c:	f7ff ffb0 	bl	8007bd0 <__sinit>
 8007c70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007c72:	07db      	lsls	r3, r3, #31
 8007c74:	d405      	bmi.n	8007c82 <_puts_r+0x22>
 8007c76:	89a3      	ldrh	r3, [r4, #12]
 8007c78:	0598      	lsls	r0, r3, #22
 8007c7a:	d402      	bmi.n	8007c82 <_puts_r+0x22>
 8007c7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c7e:	f000 f9be 	bl	8007ffe <__retarget_lock_acquire_recursive>
 8007c82:	89a3      	ldrh	r3, [r4, #12]
 8007c84:	0719      	lsls	r1, r3, #28
 8007c86:	d502      	bpl.n	8007c8e <_puts_r+0x2e>
 8007c88:	6923      	ldr	r3, [r4, #16]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d135      	bne.n	8007cfa <_puts_r+0x9a>
 8007c8e:	4621      	mov	r1, r4
 8007c90:	4628      	mov	r0, r5
 8007c92:	f000 f8e5 	bl	8007e60 <__swsetup_r>
 8007c96:	b380      	cbz	r0, 8007cfa <_puts_r+0x9a>
 8007c98:	f04f 35ff 	mov.w	r5, #4294967295
 8007c9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007c9e:	07da      	lsls	r2, r3, #31
 8007ca0:	d405      	bmi.n	8007cae <_puts_r+0x4e>
 8007ca2:	89a3      	ldrh	r3, [r4, #12]
 8007ca4:	059b      	lsls	r3, r3, #22
 8007ca6:	d402      	bmi.n	8007cae <_puts_r+0x4e>
 8007ca8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007caa:	f000 f9a9 	bl	8008000 <__retarget_lock_release_recursive>
 8007cae:	4628      	mov	r0, r5
 8007cb0:	bd70      	pop	{r4, r5, r6, pc}
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	da04      	bge.n	8007cc0 <_puts_r+0x60>
 8007cb6:	69a2      	ldr	r2, [r4, #24]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	dc17      	bgt.n	8007cec <_puts_r+0x8c>
 8007cbc:	290a      	cmp	r1, #10
 8007cbe:	d015      	beq.n	8007cec <_puts_r+0x8c>
 8007cc0:	6823      	ldr	r3, [r4, #0]
 8007cc2:	1c5a      	adds	r2, r3, #1
 8007cc4:	6022      	str	r2, [r4, #0]
 8007cc6:	7019      	strb	r1, [r3, #0]
 8007cc8:	68a3      	ldr	r3, [r4, #8]
 8007cca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007cce:	3b01      	subs	r3, #1
 8007cd0:	60a3      	str	r3, [r4, #8]
 8007cd2:	2900      	cmp	r1, #0
 8007cd4:	d1ed      	bne.n	8007cb2 <_puts_r+0x52>
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	da11      	bge.n	8007cfe <_puts_r+0x9e>
 8007cda:	4622      	mov	r2, r4
 8007cdc:	210a      	movs	r1, #10
 8007cde:	4628      	mov	r0, r5
 8007ce0:	f000 f87f 	bl	8007de2 <__swbuf_r>
 8007ce4:	3001      	adds	r0, #1
 8007ce6:	d0d7      	beq.n	8007c98 <_puts_r+0x38>
 8007ce8:	250a      	movs	r5, #10
 8007cea:	e7d7      	b.n	8007c9c <_puts_r+0x3c>
 8007cec:	4622      	mov	r2, r4
 8007cee:	4628      	mov	r0, r5
 8007cf0:	f000 f877 	bl	8007de2 <__swbuf_r>
 8007cf4:	3001      	adds	r0, #1
 8007cf6:	d1e7      	bne.n	8007cc8 <_puts_r+0x68>
 8007cf8:	e7ce      	b.n	8007c98 <_puts_r+0x38>
 8007cfa:	3e01      	subs	r6, #1
 8007cfc:	e7e4      	b.n	8007cc8 <_puts_r+0x68>
 8007cfe:	6823      	ldr	r3, [r4, #0]
 8007d00:	1c5a      	adds	r2, r3, #1
 8007d02:	6022      	str	r2, [r4, #0]
 8007d04:	220a      	movs	r2, #10
 8007d06:	701a      	strb	r2, [r3, #0]
 8007d08:	e7ee      	b.n	8007ce8 <_puts_r+0x88>
	...

08007d0c <puts>:
 8007d0c:	4b02      	ldr	r3, [pc, #8]	@ (8007d18 <puts+0xc>)
 8007d0e:	4601      	mov	r1, r0
 8007d10:	6818      	ldr	r0, [r3, #0]
 8007d12:	f7ff bfa5 	b.w	8007c60 <_puts_r>
 8007d16:	bf00      	nop
 8007d18:	24000020 	.word	0x24000020

08007d1c <siprintf>:
 8007d1c:	b40e      	push	{r1, r2, r3}
 8007d1e:	b500      	push	{lr}
 8007d20:	b09c      	sub	sp, #112	@ 0x70
 8007d22:	ab1d      	add	r3, sp, #116	@ 0x74
 8007d24:	9002      	str	r0, [sp, #8]
 8007d26:	9006      	str	r0, [sp, #24]
 8007d28:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007d2c:	4809      	ldr	r0, [pc, #36]	@ (8007d54 <siprintf+0x38>)
 8007d2e:	9107      	str	r1, [sp, #28]
 8007d30:	9104      	str	r1, [sp, #16]
 8007d32:	4909      	ldr	r1, [pc, #36]	@ (8007d58 <siprintf+0x3c>)
 8007d34:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d38:	9105      	str	r1, [sp, #20]
 8007d3a:	6800      	ldr	r0, [r0, #0]
 8007d3c:	9301      	str	r3, [sp, #4]
 8007d3e:	a902      	add	r1, sp, #8
 8007d40:	f000 fab4 	bl	80082ac <_svfiprintf_r>
 8007d44:	9b02      	ldr	r3, [sp, #8]
 8007d46:	2200      	movs	r2, #0
 8007d48:	701a      	strb	r2, [r3, #0]
 8007d4a:	b01c      	add	sp, #112	@ 0x70
 8007d4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d50:	b003      	add	sp, #12
 8007d52:	4770      	bx	lr
 8007d54:	24000020 	.word	0x24000020
 8007d58:	ffff0208 	.word	0xffff0208

08007d5c <__sread>:
 8007d5c:	b510      	push	{r4, lr}
 8007d5e:	460c      	mov	r4, r1
 8007d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d64:	f000 f8fc 	bl	8007f60 <_read_r>
 8007d68:	2800      	cmp	r0, #0
 8007d6a:	bfab      	itete	ge
 8007d6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007d6e:	89a3      	ldrhlt	r3, [r4, #12]
 8007d70:	181b      	addge	r3, r3, r0
 8007d72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007d76:	bfac      	ite	ge
 8007d78:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007d7a:	81a3      	strhlt	r3, [r4, #12]
 8007d7c:	bd10      	pop	{r4, pc}

08007d7e <__swrite>:
 8007d7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d82:	461f      	mov	r7, r3
 8007d84:	898b      	ldrh	r3, [r1, #12]
 8007d86:	05db      	lsls	r3, r3, #23
 8007d88:	4605      	mov	r5, r0
 8007d8a:	460c      	mov	r4, r1
 8007d8c:	4616      	mov	r6, r2
 8007d8e:	d505      	bpl.n	8007d9c <__swrite+0x1e>
 8007d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d94:	2302      	movs	r3, #2
 8007d96:	2200      	movs	r2, #0
 8007d98:	f000 f8d0 	bl	8007f3c <_lseek_r>
 8007d9c:	89a3      	ldrh	r3, [r4, #12]
 8007d9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007da2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007da6:	81a3      	strh	r3, [r4, #12]
 8007da8:	4632      	mov	r2, r6
 8007daa:	463b      	mov	r3, r7
 8007dac:	4628      	mov	r0, r5
 8007dae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007db2:	f000 b8e7 	b.w	8007f84 <_write_r>

08007db6 <__sseek>:
 8007db6:	b510      	push	{r4, lr}
 8007db8:	460c      	mov	r4, r1
 8007dba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dbe:	f000 f8bd 	bl	8007f3c <_lseek_r>
 8007dc2:	1c43      	adds	r3, r0, #1
 8007dc4:	89a3      	ldrh	r3, [r4, #12]
 8007dc6:	bf15      	itete	ne
 8007dc8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007dca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007dce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007dd2:	81a3      	strheq	r3, [r4, #12]
 8007dd4:	bf18      	it	ne
 8007dd6:	81a3      	strhne	r3, [r4, #12]
 8007dd8:	bd10      	pop	{r4, pc}

08007dda <__sclose>:
 8007dda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dde:	f000 b89d 	b.w	8007f1c <_close_r>

08007de2 <__swbuf_r>:
 8007de2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007de4:	460e      	mov	r6, r1
 8007de6:	4614      	mov	r4, r2
 8007de8:	4605      	mov	r5, r0
 8007dea:	b118      	cbz	r0, 8007df4 <__swbuf_r+0x12>
 8007dec:	6a03      	ldr	r3, [r0, #32]
 8007dee:	b90b      	cbnz	r3, 8007df4 <__swbuf_r+0x12>
 8007df0:	f7ff feee 	bl	8007bd0 <__sinit>
 8007df4:	69a3      	ldr	r3, [r4, #24]
 8007df6:	60a3      	str	r3, [r4, #8]
 8007df8:	89a3      	ldrh	r3, [r4, #12]
 8007dfa:	071a      	lsls	r2, r3, #28
 8007dfc:	d501      	bpl.n	8007e02 <__swbuf_r+0x20>
 8007dfe:	6923      	ldr	r3, [r4, #16]
 8007e00:	b943      	cbnz	r3, 8007e14 <__swbuf_r+0x32>
 8007e02:	4621      	mov	r1, r4
 8007e04:	4628      	mov	r0, r5
 8007e06:	f000 f82b 	bl	8007e60 <__swsetup_r>
 8007e0a:	b118      	cbz	r0, 8007e14 <__swbuf_r+0x32>
 8007e0c:	f04f 37ff 	mov.w	r7, #4294967295
 8007e10:	4638      	mov	r0, r7
 8007e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e14:	6823      	ldr	r3, [r4, #0]
 8007e16:	6922      	ldr	r2, [r4, #16]
 8007e18:	1a98      	subs	r0, r3, r2
 8007e1a:	6963      	ldr	r3, [r4, #20]
 8007e1c:	b2f6      	uxtb	r6, r6
 8007e1e:	4283      	cmp	r3, r0
 8007e20:	4637      	mov	r7, r6
 8007e22:	dc05      	bgt.n	8007e30 <__swbuf_r+0x4e>
 8007e24:	4621      	mov	r1, r4
 8007e26:	4628      	mov	r0, r5
 8007e28:	f000 fe90 	bl	8008b4c <_fflush_r>
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	d1ed      	bne.n	8007e0c <__swbuf_r+0x2a>
 8007e30:	68a3      	ldr	r3, [r4, #8]
 8007e32:	3b01      	subs	r3, #1
 8007e34:	60a3      	str	r3, [r4, #8]
 8007e36:	6823      	ldr	r3, [r4, #0]
 8007e38:	1c5a      	adds	r2, r3, #1
 8007e3a:	6022      	str	r2, [r4, #0]
 8007e3c:	701e      	strb	r6, [r3, #0]
 8007e3e:	6962      	ldr	r2, [r4, #20]
 8007e40:	1c43      	adds	r3, r0, #1
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d004      	beq.n	8007e50 <__swbuf_r+0x6e>
 8007e46:	89a3      	ldrh	r3, [r4, #12]
 8007e48:	07db      	lsls	r3, r3, #31
 8007e4a:	d5e1      	bpl.n	8007e10 <__swbuf_r+0x2e>
 8007e4c:	2e0a      	cmp	r6, #10
 8007e4e:	d1df      	bne.n	8007e10 <__swbuf_r+0x2e>
 8007e50:	4621      	mov	r1, r4
 8007e52:	4628      	mov	r0, r5
 8007e54:	f000 fe7a 	bl	8008b4c <_fflush_r>
 8007e58:	2800      	cmp	r0, #0
 8007e5a:	d0d9      	beq.n	8007e10 <__swbuf_r+0x2e>
 8007e5c:	e7d6      	b.n	8007e0c <__swbuf_r+0x2a>
	...

08007e60 <__swsetup_r>:
 8007e60:	b538      	push	{r3, r4, r5, lr}
 8007e62:	4b29      	ldr	r3, [pc, #164]	@ (8007f08 <__swsetup_r+0xa8>)
 8007e64:	4605      	mov	r5, r0
 8007e66:	6818      	ldr	r0, [r3, #0]
 8007e68:	460c      	mov	r4, r1
 8007e6a:	b118      	cbz	r0, 8007e74 <__swsetup_r+0x14>
 8007e6c:	6a03      	ldr	r3, [r0, #32]
 8007e6e:	b90b      	cbnz	r3, 8007e74 <__swsetup_r+0x14>
 8007e70:	f7ff feae 	bl	8007bd0 <__sinit>
 8007e74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e78:	0719      	lsls	r1, r3, #28
 8007e7a:	d422      	bmi.n	8007ec2 <__swsetup_r+0x62>
 8007e7c:	06da      	lsls	r2, r3, #27
 8007e7e:	d407      	bmi.n	8007e90 <__swsetup_r+0x30>
 8007e80:	2209      	movs	r2, #9
 8007e82:	602a      	str	r2, [r5, #0]
 8007e84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e88:	81a3      	strh	r3, [r4, #12]
 8007e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e8e:	e033      	b.n	8007ef8 <__swsetup_r+0x98>
 8007e90:	0758      	lsls	r0, r3, #29
 8007e92:	d512      	bpl.n	8007eba <__swsetup_r+0x5a>
 8007e94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e96:	b141      	cbz	r1, 8007eaa <__swsetup_r+0x4a>
 8007e98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007e9c:	4299      	cmp	r1, r3
 8007e9e:	d002      	beq.n	8007ea6 <__swsetup_r+0x46>
 8007ea0:	4628      	mov	r0, r5
 8007ea2:	f000 f8af 	bl	8008004 <_free_r>
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	6363      	str	r3, [r4, #52]	@ 0x34
 8007eaa:	89a3      	ldrh	r3, [r4, #12]
 8007eac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007eb0:	81a3      	strh	r3, [r4, #12]
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	6063      	str	r3, [r4, #4]
 8007eb6:	6923      	ldr	r3, [r4, #16]
 8007eb8:	6023      	str	r3, [r4, #0]
 8007eba:	89a3      	ldrh	r3, [r4, #12]
 8007ebc:	f043 0308 	orr.w	r3, r3, #8
 8007ec0:	81a3      	strh	r3, [r4, #12]
 8007ec2:	6923      	ldr	r3, [r4, #16]
 8007ec4:	b94b      	cbnz	r3, 8007eda <__swsetup_r+0x7a>
 8007ec6:	89a3      	ldrh	r3, [r4, #12]
 8007ec8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007ecc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ed0:	d003      	beq.n	8007eda <__swsetup_r+0x7a>
 8007ed2:	4621      	mov	r1, r4
 8007ed4:	4628      	mov	r0, r5
 8007ed6:	f000 fe87 	bl	8008be8 <__smakebuf_r>
 8007eda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ede:	f013 0201 	ands.w	r2, r3, #1
 8007ee2:	d00a      	beq.n	8007efa <__swsetup_r+0x9a>
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	60a2      	str	r2, [r4, #8]
 8007ee8:	6962      	ldr	r2, [r4, #20]
 8007eea:	4252      	negs	r2, r2
 8007eec:	61a2      	str	r2, [r4, #24]
 8007eee:	6922      	ldr	r2, [r4, #16]
 8007ef0:	b942      	cbnz	r2, 8007f04 <__swsetup_r+0xa4>
 8007ef2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007ef6:	d1c5      	bne.n	8007e84 <__swsetup_r+0x24>
 8007ef8:	bd38      	pop	{r3, r4, r5, pc}
 8007efa:	0799      	lsls	r1, r3, #30
 8007efc:	bf58      	it	pl
 8007efe:	6962      	ldrpl	r2, [r4, #20]
 8007f00:	60a2      	str	r2, [r4, #8]
 8007f02:	e7f4      	b.n	8007eee <__swsetup_r+0x8e>
 8007f04:	2000      	movs	r0, #0
 8007f06:	e7f7      	b.n	8007ef8 <__swsetup_r+0x98>
 8007f08:	24000020 	.word	0x24000020

08007f0c <memset>:
 8007f0c:	4402      	add	r2, r0
 8007f0e:	4603      	mov	r3, r0
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d100      	bne.n	8007f16 <memset+0xa>
 8007f14:	4770      	bx	lr
 8007f16:	f803 1b01 	strb.w	r1, [r3], #1
 8007f1a:	e7f9      	b.n	8007f10 <memset+0x4>

08007f1c <_close_r>:
 8007f1c:	b538      	push	{r3, r4, r5, lr}
 8007f1e:	4d06      	ldr	r5, [pc, #24]	@ (8007f38 <_close_r+0x1c>)
 8007f20:	2300      	movs	r3, #0
 8007f22:	4604      	mov	r4, r0
 8007f24:	4608      	mov	r0, r1
 8007f26:	602b      	str	r3, [r5, #0]
 8007f28:	f7f9 feee 	bl	8001d08 <_close>
 8007f2c:	1c43      	adds	r3, r0, #1
 8007f2e:	d102      	bne.n	8007f36 <_close_r+0x1a>
 8007f30:	682b      	ldr	r3, [r5, #0]
 8007f32:	b103      	cbz	r3, 8007f36 <_close_r+0x1a>
 8007f34:	6023      	str	r3, [r4, #0]
 8007f36:	bd38      	pop	{r3, r4, r5, pc}
 8007f38:	24003de4 	.word	0x24003de4

08007f3c <_lseek_r>:
 8007f3c:	b538      	push	{r3, r4, r5, lr}
 8007f3e:	4d07      	ldr	r5, [pc, #28]	@ (8007f5c <_lseek_r+0x20>)
 8007f40:	4604      	mov	r4, r0
 8007f42:	4608      	mov	r0, r1
 8007f44:	4611      	mov	r1, r2
 8007f46:	2200      	movs	r2, #0
 8007f48:	602a      	str	r2, [r5, #0]
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	f7f9 ff03 	bl	8001d56 <_lseek>
 8007f50:	1c43      	adds	r3, r0, #1
 8007f52:	d102      	bne.n	8007f5a <_lseek_r+0x1e>
 8007f54:	682b      	ldr	r3, [r5, #0]
 8007f56:	b103      	cbz	r3, 8007f5a <_lseek_r+0x1e>
 8007f58:	6023      	str	r3, [r4, #0]
 8007f5a:	bd38      	pop	{r3, r4, r5, pc}
 8007f5c:	24003de4 	.word	0x24003de4

08007f60 <_read_r>:
 8007f60:	b538      	push	{r3, r4, r5, lr}
 8007f62:	4d07      	ldr	r5, [pc, #28]	@ (8007f80 <_read_r+0x20>)
 8007f64:	4604      	mov	r4, r0
 8007f66:	4608      	mov	r0, r1
 8007f68:	4611      	mov	r1, r2
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	602a      	str	r2, [r5, #0]
 8007f6e:	461a      	mov	r2, r3
 8007f70:	f7f9 fe91 	bl	8001c96 <_read>
 8007f74:	1c43      	adds	r3, r0, #1
 8007f76:	d102      	bne.n	8007f7e <_read_r+0x1e>
 8007f78:	682b      	ldr	r3, [r5, #0]
 8007f7a:	b103      	cbz	r3, 8007f7e <_read_r+0x1e>
 8007f7c:	6023      	str	r3, [r4, #0]
 8007f7e:	bd38      	pop	{r3, r4, r5, pc}
 8007f80:	24003de4 	.word	0x24003de4

08007f84 <_write_r>:
 8007f84:	b538      	push	{r3, r4, r5, lr}
 8007f86:	4d07      	ldr	r5, [pc, #28]	@ (8007fa4 <_write_r+0x20>)
 8007f88:	4604      	mov	r4, r0
 8007f8a:	4608      	mov	r0, r1
 8007f8c:	4611      	mov	r1, r2
 8007f8e:	2200      	movs	r2, #0
 8007f90:	602a      	str	r2, [r5, #0]
 8007f92:	461a      	mov	r2, r3
 8007f94:	f7f9 fe9c 	bl	8001cd0 <_write>
 8007f98:	1c43      	adds	r3, r0, #1
 8007f9a:	d102      	bne.n	8007fa2 <_write_r+0x1e>
 8007f9c:	682b      	ldr	r3, [r5, #0]
 8007f9e:	b103      	cbz	r3, 8007fa2 <_write_r+0x1e>
 8007fa0:	6023      	str	r3, [r4, #0]
 8007fa2:	bd38      	pop	{r3, r4, r5, pc}
 8007fa4:	24003de4 	.word	0x24003de4

08007fa8 <__errno>:
 8007fa8:	4b01      	ldr	r3, [pc, #4]	@ (8007fb0 <__errno+0x8>)
 8007faa:	6818      	ldr	r0, [r3, #0]
 8007fac:	4770      	bx	lr
 8007fae:	bf00      	nop
 8007fb0:	24000020 	.word	0x24000020

08007fb4 <__libc_init_array>:
 8007fb4:	b570      	push	{r4, r5, r6, lr}
 8007fb6:	4d0d      	ldr	r5, [pc, #52]	@ (8007fec <__libc_init_array+0x38>)
 8007fb8:	4c0d      	ldr	r4, [pc, #52]	@ (8007ff0 <__libc_init_array+0x3c>)
 8007fba:	1b64      	subs	r4, r4, r5
 8007fbc:	10a4      	asrs	r4, r4, #2
 8007fbe:	2600      	movs	r6, #0
 8007fc0:	42a6      	cmp	r6, r4
 8007fc2:	d109      	bne.n	8007fd8 <__libc_init_array+0x24>
 8007fc4:	4d0b      	ldr	r5, [pc, #44]	@ (8007ff4 <__libc_init_array+0x40>)
 8007fc6:	4c0c      	ldr	r4, [pc, #48]	@ (8007ff8 <__libc_init_array+0x44>)
 8007fc8:	f000 feda 	bl	8008d80 <_init>
 8007fcc:	1b64      	subs	r4, r4, r5
 8007fce:	10a4      	asrs	r4, r4, #2
 8007fd0:	2600      	movs	r6, #0
 8007fd2:	42a6      	cmp	r6, r4
 8007fd4:	d105      	bne.n	8007fe2 <__libc_init_array+0x2e>
 8007fd6:	bd70      	pop	{r4, r5, r6, pc}
 8007fd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fdc:	4798      	blx	r3
 8007fde:	3601      	adds	r6, #1
 8007fe0:	e7ee      	b.n	8007fc0 <__libc_init_array+0xc>
 8007fe2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fe6:	4798      	blx	r3
 8007fe8:	3601      	adds	r6, #1
 8007fea:	e7f2      	b.n	8007fd2 <__libc_init_array+0x1e>
 8007fec:	0800b8d0 	.word	0x0800b8d0
 8007ff0:	0800b8d0 	.word	0x0800b8d0
 8007ff4:	0800b8d0 	.word	0x0800b8d0
 8007ff8:	0800b8d4 	.word	0x0800b8d4

08007ffc <__retarget_lock_init_recursive>:
 8007ffc:	4770      	bx	lr

08007ffe <__retarget_lock_acquire_recursive>:
 8007ffe:	4770      	bx	lr

08008000 <__retarget_lock_release_recursive>:
 8008000:	4770      	bx	lr
	...

08008004 <_free_r>:
 8008004:	b538      	push	{r3, r4, r5, lr}
 8008006:	4605      	mov	r5, r0
 8008008:	2900      	cmp	r1, #0
 800800a:	d041      	beq.n	8008090 <_free_r+0x8c>
 800800c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008010:	1f0c      	subs	r4, r1, #4
 8008012:	2b00      	cmp	r3, #0
 8008014:	bfb8      	it	lt
 8008016:	18e4      	addlt	r4, r4, r3
 8008018:	f000 f8e0 	bl	80081dc <__malloc_lock>
 800801c:	4a1d      	ldr	r2, [pc, #116]	@ (8008094 <_free_r+0x90>)
 800801e:	6813      	ldr	r3, [r2, #0]
 8008020:	b933      	cbnz	r3, 8008030 <_free_r+0x2c>
 8008022:	6063      	str	r3, [r4, #4]
 8008024:	6014      	str	r4, [r2, #0]
 8008026:	4628      	mov	r0, r5
 8008028:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800802c:	f000 b8dc 	b.w	80081e8 <__malloc_unlock>
 8008030:	42a3      	cmp	r3, r4
 8008032:	d908      	bls.n	8008046 <_free_r+0x42>
 8008034:	6820      	ldr	r0, [r4, #0]
 8008036:	1821      	adds	r1, r4, r0
 8008038:	428b      	cmp	r3, r1
 800803a:	bf01      	itttt	eq
 800803c:	6819      	ldreq	r1, [r3, #0]
 800803e:	685b      	ldreq	r3, [r3, #4]
 8008040:	1809      	addeq	r1, r1, r0
 8008042:	6021      	streq	r1, [r4, #0]
 8008044:	e7ed      	b.n	8008022 <_free_r+0x1e>
 8008046:	461a      	mov	r2, r3
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	b10b      	cbz	r3, 8008050 <_free_r+0x4c>
 800804c:	42a3      	cmp	r3, r4
 800804e:	d9fa      	bls.n	8008046 <_free_r+0x42>
 8008050:	6811      	ldr	r1, [r2, #0]
 8008052:	1850      	adds	r0, r2, r1
 8008054:	42a0      	cmp	r0, r4
 8008056:	d10b      	bne.n	8008070 <_free_r+0x6c>
 8008058:	6820      	ldr	r0, [r4, #0]
 800805a:	4401      	add	r1, r0
 800805c:	1850      	adds	r0, r2, r1
 800805e:	4283      	cmp	r3, r0
 8008060:	6011      	str	r1, [r2, #0]
 8008062:	d1e0      	bne.n	8008026 <_free_r+0x22>
 8008064:	6818      	ldr	r0, [r3, #0]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	6053      	str	r3, [r2, #4]
 800806a:	4408      	add	r0, r1
 800806c:	6010      	str	r0, [r2, #0]
 800806e:	e7da      	b.n	8008026 <_free_r+0x22>
 8008070:	d902      	bls.n	8008078 <_free_r+0x74>
 8008072:	230c      	movs	r3, #12
 8008074:	602b      	str	r3, [r5, #0]
 8008076:	e7d6      	b.n	8008026 <_free_r+0x22>
 8008078:	6820      	ldr	r0, [r4, #0]
 800807a:	1821      	adds	r1, r4, r0
 800807c:	428b      	cmp	r3, r1
 800807e:	bf04      	itt	eq
 8008080:	6819      	ldreq	r1, [r3, #0]
 8008082:	685b      	ldreq	r3, [r3, #4]
 8008084:	6063      	str	r3, [r4, #4]
 8008086:	bf04      	itt	eq
 8008088:	1809      	addeq	r1, r1, r0
 800808a:	6021      	streq	r1, [r4, #0]
 800808c:	6054      	str	r4, [r2, #4]
 800808e:	e7ca      	b.n	8008026 <_free_r+0x22>
 8008090:	bd38      	pop	{r3, r4, r5, pc}
 8008092:	bf00      	nop
 8008094:	24003df0 	.word	0x24003df0

08008098 <sbrk_aligned>:
 8008098:	b570      	push	{r4, r5, r6, lr}
 800809a:	4e0f      	ldr	r6, [pc, #60]	@ (80080d8 <sbrk_aligned+0x40>)
 800809c:	460c      	mov	r4, r1
 800809e:	6831      	ldr	r1, [r6, #0]
 80080a0:	4605      	mov	r5, r0
 80080a2:	b911      	cbnz	r1, 80080aa <sbrk_aligned+0x12>
 80080a4:	f000 fe18 	bl	8008cd8 <_sbrk_r>
 80080a8:	6030      	str	r0, [r6, #0]
 80080aa:	4621      	mov	r1, r4
 80080ac:	4628      	mov	r0, r5
 80080ae:	f000 fe13 	bl	8008cd8 <_sbrk_r>
 80080b2:	1c43      	adds	r3, r0, #1
 80080b4:	d103      	bne.n	80080be <sbrk_aligned+0x26>
 80080b6:	f04f 34ff 	mov.w	r4, #4294967295
 80080ba:	4620      	mov	r0, r4
 80080bc:	bd70      	pop	{r4, r5, r6, pc}
 80080be:	1cc4      	adds	r4, r0, #3
 80080c0:	f024 0403 	bic.w	r4, r4, #3
 80080c4:	42a0      	cmp	r0, r4
 80080c6:	d0f8      	beq.n	80080ba <sbrk_aligned+0x22>
 80080c8:	1a21      	subs	r1, r4, r0
 80080ca:	4628      	mov	r0, r5
 80080cc:	f000 fe04 	bl	8008cd8 <_sbrk_r>
 80080d0:	3001      	adds	r0, #1
 80080d2:	d1f2      	bne.n	80080ba <sbrk_aligned+0x22>
 80080d4:	e7ef      	b.n	80080b6 <sbrk_aligned+0x1e>
 80080d6:	bf00      	nop
 80080d8:	24003dec 	.word	0x24003dec

080080dc <_malloc_r>:
 80080dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080e0:	1ccd      	adds	r5, r1, #3
 80080e2:	f025 0503 	bic.w	r5, r5, #3
 80080e6:	3508      	adds	r5, #8
 80080e8:	2d0c      	cmp	r5, #12
 80080ea:	bf38      	it	cc
 80080ec:	250c      	movcc	r5, #12
 80080ee:	2d00      	cmp	r5, #0
 80080f0:	4606      	mov	r6, r0
 80080f2:	db01      	blt.n	80080f8 <_malloc_r+0x1c>
 80080f4:	42a9      	cmp	r1, r5
 80080f6:	d904      	bls.n	8008102 <_malloc_r+0x26>
 80080f8:	230c      	movs	r3, #12
 80080fa:	6033      	str	r3, [r6, #0]
 80080fc:	2000      	movs	r0, #0
 80080fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008102:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80081d8 <_malloc_r+0xfc>
 8008106:	f000 f869 	bl	80081dc <__malloc_lock>
 800810a:	f8d8 3000 	ldr.w	r3, [r8]
 800810e:	461c      	mov	r4, r3
 8008110:	bb44      	cbnz	r4, 8008164 <_malloc_r+0x88>
 8008112:	4629      	mov	r1, r5
 8008114:	4630      	mov	r0, r6
 8008116:	f7ff ffbf 	bl	8008098 <sbrk_aligned>
 800811a:	1c43      	adds	r3, r0, #1
 800811c:	4604      	mov	r4, r0
 800811e:	d158      	bne.n	80081d2 <_malloc_r+0xf6>
 8008120:	f8d8 4000 	ldr.w	r4, [r8]
 8008124:	4627      	mov	r7, r4
 8008126:	2f00      	cmp	r7, #0
 8008128:	d143      	bne.n	80081b2 <_malloc_r+0xd6>
 800812a:	2c00      	cmp	r4, #0
 800812c:	d04b      	beq.n	80081c6 <_malloc_r+0xea>
 800812e:	6823      	ldr	r3, [r4, #0]
 8008130:	4639      	mov	r1, r7
 8008132:	4630      	mov	r0, r6
 8008134:	eb04 0903 	add.w	r9, r4, r3
 8008138:	f000 fdce 	bl	8008cd8 <_sbrk_r>
 800813c:	4581      	cmp	r9, r0
 800813e:	d142      	bne.n	80081c6 <_malloc_r+0xea>
 8008140:	6821      	ldr	r1, [r4, #0]
 8008142:	1a6d      	subs	r5, r5, r1
 8008144:	4629      	mov	r1, r5
 8008146:	4630      	mov	r0, r6
 8008148:	f7ff ffa6 	bl	8008098 <sbrk_aligned>
 800814c:	3001      	adds	r0, #1
 800814e:	d03a      	beq.n	80081c6 <_malloc_r+0xea>
 8008150:	6823      	ldr	r3, [r4, #0]
 8008152:	442b      	add	r3, r5
 8008154:	6023      	str	r3, [r4, #0]
 8008156:	f8d8 3000 	ldr.w	r3, [r8]
 800815a:	685a      	ldr	r2, [r3, #4]
 800815c:	bb62      	cbnz	r2, 80081b8 <_malloc_r+0xdc>
 800815e:	f8c8 7000 	str.w	r7, [r8]
 8008162:	e00f      	b.n	8008184 <_malloc_r+0xa8>
 8008164:	6822      	ldr	r2, [r4, #0]
 8008166:	1b52      	subs	r2, r2, r5
 8008168:	d420      	bmi.n	80081ac <_malloc_r+0xd0>
 800816a:	2a0b      	cmp	r2, #11
 800816c:	d917      	bls.n	800819e <_malloc_r+0xc2>
 800816e:	1961      	adds	r1, r4, r5
 8008170:	42a3      	cmp	r3, r4
 8008172:	6025      	str	r5, [r4, #0]
 8008174:	bf18      	it	ne
 8008176:	6059      	strne	r1, [r3, #4]
 8008178:	6863      	ldr	r3, [r4, #4]
 800817a:	bf08      	it	eq
 800817c:	f8c8 1000 	streq.w	r1, [r8]
 8008180:	5162      	str	r2, [r4, r5]
 8008182:	604b      	str	r3, [r1, #4]
 8008184:	4630      	mov	r0, r6
 8008186:	f000 f82f 	bl	80081e8 <__malloc_unlock>
 800818a:	f104 000b 	add.w	r0, r4, #11
 800818e:	1d23      	adds	r3, r4, #4
 8008190:	f020 0007 	bic.w	r0, r0, #7
 8008194:	1ac2      	subs	r2, r0, r3
 8008196:	bf1c      	itt	ne
 8008198:	1a1b      	subne	r3, r3, r0
 800819a:	50a3      	strne	r3, [r4, r2]
 800819c:	e7af      	b.n	80080fe <_malloc_r+0x22>
 800819e:	6862      	ldr	r2, [r4, #4]
 80081a0:	42a3      	cmp	r3, r4
 80081a2:	bf0c      	ite	eq
 80081a4:	f8c8 2000 	streq.w	r2, [r8]
 80081a8:	605a      	strne	r2, [r3, #4]
 80081aa:	e7eb      	b.n	8008184 <_malloc_r+0xa8>
 80081ac:	4623      	mov	r3, r4
 80081ae:	6864      	ldr	r4, [r4, #4]
 80081b0:	e7ae      	b.n	8008110 <_malloc_r+0x34>
 80081b2:	463c      	mov	r4, r7
 80081b4:	687f      	ldr	r7, [r7, #4]
 80081b6:	e7b6      	b.n	8008126 <_malloc_r+0x4a>
 80081b8:	461a      	mov	r2, r3
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	42a3      	cmp	r3, r4
 80081be:	d1fb      	bne.n	80081b8 <_malloc_r+0xdc>
 80081c0:	2300      	movs	r3, #0
 80081c2:	6053      	str	r3, [r2, #4]
 80081c4:	e7de      	b.n	8008184 <_malloc_r+0xa8>
 80081c6:	230c      	movs	r3, #12
 80081c8:	6033      	str	r3, [r6, #0]
 80081ca:	4630      	mov	r0, r6
 80081cc:	f000 f80c 	bl	80081e8 <__malloc_unlock>
 80081d0:	e794      	b.n	80080fc <_malloc_r+0x20>
 80081d2:	6005      	str	r5, [r0, #0]
 80081d4:	e7d6      	b.n	8008184 <_malloc_r+0xa8>
 80081d6:	bf00      	nop
 80081d8:	24003df0 	.word	0x24003df0

080081dc <__malloc_lock>:
 80081dc:	4801      	ldr	r0, [pc, #4]	@ (80081e4 <__malloc_lock+0x8>)
 80081de:	f7ff bf0e 	b.w	8007ffe <__retarget_lock_acquire_recursive>
 80081e2:	bf00      	nop
 80081e4:	24003de8 	.word	0x24003de8

080081e8 <__malloc_unlock>:
 80081e8:	4801      	ldr	r0, [pc, #4]	@ (80081f0 <__malloc_unlock+0x8>)
 80081ea:	f7ff bf09 	b.w	8008000 <__retarget_lock_release_recursive>
 80081ee:	bf00      	nop
 80081f0:	24003de8 	.word	0x24003de8

080081f4 <__ssputs_r>:
 80081f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081f8:	688e      	ldr	r6, [r1, #8]
 80081fa:	461f      	mov	r7, r3
 80081fc:	42be      	cmp	r6, r7
 80081fe:	680b      	ldr	r3, [r1, #0]
 8008200:	4682      	mov	sl, r0
 8008202:	460c      	mov	r4, r1
 8008204:	4690      	mov	r8, r2
 8008206:	d82d      	bhi.n	8008264 <__ssputs_r+0x70>
 8008208:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800820c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008210:	d026      	beq.n	8008260 <__ssputs_r+0x6c>
 8008212:	6965      	ldr	r5, [r4, #20]
 8008214:	6909      	ldr	r1, [r1, #16]
 8008216:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800821a:	eba3 0901 	sub.w	r9, r3, r1
 800821e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008222:	1c7b      	adds	r3, r7, #1
 8008224:	444b      	add	r3, r9
 8008226:	106d      	asrs	r5, r5, #1
 8008228:	429d      	cmp	r5, r3
 800822a:	bf38      	it	cc
 800822c:	461d      	movcc	r5, r3
 800822e:	0553      	lsls	r3, r2, #21
 8008230:	d527      	bpl.n	8008282 <__ssputs_r+0x8e>
 8008232:	4629      	mov	r1, r5
 8008234:	f7ff ff52 	bl	80080dc <_malloc_r>
 8008238:	4606      	mov	r6, r0
 800823a:	b360      	cbz	r0, 8008296 <__ssputs_r+0xa2>
 800823c:	6921      	ldr	r1, [r4, #16]
 800823e:	464a      	mov	r2, r9
 8008240:	f000 fd5a 	bl	8008cf8 <memcpy>
 8008244:	89a3      	ldrh	r3, [r4, #12]
 8008246:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800824a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800824e:	81a3      	strh	r3, [r4, #12]
 8008250:	6126      	str	r6, [r4, #16]
 8008252:	6165      	str	r5, [r4, #20]
 8008254:	444e      	add	r6, r9
 8008256:	eba5 0509 	sub.w	r5, r5, r9
 800825a:	6026      	str	r6, [r4, #0]
 800825c:	60a5      	str	r5, [r4, #8]
 800825e:	463e      	mov	r6, r7
 8008260:	42be      	cmp	r6, r7
 8008262:	d900      	bls.n	8008266 <__ssputs_r+0x72>
 8008264:	463e      	mov	r6, r7
 8008266:	6820      	ldr	r0, [r4, #0]
 8008268:	4632      	mov	r2, r6
 800826a:	4641      	mov	r1, r8
 800826c:	f000 fcf8 	bl	8008c60 <memmove>
 8008270:	68a3      	ldr	r3, [r4, #8]
 8008272:	1b9b      	subs	r3, r3, r6
 8008274:	60a3      	str	r3, [r4, #8]
 8008276:	6823      	ldr	r3, [r4, #0]
 8008278:	4433      	add	r3, r6
 800827a:	6023      	str	r3, [r4, #0]
 800827c:	2000      	movs	r0, #0
 800827e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008282:	462a      	mov	r2, r5
 8008284:	f000 fd46 	bl	8008d14 <_realloc_r>
 8008288:	4606      	mov	r6, r0
 800828a:	2800      	cmp	r0, #0
 800828c:	d1e0      	bne.n	8008250 <__ssputs_r+0x5c>
 800828e:	6921      	ldr	r1, [r4, #16]
 8008290:	4650      	mov	r0, sl
 8008292:	f7ff feb7 	bl	8008004 <_free_r>
 8008296:	230c      	movs	r3, #12
 8008298:	f8ca 3000 	str.w	r3, [sl]
 800829c:	89a3      	ldrh	r3, [r4, #12]
 800829e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082a2:	81a3      	strh	r3, [r4, #12]
 80082a4:	f04f 30ff 	mov.w	r0, #4294967295
 80082a8:	e7e9      	b.n	800827e <__ssputs_r+0x8a>
	...

080082ac <_svfiprintf_r>:
 80082ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082b0:	4698      	mov	r8, r3
 80082b2:	898b      	ldrh	r3, [r1, #12]
 80082b4:	061b      	lsls	r3, r3, #24
 80082b6:	b09d      	sub	sp, #116	@ 0x74
 80082b8:	4607      	mov	r7, r0
 80082ba:	460d      	mov	r5, r1
 80082bc:	4614      	mov	r4, r2
 80082be:	d510      	bpl.n	80082e2 <_svfiprintf_r+0x36>
 80082c0:	690b      	ldr	r3, [r1, #16]
 80082c2:	b973      	cbnz	r3, 80082e2 <_svfiprintf_r+0x36>
 80082c4:	2140      	movs	r1, #64	@ 0x40
 80082c6:	f7ff ff09 	bl	80080dc <_malloc_r>
 80082ca:	6028      	str	r0, [r5, #0]
 80082cc:	6128      	str	r0, [r5, #16]
 80082ce:	b930      	cbnz	r0, 80082de <_svfiprintf_r+0x32>
 80082d0:	230c      	movs	r3, #12
 80082d2:	603b      	str	r3, [r7, #0]
 80082d4:	f04f 30ff 	mov.w	r0, #4294967295
 80082d8:	b01d      	add	sp, #116	@ 0x74
 80082da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082de:	2340      	movs	r3, #64	@ 0x40
 80082e0:	616b      	str	r3, [r5, #20]
 80082e2:	2300      	movs	r3, #0
 80082e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80082e6:	2320      	movs	r3, #32
 80082e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80082ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80082f0:	2330      	movs	r3, #48	@ 0x30
 80082f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008490 <_svfiprintf_r+0x1e4>
 80082f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80082fa:	f04f 0901 	mov.w	r9, #1
 80082fe:	4623      	mov	r3, r4
 8008300:	469a      	mov	sl, r3
 8008302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008306:	b10a      	cbz	r2, 800830c <_svfiprintf_r+0x60>
 8008308:	2a25      	cmp	r2, #37	@ 0x25
 800830a:	d1f9      	bne.n	8008300 <_svfiprintf_r+0x54>
 800830c:	ebba 0b04 	subs.w	fp, sl, r4
 8008310:	d00b      	beq.n	800832a <_svfiprintf_r+0x7e>
 8008312:	465b      	mov	r3, fp
 8008314:	4622      	mov	r2, r4
 8008316:	4629      	mov	r1, r5
 8008318:	4638      	mov	r0, r7
 800831a:	f7ff ff6b 	bl	80081f4 <__ssputs_r>
 800831e:	3001      	adds	r0, #1
 8008320:	f000 80a7 	beq.w	8008472 <_svfiprintf_r+0x1c6>
 8008324:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008326:	445a      	add	r2, fp
 8008328:	9209      	str	r2, [sp, #36]	@ 0x24
 800832a:	f89a 3000 	ldrb.w	r3, [sl]
 800832e:	2b00      	cmp	r3, #0
 8008330:	f000 809f 	beq.w	8008472 <_svfiprintf_r+0x1c6>
 8008334:	2300      	movs	r3, #0
 8008336:	f04f 32ff 	mov.w	r2, #4294967295
 800833a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800833e:	f10a 0a01 	add.w	sl, sl, #1
 8008342:	9304      	str	r3, [sp, #16]
 8008344:	9307      	str	r3, [sp, #28]
 8008346:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800834a:	931a      	str	r3, [sp, #104]	@ 0x68
 800834c:	4654      	mov	r4, sl
 800834e:	2205      	movs	r2, #5
 8008350:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008354:	484e      	ldr	r0, [pc, #312]	@ (8008490 <_svfiprintf_r+0x1e4>)
 8008356:	f7f7 ffdb 	bl	8000310 <memchr>
 800835a:	9a04      	ldr	r2, [sp, #16]
 800835c:	b9d8      	cbnz	r0, 8008396 <_svfiprintf_r+0xea>
 800835e:	06d0      	lsls	r0, r2, #27
 8008360:	bf44      	itt	mi
 8008362:	2320      	movmi	r3, #32
 8008364:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008368:	0711      	lsls	r1, r2, #28
 800836a:	bf44      	itt	mi
 800836c:	232b      	movmi	r3, #43	@ 0x2b
 800836e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008372:	f89a 3000 	ldrb.w	r3, [sl]
 8008376:	2b2a      	cmp	r3, #42	@ 0x2a
 8008378:	d015      	beq.n	80083a6 <_svfiprintf_r+0xfa>
 800837a:	9a07      	ldr	r2, [sp, #28]
 800837c:	4654      	mov	r4, sl
 800837e:	2000      	movs	r0, #0
 8008380:	f04f 0c0a 	mov.w	ip, #10
 8008384:	4621      	mov	r1, r4
 8008386:	f811 3b01 	ldrb.w	r3, [r1], #1
 800838a:	3b30      	subs	r3, #48	@ 0x30
 800838c:	2b09      	cmp	r3, #9
 800838e:	d94b      	bls.n	8008428 <_svfiprintf_r+0x17c>
 8008390:	b1b0      	cbz	r0, 80083c0 <_svfiprintf_r+0x114>
 8008392:	9207      	str	r2, [sp, #28]
 8008394:	e014      	b.n	80083c0 <_svfiprintf_r+0x114>
 8008396:	eba0 0308 	sub.w	r3, r0, r8
 800839a:	fa09 f303 	lsl.w	r3, r9, r3
 800839e:	4313      	orrs	r3, r2
 80083a0:	9304      	str	r3, [sp, #16]
 80083a2:	46a2      	mov	sl, r4
 80083a4:	e7d2      	b.n	800834c <_svfiprintf_r+0xa0>
 80083a6:	9b03      	ldr	r3, [sp, #12]
 80083a8:	1d19      	adds	r1, r3, #4
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	9103      	str	r1, [sp, #12]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	bfbb      	ittet	lt
 80083b2:	425b      	neglt	r3, r3
 80083b4:	f042 0202 	orrlt.w	r2, r2, #2
 80083b8:	9307      	strge	r3, [sp, #28]
 80083ba:	9307      	strlt	r3, [sp, #28]
 80083bc:	bfb8      	it	lt
 80083be:	9204      	strlt	r2, [sp, #16]
 80083c0:	7823      	ldrb	r3, [r4, #0]
 80083c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80083c4:	d10a      	bne.n	80083dc <_svfiprintf_r+0x130>
 80083c6:	7863      	ldrb	r3, [r4, #1]
 80083c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80083ca:	d132      	bne.n	8008432 <_svfiprintf_r+0x186>
 80083cc:	9b03      	ldr	r3, [sp, #12]
 80083ce:	1d1a      	adds	r2, r3, #4
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	9203      	str	r2, [sp, #12]
 80083d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80083d8:	3402      	adds	r4, #2
 80083da:	9305      	str	r3, [sp, #20]
 80083dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80084a0 <_svfiprintf_r+0x1f4>
 80083e0:	7821      	ldrb	r1, [r4, #0]
 80083e2:	2203      	movs	r2, #3
 80083e4:	4650      	mov	r0, sl
 80083e6:	f7f7 ff93 	bl	8000310 <memchr>
 80083ea:	b138      	cbz	r0, 80083fc <_svfiprintf_r+0x150>
 80083ec:	9b04      	ldr	r3, [sp, #16]
 80083ee:	eba0 000a 	sub.w	r0, r0, sl
 80083f2:	2240      	movs	r2, #64	@ 0x40
 80083f4:	4082      	lsls	r2, r0
 80083f6:	4313      	orrs	r3, r2
 80083f8:	3401      	adds	r4, #1
 80083fa:	9304      	str	r3, [sp, #16]
 80083fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008400:	4824      	ldr	r0, [pc, #144]	@ (8008494 <_svfiprintf_r+0x1e8>)
 8008402:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008406:	2206      	movs	r2, #6
 8008408:	f7f7 ff82 	bl	8000310 <memchr>
 800840c:	2800      	cmp	r0, #0
 800840e:	d036      	beq.n	800847e <_svfiprintf_r+0x1d2>
 8008410:	4b21      	ldr	r3, [pc, #132]	@ (8008498 <_svfiprintf_r+0x1ec>)
 8008412:	bb1b      	cbnz	r3, 800845c <_svfiprintf_r+0x1b0>
 8008414:	9b03      	ldr	r3, [sp, #12]
 8008416:	3307      	adds	r3, #7
 8008418:	f023 0307 	bic.w	r3, r3, #7
 800841c:	3308      	adds	r3, #8
 800841e:	9303      	str	r3, [sp, #12]
 8008420:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008422:	4433      	add	r3, r6
 8008424:	9309      	str	r3, [sp, #36]	@ 0x24
 8008426:	e76a      	b.n	80082fe <_svfiprintf_r+0x52>
 8008428:	fb0c 3202 	mla	r2, ip, r2, r3
 800842c:	460c      	mov	r4, r1
 800842e:	2001      	movs	r0, #1
 8008430:	e7a8      	b.n	8008384 <_svfiprintf_r+0xd8>
 8008432:	2300      	movs	r3, #0
 8008434:	3401      	adds	r4, #1
 8008436:	9305      	str	r3, [sp, #20]
 8008438:	4619      	mov	r1, r3
 800843a:	f04f 0c0a 	mov.w	ip, #10
 800843e:	4620      	mov	r0, r4
 8008440:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008444:	3a30      	subs	r2, #48	@ 0x30
 8008446:	2a09      	cmp	r2, #9
 8008448:	d903      	bls.n	8008452 <_svfiprintf_r+0x1a6>
 800844a:	2b00      	cmp	r3, #0
 800844c:	d0c6      	beq.n	80083dc <_svfiprintf_r+0x130>
 800844e:	9105      	str	r1, [sp, #20]
 8008450:	e7c4      	b.n	80083dc <_svfiprintf_r+0x130>
 8008452:	fb0c 2101 	mla	r1, ip, r1, r2
 8008456:	4604      	mov	r4, r0
 8008458:	2301      	movs	r3, #1
 800845a:	e7f0      	b.n	800843e <_svfiprintf_r+0x192>
 800845c:	ab03      	add	r3, sp, #12
 800845e:	9300      	str	r3, [sp, #0]
 8008460:	462a      	mov	r2, r5
 8008462:	4b0e      	ldr	r3, [pc, #56]	@ (800849c <_svfiprintf_r+0x1f0>)
 8008464:	a904      	add	r1, sp, #16
 8008466:	4638      	mov	r0, r7
 8008468:	f3af 8000 	nop.w
 800846c:	1c42      	adds	r2, r0, #1
 800846e:	4606      	mov	r6, r0
 8008470:	d1d6      	bne.n	8008420 <_svfiprintf_r+0x174>
 8008472:	89ab      	ldrh	r3, [r5, #12]
 8008474:	065b      	lsls	r3, r3, #25
 8008476:	f53f af2d 	bmi.w	80082d4 <_svfiprintf_r+0x28>
 800847a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800847c:	e72c      	b.n	80082d8 <_svfiprintf_r+0x2c>
 800847e:	ab03      	add	r3, sp, #12
 8008480:	9300      	str	r3, [sp, #0]
 8008482:	462a      	mov	r2, r5
 8008484:	4b05      	ldr	r3, [pc, #20]	@ (800849c <_svfiprintf_r+0x1f0>)
 8008486:	a904      	add	r1, sp, #16
 8008488:	4638      	mov	r0, r7
 800848a:	f000 f9bb 	bl	8008804 <_printf_i>
 800848e:	e7ed      	b.n	800846c <_svfiprintf_r+0x1c0>
 8008490:	0800b894 	.word	0x0800b894
 8008494:	0800b89e 	.word	0x0800b89e
 8008498:	00000000 	.word	0x00000000
 800849c:	080081f5 	.word	0x080081f5
 80084a0:	0800b89a 	.word	0x0800b89a

080084a4 <__sfputc_r>:
 80084a4:	6893      	ldr	r3, [r2, #8]
 80084a6:	3b01      	subs	r3, #1
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	b410      	push	{r4}
 80084ac:	6093      	str	r3, [r2, #8]
 80084ae:	da08      	bge.n	80084c2 <__sfputc_r+0x1e>
 80084b0:	6994      	ldr	r4, [r2, #24]
 80084b2:	42a3      	cmp	r3, r4
 80084b4:	db01      	blt.n	80084ba <__sfputc_r+0x16>
 80084b6:	290a      	cmp	r1, #10
 80084b8:	d103      	bne.n	80084c2 <__sfputc_r+0x1e>
 80084ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084be:	f7ff bc90 	b.w	8007de2 <__swbuf_r>
 80084c2:	6813      	ldr	r3, [r2, #0]
 80084c4:	1c58      	adds	r0, r3, #1
 80084c6:	6010      	str	r0, [r2, #0]
 80084c8:	7019      	strb	r1, [r3, #0]
 80084ca:	4608      	mov	r0, r1
 80084cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084d0:	4770      	bx	lr

080084d2 <__sfputs_r>:
 80084d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084d4:	4606      	mov	r6, r0
 80084d6:	460f      	mov	r7, r1
 80084d8:	4614      	mov	r4, r2
 80084da:	18d5      	adds	r5, r2, r3
 80084dc:	42ac      	cmp	r4, r5
 80084de:	d101      	bne.n	80084e4 <__sfputs_r+0x12>
 80084e0:	2000      	movs	r0, #0
 80084e2:	e007      	b.n	80084f4 <__sfputs_r+0x22>
 80084e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084e8:	463a      	mov	r2, r7
 80084ea:	4630      	mov	r0, r6
 80084ec:	f7ff ffda 	bl	80084a4 <__sfputc_r>
 80084f0:	1c43      	adds	r3, r0, #1
 80084f2:	d1f3      	bne.n	80084dc <__sfputs_r+0xa>
 80084f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080084f8 <_vfiprintf_r>:
 80084f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084fc:	460d      	mov	r5, r1
 80084fe:	b09d      	sub	sp, #116	@ 0x74
 8008500:	4614      	mov	r4, r2
 8008502:	4698      	mov	r8, r3
 8008504:	4606      	mov	r6, r0
 8008506:	b118      	cbz	r0, 8008510 <_vfiprintf_r+0x18>
 8008508:	6a03      	ldr	r3, [r0, #32]
 800850a:	b90b      	cbnz	r3, 8008510 <_vfiprintf_r+0x18>
 800850c:	f7ff fb60 	bl	8007bd0 <__sinit>
 8008510:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008512:	07d9      	lsls	r1, r3, #31
 8008514:	d405      	bmi.n	8008522 <_vfiprintf_r+0x2a>
 8008516:	89ab      	ldrh	r3, [r5, #12]
 8008518:	059a      	lsls	r2, r3, #22
 800851a:	d402      	bmi.n	8008522 <_vfiprintf_r+0x2a>
 800851c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800851e:	f7ff fd6e 	bl	8007ffe <__retarget_lock_acquire_recursive>
 8008522:	89ab      	ldrh	r3, [r5, #12]
 8008524:	071b      	lsls	r3, r3, #28
 8008526:	d501      	bpl.n	800852c <_vfiprintf_r+0x34>
 8008528:	692b      	ldr	r3, [r5, #16]
 800852a:	b99b      	cbnz	r3, 8008554 <_vfiprintf_r+0x5c>
 800852c:	4629      	mov	r1, r5
 800852e:	4630      	mov	r0, r6
 8008530:	f7ff fc96 	bl	8007e60 <__swsetup_r>
 8008534:	b170      	cbz	r0, 8008554 <_vfiprintf_r+0x5c>
 8008536:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008538:	07dc      	lsls	r4, r3, #31
 800853a:	d504      	bpl.n	8008546 <_vfiprintf_r+0x4e>
 800853c:	f04f 30ff 	mov.w	r0, #4294967295
 8008540:	b01d      	add	sp, #116	@ 0x74
 8008542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008546:	89ab      	ldrh	r3, [r5, #12]
 8008548:	0598      	lsls	r0, r3, #22
 800854a:	d4f7      	bmi.n	800853c <_vfiprintf_r+0x44>
 800854c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800854e:	f7ff fd57 	bl	8008000 <__retarget_lock_release_recursive>
 8008552:	e7f3      	b.n	800853c <_vfiprintf_r+0x44>
 8008554:	2300      	movs	r3, #0
 8008556:	9309      	str	r3, [sp, #36]	@ 0x24
 8008558:	2320      	movs	r3, #32
 800855a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800855e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008562:	2330      	movs	r3, #48	@ 0x30
 8008564:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008714 <_vfiprintf_r+0x21c>
 8008568:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800856c:	f04f 0901 	mov.w	r9, #1
 8008570:	4623      	mov	r3, r4
 8008572:	469a      	mov	sl, r3
 8008574:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008578:	b10a      	cbz	r2, 800857e <_vfiprintf_r+0x86>
 800857a:	2a25      	cmp	r2, #37	@ 0x25
 800857c:	d1f9      	bne.n	8008572 <_vfiprintf_r+0x7a>
 800857e:	ebba 0b04 	subs.w	fp, sl, r4
 8008582:	d00b      	beq.n	800859c <_vfiprintf_r+0xa4>
 8008584:	465b      	mov	r3, fp
 8008586:	4622      	mov	r2, r4
 8008588:	4629      	mov	r1, r5
 800858a:	4630      	mov	r0, r6
 800858c:	f7ff ffa1 	bl	80084d2 <__sfputs_r>
 8008590:	3001      	adds	r0, #1
 8008592:	f000 80a7 	beq.w	80086e4 <_vfiprintf_r+0x1ec>
 8008596:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008598:	445a      	add	r2, fp
 800859a:	9209      	str	r2, [sp, #36]	@ 0x24
 800859c:	f89a 3000 	ldrb.w	r3, [sl]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	f000 809f 	beq.w	80086e4 <_vfiprintf_r+0x1ec>
 80085a6:	2300      	movs	r3, #0
 80085a8:	f04f 32ff 	mov.w	r2, #4294967295
 80085ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085b0:	f10a 0a01 	add.w	sl, sl, #1
 80085b4:	9304      	str	r3, [sp, #16]
 80085b6:	9307      	str	r3, [sp, #28]
 80085b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80085bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80085be:	4654      	mov	r4, sl
 80085c0:	2205      	movs	r2, #5
 80085c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085c6:	4853      	ldr	r0, [pc, #332]	@ (8008714 <_vfiprintf_r+0x21c>)
 80085c8:	f7f7 fea2 	bl	8000310 <memchr>
 80085cc:	9a04      	ldr	r2, [sp, #16]
 80085ce:	b9d8      	cbnz	r0, 8008608 <_vfiprintf_r+0x110>
 80085d0:	06d1      	lsls	r1, r2, #27
 80085d2:	bf44      	itt	mi
 80085d4:	2320      	movmi	r3, #32
 80085d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085da:	0713      	lsls	r3, r2, #28
 80085dc:	bf44      	itt	mi
 80085de:	232b      	movmi	r3, #43	@ 0x2b
 80085e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085e4:	f89a 3000 	ldrb.w	r3, [sl]
 80085e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80085ea:	d015      	beq.n	8008618 <_vfiprintf_r+0x120>
 80085ec:	9a07      	ldr	r2, [sp, #28]
 80085ee:	4654      	mov	r4, sl
 80085f0:	2000      	movs	r0, #0
 80085f2:	f04f 0c0a 	mov.w	ip, #10
 80085f6:	4621      	mov	r1, r4
 80085f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085fc:	3b30      	subs	r3, #48	@ 0x30
 80085fe:	2b09      	cmp	r3, #9
 8008600:	d94b      	bls.n	800869a <_vfiprintf_r+0x1a2>
 8008602:	b1b0      	cbz	r0, 8008632 <_vfiprintf_r+0x13a>
 8008604:	9207      	str	r2, [sp, #28]
 8008606:	e014      	b.n	8008632 <_vfiprintf_r+0x13a>
 8008608:	eba0 0308 	sub.w	r3, r0, r8
 800860c:	fa09 f303 	lsl.w	r3, r9, r3
 8008610:	4313      	orrs	r3, r2
 8008612:	9304      	str	r3, [sp, #16]
 8008614:	46a2      	mov	sl, r4
 8008616:	e7d2      	b.n	80085be <_vfiprintf_r+0xc6>
 8008618:	9b03      	ldr	r3, [sp, #12]
 800861a:	1d19      	adds	r1, r3, #4
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	9103      	str	r1, [sp, #12]
 8008620:	2b00      	cmp	r3, #0
 8008622:	bfbb      	ittet	lt
 8008624:	425b      	neglt	r3, r3
 8008626:	f042 0202 	orrlt.w	r2, r2, #2
 800862a:	9307      	strge	r3, [sp, #28]
 800862c:	9307      	strlt	r3, [sp, #28]
 800862e:	bfb8      	it	lt
 8008630:	9204      	strlt	r2, [sp, #16]
 8008632:	7823      	ldrb	r3, [r4, #0]
 8008634:	2b2e      	cmp	r3, #46	@ 0x2e
 8008636:	d10a      	bne.n	800864e <_vfiprintf_r+0x156>
 8008638:	7863      	ldrb	r3, [r4, #1]
 800863a:	2b2a      	cmp	r3, #42	@ 0x2a
 800863c:	d132      	bne.n	80086a4 <_vfiprintf_r+0x1ac>
 800863e:	9b03      	ldr	r3, [sp, #12]
 8008640:	1d1a      	adds	r2, r3, #4
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	9203      	str	r2, [sp, #12]
 8008646:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800864a:	3402      	adds	r4, #2
 800864c:	9305      	str	r3, [sp, #20]
 800864e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008724 <_vfiprintf_r+0x22c>
 8008652:	7821      	ldrb	r1, [r4, #0]
 8008654:	2203      	movs	r2, #3
 8008656:	4650      	mov	r0, sl
 8008658:	f7f7 fe5a 	bl	8000310 <memchr>
 800865c:	b138      	cbz	r0, 800866e <_vfiprintf_r+0x176>
 800865e:	9b04      	ldr	r3, [sp, #16]
 8008660:	eba0 000a 	sub.w	r0, r0, sl
 8008664:	2240      	movs	r2, #64	@ 0x40
 8008666:	4082      	lsls	r2, r0
 8008668:	4313      	orrs	r3, r2
 800866a:	3401      	adds	r4, #1
 800866c:	9304      	str	r3, [sp, #16]
 800866e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008672:	4829      	ldr	r0, [pc, #164]	@ (8008718 <_vfiprintf_r+0x220>)
 8008674:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008678:	2206      	movs	r2, #6
 800867a:	f7f7 fe49 	bl	8000310 <memchr>
 800867e:	2800      	cmp	r0, #0
 8008680:	d03f      	beq.n	8008702 <_vfiprintf_r+0x20a>
 8008682:	4b26      	ldr	r3, [pc, #152]	@ (800871c <_vfiprintf_r+0x224>)
 8008684:	bb1b      	cbnz	r3, 80086ce <_vfiprintf_r+0x1d6>
 8008686:	9b03      	ldr	r3, [sp, #12]
 8008688:	3307      	adds	r3, #7
 800868a:	f023 0307 	bic.w	r3, r3, #7
 800868e:	3308      	adds	r3, #8
 8008690:	9303      	str	r3, [sp, #12]
 8008692:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008694:	443b      	add	r3, r7
 8008696:	9309      	str	r3, [sp, #36]	@ 0x24
 8008698:	e76a      	b.n	8008570 <_vfiprintf_r+0x78>
 800869a:	fb0c 3202 	mla	r2, ip, r2, r3
 800869e:	460c      	mov	r4, r1
 80086a0:	2001      	movs	r0, #1
 80086a2:	e7a8      	b.n	80085f6 <_vfiprintf_r+0xfe>
 80086a4:	2300      	movs	r3, #0
 80086a6:	3401      	adds	r4, #1
 80086a8:	9305      	str	r3, [sp, #20]
 80086aa:	4619      	mov	r1, r3
 80086ac:	f04f 0c0a 	mov.w	ip, #10
 80086b0:	4620      	mov	r0, r4
 80086b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086b6:	3a30      	subs	r2, #48	@ 0x30
 80086b8:	2a09      	cmp	r2, #9
 80086ba:	d903      	bls.n	80086c4 <_vfiprintf_r+0x1cc>
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d0c6      	beq.n	800864e <_vfiprintf_r+0x156>
 80086c0:	9105      	str	r1, [sp, #20]
 80086c2:	e7c4      	b.n	800864e <_vfiprintf_r+0x156>
 80086c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80086c8:	4604      	mov	r4, r0
 80086ca:	2301      	movs	r3, #1
 80086cc:	e7f0      	b.n	80086b0 <_vfiprintf_r+0x1b8>
 80086ce:	ab03      	add	r3, sp, #12
 80086d0:	9300      	str	r3, [sp, #0]
 80086d2:	462a      	mov	r2, r5
 80086d4:	4b12      	ldr	r3, [pc, #72]	@ (8008720 <_vfiprintf_r+0x228>)
 80086d6:	a904      	add	r1, sp, #16
 80086d8:	4630      	mov	r0, r6
 80086da:	f3af 8000 	nop.w
 80086de:	4607      	mov	r7, r0
 80086e0:	1c78      	adds	r0, r7, #1
 80086e2:	d1d6      	bne.n	8008692 <_vfiprintf_r+0x19a>
 80086e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80086e6:	07d9      	lsls	r1, r3, #31
 80086e8:	d405      	bmi.n	80086f6 <_vfiprintf_r+0x1fe>
 80086ea:	89ab      	ldrh	r3, [r5, #12]
 80086ec:	059a      	lsls	r2, r3, #22
 80086ee:	d402      	bmi.n	80086f6 <_vfiprintf_r+0x1fe>
 80086f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80086f2:	f7ff fc85 	bl	8008000 <__retarget_lock_release_recursive>
 80086f6:	89ab      	ldrh	r3, [r5, #12]
 80086f8:	065b      	lsls	r3, r3, #25
 80086fa:	f53f af1f 	bmi.w	800853c <_vfiprintf_r+0x44>
 80086fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008700:	e71e      	b.n	8008540 <_vfiprintf_r+0x48>
 8008702:	ab03      	add	r3, sp, #12
 8008704:	9300      	str	r3, [sp, #0]
 8008706:	462a      	mov	r2, r5
 8008708:	4b05      	ldr	r3, [pc, #20]	@ (8008720 <_vfiprintf_r+0x228>)
 800870a:	a904      	add	r1, sp, #16
 800870c:	4630      	mov	r0, r6
 800870e:	f000 f879 	bl	8008804 <_printf_i>
 8008712:	e7e4      	b.n	80086de <_vfiprintf_r+0x1e6>
 8008714:	0800b894 	.word	0x0800b894
 8008718:	0800b89e 	.word	0x0800b89e
 800871c:	00000000 	.word	0x00000000
 8008720:	080084d3 	.word	0x080084d3
 8008724:	0800b89a 	.word	0x0800b89a

08008728 <_printf_common>:
 8008728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800872c:	4616      	mov	r6, r2
 800872e:	4698      	mov	r8, r3
 8008730:	688a      	ldr	r2, [r1, #8]
 8008732:	690b      	ldr	r3, [r1, #16]
 8008734:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008738:	4293      	cmp	r3, r2
 800873a:	bfb8      	it	lt
 800873c:	4613      	movlt	r3, r2
 800873e:	6033      	str	r3, [r6, #0]
 8008740:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008744:	4607      	mov	r7, r0
 8008746:	460c      	mov	r4, r1
 8008748:	b10a      	cbz	r2, 800874e <_printf_common+0x26>
 800874a:	3301      	adds	r3, #1
 800874c:	6033      	str	r3, [r6, #0]
 800874e:	6823      	ldr	r3, [r4, #0]
 8008750:	0699      	lsls	r1, r3, #26
 8008752:	bf42      	ittt	mi
 8008754:	6833      	ldrmi	r3, [r6, #0]
 8008756:	3302      	addmi	r3, #2
 8008758:	6033      	strmi	r3, [r6, #0]
 800875a:	6825      	ldr	r5, [r4, #0]
 800875c:	f015 0506 	ands.w	r5, r5, #6
 8008760:	d106      	bne.n	8008770 <_printf_common+0x48>
 8008762:	f104 0a19 	add.w	sl, r4, #25
 8008766:	68e3      	ldr	r3, [r4, #12]
 8008768:	6832      	ldr	r2, [r6, #0]
 800876a:	1a9b      	subs	r3, r3, r2
 800876c:	42ab      	cmp	r3, r5
 800876e:	dc26      	bgt.n	80087be <_printf_common+0x96>
 8008770:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008774:	6822      	ldr	r2, [r4, #0]
 8008776:	3b00      	subs	r3, #0
 8008778:	bf18      	it	ne
 800877a:	2301      	movne	r3, #1
 800877c:	0692      	lsls	r2, r2, #26
 800877e:	d42b      	bmi.n	80087d8 <_printf_common+0xb0>
 8008780:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008784:	4641      	mov	r1, r8
 8008786:	4638      	mov	r0, r7
 8008788:	47c8      	blx	r9
 800878a:	3001      	adds	r0, #1
 800878c:	d01e      	beq.n	80087cc <_printf_common+0xa4>
 800878e:	6823      	ldr	r3, [r4, #0]
 8008790:	6922      	ldr	r2, [r4, #16]
 8008792:	f003 0306 	and.w	r3, r3, #6
 8008796:	2b04      	cmp	r3, #4
 8008798:	bf02      	ittt	eq
 800879a:	68e5      	ldreq	r5, [r4, #12]
 800879c:	6833      	ldreq	r3, [r6, #0]
 800879e:	1aed      	subeq	r5, r5, r3
 80087a0:	68a3      	ldr	r3, [r4, #8]
 80087a2:	bf0c      	ite	eq
 80087a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087a8:	2500      	movne	r5, #0
 80087aa:	4293      	cmp	r3, r2
 80087ac:	bfc4      	itt	gt
 80087ae:	1a9b      	subgt	r3, r3, r2
 80087b0:	18ed      	addgt	r5, r5, r3
 80087b2:	2600      	movs	r6, #0
 80087b4:	341a      	adds	r4, #26
 80087b6:	42b5      	cmp	r5, r6
 80087b8:	d11a      	bne.n	80087f0 <_printf_common+0xc8>
 80087ba:	2000      	movs	r0, #0
 80087bc:	e008      	b.n	80087d0 <_printf_common+0xa8>
 80087be:	2301      	movs	r3, #1
 80087c0:	4652      	mov	r2, sl
 80087c2:	4641      	mov	r1, r8
 80087c4:	4638      	mov	r0, r7
 80087c6:	47c8      	blx	r9
 80087c8:	3001      	adds	r0, #1
 80087ca:	d103      	bne.n	80087d4 <_printf_common+0xac>
 80087cc:	f04f 30ff 	mov.w	r0, #4294967295
 80087d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087d4:	3501      	adds	r5, #1
 80087d6:	e7c6      	b.n	8008766 <_printf_common+0x3e>
 80087d8:	18e1      	adds	r1, r4, r3
 80087da:	1c5a      	adds	r2, r3, #1
 80087dc:	2030      	movs	r0, #48	@ 0x30
 80087de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80087e2:	4422      	add	r2, r4
 80087e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80087e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80087ec:	3302      	adds	r3, #2
 80087ee:	e7c7      	b.n	8008780 <_printf_common+0x58>
 80087f0:	2301      	movs	r3, #1
 80087f2:	4622      	mov	r2, r4
 80087f4:	4641      	mov	r1, r8
 80087f6:	4638      	mov	r0, r7
 80087f8:	47c8      	blx	r9
 80087fa:	3001      	adds	r0, #1
 80087fc:	d0e6      	beq.n	80087cc <_printf_common+0xa4>
 80087fe:	3601      	adds	r6, #1
 8008800:	e7d9      	b.n	80087b6 <_printf_common+0x8e>
	...

08008804 <_printf_i>:
 8008804:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008808:	7e0f      	ldrb	r7, [r1, #24]
 800880a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800880c:	2f78      	cmp	r7, #120	@ 0x78
 800880e:	4691      	mov	r9, r2
 8008810:	4680      	mov	r8, r0
 8008812:	460c      	mov	r4, r1
 8008814:	469a      	mov	sl, r3
 8008816:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800881a:	d807      	bhi.n	800882c <_printf_i+0x28>
 800881c:	2f62      	cmp	r7, #98	@ 0x62
 800881e:	d80a      	bhi.n	8008836 <_printf_i+0x32>
 8008820:	2f00      	cmp	r7, #0
 8008822:	f000 80d2 	beq.w	80089ca <_printf_i+0x1c6>
 8008826:	2f58      	cmp	r7, #88	@ 0x58
 8008828:	f000 80b9 	beq.w	800899e <_printf_i+0x19a>
 800882c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008830:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008834:	e03a      	b.n	80088ac <_printf_i+0xa8>
 8008836:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800883a:	2b15      	cmp	r3, #21
 800883c:	d8f6      	bhi.n	800882c <_printf_i+0x28>
 800883e:	a101      	add	r1, pc, #4	@ (adr r1, 8008844 <_printf_i+0x40>)
 8008840:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008844:	0800889d 	.word	0x0800889d
 8008848:	080088b1 	.word	0x080088b1
 800884c:	0800882d 	.word	0x0800882d
 8008850:	0800882d 	.word	0x0800882d
 8008854:	0800882d 	.word	0x0800882d
 8008858:	0800882d 	.word	0x0800882d
 800885c:	080088b1 	.word	0x080088b1
 8008860:	0800882d 	.word	0x0800882d
 8008864:	0800882d 	.word	0x0800882d
 8008868:	0800882d 	.word	0x0800882d
 800886c:	0800882d 	.word	0x0800882d
 8008870:	080089b1 	.word	0x080089b1
 8008874:	080088db 	.word	0x080088db
 8008878:	0800896b 	.word	0x0800896b
 800887c:	0800882d 	.word	0x0800882d
 8008880:	0800882d 	.word	0x0800882d
 8008884:	080089d3 	.word	0x080089d3
 8008888:	0800882d 	.word	0x0800882d
 800888c:	080088db 	.word	0x080088db
 8008890:	0800882d 	.word	0x0800882d
 8008894:	0800882d 	.word	0x0800882d
 8008898:	08008973 	.word	0x08008973
 800889c:	6833      	ldr	r3, [r6, #0]
 800889e:	1d1a      	adds	r2, r3, #4
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	6032      	str	r2, [r6, #0]
 80088a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80088a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80088ac:	2301      	movs	r3, #1
 80088ae:	e09d      	b.n	80089ec <_printf_i+0x1e8>
 80088b0:	6833      	ldr	r3, [r6, #0]
 80088b2:	6820      	ldr	r0, [r4, #0]
 80088b4:	1d19      	adds	r1, r3, #4
 80088b6:	6031      	str	r1, [r6, #0]
 80088b8:	0606      	lsls	r6, r0, #24
 80088ba:	d501      	bpl.n	80088c0 <_printf_i+0xbc>
 80088bc:	681d      	ldr	r5, [r3, #0]
 80088be:	e003      	b.n	80088c8 <_printf_i+0xc4>
 80088c0:	0645      	lsls	r5, r0, #25
 80088c2:	d5fb      	bpl.n	80088bc <_printf_i+0xb8>
 80088c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80088c8:	2d00      	cmp	r5, #0
 80088ca:	da03      	bge.n	80088d4 <_printf_i+0xd0>
 80088cc:	232d      	movs	r3, #45	@ 0x2d
 80088ce:	426d      	negs	r5, r5
 80088d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80088d4:	4859      	ldr	r0, [pc, #356]	@ (8008a3c <_printf_i+0x238>)
 80088d6:	230a      	movs	r3, #10
 80088d8:	e011      	b.n	80088fe <_printf_i+0xfa>
 80088da:	6821      	ldr	r1, [r4, #0]
 80088dc:	6833      	ldr	r3, [r6, #0]
 80088de:	0608      	lsls	r0, r1, #24
 80088e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80088e4:	d402      	bmi.n	80088ec <_printf_i+0xe8>
 80088e6:	0649      	lsls	r1, r1, #25
 80088e8:	bf48      	it	mi
 80088ea:	b2ad      	uxthmi	r5, r5
 80088ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80088ee:	4853      	ldr	r0, [pc, #332]	@ (8008a3c <_printf_i+0x238>)
 80088f0:	6033      	str	r3, [r6, #0]
 80088f2:	bf14      	ite	ne
 80088f4:	230a      	movne	r3, #10
 80088f6:	2308      	moveq	r3, #8
 80088f8:	2100      	movs	r1, #0
 80088fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80088fe:	6866      	ldr	r6, [r4, #4]
 8008900:	60a6      	str	r6, [r4, #8]
 8008902:	2e00      	cmp	r6, #0
 8008904:	bfa2      	ittt	ge
 8008906:	6821      	ldrge	r1, [r4, #0]
 8008908:	f021 0104 	bicge.w	r1, r1, #4
 800890c:	6021      	strge	r1, [r4, #0]
 800890e:	b90d      	cbnz	r5, 8008914 <_printf_i+0x110>
 8008910:	2e00      	cmp	r6, #0
 8008912:	d04b      	beq.n	80089ac <_printf_i+0x1a8>
 8008914:	4616      	mov	r6, r2
 8008916:	fbb5 f1f3 	udiv	r1, r5, r3
 800891a:	fb03 5711 	mls	r7, r3, r1, r5
 800891e:	5dc7      	ldrb	r7, [r0, r7]
 8008920:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008924:	462f      	mov	r7, r5
 8008926:	42bb      	cmp	r3, r7
 8008928:	460d      	mov	r5, r1
 800892a:	d9f4      	bls.n	8008916 <_printf_i+0x112>
 800892c:	2b08      	cmp	r3, #8
 800892e:	d10b      	bne.n	8008948 <_printf_i+0x144>
 8008930:	6823      	ldr	r3, [r4, #0]
 8008932:	07df      	lsls	r7, r3, #31
 8008934:	d508      	bpl.n	8008948 <_printf_i+0x144>
 8008936:	6923      	ldr	r3, [r4, #16]
 8008938:	6861      	ldr	r1, [r4, #4]
 800893a:	4299      	cmp	r1, r3
 800893c:	bfde      	ittt	le
 800893e:	2330      	movle	r3, #48	@ 0x30
 8008940:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008944:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008948:	1b92      	subs	r2, r2, r6
 800894a:	6122      	str	r2, [r4, #16]
 800894c:	f8cd a000 	str.w	sl, [sp]
 8008950:	464b      	mov	r3, r9
 8008952:	aa03      	add	r2, sp, #12
 8008954:	4621      	mov	r1, r4
 8008956:	4640      	mov	r0, r8
 8008958:	f7ff fee6 	bl	8008728 <_printf_common>
 800895c:	3001      	adds	r0, #1
 800895e:	d14a      	bne.n	80089f6 <_printf_i+0x1f2>
 8008960:	f04f 30ff 	mov.w	r0, #4294967295
 8008964:	b004      	add	sp, #16
 8008966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800896a:	6823      	ldr	r3, [r4, #0]
 800896c:	f043 0320 	orr.w	r3, r3, #32
 8008970:	6023      	str	r3, [r4, #0]
 8008972:	4833      	ldr	r0, [pc, #204]	@ (8008a40 <_printf_i+0x23c>)
 8008974:	2778      	movs	r7, #120	@ 0x78
 8008976:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800897a:	6823      	ldr	r3, [r4, #0]
 800897c:	6831      	ldr	r1, [r6, #0]
 800897e:	061f      	lsls	r7, r3, #24
 8008980:	f851 5b04 	ldr.w	r5, [r1], #4
 8008984:	d402      	bmi.n	800898c <_printf_i+0x188>
 8008986:	065f      	lsls	r7, r3, #25
 8008988:	bf48      	it	mi
 800898a:	b2ad      	uxthmi	r5, r5
 800898c:	6031      	str	r1, [r6, #0]
 800898e:	07d9      	lsls	r1, r3, #31
 8008990:	bf44      	itt	mi
 8008992:	f043 0320 	orrmi.w	r3, r3, #32
 8008996:	6023      	strmi	r3, [r4, #0]
 8008998:	b11d      	cbz	r5, 80089a2 <_printf_i+0x19e>
 800899a:	2310      	movs	r3, #16
 800899c:	e7ac      	b.n	80088f8 <_printf_i+0xf4>
 800899e:	4827      	ldr	r0, [pc, #156]	@ (8008a3c <_printf_i+0x238>)
 80089a0:	e7e9      	b.n	8008976 <_printf_i+0x172>
 80089a2:	6823      	ldr	r3, [r4, #0]
 80089a4:	f023 0320 	bic.w	r3, r3, #32
 80089a8:	6023      	str	r3, [r4, #0]
 80089aa:	e7f6      	b.n	800899a <_printf_i+0x196>
 80089ac:	4616      	mov	r6, r2
 80089ae:	e7bd      	b.n	800892c <_printf_i+0x128>
 80089b0:	6833      	ldr	r3, [r6, #0]
 80089b2:	6825      	ldr	r5, [r4, #0]
 80089b4:	6961      	ldr	r1, [r4, #20]
 80089b6:	1d18      	adds	r0, r3, #4
 80089b8:	6030      	str	r0, [r6, #0]
 80089ba:	062e      	lsls	r6, r5, #24
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	d501      	bpl.n	80089c4 <_printf_i+0x1c0>
 80089c0:	6019      	str	r1, [r3, #0]
 80089c2:	e002      	b.n	80089ca <_printf_i+0x1c6>
 80089c4:	0668      	lsls	r0, r5, #25
 80089c6:	d5fb      	bpl.n	80089c0 <_printf_i+0x1bc>
 80089c8:	8019      	strh	r1, [r3, #0]
 80089ca:	2300      	movs	r3, #0
 80089cc:	6123      	str	r3, [r4, #16]
 80089ce:	4616      	mov	r6, r2
 80089d0:	e7bc      	b.n	800894c <_printf_i+0x148>
 80089d2:	6833      	ldr	r3, [r6, #0]
 80089d4:	1d1a      	adds	r2, r3, #4
 80089d6:	6032      	str	r2, [r6, #0]
 80089d8:	681e      	ldr	r6, [r3, #0]
 80089da:	6862      	ldr	r2, [r4, #4]
 80089dc:	2100      	movs	r1, #0
 80089de:	4630      	mov	r0, r6
 80089e0:	f7f7 fc96 	bl	8000310 <memchr>
 80089e4:	b108      	cbz	r0, 80089ea <_printf_i+0x1e6>
 80089e6:	1b80      	subs	r0, r0, r6
 80089e8:	6060      	str	r0, [r4, #4]
 80089ea:	6863      	ldr	r3, [r4, #4]
 80089ec:	6123      	str	r3, [r4, #16]
 80089ee:	2300      	movs	r3, #0
 80089f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80089f4:	e7aa      	b.n	800894c <_printf_i+0x148>
 80089f6:	6923      	ldr	r3, [r4, #16]
 80089f8:	4632      	mov	r2, r6
 80089fa:	4649      	mov	r1, r9
 80089fc:	4640      	mov	r0, r8
 80089fe:	47d0      	blx	sl
 8008a00:	3001      	adds	r0, #1
 8008a02:	d0ad      	beq.n	8008960 <_printf_i+0x15c>
 8008a04:	6823      	ldr	r3, [r4, #0]
 8008a06:	079b      	lsls	r3, r3, #30
 8008a08:	d413      	bmi.n	8008a32 <_printf_i+0x22e>
 8008a0a:	68e0      	ldr	r0, [r4, #12]
 8008a0c:	9b03      	ldr	r3, [sp, #12]
 8008a0e:	4298      	cmp	r0, r3
 8008a10:	bfb8      	it	lt
 8008a12:	4618      	movlt	r0, r3
 8008a14:	e7a6      	b.n	8008964 <_printf_i+0x160>
 8008a16:	2301      	movs	r3, #1
 8008a18:	4632      	mov	r2, r6
 8008a1a:	4649      	mov	r1, r9
 8008a1c:	4640      	mov	r0, r8
 8008a1e:	47d0      	blx	sl
 8008a20:	3001      	adds	r0, #1
 8008a22:	d09d      	beq.n	8008960 <_printf_i+0x15c>
 8008a24:	3501      	adds	r5, #1
 8008a26:	68e3      	ldr	r3, [r4, #12]
 8008a28:	9903      	ldr	r1, [sp, #12]
 8008a2a:	1a5b      	subs	r3, r3, r1
 8008a2c:	42ab      	cmp	r3, r5
 8008a2e:	dcf2      	bgt.n	8008a16 <_printf_i+0x212>
 8008a30:	e7eb      	b.n	8008a0a <_printf_i+0x206>
 8008a32:	2500      	movs	r5, #0
 8008a34:	f104 0619 	add.w	r6, r4, #25
 8008a38:	e7f5      	b.n	8008a26 <_printf_i+0x222>
 8008a3a:	bf00      	nop
 8008a3c:	0800b8a5 	.word	0x0800b8a5
 8008a40:	0800b8b6 	.word	0x0800b8b6

08008a44 <__sflush_r>:
 8008a44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a4c:	0716      	lsls	r6, r2, #28
 8008a4e:	4605      	mov	r5, r0
 8008a50:	460c      	mov	r4, r1
 8008a52:	d454      	bmi.n	8008afe <__sflush_r+0xba>
 8008a54:	684b      	ldr	r3, [r1, #4]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	dc02      	bgt.n	8008a60 <__sflush_r+0x1c>
 8008a5a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	dd48      	ble.n	8008af2 <__sflush_r+0xae>
 8008a60:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a62:	2e00      	cmp	r6, #0
 8008a64:	d045      	beq.n	8008af2 <__sflush_r+0xae>
 8008a66:	2300      	movs	r3, #0
 8008a68:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008a6c:	682f      	ldr	r7, [r5, #0]
 8008a6e:	6a21      	ldr	r1, [r4, #32]
 8008a70:	602b      	str	r3, [r5, #0]
 8008a72:	d030      	beq.n	8008ad6 <__sflush_r+0x92>
 8008a74:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008a76:	89a3      	ldrh	r3, [r4, #12]
 8008a78:	0759      	lsls	r1, r3, #29
 8008a7a:	d505      	bpl.n	8008a88 <__sflush_r+0x44>
 8008a7c:	6863      	ldr	r3, [r4, #4]
 8008a7e:	1ad2      	subs	r2, r2, r3
 8008a80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008a82:	b10b      	cbz	r3, 8008a88 <__sflush_r+0x44>
 8008a84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008a86:	1ad2      	subs	r2, r2, r3
 8008a88:	2300      	movs	r3, #0
 8008a8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a8c:	6a21      	ldr	r1, [r4, #32]
 8008a8e:	4628      	mov	r0, r5
 8008a90:	47b0      	blx	r6
 8008a92:	1c43      	adds	r3, r0, #1
 8008a94:	89a3      	ldrh	r3, [r4, #12]
 8008a96:	d106      	bne.n	8008aa6 <__sflush_r+0x62>
 8008a98:	6829      	ldr	r1, [r5, #0]
 8008a9a:	291d      	cmp	r1, #29
 8008a9c:	d82b      	bhi.n	8008af6 <__sflush_r+0xb2>
 8008a9e:	4a2a      	ldr	r2, [pc, #168]	@ (8008b48 <__sflush_r+0x104>)
 8008aa0:	410a      	asrs	r2, r1
 8008aa2:	07d6      	lsls	r6, r2, #31
 8008aa4:	d427      	bmi.n	8008af6 <__sflush_r+0xb2>
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	6062      	str	r2, [r4, #4]
 8008aaa:	04d9      	lsls	r1, r3, #19
 8008aac:	6922      	ldr	r2, [r4, #16]
 8008aae:	6022      	str	r2, [r4, #0]
 8008ab0:	d504      	bpl.n	8008abc <__sflush_r+0x78>
 8008ab2:	1c42      	adds	r2, r0, #1
 8008ab4:	d101      	bne.n	8008aba <__sflush_r+0x76>
 8008ab6:	682b      	ldr	r3, [r5, #0]
 8008ab8:	b903      	cbnz	r3, 8008abc <__sflush_r+0x78>
 8008aba:	6560      	str	r0, [r4, #84]	@ 0x54
 8008abc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008abe:	602f      	str	r7, [r5, #0]
 8008ac0:	b1b9      	cbz	r1, 8008af2 <__sflush_r+0xae>
 8008ac2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ac6:	4299      	cmp	r1, r3
 8008ac8:	d002      	beq.n	8008ad0 <__sflush_r+0x8c>
 8008aca:	4628      	mov	r0, r5
 8008acc:	f7ff fa9a 	bl	8008004 <_free_r>
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	6363      	str	r3, [r4, #52]	@ 0x34
 8008ad4:	e00d      	b.n	8008af2 <__sflush_r+0xae>
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	4628      	mov	r0, r5
 8008ada:	47b0      	blx	r6
 8008adc:	4602      	mov	r2, r0
 8008ade:	1c50      	adds	r0, r2, #1
 8008ae0:	d1c9      	bne.n	8008a76 <__sflush_r+0x32>
 8008ae2:	682b      	ldr	r3, [r5, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d0c6      	beq.n	8008a76 <__sflush_r+0x32>
 8008ae8:	2b1d      	cmp	r3, #29
 8008aea:	d001      	beq.n	8008af0 <__sflush_r+0xac>
 8008aec:	2b16      	cmp	r3, #22
 8008aee:	d11e      	bne.n	8008b2e <__sflush_r+0xea>
 8008af0:	602f      	str	r7, [r5, #0]
 8008af2:	2000      	movs	r0, #0
 8008af4:	e022      	b.n	8008b3c <__sflush_r+0xf8>
 8008af6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008afa:	b21b      	sxth	r3, r3
 8008afc:	e01b      	b.n	8008b36 <__sflush_r+0xf2>
 8008afe:	690f      	ldr	r7, [r1, #16]
 8008b00:	2f00      	cmp	r7, #0
 8008b02:	d0f6      	beq.n	8008af2 <__sflush_r+0xae>
 8008b04:	0793      	lsls	r3, r2, #30
 8008b06:	680e      	ldr	r6, [r1, #0]
 8008b08:	bf08      	it	eq
 8008b0a:	694b      	ldreq	r3, [r1, #20]
 8008b0c:	600f      	str	r7, [r1, #0]
 8008b0e:	bf18      	it	ne
 8008b10:	2300      	movne	r3, #0
 8008b12:	eba6 0807 	sub.w	r8, r6, r7
 8008b16:	608b      	str	r3, [r1, #8]
 8008b18:	f1b8 0f00 	cmp.w	r8, #0
 8008b1c:	dde9      	ble.n	8008af2 <__sflush_r+0xae>
 8008b1e:	6a21      	ldr	r1, [r4, #32]
 8008b20:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008b22:	4643      	mov	r3, r8
 8008b24:	463a      	mov	r2, r7
 8008b26:	4628      	mov	r0, r5
 8008b28:	47b0      	blx	r6
 8008b2a:	2800      	cmp	r0, #0
 8008b2c:	dc08      	bgt.n	8008b40 <__sflush_r+0xfc>
 8008b2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b36:	81a3      	strh	r3, [r4, #12]
 8008b38:	f04f 30ff 	mov.w	r0, #4294967295
 8008b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b40:	4407      	add	r7, r0
 8008b42:	eba8 0800 	sub.w	r8, r8, r0
 8008b46:	e7e7      	b.n	8008b18 <__sflush_r+0xd4>
 8008b48:	dfbffffe 	.word	0xdfbffffe

08008b4c <_fflush_r>:
 8008b4c:	b538      	push	{r3, r4, r5, lr}
 8008b4e:	690b      	ldr	r3, [r1, #16]
 8008b50:	4605      	mov	r5, r0
 8008b52:	460c      	mov	r4, r1
 8008b54:	b913      	cbnz	r3, 8008b5c <_fflush_r+0x10>
 8008b56:	2500      	movs	r5, #0
 8008b58:	4628      	mov	r0, r5
 8008b5a:	bd38      	pop	{r3, r4, r5, pc}
 8008b5c:	b118      	cbz	r0, 8008b66 <_fflush_r+0x1a>
 8008b5e:	6a03      	ldr	r3, [r0, #32]
 8008b60:	b90b      	cbnz	r3, 8008b66 <_fflush_r+0x1a>
 8008b62:	f7ff f835 	bl	8007bd0 <__sinit>
 8008b66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d0f3      	beq.n	8008b56 <_fflush_r+0xa>
 8008b6e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008b70:	07d0      	lsls	r0, r2, #31
 8008b72:	d404      	bmi.n	8008b7e <_fflush_r+0x32>
 8008b74:	0599      	lsls	r1, r3, #22
 8008b76:	d402      	bmi.n	8008b7e <_fflush_r+0x32>
 8008b78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b7a:	f7ff fa40 	bl	8007ffe <__retarget_lock_acquire_recursive>
 8008b7e:	4628      	mov	r0, r5
 8008b80:	4621      	mov	r1, r4
 8008b82:	f7ff ff5f 	bl	8008a44 <__sflush_r>
 8008b86:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b88:	07da      	lsls	r2, r3, #31
 8008b8a:	4605      	mov	r5, r0
 8008b8c:	d4e4      	bmi.n	8008b58 <_fflush_r+0xc>
 8008b8e:	89a3      	ldrh	r3, [r4, #12]
 8008b90:	059b      	lsls	r3, r3, #22
 8008b92:	d4e1      	bmi.n	8008b58 <_fflush_r+0xc>
 8008b94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b96:	f7ff fa33 	bl	8008000 <__retarget_lock_release_recursive>
 8008b9a:	e7dd      	b.n	8008b58 <_fflush_r+0xc>

08008b9c <__swhatbuf_r>:
 8008b9c:	b570      	push	{r4, r5, r6, lr}
 8008b9e:	460c      	mov	r4, r1
 8008ba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ba4:	2900      	cmp	r1, #0
 8008ba6:	b096      	sub	sp, #88	@ 0x58
 8008ba8:	4615      	mov	r5, r2
 8008baa:	461e      	mov	r6, r3
 8008bac:	da0d      	bge.n	8008bca <__swhatbuf_r+0x2e>
 8008bae:	89a3      	ldrh	r3, [r4, #12]
 8008bb0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008bb4:	f04f 0100 	mov.w	r1, #0
 8008bb8:	bf14      	ite	ne
 8008bba:	2340      	movne	r3, #64	@ 0x40
 8008bbc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008bc0:	2000      	movs	r0, #0
 8008bc2:	6031      	str	r1, [r6, #0]
 8008bc4:	602b      	str	r3, [r5, #0]
 8008bc6:	b016      	add	sp, #88	@ 0x58
 8008bc8:	bd70      	pop	{r4, r5, r6, pc}
 8008bca:	466a      	mov	r2, sp
 8008bcc:	f000 f862 	bl	8008c94 <_fstat_r>
 8008bd0:	2800      	cmp	r0, #0
 8008bd2:	dbec      	blt.n	8008bae <__swhatbuf_r+0x12>
 8008bd4:	9901      	ldr	r1, [sp, #4]
 8008bd6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008bda:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008bde:	4259      	negs	r1, r3
 8008be0:	4159      	adcs	r1, r3
 8008be2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008be6:	e7eb      	b.n	8008bc0 <__swhatbuf_r+0x24>

08008be8 <__smakebuf_r>:
 8008be8:	898b      	ldrh	r3, [r1, #12]
 8008bea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bec:	079d      	lsls	r5, r3, #30
 8008bee:	4606      	mov	r6, r0
 8008bf0:	460c      	mov	r4, r1
 8008bf2:	d507      	bpl.n	8008c04 <__smakebuf_r+0x1c>
 8008bf4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008bf8:	6023      	str	r3, [r4, #0]
 8008bfa:	6123      	str	r3, [r4, #16]
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	6163      	str	r3, [r4, #20]
 8008c00:	b003      	add	sp, #12
 8008c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c04:	ab01      	add	r3, sp, #4
 8008c06:	466a      	mov	r2, sp
 8008c08:	f7ff ffc8 	bl	8008b9c <__swhatbuf_r>
 8008c0c:	9f00      	ldr	r7, [sp, #0]
 8008c0e:	4605      	mov	r5, r0
 8008c10:	4639      	mov	r1, r7
 8008c12:	4630      	mov	r0, r6
 8008c14:	f7ff fa62 	bl	80080dc <_malloc_r>
 8008c18:	b948      	cbnz	r0, 8008c2e <__smakebuf_r+0x46>
 8008c1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c1e:	059a      	lsls	r2, r3, #22
 8008c20:	d4ee      	bmi.n	8008c00 <__smakebuf_r+0x18>
 8008c22:	f023 0303 	bic.w	r3, r3, #3
 8008c26:	f043 0302 	orr.w	r3, r3, #2
 8008c2a:	81a3      	strh	r3, [r4, #12]
 8008c2c:	e7e2      	b.n	8008bf4 <__smakebuf_r+0xc>
 8008c2e:	89a3      	ldrh	r3, [r4, #12]
 8008c30:	6020      	str	r0, [r4, #0]
 8008c32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c36:	81a3      	strh	r3, [r4, #12]
 8008c38:	9b01      	ldr	r3, [sp, #4]
 8008c3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008c3e:	b15b      	cbz	r3, 8008c58 <__smakebuf_r+0x70>
 8008c40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c44:	4630      	mov	r0, r6
 8008c46:	f000 f837 	bl	8008cb8 <_isatty_r>
 8008c4a:	b128      	cbz	r0, 8008c58 <__smakebuf_r+0x70>
 8008c4c:	89a3      	ldrh	r3, [r4, #12]
 8008c4e:	f023 0303 	bic.w	r3, r3, #3
 8008c52:	f043 0301 	orr.w	r3, r3, #1
 8008c56:	81a3      	strh	r3, [r4, #12]
 8008c58:	89a3      	ldrh	r3, [r4, #12]
 8008c5a:	431d      	orrs	r5, r3
 8008c5c:	81a5      	strh	r5, [r4, #12]
 8008c5e:	e7cf      	b.n	8008c00 <__smakebuf_r+0x18>

08008c60 <memmove>:
 8008c60:	4288      	cmp	r0, r1
 8008c62:	b510      	push	{r4, lr}
 8008c64:	eb01 0402 	add.w	r4, r1, r2
 8008c68:	d902      	bls.n	8008c70 <memmove+0x10>
 8008c6a:	4284      	cmp	r4, r0
 8008c6c:	4623      	mov	r3, r4
 8008c6e:	d807      	bhi.n	8008c80 <memmove+0x20>
 8008c70:	1e43      	subs	r3, r0, #1
 8008c72:	42a1      	cmp	r1, r4
 8008c74:	d008      	beq.n	8008c88 <memmove+0x28>
 8008c76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c7e:	e7f8      	b.n	8008c72 <memmove+0x12>
 8008c80:	4402      	add	r2, r0
 8008c82:	4601      	mov	r1, r0
 8008c84:	428a      	cmp	r2, r1
 8008c86:	d100      	bne.n	8008c8a <memmove+0x2a>
 8008c88:	bd10      	pop	{r4, pc}
 8008c8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c92:	e7f7      	b.n	8008c84 <memmove+0x24>

08008c94 <_fstat_r>:
 8008c94:	b538      	push	{r3, r4, r5, lr}
 8008c96:	4d07      	ldr	r5, [pc, #28]	@ (8008cb4 <_fstat_r+0x20>)
 8008c98:	2300      	movs	r3, #0
 8008c9a:	4604      	mov	r4, r0
 8008c9c:	4608      	mov	r0, r1
 8008c9e:	4611      	mov	r1, r2
 8008ca0:	602b      	str	r3, [r5, #0]
 8008ca2:	f7f9 f83d 	bl	8001d20 <_fstat>
 8008ca6:	1c43      	adds	r3, r0, #1
 8008ca8:	d102      	bne.n	8008cb0 <_fstat_r+0x1c>
 8008caa:	682b      	ldr	r3, [r5, #0]
 8008cac:	b103      	cbz	r3, 8008cb0 <_fstat_r+0x1c>
 8008cae:	6023      	str	r3, [r4, #0]
 8008cb0:	bd38      	pop	{r3, r4, r5, pc}
 8008cb2:	bf00      	nop
 8008cb4:	24003de4 	.word	0x24003de4

08008cb8 <_isatty_r>:
 8008cb8:	b538      	push	{r3, r4, r5, lr}
 8008cba:	4d06      	ldr	r5, [pc, #24]	@ (8008cd4 <_isatty_r+0x1c>)
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	4604      	mov	r4, r0
 8008cc0:	4608      	mov	r0, r1
 8008cc2:	602b      	str	r3, [r5, #0]
 8008cc4:	f7f9 f83c 	bl	8001d40 <_isatty>
 8008cc8:	1c43      	adds	r3, r0, #1
 8008cca:	d102      	bne.n	8008cd2 <_isatty_r+0x1a>
 8008ccc:	682b      	ldr	r3, [r5, #0]
 8008cce:	b103      	cbz	r3, 8008cd2 <_isatty_r+0x1a>
 8008cd0:	6023      	str	r3, [r4, #0]
 8008cd2:	bd38      	pop	{r3, r4, r5, pc}
 8008cd4:	24003de4 	.word	0x24003de4

08008cd8 <_sbrk_r>:
 8008cd8:	b538      	push	{r3, r4, r5, lr}
 8008cda:	4d06      	ldr	r5, [pc, #24]	@ (8008cf4 <_sbrk_r+0x1c>)
 8008cdc:	2300      	movs	r3, #0
 8008cde:	4604      	mov	r4, r0
 8008ce0:	4608      	mov	r0, r1
 8008ce2:	602b      	str	r3, [r5, #0]
 8008ce4:	f7f9 f844 	bl	8001d70 <_sbrk>
 8008ce8:	1c43      	adds	r3, r0, #1
 8008cea:	d102      	bne.n	8008cf2 <_sbrk_r+0x1a>
 8008cec:	682b      	ldr	r3, [r5, #0]
 8008cee:	b103      	cbz	r3, 8008cf2 <_sbrk_r+0x1a>
 8008cf0:	6023      	str	r3, [r4, #0]
 8008cf2:	bd38      	pop	{r3, r4, r5, pc}
 8008cf4:	24003de4 	.word	0x24003de4

08008cf8 <memcpy>:
 8008cf8:	440a      	add	r2, r1
 8008cfa:	4291      	cmp	r1, r2
 8008cfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d00:	d100      	bne.n	8008d04 <memcpy+0xc>
 8008d02:	4770      	bx	lr
 8008d04:	b510      	push	{r4, lr}
 8008d06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d0e:	4291      	cmp	r1, r2
 8008d10:	d1f9      	bne.n	8008d06 <memcpy+0xe>
 8008d12:	bd10      	pop	{r4, pc}

08008d14 <_realloc_r>:
 8008d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d18:	4680      	mov	r8, r0
 8008d1a:	4615      	mov	r5, r2
 8008d1c:	460c      	mov	r4, r1
 8008d1e:	b921      	cbnz	r1, 8008d2a <_realloc_r+0x16>
 8008d20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d24:	4611      	mov	r1, r2
 8008d26:	f7ff b9d9 	b.w	80080dc <_malloc_r>
 8008d2a:	b92a      	cbnz	r2, 8008d38 <_realloc_r+0x24>
 8008d2c:	f7ff f96a 	bl	8008004 <_free_r>
 8008d30:	2400      	movs	r4, #0
 8008d32:	4620      	mov	r0, r4
 8008d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d38:	f000 f81a 	bl	8008d70 <_malloc_usable_size_r>
 8008d3c:	4285      	cmp	r5, r0
 8008d3e:	4606      	mov	r6, r0
 8008d40:	d802      	bhi.n	8008d48 <_realloc_r+0x34>
 8008d42:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008d46:	d8f4      	bhi.n	8008d32 <_realloc_r+0x1e>
 8008d48:	4629      	mov	r1, r5
 8008d4a:	4640      	mov	r0, r8
 8008d4c:	f7ff f9c6 	bl	80080dc <_malloc_r>
 8008d50:	4607      	mov	r7, r0
 8008d52:	2800      	cmp	r0, #0
 8008d54:	d0ec      	beq.n	8008d30 <_realloc_r+0x1c>
 8008d56:	42b5      	cmp	r5, r6
 8008d58:	462a      	mov	r2, r5
 8008d5a:	4621      	mov	r1, r4
 8008d5c:	bf28      	it	cs
 8008d5e:	4632      	movcs	r2, r6
 8008d60:	f7ff ffca 	bl	8008cf8 <memcpy>
 8008d64:	4621      	mov	r1, r4
 8008d66:	4640      	mov	r0, r8
 8008d68:	f7ff f94c 	bl	8008004 <_free_r>
 8008d6c:	463c      	mov	r4, r7
 8008d6e:	e7e0      	b.n	8008d32 <_realloc_r+0x1e>

08008d70 <_malloc_usable_size_r>:
 8008d70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d74:	1f18      	subs	r0, r3, #4
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	bfbc      	itt	lt
 8008d7a:	580b      	ldrlt	r3, [r1, r0]
 8008d7c:	18c0      	addlt	r0, r0, r3
 8008d7e:	4770      	bx	lr

08008d80 <_init>:
 8008d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d82:	bf00      	nop
 8008d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d86:	bc08      	pop	{r3}
 8008d88:	469e      	mov	lr, r3
 8008d8a:	4770      	bx	lr

08008d8c <_fini>:
 8008d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d8e:	bf00      	nop
 8008d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d92:	bc08      	pop	{r3}
 8008d94:	469e      	mov	lr, r3
 8008d96:	4770      	bx	lr


STM32H7v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b80  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000b258  08009e50  08009e50  0000ae50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080150a8  080150a8  000160a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080150b0  080150b0  000160b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080150b4  080150b4  000160b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000009c  24000000  080150b8  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002f0  2400009c  08015154  0001709c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400038c  08015154  0001738c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001709c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019116  00000000  00000000  000170ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003202  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001498  00000000  00000000  000333e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000f9e  00000000  00000000  00034880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035357  00000000  00000000  0003581e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001c206  00000000  00000000  0006ab75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00153eb7  00000000  00000000  00086d7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001dac32  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005d14  00000000  00000000  001dac78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000065  00000000  00000000  001e098c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400009c 	.word	0x2400009c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08009e38 	.word	0x08009e38

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240000a0 	.word	0x240000a0
 800030c:	08009e38 	.word	0x08009e38

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <DEV_SPI_WriteByte>:
#include "stm32h7xx_hal_spi.h"


extern SPI_HandleTypeDef hspi2;
void DEV_SPI_WriteByte(UBYTE value)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi2, &value, 1, 1000);
 80006aa:	1df9      	adds	r1, r7, #7
 80006ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006b0:	2201      	movs	r2, #1
 80006b2:	4803      	ldr	r0, [pc, #12]	@ (80006c0 <DEV_SPI_WriteByte+0x20>)
 80006b4:	f006 f8f0 	bl	8006898 <HAL_SPI_Transmit>
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	240000d0 	.word	0x240000d0

080006c4 <DEV_Module_Init>:
	DEV_Digital_Write(EPD_CS_PIN, 1);
	return j;
}*/

int DEV_Module_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_DC_PIN, 0);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2102      	movs	r1, #2
 80006cc:	4808      	ldr	r0, [pc, #32]	@ (80006f0 <DEV_Module_Init+0x2c>)
 80006ce:	f003 fa29 	bl	8003b24 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2104      	movs	r1, #4
 80006d6:	4806      	ldr	r0, [pc, #24]	@ (80006f0 <DEV_Module_Init+0x2c>)
 80006d8:	f003 fa24 	bl	8003b24 <HAL_GPIO_WritePin>
	//DEV_Digital_Write(EPD_PWR_PIN, 1);
    DEV_Digital_Write(EPD_RST_PIN, 1);
 80006dc:	2201      	movs	r2, #1
 80006de:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006e2:	4803      	ldr	r0, [pc, #12]	@ (80006f0 <DEV_Module_Init+0x2c>)
 80006e4:	f003 fa1e 	bl	8003b24 <HAL_GPIO_WritePin>
    return 0;
 80006e8:	2300      	movs	r3, #0
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	58020400 	.word	0x58020400

080006f4 <DEV_Module_Exit>:

void DEV_Module_Exit(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_DC_PIN, 0);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2102      	movs	r1, #2
 80006fc:	4807      	ldr	r0, [pc, #28]	@ (800071c <DEV_Module_Exit+0x28>)
 80006fe:	f003 fa11 	bl	8003b24 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8000702:	2200      	movs	r2, #0
 8000704:	2104      	movs	r1, #4
 8000706:	4805      	ldr	r0, [pc, #20]	@ (800071c <DEV_Module_Exit+0x28>)
 8000708:	f003 fa0c 	bl	8003b24 <HAL_GPIO_WritePin>

    //close 5V
	//DEV_Digital_Write(EPD_PWR_PIN, 0);
    DEV_Digital_Write(EPD_RST_PIN, 0);
 800070c:	2200      	movs	r2, #0
 800070e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000712:	4802      	ldr	r0, [pc, #8]	@ (800071c <DEV_Module_Exit+0x28>)
 8000714:	f003 fa06 	bl	8003b24 <HAL_GPIO_WritePin>
}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	58020400 	.word	0x58020400

08000720 <EPD_4IN2_V2_Reset>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
static void EPD_4IN2_V2_Reset(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8000724:	2201      	movs	r2, #1
 8000726:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800072a:	480d      	ldr	r0, [pc, #52]	@ (8000760 <EPD_4IN2_V2_Reset+0x40>)
 800072c:	f003 f9fa 	bl	8003b24 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 8000730:	2064      	movs	r0, #100	@ 0x64
 8000732:	f002 feb7 	bl	80034a4 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 0);
 8000736:	2200      	movs	r2, #0
 8000738:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800073c:	4808      	ldr	r0, [pc, #32]	@ (8000760 <EPD_4IN2_V2_Reset+0x40>)
 800073e:	f003 f9f1 	bl	8003b24 <HAL_GPIO_WritePin>
    DEV_Delay_ms(2);
 8000742:	2002      	movs	r0, #2
 8000744:	f002 feae 	bl	80034a4 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8000748:	2201      	movs	r2, #1
 800074a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800074e:	4804      	ldr	r0, [pc, #16]	@ (8000760 <EPD_4IN2_V2_Reset+0x40>)
 8000750:	f003 f9e8 	bl	8003b24 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 8000754:	2064      	movs	r0, #100	@ 0x64
 8000756:	f002 fea5 	bl	80034a4 <HAL_Delay>
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	58020400 	.word	0x58020400

08000764 <EPD_4IN2_V2_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void EPD_4IN2_V2_SendCommand(UBYTE Reg)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 0);
 800076e:	2200      	movs	r2, #0
 8000770:	2102      	movs	r1, #2
 8000772:	480a      	ldr	r0, [pc, #40]	@ (800079c <EPD_4IN2_V2_SendCommand+0x38>)
 8000774:	f003 f9d6 	bl	8003b24 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8000778:	2200      	movs	r2, #0
 800077a:	2104      	movs	r1, #4
 800077c:	4807      	ldr	r0, [pc, #28]	@ (800079c <EPD_4IN2_V2_SendCommand+0x38>)
 800077e:	f003 f9d1 	bl	8003b24 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff ff8b 	bl	80006a0 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 800078a:	2201      	movs	r2, #1
 800078c:	2104      	movs	r1, #4
 800078e:	4803      	ldr	r0, [pc, #12]	@ (800079c <EPD_4IN2_V2_SendCommand+0x38>)
 8000790:	f003 f9c8 	bl	8003b24 <HAL_GPIO_WritePin>
}
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	58020400 	.word	0x58020400

080007a0 <EPD_4IN2_V2_SendData>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void EPD_4IN2_V2_SendData(UBYTE Data)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 1);
 80007aa:	2201      	movs	r2, #1
 80007ac:	2102      	movs	r1, #2
 80007ae:	480a      	ldr	r0, [pc, #40]	@ (80007d8 <EPD_4IN2_V2_SendData+0x38>)
 80007b0:	f003 f9b8 	bl	8003b24 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 80007b4:	2200      	movs	r2, #0
 80007b6:	2104      	movs	r1, #4
 80007b8:	4807      	ldr	r0, [pc, #28]	@ (80007d8 <EPD_4IN2_V2_SendData+0x38>)
 80007ba:	f003 f9b3 	bl	8003b24 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff ff6d 	bl	80006a0 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 80007c6:	2201      	movs	r2, #1
 80007c8:	2104      	movs	r1, #4
 80007ca:	4803      	ldr	r0, [pc, #12]	@ (80007d8 <EPD_4IN2_V2_SendData+0x38>)
 80007cc:	f003 f9aa 	bl	8003b24 <HAL_GPIO_WritePin>
}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	58020400 	.word	0x58020400

080007dc <EPD_4IN2_V2_ReadBusy>:
/******************************************************************************
function :	Wait until the busy_pin goes LOW
parameter:
******************************************************************************/
void EPD_4IN2_V2_ReadBusy(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
    Debug("e-Paper busy\r\n");
 80007e2:	480d      	ldr	r0, [pc, #52]	@ (8000818 <EPD_4IN2_V2_ReadBusy+0x3c>)
 80007e4:	f008 fd72 	bl	80092cc <puts>
    int delayInMs  = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	607b      	str	r3, [r7, #4]
    while(DEV_Digital_Read(EPD_BUSY_PIN) == 1) {      //LOW: idle, HIGH: busy
 80007ec:	e005      	b.n	80007fa <EPD_4IN2_V2_ReadBusy+0x1e>
        DEV_Delay_ms(10);
 80007ee:	200a      	movs	r0, #10
 80007f0:	f002 fe58 	bl	80034a4 <HAL_Delay>
        delayInMs += 10;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	330a      	adds	r3, #10
 80007f8:	607b      	str	r3, [r7, #4]
    while(DEV_Digital_Read(EPD_BUSY_PIN) == 1) {      //LOW: idle, HIGH: busy
 80007fa:	2101      	movs	r1, #1
 80007fc:	4807      	ldr	r0, [pc, #28]	@ (800081c <EPD_4IN2_V2_ReadBusy+0x40>)
 80007fe:	f003 f979 	bl	8003af4 <HAL_GPIO_ReadPin>
 8000802:	4603      	mov	r3, r0
 8000804:	2b01      	cmp	r3, #1
 8000806:	d0f2      	beq.n	80007ee <EPD_4IN2_V2_ReadBusy+0x12>
    }
    printf("e-Paper busy release (%i ms)\r\n", delayInMs);
 8000808:	6879      	ldr	r1, [r7, #4]
 800080a:	4805      	ldr	r0, [pc, #20]	@ (8000820 <EPD_4IN2_V2_ReadBusy+0x44>)
 800080c:	f008 fcf6 	bl	80091fc <iprintf>
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	08009e50 	.word	0x08009e50
 800081c:	58020400 	.word	0x58020400
 8000820:	08009e68 	.word	0x08009e68

08000824 <EPD_4IN2_V2_TurnOnDisplay>:
/******************************************************************************
function :	Turn On Display
parameter:
******************************************************************************/
static void EPD_4IN2_V2_TurnOnDisplay(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
    EPD_4IN2_V2_SendCommand(0x22);
 8000828:	2022      	movs	r0, #34	@ 0x22
 800082a:	f7ff ff9b 	bl	8000764 <EPD_4IN2_V2_SendCommand>
	EPD_4IN2_V2_SendData(0xF7);
 800082e:	20f7      	movs	r0, #247	@ 0xf7
 8000830:	f7ff ffb6 	bl	80007a0 <EPD_4IN2_V2_SendData>
    EPD_4IN2_V2_SendCommand(0x20);
 8000834:	2020      	movs	r0, #32
 8000836:	f7ff ff95 	bl	8000764 <EPD_4IN2_V2_SendCommand>
    EPD_4IN2_V2_ReadBusy();
 800083a:	f7ff ffcf 	bl	80007dc <EPD_4IN2_V2_ReadBusy>
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}

08000842 <EPD_4IN2_V2_TurnOnDisplay_Partial>:
    EPD_4IN2_V2_SendCommand(0x20);
    EPD_4IN2_V2_ReadBusy();
}

static void EPD_4IN2_V2_TurnOnDisplay_Partial(void)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	af00      	add	r7, sp, #0
    EPD_4IN2_V2_SendCommand(0x22);
 8000846:	2022      	movs	r0, #34	@ 0x22
 8000848:	f7ff ff8c 	bl	8000764 <EPD_4IN2_V2_SendCommand>
	EPD_4IN2_V2_SendData(0xFF);
 800084c:	20ff      	movs	r0, #255	@ 0xff
 800084e:	f7ff ffa7 	bl	80007a0 <EPD_4IN2_V2_SendData>
    EPD_4IN2_V2_SendCommand(0x20);
 8000852:	2020      	movs	r0, #32
 8000854:	f7ff ff86 	bl	8000764 <EPD_4IN2_V2_SendCommand>
    EPD_4IN2_V2_ReadBusy();
 8000858:	f7ff ffc0 	bl	80007dc <EPD_4IN2_V2_ReadBusy>
}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}

08000860 <EPD_4IN2_V2_TurnOnDisplay_4Gray>:

static void EPD_4IN2_V2_TurnOnDisplay_4Gray(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
    EPD_4IN2_V2_SendCommand(0x22);
 8000864:	2022      	movs	r0, #34	@ 0x22
 8000866:	f7ff ff7d 	bl	8000764 <EPD_4IN2_V2_SendCommand>
	EPD_4IN2_V2_SendData(0xCF);
 800086a:	20cf      	movs	r0, #207	@ 0xcf
 800086c:	f7ff ff98 	bl	80007a0 <EPD_4IN2_V2_SendData>
    EPD_4IN2_V2_SendCommand(0x20);
 8000870:	2020      	movs	r0, #32
 8000872:	f7ff ff77 	bl	8000764 <EPD_4IN2_V2_SendCommand>
    EPD_4IN2_V2_ReadBusy();
 8000876:	f7ff ffb1 	bl	80007dc <EPD_4IN2_V2_ReadBusy>
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}

0800087e <EPD_4IN2_V2_SetWindows>:
/******************************************************************************
function :	Setting the display window
parameter:
******************************************************************************/
static void EPD_4IN2_V2_SetWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend)
{
 800087e:	b590      	push	{r4, r7, lr}
 8000880:	b083      	sub	sp, #12
 8000882:	af00      	add	r7, sp, #0
 8000884:	4604      	mov	r4, r0
 8000886:	4608      	mov	r0, r1
 8000888:	4611      	mov	r1, r2
 800088a:	461a      	mov	r2, r3
 800088c:	4623      	mov	r3, r4
 800088e:	80fb      	strh	r3, [r7, #6]
 8000890:	4603      	mov	r3, r0
 8000892:	80bb      	strh	r3, [r7, #4]
 8000894:	460b      	mov	r3, r1
 8000896:	807b      	strh	r3, [r7, #2]
 8000898:	4613      	mov	r3, r2
 800089a:	803b      	strh	r3, [r7, #0]
    EPD_4IN2_V2_SendCommand(0x44); // SET_RAM_X_ADDRESS_START_END_POSITION
 800089c:	2044      	movs	r0, #68	@ 0x44
 800089e:	f7ff ff61 	bl	8000764 <EPD_4IN2_V2_SendCommand>
    EPD_4IN2_V2_SendData((Xstart>>3) & 0xFF);
 80008a2:	88fb      	ldrh	r3, [r7, #6]
 80008a4:	08db      	lsrs	r3, r3, #3
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff ff78 	bl	80007a0 <EPD_4IN2_V2_SendData>
    EPD_4IN2_V2_SendData((Xend>>3) & 0xFF);
 80008b0:	887b      	ldrh	r3, [r7, #2]
 80008b2:	08db      	lsrs	r3, r3, #3
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff ff71 	bl	80007a0 <EPD_4IN2_V2_SendData>
	
    EPD_4IN2_V2_SendCommand(0x45); // SET_RAM_Y_ADDRESS_START_END_POSITION
 80008be:	2045      	movs	r0, #69	@ 0x45
 80008c0:	f7ff ff50 	bl	8000764 <EPD_4IN2_V2_SendCommand>
    EPD_4IN2_V2_SendData(Ystart & 0xFF);
 80008c4:	88bb      	ldrh	r3, [r7, #4]
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff ff69 	bl	80007a0 <EPD_4IN2_V2_SendData>
    EPD_4IN2_V2_SendData((Ystart >> 8) & 0xFF);
 80008ce:	88bb      	ldrh	r3, [r7, #4]
 80008d0:	0a1b      	lsrs	r3, r3, #8
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff ff62 	bl	80007a0 <EPD_4IN2_V2_SendData>
    EPD_4IN2_V2_SendData(Yend & 0xFF);
 80008dc:	883b      	ldrh	r3, [r7, #0]
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff ff5d 	bl	80007a0 <EPD_4IN2_V2_SendData>
    EPD_4IN2_V2_SendData((Yend >> 8) & 0xFF);
 80008e6:	883b      	ldrh	r3, [r7, #0]
 80008e8:	0a1b      	lsrs	r3, r3, #8
 80008ea:	b29b      	uxth	r3, r3
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff ff56 	bl	80007a0 <EPD_4IN2_V2_SendData>
}
 80008f4:	bf00      	nop
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd90      	pop	{r4, r7, pc}

080008fc <EPD_4IN2_V2_SetCursor>:
/******************************************************************************
function :	Set Cursor
parameter:
******************************************************************************/
static void EPD_4IN2_V2_SetCursor(UWORD Xstart, UWORD Ystart)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	460a      	mov	r2, r1
 8000906:	80fb      	strh	r3, [r7, #6]
 8000908:	4613      	mov	r3, r2
 800090a:	80bb      	strh	r3, [r7, #4]
    EPD_4IN2_V2_SendCommand(0x4E); // SET_RAM_X_ADDRESS_COUNTER
 800090c:	204e      	movs	r0, #78	@ 0x4e
 800090e:	f7ff ff29 	bl	8000764 <EPD_4IN2_V2_SendCommand>
    EPD_4IN2_V2_SendData((Xstart>>3) & 0xFF);
 8000912:	88fb      	ldrh	r3, [r7, #6]
 8000914:	08db      	lsrs	r3, r3, #3
 8000916:	b29b      	uxth	r3, r3
 8000918:	b2db      	uxtb	r3, r3
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff ff40 	bl	80007a0 <EPD_4IN2_V2_SendData>

    EPD_4IN2_V2_SendCommand(0x4F); // SET_RAM_Y_ADDRESS_COUNTER
 8000920:	204f      	movs	r0, #79	@ 0x4f
 8000922:	f7ff ff1f 	bl	8000764 <EPD_4IN2_V2_SendCommand>
    EPD_4IN2_V2_SendData(Ystart & 0xFF);
 8000926:	88bb      	ldrh	r3, [r7, #4]
 8000928:	b2db      	uxtb	r3, r3
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff ff38 	bl	80007a0 <EPD_4IN2_V2_SendData>
    EPD_4IN2_V2_SendData((Ystart >> 8) & 0xFF);
 8000930:	88bb      	ldrh	r3, [r7, #4]
 8000932:	0a1b      	lsrs	r3, r3, #8
 8000934:	b29b      	uxth	r3, r3
 8000936:	b2db      	uxtb	r3, r3
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff ff31 	bl	80007a0 <EPD_4IN2_V2_SendData>
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
	...

08000948 <EPD_4IN2_V2_4Gray_lut>:

//LUT download
static void EPD_4IN2_V2_4Gray_lut(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
    unsigned char i;

    //WS byte 0~152, the content of VS[nX-LUTm], TP[nX], RP[n], SR[nXY], FR[n] and XON[nXY]
    EPD_4IN2_V2_SendCommand(0x32);					
 800094e:	2032      	movs	r0, #50	@ 0x32
 8000950:	f7ff ff08 	bl	8000764 <EPD_4IN2_V2_SendCommand>
    for(i=0;i<227;i++)
 8000954:	2300      	movs	r3, #0
 8000956:	71fb      	strb	r3, [r7, #7]
 8000958:	e008      	b.n	800096c <EPD_4IN2_V2_4Gray_lut+0x24>
    {
        EPD_4IN2_V2_SendData(LUT_ALL[i]);
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	4a28      	ldr	r2, [pc, #160]	@ (8000a00 <EPD_4IN2_V2_4Gray_lut+0xb8>)
 800095e:	5cd3      	ldrb	r3, [r2, r3]
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff ff1d 	bl	80007a0 <EPD_4IN2_V2_SendData>
    for(i=0;i<227;i++)
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	3301      	adds	r3, #1
 800096a:	71fb      	strb	r3, [r7, #7]
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	2be2      	cmp	r3, #226	@ 0xe2
 8000970:	d9f3      	bls.n	800095a <EPD_4IN2_V2_4Gray_lut+0x12>
    }	
    //WS byte 153, the content of Option for LUT end	
    EPD_4IN2_V2_SendCommand(0x3F);					
 8000972:	203f      	movs	r0, #63	@ 0x3f
 8000974:	f7ff fef6 	bl	8000764 <EPD_4IN2_V2_SendCommand>
    EPD_4IN2_V2_SendData(LUT_ALL[i++]);
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	1c5a      	adds	r2, r3, #1
 800097c:	71fa      	strb	r2, [r7, #7]
 800097e:	461a      	mov	r2, r3
 8000980:	4b1f      	ldr	r3, [pc, #124]	@ (8000a00 <EPD_4IN2_V2_4Gray_lut+0xb8>)
 8000982:	5c9b      	ldrb	r3, [r3, r2]
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff ff0b 	bl	80007a0 <EPD_4IN2_V2_SendData>

    //WS byte 154, the content of gate leve
    EPD_4IN2_V2_SendCommand(0x03);					
 800098a:	2003      	movs	r0, #3
 800098c:	f7ff feea 	bl	8000764 <EPD_4IN2_V2_SendCommand>
    EPD_4IN2_V2_SendData(LUT_ALL[i++]);//VGH
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	1c5a      	adds	r2, r3, #1
 8000994:	71fa      	strb	r2, [r7, #7]
 8000996:	461a      	mov	r2, r3
 8000998:	4b19      	ldr	r3, [pc, #100]	@ (8000a00 <EPD_4IN2_V2_4Gray_lut+0xb8>)
 800099a:	5c9b      	ldrb	r3, [r3, r2]
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff feff 	bl	80007a0 <EPD_4IN2_V2_SendData>

    //WS byte 155~157, the content of source level
    EPD_4IN2_V2_SendCommand(0x04);					
 80009a2:	2004      	movs	r0, #4
 80009a4:	f7ff fede 	bl	8000764 <EPD_4IN2_V2_SendCommand>
    EPD_4IN2_V2_SendData(LUT_ALL[i++]);//VSH1
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	1c5a      	adds	r2, r3, #1
 80009ac:	71fa      	strb	r2, [r7, #7]
 80009ae:	461a      	mov	r2, r3
 80009b0:	4b13      	ldr	r3, [pc, #76]	@ (8000a00 <EPD_4IN2_V2_4Gray_lut+0xb8>)
 80009b2:	5c9b      	ldrb	r3, [r3, r2]
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff fef3 	bl	80007a0 <EPD_4IN2_V2_SendData>
    EPD_4IN2_V2_SendData(LUT_ALL[i++]);//VSH2
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	1c5a      	adds	r2, r3, #1
 80009be:	71fa      	strb	r2, [r7, #7]
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000a00 <EPD_4IN2_V2_4Gray_lut+0xb8>)
 80009c4:	5c9b      	ldrb	r3, [r3, r2]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff feea 	bl	80007a0 <EPD_4IN2_V2_SendData>
    EPD_4IN2_V2_SendData(LUT_ALL[i++]);//VSL
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	1c5a      	adds	r2, r3, #1
 80009d0:	71fa      	strb	r2, [r7, #7]
 80009d2:	461a      	mov	r2, r3
 80009d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000a00 <EPD_4IN2_V2_4Gray_lut+0xb8>)
 80009d6:	5c9b      	ldrb	r3, [r3, r2]
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff fee1 	bl	80007a0 <EPD_4IN2_V2_SendData>

    //WS byte 158, the content of VCOM level
    EPD_4IN2_V2_SendCommand(0x2c);					
 80009de:	202c      	movs	r0, #44	@ 0x2c
 80009e0:	f7ff fec0 	bl	8000764 <EPD_4IN2_V2_SendCommand>
    EPD_4IN2_V2_SendData(LUT_ALL[i++]);//VCOM
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	1c5a      	adds	r2, r3, #1
 80009e8:	71fa      	strb	r2, [r7, #7]
 80009ea:	461a      	mov	r2, r3
 80009ec:	4b04      	ldr	r3, [pc, #16]	@ (8000a00 <EPD_4IN2_V2_4Gray_lut+0xb8>)
 80009ee:	5c9b      	ldrb	r3, [r3, r2]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff fed5 	bl	80007a0 <EPD_4IN2_V2_SendData>
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	0800a398 	.word	0x0800a398

08000a04 <EPD_4IN2_V2_Init>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
void EPD_4IN2_V2_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
    EPD_4IN2_V2_Reset();
 8000a08:	f7ff fe8a 	bl	8000720 <EPD_4IN2_V2_Reset>

    EPD_4IN2_V2_ReadBusy();   
 8000a0c:	f7ff fee6 	bl	80007dc <EPD_4IN2_V2_ReadBusy>
    EPD_4IN2_V2_SendCommand(0x12);   // soft  reset
 8000a10:	2012      	movs	r0, #18
 8000a12:	f7ff fea7 	bl	8000764 <EPD_4IN2_V2_SendCommand>
    EPD_4IN2_V2_ReadBusy();
 8000a16:	f7ff fee1 	bl	80007dc <EPD_4IN2_V2_ReadBusy>
    // EPD_4IN2_V2_SendCommand(0x01); //Driver output control      
    // EPD_4IN2_V2_SendData((EPD_4IN2_V2_HEIGHT-1)%256);   
    // EPD_4IN2_V2_SendData((EPD_4IN2_V2_HEIGHT-1)/256);
    // EPD_4IN2_V2_SendData(0x00);

    EPD_4IN2_V2_SendCommand(0x21); //  Display update control
 8000a1a:	2021      	movs	r0, #33	@ 0x21
 8000a1c:	f7ff fea2 	bl	8000764 <EPD_4IN2_V2_SendCommand>
    EPD_4IN2_V2_SendData(0x40);		
 8000a20:	2040      	movs	r0, #64	@ 0x40
 8000a22:	f7ff febd 	bl	80007a0 <EPD_4IN2_V2_SendData>
    EPD_4IN2_V2_SendData(0x00);		
 8000a26:	2000      	movs	r0, #0
 8000a28:	f7ff feba 	bl	80007a0 <EPD_4IN2_V2_SendData>

    EPD_4IN2_V2_SendCommand(0x3C); //BorderWavefrom
 8000a2c:	203c      	movs	r0, #60	@ 0x3c
 8000a2e:	f7ff fe99 	bl	8000764 <EPD_4IN2_V2_SendCommand>
    EPD_4IN2_V2_SendData(0x05);
 8000a32:	2005      	movs	r0, #5
 8000a34:	f7ff feb4 	bl	80007a0 <EPD_4IN2_V2_SendData>
	
    EPD_4IN2_V2_SendCommand(0x11);	// data  entry  mode
 8000a38:	2011      	movs	r0, #17
 8000a3a:	f7ff fe93 	bl	8000764 <EPD_4IN2_V2_SendCommand>
    EPD_4IN2_V2_SendData(0x03);		// X-mode   
 8000a3e:	2003      	movs	r0, #3
 8000a40:	f7ff feae 	bl	80007a0 <EPD_4IN2_V2_SendData>
		
	EPD_4IN2_V2_SetWindows(0, 0, EPD_4IN2_V2_WIDTH-1, EPD_4IN2_V2_HEIGHT-1);
 8000a44:	f240 132b 	movw	r3, #299	@ 0x12b
 8000a48:	f240 128f 	movw	r2, #399	@ 0x18f
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f7ff ff15 	bl	800087e <EPD_4IN2_V2_SetWindows>
	 
	EPD_4IN2_V2_SetCursor(0, 0);
 8000a54:	2100      	movs	r1, #0
 8000a56:	2000      	movs	r0, #0
 8000a58:	f7ff ff50 	bl	80008fc <EPD_4IN2_V2_SetCursor>
	
    EPD_4IN2_V2_ReadBusy();
 8000a5c:	f7ff febe 	bl	80007dc <EPD_4IN2_V2_ReadBusy>
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <EPD_4IN2_V2_Init_4Gray>:
    EPD_4IN2_V2_ReadBusy();
}


void EPD_4IN2_V2_Init_4Gray(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
    EPD_4IN2_V2_Reset();
 8000a68:	f7ff fe5a 	bl	8000720 <EPD_4IN2_V2_Reset>

    EPD_4IN2_V2_SendCommand(0x12);  //SWRESET
 8000a6c:	2012      	movs	r0, #18
 8000a6e:	f7ff fe79 	bl	8000764 <EPD_4IN2_V2_SendCommand>
    EPD_4IN2_V2_ReadBusy();   
 8000a72:	f7ff feb3 	bl	80007dc <EPD_4IN2_V2_ReadBusy>

    EPD_4IN2_V2_SendCommand(0x21);	 
 8000a76:	2021      	movs	r0, #33	@ 0x21
 8000a78:	f7ff fe74 	bl	8000764 <EPD_4IN2_V2_SendCommand>
    EPD_4IN2_V2_SendData(0x00);
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f7ff fe8f 	bl	80007a0 <EPD_4IN2_V2_SendData>
    EPD_4IN2_V2_SendData(0x00);
 8000a82:	2000      	movs	r0, #0
 8000a84:	f7ff fe8c 	bl	80007a0 <EPD_4IN2_V2_SendData>

    EPD_4IN2_V2_SendCommand(0x3C);     
 8000a88:	203c      	movs	r0, #60	@ 0x3c
 8000a8a:	f7ff fe6b 	bl	8000764 <EPD_4IN2_V2_SendCommand>
    EPD_4IN2_V2_SendData(0x03);
 8000a8e:	2003      	movs	r0, #3
 8000a90:	f7ff fe86 	bl	80007a0 <EPD_4IN2_V2_SendData>

    EPD_4IN2_V2_SendCommand(0x0C); //BTST
 8000a94:	200c      	movs	r0, #12
 8000a96:	f7ff fe65 	bl	8000764 <EPD_4IN2_V2_SendCommand>
    EPD_4IN2_V2_SendData(0x8B);//8B
 8000a9a:	208b      	movs	r0, #139	@ 0x8b
 8000a9c:	f7ff fe80 	bl	80007a0 <EPD_4IN2_V2_SendData>
    EPD_4IN2_V2_SendData(0x9C);//9C
 8000aa0:	209c      	movs	r0, #156	@ 0x9c
 8000aa2:	f7ff fe7d 	bl	80007a0 <EPD_4IN2_V2_SendData>
    EPD_4IN2_V2_SendData(0xA4);//96 A4
 8000aa6:	20a4      	movs	r0, #164	@ 0xa4
 8000aa8:	f7ff fe7a 	bl	80007a0 <EPD_4IN2_V2_SendData>
    EPD_4IN2_V2_SendData(0x0F);//0F	
 8000aac:	200f      	movs	r0, #15
 8000aae:	f7ff fe77 	bl	80007a0 <EPD_4IN2_V2_SendData>
    // EPD_4IN2_V2_SendCommand(0x01);   // 驱动输出控制      drive output control    
    // EPD_4IN2_V2_SendData(0x2B); //  Y 的低字节 
    // EPD_4IN2_V2_SendData(0x01); //  Y 的高字节 
    // EPD_4IN2_V2_SendData(0x00);

    EPD_4IN2_V2_4Gray_lut(); //LUT
 8000ab2:	f7ff ff49 	bl	8000948 <EPD_4IN2_V2_4Gray_lut>

    EPD_4IN2_V2_SendCommand(0x11);	// data  entry  mode
 8000ab6:	2011      	movs	r0, #17
 8000ab8:	f7ff fe54 	bl	8000764 <EPD_4IN2_V2_SendCommand>
    EPD_4IN2_V2_SendData(0x03);		// X-mode   
 8000abc:	2003      	movs	r0, #3
 8000abe:	f7ff fe6f 	bl	80007a0 <EPD_4IN2_V2_SendData>
		
	EPD_4IN2_V2_SetWindows(0, 0, EPD_4IN2_V2_WIDTH-1, EPD_4IN2_V2_HEIGHT-1);
 8000ac2:	f240 132b 	movw	r3, #299	@ 0x12b
 8000ac6:	f240 128f 	movw	r2, #399	@ 0x18f
 8000aca:	2100      	movs	r1, #0
 8000acc:	2000      	movs	r0, #0
 8000ace:	f7ff fed6 	bl	800087e <EPD_4IN2_V2_SetWindows>
	 
	EPD_4IN2_V2_SetCursor(0, 0);
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	f7ff ff11 	bl	80008fc <EPD_4IN2_V2_SetCursor>
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}

08000ade <EPD_4IN2_V2_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void EPD_4IN2_V2_Clear(void)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b084      	sub	sp, #16
 8000ae2:	af00      	add	r7, sp, #0
    UWORD Width, Height;
    Width = (EPD_4IN2_V2_WIDTH % 8 == 0)? (EPD_4IN2_V2_WIDTH / 8 ): (EPD_4IN2_V2_WIDTH / 8 + 1);
 8000ae4:	2332      	movs	r3, #50	@ 0x32
 8000ae6:	80fb      	strh	r3, [r7, #6]
    Height = EPD_4IN2_V2_HEIGHT;
 8000ae8:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000aec:	80bb      	strh	r3, [r7, #4]

    EPD_4IN2_V2_SendCommand(0x24);
 8000aee:	2024      	movs	r0, #36	@ 0x24
 8000af0:	f7ff fe38 	bl	8000764 <EPD_4IN2_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8000af4:	2300      	movs	r3, #0
 8000af6:	81fb      	strh	r3, [r7, #14]
 8000af8:	e00f      	b.n	8000b1a <EPD_4IN2_V2_Clear+0x3c>
        for (UWORD i = 0; i < Width; i++) {
 8000afa:	2300      	movs	r3, #0
 8000afc:	81bb      	strh	r3, [r7, #12]
 8000afe:	e005      	b.n	8000b0c <EPD_4IN2_V2_Clear+0x2e>
            EPD_4IN2_V2_SendData(0xFF);
 8000b00:	20ff      	movs	r0, #255	@ 0xff
 8000b02:	f7ff fe4d 	bl	80007a0 <EPD_4IN2_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8000b06:	89bb      	ldrh	r3, [r7, #12]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	81bb      	strh	r3, [r7, #12]
 8000b0c:	89ba      	ldrh	r2, [r7, #12]
 8000b0e:	88fb      	ldrh	r3, [r7, #6]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d3f5      	bcc.n	8000b00 <EPD_4IN2_V2_Clear+0x22>
    for (UWORD j = 0; j < Height; j++) {
 8000b14:	89fb      	ldrh	r3, [r7, #14]
 8000b16:	3301      	adds	r3, #1
 8000b18:	81fb      	strh	r3, [r7, #14]
 8000b1a:	89fa      	ldrh	r2, [r7, #14]
 8000b1c:	88bb      	ldrh	r3, [r7, #4]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d3eb      	bcc.n	8000afa <EPD_4IN2_V2_Clear+0x1c>
        }
    }

    EPD_4IN2_V2_SendCommand(0x26);
 8000b22:	2026      	movs	r0, #38	@ 0x26
 8000b24:	f7ff fe1e 	bl	8000764 <EPD_4IN2_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8000b28:	2300      	movs	r3, #0
 8000b2a:	817b      	strh	r3, [r7, #10]
 8000b2c:	e00f      	b.n	8000b4e <EPD_4IN2_V2_Clear+0x70>
        for (UWORD i = 0; i < Width; i++) {
 8000b2e:	2300      	movs	r3, #0
 8000b30:	813b      	strh	r3, [r7, #8]
 8000b32:	e005      	b.n	8000b40 <EPD_4IN2_V2_Clear+0x62>
            EPD_4IN2_V2_SendData(0xFF);
 8000b34:	20ff      	movs	r0, #255	@ 0xff
 8000b36:	f7ff fe33 	bl	80007a0 <EPD_4IN2_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8000b3a:	893b      	ldrh	r3, [r7, #8]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	813b      	strh	r3, [r7, #8]
 8000b40:	893a      	ldrh	r2, [r7, #8]
 8000b42:	88fb      	ldrh	r3, [r7, #6]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d3f5      	bcc.n	8000b34 <EPD_4IN2_V2_Clear+0x56>
    for (UWORD j = 0; j < Height; j++) {
 8000b48:	897b      	ldrh	r3, [r7, #10]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	817b      	strh	r3, [r7, #10]
 8000b4e:	897a      	ldrh	r2, [r7, #10]
 8000b50:	88bb      	ldrh	r3, [r7, #4]
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d3eb      	bcc.n	8000b2e <EPD_4IN2_V2_Clear+0x50>
        }
    }
    EPD_4IN2_V2_TurnOnDisplay();
 8000b56:	f7ff fe65 	bl	8000824 <EPD_4IN2_V2_TurnOnDisplay>
}
 8000b5a:	bf00      	nop
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <EPD_4IN2_V2_Display>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void EPD_4IN2_V2_Display(UBYTE *Image)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b086      	sub	sp, #24
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
    UWORD Width, Height;
    Width = (EPD_4IN2_V2_WIDTH % 8 == 0)? (EPD_4IN2_V2_WIDTH / 8 ): (EPD_4IN2_V2_WIDTH / 8 + 1);
 8000b6a:	2332      	movs	r3, #50	@ 0x32
 8000b6c:	81fb      	strh	r3, [r7, #14]
    Height = EPD_4IN2_V2_HEIGHT;
 8000b6e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000b72:	81bb      	strh	r3, [r7, #12]

    EPD_4IN2_V2_SendCommand(0x24);
 8000b74:	2024      	movs	r0, #36	@ 0x24
 8000b76:	f7ff fdf5 	bl	8000764 <EPD_4IN2_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	82fb      	strh	r3, [r7, #22]
 8000b7e:	e019      	b.n	8000bb4 <EPD_4IN2_V2_Display+0x52>
        for (UWORD i = 0; i < Width; i++) {
 8000b80:	2300      	movs	r3, #0
 8000b82:	82bb      	strh	r3, [r7, #20]
 8000b84:	e00f      	b.n	8000ba6 <EPD_4IN2_V2_Display+0x44>
            EPD_4IN2_V2_SendData(Image[i + j * Width]);
 8000b86:	8aba      	ldrh	r2, [r7, #20]
 8000b88:	8afb      	ldrh	r3, [r7, #22]
 8000b8a:	89f9      	ldrh	r1, [r7, #14]
 8000b8c:	fb01 f303 	mul.w	r3, r1, r3
 8000b90:	4413      	add	r3, r2
 8000b92:	461a      	mov	r2, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4413      	add	r3, r2
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff fe00 	bl	80007a0 <EPD_4IN2_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8000ba0:	8abb      	ldrh	r3, [r7, #20]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	82bb      	strh	r3, [r7, #20]
 8000ba6:	8aba      	ldrh	r2, [r7, #20]
 8000ba8:	89fb      	ldrh	r3, [r7, #14]
 8000baa:	429a      	cmp	r2, r3
 8000bac:	d3eb      	bcc.n	8000b86 <EPD_4IN2_V2_Display+0x24>
    for (UWORD j = 0; j < Height; j++) {
 8000bae:	8afb      	ldrh	r3, [r7, #22]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	82fb      	strh	r3, [r7, #22]
 8000bb4:	8afa      	ldrh	r2, [r7, #22]
 8000bb6:	89bb      	ldrh	r3, [r7, #12]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d3e1      	bcc.n	8000b80 <EPD_4IN2_V2_Display+0x1e>
        }
    }

    EPD_4IN2_V2_SendCommand(0x26);
 8000bbc:	2026      	movs	r0, #38	@ 0x26
 8000bbe:	f7ff fdd1 	bl	8000764 <EPD_4IN2_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	827b      	strh	r3, [r7, #18]
 8000bc6:	e019      	b.n	8000bfc <EPD_4IN2_V2_Display+0x9a>
        for (UWORD i = 0; i < Width; i++) {
 8000bc8:	2300      	movs	r3, #0
 8000bca:	823b      	strh	r3, [r7, #16]
 8000bcc:	e00f      	b.n	8000bee <EPD_4IN2_V2_Display+0x8c>
            EPD_4IN2_V2_SendData(Image[i + j * Width]);
 8000bce:	8a3a      	ldrh	r2, [r7, #16]
 8000bd0:	8a7b      	ldrh	r3, [r7, #18]
 8000bd2:	89f9      	ldrh	r1, [r7, #14]
 8000bd4:	fb01 f303 	mul.w	r3, r1, r3
 8000bd8:	4413      	add	r3, r2
 8000bda:	461a      	mov	r2, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4413      	add	r3, r2
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff fddc 	bl	80007a0 <EPD_4IN2_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8000be8:	8a3b      	ldrh	r3, [r7, #16]
 8000bea:	3301      	adds	r3, #1
 8000bec:	823b      	strh	r3, [r7, #16]
 8000bee:	8a3a      	ldrh	r2, [r7, #16]
 8000bf0:	89fb      	ldrh	r3, [r7, #14]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d3eb      	bcc.n	8000bce <EPD_4IN2_V2_Display+0x6c>
    for (UWORD j = 0; j < Height; j++) {
 8000bf6:	8a7b      	ldrh	r3, [r7, #18]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	827b      	strh	r3, [r7, #18]
 8000bfc:	8a7a      	ldrh	r2, [r7, #18]
 8000bfe:	89bb      	ldrh	r3, [r7, #12]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d3e1      	bcc.n	8000bc8 <EPD_4IN2_V2_Display+0x66>
        }
    }
    EPD_4IN2_V2_TurnOnDisplay();
 8000c04:	f7ff fe0e 	bl	8000824 <EPD_4IN2_V2_TurnOnDisplay>
}
 8000c08:	bf00      	nop
 8000c0a:	3718      	adds	r7, #24
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <EPD_4IN2_V2_Display_4Gray>:
    EPD_4IN2_V2_TurnOnDisplay_Fast();
}


void EPD_4IN2_V2_Display_4Gray(UBYTE *Image)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b088      	sub	sp, #32
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
/****Color display description****
      white  gray2  gray1  black
0x10|  01     01     00     00
0x13|  01     00     01     00
*********************************/
	EPD_4IN2_V2_SendCommand(0x24);	       
 8000c18:	2024      	movs	r0, #36	@ 0x24
 8000c1a:	f7ff fda3 	bl	8000764 <EPD_4IN2_V2_SendCommand>
	// EPD_4IN2_HEIGHT
	// EPD_4IN2_WIDTH
	for(m = 0; m<EPD_4IN2_V2_HEIGHT;m++)
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	e06e      	b.n	8000d02 <EPD_4IN2_V2_Display_4Gray+0xf2>
		for(i=0;i<EPD_4IN2_V2_WIDTH/8;i++)
 8000c24:	2300      	movs	r3, #0
 8000c26:	61fb      	str	r3, [r7, #28]
 8000c28:	e065      	b.n	8000cf6 <EPD_4IN2_V2_Display_4Gray+0xe6>
		{
			temp3=0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	73bb      	strb	r3, [r7, #14]
			for(j=0;j<2;j++)	
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61bb      	str	r3, [r7, #24]
 8000c32:	e056      	b.n	8000ce2 <EPD_4IN2_V2_Display_4Gray+0xd2>
			{
				
				temp1 = Image[(m*(EPD_4IN2_V2_WIDTH/8)+i)*2+j];
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	2232      	movs	r2, #50	@ 0x32
 8000c38:	fb03 f202 	mul.w	r2, r3, r2
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	4413      	add	r3, r2
 8000c40:	005a      	lsls	r2, r3, #1
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	4413      	add	r3, r2
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	73fb      	strb	r3, [r7, #15]
				for(k=0;k<2;k++)	
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
 8000c52:	e040      	b.n	8000cd6 <EPD_4IN2_V2_Display_4Gray+0xc6>
				{
					temp2 = temp1&0xC0 ;
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
 8000c56:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000c5a:	737b      	strb	r3, [r7, #13]
					if(temp2 == 0xC0)
 8000c5c:	7b7b      	ldrb	r3, [r7, #13]
 8000c5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8000c60:	d104      	bne.n	8000c6c <EPD_4IN2_V2_Display_4Gray+0x5c>
						temp3 |= 0x01;//white
 8000c62:	7bbb      	ldrb	r3, [r7, #14]
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	73bb      	strb	r3, [r7, #14]
 8000c6a:	e009      	b.n	8000c80 <EPD_4IN2_V2_Display_4Gray+0x70>
					else if(temp2 == 0x00)
 8000c6c:	7b7b      	ldrb	r3, [r7, #13]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d006      	beq.n	8000c80 <EPD_4IN2_V2_Display_4Gray+0x70>
						temp3 |= 0x00;  //black
					else if(temp2 == 0x80) 
 8000c72:	7b7b      	ldrb	r3, [r7, #13]
 8000c74:	2b80      	cmp	r3, #128	@ 0x80
 8000c76:	d003      	beq.n	8000c80 <EPD_4IN2_V2_Display_4Gray+0x70>
						temp3 |= 0x00;  //gray1
					else //0x40
						temp3 |= 0x01; //gray2
 8000c78:	7bbb      	ldrb	r3, [r7, #14]
 8000c7a:	f043 0301 	orr.w	r3, r3, #1
 8000c7e:	73bb      	strb	r3, [r7, #14]
					temp3 <<= 1;	
 8000c80:	7bbb      	ldrb	r3, [r7, #14]
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	73bb      	strb	r3, [r7, #14]
					
					temp1 <<= 2;
 8000c86:	7bfb      	ldrb	r3, [r7, #15]
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	73fb      	strb	r3, [r7, #15]
					temp2 = temp1&0xC0 ;
 8000c8c:	7bfb      	ldrb	r3, [r7, #15]
 8000c8e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000c92:	737b      	strb	r3, [r7, #13]
					if(temp2 == 0xC0)  //white
 8000c94:	7b7b      	ldrb	r3, [r7, #13]
 8000c96:	2bc0      	cmp	r3, #192	@ 0xc0
 8000c98:	d104      	bne.n	8000ca4 <EPD_4IN2_V2_Display_4Gray+0x94>
						temp3 |= 0x01;
 8000c9a:	7bbb      	ldrb	r3, [r7, #14]
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	73bb      	strb	r3, [r7, #14]
 8000ca2:	e009      	b.n	8000cb8 <EPD_4IN2_V2_Display_4Gray+0xa8>
					else if(temp2 == 0x00) //black
 8000ca4:	7b7b      	ldrb	r3, [r7, #13]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d006      	beq.n	8000cb8 <EPD_4IN2_V2_Display_4Gray+0xa8>
						temp3 |= 0x00;
					else if(temp2 == 0x80)
 8000caa:	7b7b      	ldrb	r3, [r7, #13]
 8000cac:	2b80      	cmp	r3, #128	@ 0x80
 8000cae:	d003      	beq.n	8000cb8 <EPD_4IN2_V2_Display_4Gray+0xa8>
						temp3 |= 0x00; //gray1
					else    //0x40
							temp3 |= 0x01;	//gray2	
 8000cb0:	7bbb      	ldrb	r3, [r7, #14]
 8000cb2:	f043 0301 	orr.w	r3, r3, #1
 8000cb6:	73bb      	strb	r3, [r7, #14]
					if(j!=1 || k!=1)				
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d102      	bne.n	8000cc4 <EPD_4IN2_V2_Display_4Gray+0xb4>
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d002      	beq.n	8000cca <EPD_4IN2_V2_Display_4Gray+0xba>
						temp3 <<= 1;
 8000cc4:	7bbb      	ldrb	r3, [r7, #14]
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	73bb      	strb	r3, [r7, #14]
					
					temp1 <<= 2;
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	73fb      	strb	r3, [r7, #15]
				for(k=0;k<2;k++)	
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	617b      	str	r3, [r7, #20]
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d9bb      	bls.n	8000c54 <EPD_4IN2_V2_Display_4Gray+0x44>
			for(j=0;j<2;j++)	
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	61bb      	str	r3, [r7, #24]
 8000ce2:	69bb      	ldr	r3, [r7, #24]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d9a5      	bls.n	8000c34 <EPD_4IN2_V2_Display_4Gray+0x24>
				}
				
			 }
			EPD_4IN2_V2_SendData(temp3);			
 8000ce8:	7bbb      	ldrb	r3, [r7, #14]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fd58 	bl	80007a0 <EPD_4IN2_V2_SendData>
		for(i=0;i<EPD_4IN2_V2_WIDTH/8;i++)
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	61fb      	str	r3, [r7, #28]
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	2b31      	cmp	r3, #49	@ 0x31
 8000cfa:	d996      	bls.n	8000c2a <EPD_4IN2_V2_Display_4Gray+0x1a>
	for(m = 0; m<EPD_4IN2_V2_HEIGHT;m++)
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000d08:	d38c      	bcc.n	8000c24 <EPD_4IN2_V2_Display_4Gray+0x14>
		}
    // new  data
    EPD_4IN2_V2_SendCommand(0x26);	 
 8000d0a:	2026      	movs	r0, #38	@ 0x26
 8000d0c:	f7ff fd2a 	bl	8000764 <EPD_4IN2_V2_SendCommand>
	for(m = 0; m<EPD_4IN2_V2_HEIGHT;m++)
 8000d10:	2300      	movs	r3, #0
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	e06e      	b.n	8000df4 <EPD_4IN2_V2_Display_4Gray+0x1e4>
		for(i=0;i<EPD_4IN2_V2_WIDTH/8;i++)
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
 8000d1a:	e065      	b.n	8000de8 <EPD_4IN2_V2_Display_4Gray+0x1d8>
		{
			temp3=0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	73bb      	strb	r3, [r7, #14]
			for(j=0;j<2;j++)	
 8000d20:	2300      	movs	r3, #0
 8000d22:	61bb      	str	r3, [r7, #24]
 8000d24:	e056      	b.n	8000dd4 <EPD_4IN2_V2_Display_4Gray+0x1c4>
			{
				temp1 = Image[(m*(EPD_4IN2_V2_WIDTH/8)+i)*2+j];
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	2232      	movs	r2, #50	@ 0x32
 8000d2a:	fb03 f202 	mul.w	r2, r3, r2
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	4413      	add	r3, r2
 8000d32:	005a      	lsls	r2, r3, #1
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	4413      	add	r3, r2
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	73fb      	strb	r3, [r7, #15]
				for(k=0;k<2;k++)	
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	e040      	b.n	8000dc8 <EPD_4IN2_V2_Display_4Gray+0x1b8>
				{
					temp2 = temp1&0xC0 ;
 8000d46:	7bfb      	ldrb	r3, [r7, #15]
 8000d48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000d4c:	737b      	strb	r3, [r7, #13]
					if(temp2 == 0xC0)
 8000d4e:	7b7b      	ldrb	r3, [r7, #13]
 8000d50:	2bc0      	cmp	r3, #192	@ 0xc0
 8000d52:	d104      	bne.n	8000d5e <EPD_4IN2_V2_Display_4Gray+0x14e>
						temp3 |= 0x01;//white
 8000d54:	7bbb      	ldrb	r3, [r7, #14]
 8000d56:	f043 0301 	orr.w	r3, r3, #1
 8000d5a:	73bb      	strb	r3, [r7, #14]
 8000d5c:	e009      	b.n	8000d72 <EPD_4IN2_V2_Display_4Gray+0x162>
					else if(temp2 == 0x00)
 8000d5e:	7b7b      	ldrb	r3, [r7, #13]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d006      	beq.n	8000d72 <EPD_4IN2_V2_Display_4Gray+0x162>
						temp3 |= 0x00;  //black
					else if(temp2 == 0x80) 
 8000d64:	7b7b      	ldrb	r3, [r7, #13]
 8000d66:	2b80      	cmp	r3, #128	@ 0x80
 8000d68:	d103      	bne.n	8000d72 <EPD_4IN2_V2_Display_4Gray+0x162>
						temp3 |= 0x01;  //gray1
 8000d6a:	7bbb      	ldrb	r3, [r7, #14]
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	73bb      	strb	r3, [r7, #14]
					else //0x40
						temp3 |= 0x00; //gray2
					temp3 <<= 1;	
 8000d72:	7bbb      	ldrb	r3, [r7, #14]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	73bb      	strb	r3, [r7, #14]
					
					temp1 <<= 2;
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	73fb      	strb	r3, [r7, #15]
					temp2 = temp1&0xC0 ;
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000d84:	737b      	strb	r3, [r7, #13]
					if(temp2 == 0xC0)  //white
 8000d86:	7b7b      	ldrb	r3, [r7, #13]
 8000d88:	2bc0      	cmp	r3, #192	@ 0xc0
 8000d8a:	d104      	bne.n	8000d96 <EPD_4IN2_V2_Display_4Gray+0x186>
						temp3 |= 0x01;
 8000d8c:	7bbb      	ldrb	r3, [r7, #14]
 8000d8e:	f043 0301 	orr.w	r3, r3, #1
 8000d92:	73bb      	strb	r3, [r7, #14]
 8000d94:	e009      	b.n	8000daa <EPD_4IN2_V2_Display_4Gray+0x19a>
					else if(temp2 == 0x00) //black
 8000d96:	7b7b      	ldrb	r3, [r7, #13]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d006      	beq.n	8000daa <EPD_4IN2_V2_Display_4Gray+0x19a>
						temp3 |= 0x00;
					else if(temp2 == 0x80)
 8000d9c:	7b7b      	ldrb	r3, [r7, #13]
 8000d9e:	2b80      	cmp	r3, #128	@ 0x80
 8000da0:	d103      	bne.n	8000daa <EPD_4IN2_V2_Display_4Gray+0x19a>
						temp3 |= 0x01; //gray1
 8000da2:	7bbb      	ldrb	r3, [r7, #14]
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	73bb      	strb	r3, [r7, #14]
					else    //0x40
							temp3 |= 0x00;	//gray2
					if(j!=1 || k!=1)					
 8000daa:	69bb      	ldr	r3, [r7, #24]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d102      	bne.n	8000db6 <EPD_4IN2_V2_Display_4Gray+0x1a6>
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d002      	beq.n	8000dbc <EPD_4IN2_V2_Display_4Gray+0x1ac>
						temp3 <<= 1;
 8000db6:	7bbb      	ldrb	r3, [r7, #14]
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	73bb      	strb	r3, [r7, #14]
					
					temp1 <<= 2;
 8000dbc:	7bfb      	ldrb	r3, [r7, #15]
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	73fb      	strb	r3, [r7, #15]
				for(k=0;k<2;k++)	
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	617b      	str	r3, [r7, #20]
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d9bb      	bls.n	8000d46 <EPD_4IN2_V2_Display_4Gray+0x136>
			for(j=0;j<2;j++)	
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	61bb      	str	r3, [r7, #24]
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d9a5      	bls.n	8000d26 <EPD_4IN2_V2_Display_4Gray+0x116>
				}
				
			 }
			EPD_4IN2_V2_SendData(temp3);	
 8000dda:	7bbb      	ldrb	r3, [r7, #14]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff fcdf 	bl	80007a0 <EPD_4IN2_V2_SendData>
		for(i=0;i<EPD_4IN2_V2_WIDTH/8;i++)
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	3301      	adds	r3, #1
 8000de6:	61fb      	str	r3, [r7, #28]
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	2b31      	cmp	r3, #49	@ 0x31
 8000dec:	d996      	bls.n	8000d1c <EPD_4IN2_V2_Display_4Gray+0x10c>
	for(m = 0; m<EPD_4IN2_V2_HEIGHT;m++)
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	3301      	adds	r3, #1
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000dfa:	d38c      	bcc.n	8000d16 <EPD_4IN2_V2_Display_4Gray+0x106>
		}
    EPD_4IN2_V2_TurnOnDisplay_4Gray();
 8000dfc:	f7ff fd30 	bl	8000860 <EPD_4IN2_V2_TurnOnDisplay_4Gray>
}
 8000e00:	bf00      	nop
 8000e02:	3720      	adds	r7, #32
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <EPD_4IN2_V2_PartialDisplay>:

// Send partial data for partial refresh
void EPD_4IN2_V2_PartialDisplay(UBYTE *Image, UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	4608      	mov	r0, r1
 8000e12:	4611      	mov	r1, r2
 8000e14:	461a      	mov	r2, r3
 8000e16:	4603      	mov	r3, r0
 8000e18:	817b      	strh	r3, [r7, #10]
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	813b      	strh	r3, [r7, #8]
 8000e1e:	4613      	mov	r3, r2
 8000e20:	80fb      	strh	r3, [r7, #6]
    if((Xstart % 8 + Xend % 8 == 8 && Xstart % 8 > Xend % 8) || Xstart % 8 + Xend % 8 == 0 || (Xend - Xstart)%8 == 0)
 8000e22:	897b      	ldrh	r3, [r7, #10]
 8000e24:	f003 0207 	and.w	r2, r3, #7
 8000e28:	88fb      	ldrh	r3, [r7, #6]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	4413      	add	r3, r2
 8000e30:	2b08      	cmp	r3, #8
 8000e32:	d109      	bne.n	8000e48 <EPD_4IN2_V2_PartialDisplay+0x40>
 8000e34:	897b      	ldrh	r3, [r7, #10]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	88fb      	ldrh	r3, [r7, #6]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d80f      	bhi.n	8000e68 <EPD_4IN2_V2_PartialDisplay+0x60>
 8000e48:	897b      	ldrh	r3, [r7, #10]
 8000e4a:	f003 0207 	and.w	r2, r3, #7
 8000e4e:	88fb      	ldrh	r3, [r7, #6]
 8000e50:	f003 0307 	and.w	r3, r3, #7
 8000e54:	4413      	add	r3, r2
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d006      	beq.n	8000e68 <EPD_4IN2_V2_PartialDisplay+0x60>
 8000e5a:	88fa      	ldrh	r2, [r7, #6]
 8000e5c:	897b      	ldrh	r3, [r7, #10]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	f003 0307 	and.w	r3, r3, #7
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d106      	bne.n	8000e76 <EPD_4IN2_V2_PartialDisplay+0x6e>
    {
        Xstart = Xstart / 8 ;
 8000e68:	897b      	ldrh	r3, [r7, #10]
 8000e6a:	08db      	lsrs	r3, r3, #3
 8000e6c:	817b      	strh	r3, [r7, #10]
        Xend = Xend / 8;
 8000e6e:	88fb      	ldrh	r3, [r7, #6]
 8000e70:	08db      	lsrs	r3, r3, #3
 8000e72:	80fb      	strh	r3, [r7, #6]
 8000e74:	e012      	b.n	8000e9c <EPD_4IN2_V2_PartialDisplay+0x94>
    }
    else
    {
        Xstart = Xstart / 8 ;
 8000e76:	897b      	ldrh	r3, [r7, #10]
 8000e78:	08db      	lsrs	r3, r3, #3
 8000e7a:	817b      	strh	r3, [r7, #10]
        Xend = Xend % 8 == 0 ? Xend / 8 : Xend / 8 + 1;
 8000e7c:	88fb      	ldrh	r3, [r7, #6]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d103      	bne.n	8000e90 <EPD_4IN2_V2_PartialDisplay+0x88>
 8000e88:	88fb      	ldrh	r3, [r7, #6]
 8000e8a:	08db      	lsrs	r3, r3, #3
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	e004      	b.n	8000e9a <EPD_4IN2_V2_PartialDisplay+0x92>
 8000e90:	88fb      	ldrh	r3, [r7, #6]
 8000e92:	08db      	lsrs	r3, r3, #3
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	3301      	adds	r3, #1
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	80fb      	strh	r3, [r7, #6]
    }
    

    UWORD i, Width;
	Width = Xend -  Xstart;
 8000e9c:	88fa      	ldrh	r2, [r7, #6]
 8000e9e:	897b      	ldrh	r3, [r7, #10]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	82bb      	strh	r3, [r7, #20]
	UWORD IMAGE_COUNTER = Width * (Yend-Ystart);
 8000ea4:	8c3a      	ldrh	r2, [r7, #32]
 8000ea6:	893b      	ldrh	r3, [r7, #8]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	8aba      	ldrh	r2, [r7, #20]
 8000eae:	fb12 f303 	smulbb	r3, r2, r3
 8000eb2:	827b      	strh	r3, [r7, #18]

	Xend -= 1;
 8000eb4:	88fb      	ldrh	r3, [r7, #6]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	80fb      	strh	r3, [r7, #6]
	Yend -= 1;	
 8000eba:	8c3b      	ldrh	r3, [r7, #32]
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	843b      	strh	r3, [r7, #32]


	EPD_4IN2_V2_SendCommand(0x21); 
 8000ec0:	2021      	movs	r0, #33	@ 0x21
 8000ec2:	f7ff fc4f 	bl	8000764 <EPD_4IN2_V2_SendCommand>
	EPD_4IN2_V2_SendData(0x00);
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f7ff fc6a 	bl	80007a0 <EPD_4IN2_V2_SendData>
	EPD_4IN2_V2_SendData(0x00);
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f7ff fc67 	bl	80007a0 <EPD_4IN2_V2_SendData>

	EPD_4IN2_V2_SendCommand(0x3C); 
 8000ed2:	203c      	movs	r0, #60	@ 0x3c
 8000ed4:	f7ff fc46 	bl	8000764 <EPD_4IN2_V2_SendCommand>
	EPD_4IN2_V2_SendData(0x80); 
 8000ed8:	2080      	movs	r0, #128	@ 0x80
 8000eda:	f7ff fc61 	bl	80007a0 <EPD_4IN2_V2_SendData>

    EPD_4IN2_V2_SendCommand(0x11);	// data  entry  mode
 8000ede:	2011      	movs	r0, #17
 8000ee0:	f7ff fc40 	bl	8000764 <EPD_4IN2_V2_SendCommand>
    EPD_4IN2_V2_SendData(0x03);		// X-mode  
 8000ee4:	2003      	movs	r0, #3
 8000ee6:	f7ff fc5b 	bl	80007a0 <EPD_4IN2_V2_SendData>

    EPD_4IN2_V2_SendCommand(0x44);       // set RAM x address start/end, in page 35
 8000eea:	2044      	movs	r0, #68	@ 0x44
 8000eec:	f7ff fc3a 	bl	8000764 <EPD_4IN2_V2_SendCommand>
    EPD_4IN2_V2_SendData(Xstart & 0xff);    // RAM x address start at 00h;
 8000ef0:	897b      	ldrh	r3, [r7, #10]
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff fc53 	bl	80007a0 <EPD_4IN2_V2_SendData>
    EPD_4IN2_V2_SendData(Xend & 0xff);    // RAM x address end at 0fh(15+1)*8->128 
 8000efa:	88fb      	ldrh	r3, [r7, #6]
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fc4e 	bl	80007a0 <EPD_4IN2_V2_SendData>
    EPD_4IN2_V2_SendCommand(0x45);       // set RAM y address start/end, in page 35
 8000f04:	2045      	movs	r0, #69	@ 0x45
 8000f06:	f7ff fc2d 	bl	8000764 <EPD_4IN2_V2_SendCommand>
    EPD_4IN2_V2_SendData(Ystart & 0xff);    // RAM y address start at 0127h;
 8000f0a:	893b      	ldrh	r3, [r7, #8]
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff fc46 	bl	80007a0 <EPD_4IN2_V2_SendData>
    EPD_4IN2_V2_SendData((Ystart>>8) & 0x01);    // RAM y address start at 0127h;
 8000f14:	893b      	ldrh	r3, [r7, #8]
 8000f16:	0a1b      	lsrs	r3, r3, #8
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	f003 0301 	and.w	r3, r3, #1
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fc3c 	bl	80007a0 <EPD_4IN2_V2_SendData>
    EPD_4IN2_V2_SendData(Yend & 0xff);    // RAM y address end at 00h;
 8000f28:	8c3b      	ldrh	r3, [r7, #32]
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff fc37 	bl	80007a0 <EPD_4IN2_V2_SendData>
    EPD_4IN2_V2_SendData((Yend>>8) & 0x01); 
 8000f32:	8c3b      	ldrh	r3, [r7, #32]
 8000f34:	0a1b      	lsrs	r3, r3, #8
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff fc2d 	bl	80007a0 <EPD_4IN2_V2_SendData>

    EPD_4IN2_V2_SendCommand(0x4E);   // set RAM x address count to 0;
 8000f46:	204e      	movs	r0, #78	@ 0x4e
 8000f48:	f7ff fc0c 	bl	8000764 <EPD_4IN2_V2_SendCommand>
    EPD_4IN2_V2_SendData(Xstart & 0xff); 
 8000f4c:	897b      	ldrh	r3, [r7, #10]
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fc25 	bl	80007a0 <EPD_4IN2_V2_SendData>
    EPD_4IN2_V2_SendCommand(0x4F);   // set RAM y address count to 0X127;    
 8000f56:	204f      	movs	r0, #79	@ 0x4f
 8000f58:	f7ff fc04 	bl	8000764 <EPD_4IN2_V2_SendCommand>
    EPD_4IN2_V2_SendData(Ystart & 0xff);
 8000f5c:	893b      	ldrh	r3, [r7, #8]
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fc1d 	bl	80007a0 <EPD_4IN2_V2_SendData>
    EPD_4IN2_V2_SendData((Ystart>>8) & 0x01);
 8000f66:	893b      	ldrh	r3, [r7, #8]
 8000f68:	0a1b      	lsrs	r3, r3, #8
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fc13 	bl	80007a0 <EPD_4IN2_V2_SendData>

    EPD_4IN2_V2_ReadBusy();
 8000f7a:	f7ff fc2f 	bl	80007dc <EPD_4IN2_V2_ReadBusy>

    
	
    EPD_4IN2_V2_SendCommand(0x24);
 8000f7e:	2024      	movs	r0, #36	@ 0x24
 8000f80:	f7ff fbf0 	bl	8000764 <EPD_4IN2_V2_SendCommand>
    for (UWORD j = 0; j < IMAGE_COUNTER; j++) {
 8000f84:	2300      	movs	r3, #0
 8000f86:	82fb      	strh	r3, [r7, #22]
 8000f88:	e009      	b.n	8000f9e <EPD_4IN2_V2_PartialDisplay+0x196>
            EPD_4IN2_V2_SendData(Image[j]);
 8000f8a:	8afb      	ldrh	r3, [r7, #22]
 8000f8c:	68fa      	ldr	r2, [r7, #12]
 8000f8e:	4413      	add	r3, r2
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff fc04 	bl	80007a0 <EPD_4IN2_V2_SendData>
    for (UWORD j = 0; j < IMAGE_COUNTER; j++) {
 8000f98:	8afb      	ldrh	r3, [r7, #22]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	82fb      	strh	r3, [r7, #22]
 8000f9e:	8afa      	ldrh	r2, [r7, #22]
 8000fa0:	8a7b      	ldrh	r3, [r7, #18]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d3f1      	bcc.n	8000f8a <EPD_4IN2_V2_PartialDisplay+0x182>
    }
	
	EPD_4IN2_V2_TurnOnDisplay_Partial();
 8000fa6:	f7ff fc4c 	bl	8000842 <EPD_4IN2_V2_TurnOnDisplay_Partial>
}
 8000faa:	bf00      	nop
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <EPD_4IN2_V2_Sleep>:
/******************************************************************************
function :	Enter sleep mode
parameter:
******************************************************************************/
void EPD_4IN2_V2_Sleep(void)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	af00      	add	r7, sp, #0
    EPD_4IN2_V2_SendCommand(0x10); // DEEP_SLEEP
 8000fb6:	2010      	movs	r0, #16
 8000fb8:	f7ff fbd4 	bl	8000764 <EPD_4IN2_V2_SendCommand>
    EPD_4IN2_V2_SendData(0x01);
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	f7ff fbef 	bl	80007a0 <EPD_4IN2_V2_SendData>
	DEV_Delay_ms(200);
 8000fc2:	20c8      	movs	r0, #200	@ 0xc8
 8000fc4:	f002 fa6e 	bl	80034a4 <HAL_Delay>
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4603      	mov	r3, r0
 8000fdc:	817b      	strh	r3, [r7, #10]
 8000fde:	460b      	mov	r3, r1
 8000fe0:	813b      	strh	r3, [r7, #8]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	80fb      	strh	r3, [r7, #6]
    Paint.Image = NULL;
 8000fe6:	4b23      	ldr	r3, [pc, #140]	@ (8001074 <Paint_NewImage+0xa8>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 8000fec:	4a21      	ldr	r2, [pc, #132]	@ (8001074 <Paint_NewImage+0xa8>)
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	6013      	str	r3, [r2, #0]

    Paint.WidthMemory = Width;
 8000ff2:	4a20      	ldr	r2, [pc, #128]	@ (8001074 <Paint_NewImage+0xa8>)
 8000ff4:	897b      	ldrh	r3, [r7, #10]
 8000ff6:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8000ff8:	4a1e      	ldr	r2, [pc, #120]	@ (8001074 <Paint_NewImage+0xa8>)
 8000ffa:	893b      	ldrh	r3, [r7, #8]
 8000ffc:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 8000ffe:	4a1d      	ldr	r2, [pc, #116]	@ (8001074 <Paint_NewImage+0xa8>)
 8001000:	8b3b      	ldrh	r3, [r7, #24]
 8001002:	8193      	strh	r3, [r2, #12]
	Paint.Scale = 2;
 8001004:	4b1b      	ldr	r3, [pc, #108]	@ (8001074 <Paint_NewImage+0xa8>)
 8001006:	2202      	movs	r2, #2
 8001008:	82da      	strh	r2, [r3, #22]
		
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 800100a:	897b      	ldrh	r3, [r7, #10]
 800100c:	f003 0307 	and.w	r3, r3, #7
 8001010:	b29b      	uxth	r3, r3
 8001012:	2b00      	cmp	r3, #0
 8001014:	d103      	bne.n	800101e <Paint_NewImage+0x52>
 8001016:	897b      	ldrh	r3, [r7, #10]
 8001018:	08db      	lsrs	r3, r3, #3
 800101a:	b29b      	uxth	r3, r3
 800101c:	e004      	b.n	8001028 <Paint_NewImage+0x5c>
 800101e:	897b      	ldrh	r3, [r7, #10]
 8001020:	08db      	lsrs	r3, r3, #3
 8001022:	b29b      	uxth	r3, r3
 8001024:	3301      	adds	r3, #1
 8001026:	b29b      	uxth	r3, r3
 8001028:	4a12      	ldr	r2, [pc, #72]	@ (8001074 <Paint_NewImage+0xa8>)
 800102a:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 800102c:	4a11      	ldr	r2, [pc, #68]	@ (8001074 <Paint_NewImage+0xa8>)
 800102e:	893b      	ldrh	r3, [r7, #8]
 8001030:	8293      	strh	r3, [r2, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);
   
    Paint.Rotate = Rotate;
 8001032:	4a10      	ldr	r2, [pc, #64]	@ (8001074 <Paint_NewImage+0xa8>)
 8001034:	88fb      	ldrh	r3, [r7, #6]
 8001036:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8001038:	4b0e      	ldr	r3, [pc, #56]	@ (8001074 <Paint_NewImage+0xa8>)
 800103a:	2200      	movs	r2, #0
 800103c:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 800103e:	88fb      	ldrh	r3, [r7, #6]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d002      	beq.n	800104a <Paint_NewImage+0x7e>
 8001044:	88fb      	ldrh	r3, [r7, #6]
 8001046:	2bb4      	cmp	r3, #180	@ 0xb4
 8001048:	d106      	bne.n	8001058 <Paint_NewImage+0x8c>
        Paint.Width = Width;
 800104a:	4a0a      	ldr	r2, [pc, #40]	@ (8001074 <Paint_NewImage+0xa8>)
 800104c:	897b      	ldrh	r3, [r7, #10]
 800104e:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8001050:	4a08      	ldr	r2, [pc, #32]	@ (8001074 <Paint_NewImage+0xa8>)
 8001052:	893b      	ldrh	r3, [r7, #8]
 8001054:	80d3      	strh	r3, [r2, #6]
 8001056:	e006      	b.n	8001066 <Paint_NewImage+0x9a>
    } else {
        Paint.Width = Height;
 8001058:	4a06      	ldr	r2, [pc, #24]	@ (8001074 <Paint_NewImage+0xa8>)
 800105a:	893b      	ldrh	r3, [r7, #8]
 800105c:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 800105e:	4a05      	ldr	r2, [pc, #20]	@ (8001074 <Paint_NewImage+0xa8>)
 8001060:	897b      	ldrh	r3, [r7, #10]
 8001062:	80d3      	strh	r3, [r2, #6]
    }
}
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	240000b8 	.word	0x240000b8

08001078 <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(UBYTE *image)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 8001080:	4a04      	ldr	r2, [pc, #16]	@ (8001094 <Paint_SelectImage+0x1c>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6013      	str	r3, [r2, #0]
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	240000b8 	.word	0x240000b8

08001098 <Paint_SetScale>:
        Debug("rotate = 0, 90, 180, 270\r\n");
    }
}

void Paint_SetScale(UBYTE scale)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
    if(scale == 2){
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d118      	bne.n	80010da <Paint_SetScale+0x42>
        Paint.Scale = scale;
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001164 <Paint_SetScale+0xcc>)
 80010ae:	82da      	strh	r2, [r3, #22]
        Paint.WidthByte = (Paint.WidthMemory % 8 == 0)? (Paint.WidthMemory / 8 ): (Paint.WidthMemory / 8 + 1);
 80010b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001164 <Paint_SetScale+0xcc>)
 80010b2:	891b      	ldrh	r3, [r3, #8]
 80010b4:	f003 0307 	and.w	r3, r3, #7
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d104      	bne.n	80010c8 <Paint_SetScale+0x30>
 80010be:	4b29      	ldr	r3, [pc, #164]	@ (8001164 <Paint_SetScale+0xcc>)
 80010c0:	891b      	ldrh	r3, [r3, #8]
 80010c2:	08db      	lsrs	r3, r3, #3
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	e005      	b.n	80010d4 <Paint_SetScale+0x3c>
 80010c8:	4b26      	ldr	r3, [pc, #152]	@ (8001164 <Paint_SetScale+0xcc>)
 80010ca:	891b      	ldrh	r3, [r3, #8]
 80010cc:	08db      	lsrs	r3, r3, #3
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	3301      	adds	r3, #1
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	4a23      	ldr	r2, [pc, #140]	@ (8001164 <Paint_SetScale+0xcc>)
 80010d6:	8253      	strh	r3, [r2, #18]
				Paint.WidthByte = (Paint.WidthMemory % 2 == 0)? (Paint.WidthMemory / 2 ): (Paint.WidthMemory / 2 + 1);;
		}else{
        Debug("Set Scale Input parameter error\r\n");
        Debug("Scale Only support: 2 4 7\r\n");
    }
}
 80010d8:	e040      	b.n	800115c <Paint_SetScale+0xc4>
    }else if(scale == 4){
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	2b04      	cmp	r3, #4
 80010de:	d118      	bne.n	8001112 <Paint_SetScale+0x7a>
        Paint.Scale = scale;
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001164 <Paint_SetScale+0xcc>)
 80010e6:	82da      	strh	r2, [r3, #22]
        Paint.WidthByte = (Paint.WidthMemory % 4 == 0)? (Paint.WidthMemory / 4 ): (Paint.WidthMemory / 4 + 1);
 80010e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001164 <Paint_SetScale+0xcc>)
 80010ea:	891b      	ldrh	r3, [r3, #8]
 80010ec:	f003 0303 	and.w	r3, r3, #3
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d104      	bne.n	8001100 <Paint_SetScale+0x68>
 80010f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001164 <Paint_SetScale+0xcc>)
 80010f8:	891b      	ldrh	r3, [r3, #8]
 80010fa:	089b      	lsrs	r3, r3, #2
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	e005      	b.n	800110c <Paint_SetScale+0x74>
 8001100:	4b18      	ldr	r3, [pc, #96]	@ (8001164 <Paint_SetScale+0xcc>)
 8001102:	891b      	ldrh	r3, [r3, #8]
 8001104:	089b      	lsrs	r3, r3, #2
 8001106:	b29b      	uxth	r3, r3
 8001108:	3301      	adds	r3, #1
 800110a:	b29b      	uxth	r3, r3
 800110c:	4a15      	ldr	r2, [pc, #84]	@ (8001164 <Paint_SetScale+0xcc>)
 800110e:	8253      	strh	r3, [r2, #18]
}
 8001110:	e024      	b.n	800115c <Paint_SetScale+0xc4>
    }else if(scale == 6 || scale == 7){//Only applicable with 5in65 e-Paper
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	2b06      	cmp	r3, #6
 8001116:	d002      	beq.n	800111e <Paint_SetScale+0x86>
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	2b07      	cmp	r3, #7
 800111c:	d118      	bne.n	8001150 <Paint_SetScale+0xb8>
				Paint.Scale = scale;
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	b29a      	uxth	r2, r3
 8001122:	4b10      	ldr	r3, [pc, #64]	@ (8001164 <Paint_SetScale+0xcc>)
 8001124:	82da      	strh	r2, [r3, #22]
				Paint.WidthByte = (Paint.WidthMemory % 2 == 0)? (Paint.WidthMemory / 2 ): (Paint.WidthMemory / 2 + 1);;
 8001126:	4b0f      	ldr	r3, [pc, #60]	@ (8001164 <Paint_SetScale+0xcc>)
 8001128:	891b      	ldrh	r3, [r3, #8]
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	b29b      	uxth	r3, r3
 8001130:	2b00      	cmp	r3, #0
 8001132:	d104      	bne.n	800113e <Paint_SetScale+0xa6>
 8001134:	4b0b      	ldr	r3, [pc, #44]	@ (8001164 <Paint_SetScale+0xcc>)
 8001136:	891b      	ldrh	r3, [r3, #8]
 8001138:	085b      	lsrs	r3, r3, #1
 800113a:	b29b      	uxth	r3, r3
 800113c:	e005      	b.n	800114a <Paint_SetScale+0xb2>
 800113e:	4b09      	ldr	r3, [pc, #36]	@ (8001164 <Paint_SetScale+0xcc>)
 8001140:	891b      	ldrh	r3, [r3, #8]
 8001142:	085b      	lsrs	r3, r3, #1
 8001144:	b29b      	uxth	r3, r3
 8001146:	3301      	adds	r3, #1
 8001148:	b29b      	uxth	r3, r3
 800114a:	4a06      	ldr	r2, [pc, #24]	@ (8001164 <Paint_SetScale+0xcc>)
 800114c:	8253      	strh	r3, [r2, #18]
}
 800114e:	e005      	b.n	800115c <Paint_SetScale+0xc4>
        Debug("Set Scale Input parameter error\r\n");
 8001150:	4805      	ldr	r0, [pc, #20]	@ (8001168 <Paint_SetScale+0xd0>)
 8001152:	f008 f8bb 	bl	80092cc <puts>
        Debug("Scale Only support: 2 4 7\r\n");
 8001156:	4805      	ldr	r0, [pc, #20]	@ (800116c <Paint_SetScale+0xd4>)
 8001158:	f008 f8b8 	bl	80092cc <puts>
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	240000b8 	.word	0x240000b8
 8001168:	08009ecc 	.word	0x08009ecc
 800116c:	08009ef4 	.word	0x08009ef4

08001170 <Paint_SetPixel>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	@ 0x28
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	80fb      	strh	r3, [r7, #6]
 800117a:	460b      	mov	r3, r1
 800117c:	80bb      	strh	r3, [r7, #4]
 800117e:	4613      	mov	r3, r2
 8001180:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8001182:	4b9f      	ldr	r3, [pc, #636]	@ (8001400 <Paint_SetPixel+0x290>)
 8001184:	889b      	ldrh	r3, [r3, #4]
 8001186:	88fa      	ldrh	r2, [r7, #6]
 8001188:	429a      	cmp	r2, r3
 800118a:	d804      	bhi.n	8001196 <Paint_SetPixel+0x26>
 800118c:	4b9c      	ldr	r3, [pc, #624]	@ (8001400 <Paint_SetPixel+0x290>)
 800118e:	88db      	ldrh	r3, [r3, #6]
 8001190:	88ba      	ldrh	r2, [r7, #4]
 8001192:	429a      	cmp	r2, r3
 8001194:	d903      	bls.n	800119e <Paint_SetPixel+0x2e>
        Debug("Exceeding display boundaries\r\n");
 8001196:	489b      	ldr	r0, [pc, #620]	@ (8001404 <Paint_SetPixel+0x294>)
 8001198:	f008 f898 	bl	80092cc <puts>
        return;
 800119c:	e135      	b.n	800140a <Paint_SetPixel+0x29a>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 800119e:	4b98      	ldr	r3, [pc, #608]	@ (8001400 <Paint_SetPixel+0x290>)
 80011a0:	89db      	ldrh	r3, [r3, #14]
 80011a2:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80011a6:	d02b      	beq.n	8001200 <Paint_SetPixel+0x90>
 80011a8:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80011ac:	f300 8126 	bgt.w	80013fc <Paint_SetPixel+0x28c>
 80011b0:	2bb4      	cmp	r3, #180	@ 0xb4
 80011b2:	d016      	beq.n	80011e2 <Paint_SetPixel+0x72>
 80011b4:	2bb4      	cmp	r3, #180	@ 0xb4
 80011b6:	f300 8121 	bgt.w	80013fc <Paint_SetPixel+0x28c>
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d002      	beq.n	80011c4 <Paint_SetPixel+0x54>
 80011be:	2b5a      	cmp	r3, #90	@ 0x5a
 80011c0:	d005      	beq.n	80011ce <Paint_SetPixel+0x5e>
    case 270:
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
    default:
        return;
 80011c2:	e11b      	b.n	80013fc <Paint_SetPixel+0x28c>
        X = Xpoint;
 80011c4:	88fb      	ldrh	r3, [r7, #6]
 80011c6:	84fb      	strh	r3, [r7, #38]	@ 0x26
        Y = Ypoint;  
 80011c8:	88bb      	ldrh	r3, [r7, #4]
 80011ca:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 80011cc:	e022      	b.n	8001214 <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Ypoint - 1;
 80011ce:	4b8c      	ldr	r3, [pc, #560]	@ (8001400 <Paint_SetPixel+0x290>)
 80011d0:	891a      	ldrh	r2, [r3, #8]
 80011d2:	88bb      	ldrh	r3, [r7, #4]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	3b01      	subs	r3, #1
 80011da:	84fb      	strh	r3, [r7, #38]	@ 0x26
        Y = Xpoint;
 80011dc:	88fb      	ldrh	r3, [r7, #6]
 80011de:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 80011e0:	e018      	b.n	8001214 <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Xpoint - 1;
 80011e2:	4b87      	ldr	r3, [pc, #540]	@ (8001400 <Paint_SetPixel+0x290>)
 80011e4:	891a      	ldrh	r2, [r3, #8]
 80011e6:	88fb      	ldrh	r3, [r7, #6]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	3b01      	subs	r3, #1
 80011ee:	84fb      	strh	r3, [r7, #38]	@ 0x26
        Y = Paint.HeightMemory - Ypoint - 1;
 80011f0:	4b83      	ldr	r3, [pc, #524]	@ (8001400 <Paint_SetPixel+0x290>)
 80011f2:	895a      	ldrh	r2, [r3, #10]
 80011f4:	88bb      	ldrh	r3, [r7, #4]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	3b01      	subs	r3, #1
 80011fc:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 80011fe:	e009      	b.n	8001214 <Paint_SetPixel+0xa4>
        X = Ypoint;
 8001200:	88bb      	ldrh	r3, [r7, #4]
 8001202:	84fb      	strh	r3, [r7, #38]	@ 0x26
        Y = Paint.HeightMemory - Xpoint - 1;
 8001204:	4b7e      	ldr	r3, [pc, #504]	@ (8001400 <Paint_SetPixel+0x290>)
 8001206:	895a      	ldrh	r2, [r3, #10]
 8001208:	88fb      	ldrh	r3, [r7, #6]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	b29b      	uxth	r3, r3
 800120e:	3b01      	subs	r3, #1
 8001210:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 8001212:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 8001214:	4b7a      	ldr	r3, [pc, #488]	@ (8001400 <Paint_SetPixel+0x290>)
 8001216:	8a1b      	ldrh	r3, [r3, #16]
 8001218:	2b03      	cmp	r3, #3
 800121a:	f200 80f5 	bhi.w	8001408 <Paint_SetPixel+0x298>
 800121e:	a201      	add	r2, pc, #4	@ (adr r2, 8001224 <Paint_SetPixel+0xb4>)
 8001220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001224:	08001273 	.word	0x08001273
 8001228:	08001235 	.word	0x08001235
 800122c:	08001245 	.word	0x08001245
 8001230:	08001255 	.word	0x08001255
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8001234:	4b72      	ldr	r3, [pc, #456]	@ (8001400 <Paint_SetPixel+0x290>)
 8001236:	891a      	ldrh	r2, [r3, #8]
 8001238:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	b29b      	uxth	r3, r3
 800123e:	3b01      	subs	r3, #1
 8001240:	84fb      	strh	r3, [r7, #38]	@ 0x26
        break;
 8001242:	e017      	b.n	8001274 <Paint_SetPixel+0x104>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 8001244:	4b6e      	ldr	r3, [pc, #440]	@ (8001400 <Paint_SetPixel+0x290>)
 8001246:	895a      	ldrh	r2, [r3, #10]
 8001248:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	b29b      	uxth	r3, r3
 800124e:	3b01      	subs	r3, #1
 8001250:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 8001252:	e00f      	b.n	8001274 <Paint_SetPixel+0x104>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8001254:	4b6a      	ldr	r3, [pc, #424]	@ (8001400 <Paint_SetPixel+0x290>)
 8001256:	891a      	ldrh	r2, [r3, #8]
 8001258:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	b29b      	uxth	r3, r3
 800125e:	3b01      	subs	r3, #1
 8001260:	84fb      	strh	r3, [r7, #38]	@ 0x26
        Y = Paint.HeightMemory - Y - 1;
 8001262:	4b67      	ldr	r3, [pc, #412]	@ (8001400 <Paint_SetPixel+0x290>)
 8001264:	895a      	ldrh	r2, [r3, #10]
 8001266:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	b29b      	uxth	r3, r3
 800126c:	3b01      	subs	r3, #1
 800126e:	84bb      	strh	r3, [r7, #36]	@ 0x24
        break;
 8001270:	e000      	b.n	8001274 <Paint_SetPixel+0x104>
        break;
 8001272:	bf00      	nop
    default:
        return;
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8001274:	4b62      	ldr	r3, [pc, #392]	@ (8001400 <Paint_SetPixel+0x290>)
 8001276:	891b      	ldrh	r3, [r3, #8]
 8001278:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800127a:	429a      	cmp	r2, r3
 800127c:	d804      	bhi.n	8001288 <Paint_SetPixel+0x118>
 800127e:	4b60      	ldr	r3, [pc, #384]	@ (8001400 <Paint_SetPixel+0x290>)
 8001280:	895b      	ldrh	r3, [r3, #10]
 8001282:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001284:	429a      	cmp	r2, r3
 8001286:	d903      	bls.n	8001290 <Paint_SetPixel+0x120>
        Debug("Exceeding display boundaries\r\n");
 8001288:	485e      	ldr	r0, [pc, #376]	@ (8001404 <Paint_SetPixel+0x294>)
 800128a:	f008 f81f 	bl	80092cc <puts>
        return;
 800128e:	e0bc      	b.n	800140a <Paint_SetPixel+0x29a>
    }
    
    if(Paint.Scale == 2){
 8001290:	4b5b      	ldr	r3, [pc, #364]	@ (8001400 <Paint_SetPixel+0x290>)
 8001292:	8adb      	ldrh	r3, [r3, #22]
 8001294:	2b02      	cmp	r3, #2
 8001296:	d139      	bne.n	800130c <Paint_SetPixel+0x19c>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 8001298:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800129a:	08db      	lsrs	r3, r3, #3
 800129c:	b29b      	uxth	r3, r3
 800129e:	4619      	mov	r1, r3
 80012a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80012a2:	4a57      	ldr	r2, [pc, #348]	@ (8001400 <Paint_SetPixel+0x290>)
 80012a4:	8a52      	ldrh	r2, [r2, #18]
 80012a6:	fb02 f303 	mul.w	r3, r2, r3
 80012aa:	440b      	add	r3, r1
 80012ac:	613b      	str	r3, [r7, #16]
        UBYTE Rdata = Paint.Image[Addr];
 80012ae:	4b54      	ldr	r3, [pc, #336]	@ (8001400 <Paint_SetPixel+0x290>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	4413      	add	r3, r2
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	73fb      	strb	r3, [r7, #15]
        if(Color == BLACK)
 80012ba:	887b      	ldrh	r3, [r7, #2]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d113      	bne.n	80012e8 <Paint_SetPixel+0x178>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 80012c0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	2280      	movs	r2, #128	@ 0x80
 80012c8:	fa42 f303 	asr.w	r3, r2, r3
 80012cc:	b25b      	sxtb	r3, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	b25a      	sxtb	r2, r3
 80012d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d6:	4013      	ands	r3, r2
 80012d8:	b259      	sxtb	r1, r3
 80012da:	4b49      	ldr	r3, [pc, #292]	@ (8001400 <Paint_SetPixel+0x290>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	4413      	add	r3, r2
 80012e2:	b2ca      	uxtb	r2, r1
 80012e4:	701a      	strb	r2, [r3, #0]
 80012e6:	e090      	b.n	800140a <Paint_SetPixel+0x29a>
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 80012e8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	2280      	movs	r2, #128	@ 0x80
 80012f0:	fa42 f303 	asr.w	r3, r2, r3
 80012f4:	b25a      	sxtb	r2, r3
 80012f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	b259      	sxtb	r1, r3
 80012fe:	4b40      	ldr	r3, [pc, #256]	@ (8001400 <Paint_SetPixel+0x290>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	4413      	add	r3, r2
 8001306:	b2ca      	uxtb	r2, r1
 8001308:	701a      	strb	r2, [r3, #0]
 800130a:	e07e      	b.n	800140a <Paint_SetPixel+0x29a>
    }else if(Paint.Scale == 4){
 800130c:	4b3c      	ldr	r3, [pc, #240]	@ (8001400 <Paint_SetPixel+0x290>)
 800130e:	8adb      	ldrh	r3, [r3, #22]
 8001310:	2b04      	cmp	r3, #4
 8001312:	d137      	bne.n	8001384 <Paint_SetPixel+0x214>
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 8001314:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001316:	089b      	lsrs	r3, r3, #2
 8001318:	b29b      	uxth	r3, r3
 800131a:	4619      	mov	r1, r3
 800131c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800131e:	4a38      	ldr	r2, [pc, #224]	@ (8001400 <Paint_SetPixel+0x290>)
 8001320:	8a52      	ldrh	r2, [r2, #18]
 8001322:	fb02 f303 	mul.w	r3, r2, r3
 8001326:	440b      	add	r3, r1
 8001328:	61bb      	str	r3, [r7, #24]
        Color = Color % 4;//Guaranteed color scale is 4  --- 0~3
 800132a:	887b      	ldrh	r3, [r7, #2]
 800132c:	f003 0303 	and.w	r3, r3, #3
 8001330:	807b      	strh	r3, [r7, #2]
        UBYTE Rdata = Paint.Image[Addr];
 8001332:	4b33      	ldr	r3, [pc, #204]	@ (8001400 <Paint_SetPixel+0x290>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	4413      	add	r3, r2
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	75fb      	strb	r3, [r7, #23]
        
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 800133e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001340:	f003 0303 	and.w	r3, r3, #3
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	22c0      	movs	r2, #192	@ 0xc0
 8001348:	fa42 f303 	asr.w	r3, r2, r3
 800134c:	b25b      	sxtb	r3, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	b25a      	sxtb	r2, r3
 8001352:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001356:	4013      	ands	r3, r2
 8001358:	b25b      	sxtb	r3, r3
 800135a:	75fb      	strb	r3, [r7, #23]
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 800135c:	887b      	ldrh	r3, [r7, #2]
 800135e:	019a      	lsls	r2, r3, #6
 8001360:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001362:	f003 0303 	and.w	r3, r3, #3
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	fa42 f303 	asr.w	r3, r2, r3
 800136c:	b25a      	sxtb	r2, r3
 800136e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001372:	4313      	orrs	r3, r2
 8001374:	b259      	sxtb	r1, r3
 8001376:	4b22      	ldr	r3, [pc, #136]	@ (8001400 <Paint_SetPixel+0x290>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	4413      	add	r3, r2
 800137e:	b2ca      	uxtb	r2, r1
 8001380:	701a      	strb	r2, [r3, #0]
 8001382:	e042      	b.n	800140a <Paint_SetPixel+0x29a>
    }else if(Paint.Scale == 6 || Paint.Scale == 7){
 8001384:	4b1e      	ldr	r3, [pc, #120]	@ (8001400 <Paint_SetPixel+0x290>)
 8001386:	8adb      	ldrh	r3, [r3, #22]
 8001388:	2b06      	cmp	r3, #6
 800138a:	d003      	beq.n	8001394 <Paint_SetPixel+0x224>
 800138c:	4b1c      	ldr	r3, [pc, #112]	@ (8001400 <Paint_SetPixel+0x290>)
 800138e:	8adb      	ldrh	r3, [r3, #22]
 8001390:	2b07      	cmp	r3, #7
 8001392:	d13a      	bne.n	800140a <Paint_SetPixel+0x29a>
		UDOUBLE Addr = X / 2  + Y * Paint.WidthByte;
 8001394:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001396:	085b      	lsrs	r3, r3, #1
 8001398:	b29b      	uxth	r3, r3
 800139a:	4619      	mov	r1, r3
 800139c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800139e:	4a18      	ldr	r2, [pc, #96]	@ (8001400 <Paint_SetPixel+0x290>)
 80013a0:	8a52      	ldrh	r2, [r2, #18]
 80013a2:	fb02 f303 	mul.w	r3, r2, r3
 80013a6:	440b      	add	r3, r1
 80013a8:	623b      	str	r3, [r7, #32]
		UBYTE Rdata = Paint.Image[Addr];
 80013aa:	4b15      	ldr	r3, [pc, #84]	@ (8001400 <Paint_SetPixel+0x290>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	6a3b      	ldr	r3, [r7, #32]
 80013b0:	4413      	add	r3, r2
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	77fb      	strb	r3, [r7, #31]
		Rdata = Rdata & (~(0xF0 >> ((X % 2)*4)));//Clear first, then set value
 80013b6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	22f0      	movs	r2, #240	@ 0xf0
 80013c0:	fa42 f303 	asr.w	r3, r2, r3
 80013c4:	b25b      	sxtb	r3, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	b25a      	sxtb	r2, r3
 80013ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80013ce:	4013      	ands	r3, r2
 80013d0:	b25b      	sxtb	r3, r3
 80013d2:	77fb      	strb	r3, [r7, #31]
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 80013d4:	887b      	ldrh	r3, [r7, #2]
 80013d6:	011a      	lsls	r2, r3, #4
 80013d8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	fa42 f303 	asr.w	r3, r2, r3
 80013e4:	b25a      	sxtb	r2, r3
 80013e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	b259      	sxtb	r1, r3
 80013ee:	4b04      	ldr	r3, [pc, #16]	@ (8001400 <Paint_SetPixel+0x290>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	6a3b      	ldr	r3, [r7, #32]
 80013f4:	4413      	add	r3, r2
 80013f6:	b2ca      	uxtb	r2, r1
 80013f8:	701a      	strb	r2, [r3, #0]
 80013fa:	e006      	b.n	800140a <Paint_SetPixel+0x29a>
        return;
 80013fc:	bf00      	nop
 80013fe:	e004      	b.n	800140a <Paint_SetPixel+0x29a>
 8001400:	240000b8 	.word	0x240000b8
 8001404:	08009fb0 	.word	0x08009fb0
        return;
 8001408:	bf00      	nop
		//printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
		}
}
 800140a:	3728      	adds	r7, #40	@ 0x28
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{
 8001410:	b480      	push	{r7}
 8001412:	b089      	sub	sp, #36	@ 0x24
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	80fb      	strh	r3, [r7, #6]
	if(Paint.Scale == 2) {
 800141a:	4b4e      	ldr	r3, [pc, #312]	@ (8001554 <Paint_Clear+0x144>)
 800141c:	8adb      	ldrh	r3, [r3, #22]
 800141e:	2b02      	cmp	r3, #2
 8001420:	d125      	bne.n	800146e <Paint_Clear+0x5e>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8001422:	2300      	movs	r3, #0
 8001424:	83fb      	strh	r3, [r7, #30]
 8001426:	e01c      	b.n	8001462 <Paint_Clear+0x52>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8001428:	2300      	movs	r3, #0
 800142a:	83bb      	strh	r3, [r7, #28]
 800142c:	e011      	b.n	8001452 <Paint_Clear+0x42>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 800142e:	8bba      	ldrh	r2, [r7, #28]
 8001430:	8bfb      	ldrh	r3, [r7, #30]
 8001432:	4948      	ldr	r1, [pc, #288]	@ (8001554 <Paint_Clear+0x144>)
 8001434:	8a49      	ldrh	r1, [r1, #18]
 8001436:	fb01 f303 	mul.w	r3, r1, r3
 800143a:	4413      	add	r3, r2
 800143c:	60bb      	str	r3, [r7, #8]
				Paint.Image[Addr] = Color;
 800143e:	4b45      	ldr	r3, [pc, #276]	@ (8001554 <Paint_Clear+0x144>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	4413      	add	r3, r2
 8001446:	88fa      	ldrh	r2, [r7, #6]
 8001448:	b2d2      	uxtb	r2, r2
 800144a:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800144c:	8bbb      	ldrh	r3, [r7, #28]
 800144e:	3301      	adds	r3, #1
 8001450:	83bb      	strh	r3, [r7, #28]
 8001452:	4b40      	ldr	r3, [pc, #256]	@ (8001554 <Paint_Clear+0x144>)
 8001454:	8a5b      	ldrh	r3, [r3, #18]
 8001456:	8bba      	ldrh	r2, [r7, #28]
 8001458:	429a      	cmp	r2, r3
 800145a:	d3e8      	bcc.n	800142e <Paint_Clear+0x1e>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800145c:	8bfb      	ldrh	r3, [r7, #30]
 800145e:	3301      	adds	r3, #1
 8001460:	83fb      	strh	r3, [r7, #30]
 8001462:	4b3c      	ldr	r3, [pc, #240]	@ (8001554 <Paint_Clear+0x144>)
 8001464:	8a9b      	ldrh	r3, [r3, #20]
 8001466:	8bfa      	ldrh	r2, [r7, #30]
 8001468:	429a      	cmp	r2, r3
 800146a:	d3dd      	bcc.n	8001428 <Paint_Clear+0x18>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
				Paint.Image[Addr] = (Color<<4)|Color;
			}
		}		
	}
}
 800146c:	e06c      	b.n	8001548 <Paint_Clear+0x138>
    }else if(Paint.Scale == 4) {
 800146e:	4b39      	ldr	r3, [pc, #228]	@ (8001554 <Paint_Clear+0x144>)
 8001470:	8adb      	ldrh	r3, [r3, #22]
 8001472:	2b04      	cmp	r3, #4
 8001474:	d135      	bne.n	80014e2 <Paint_Clear+0xd2>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8001476:	2300      	movs	r3, #0
 8001478:	837b      	strh	r3, [r7, #26]
 800147a:	e02c      	b.n	80014d6 <Paint_Clear+0xc6>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 800147c:	2300      	movs	r3, #0
 800147e:	833b      	strh	r3, [r7, #24]
 8001480:	e021      	b.n	80014c6 <Paint_Clear+0xb6>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8001482:	8b3a      	ldrh	r2, [r7, #24]
 8001484:	8b7b      	ldrh	r3, [r7, #26]
 8001486:	4933      	ldr	r1, [pc, #204]	@ (8001554 <Paint_Clear+0x144>)
 8001488:	8a49      	ldrh	r1, [r1, #18]
 800148a:	fb01 f303 	mul.w	r3, r1, r3
 800148e:	4413      	add	r3, r2
 8001490:	60fb      	str	r3, [r7, #12]
				Paint.Image[Addr] = (Color<<6)|(Color<<4)|(Color<<2)|Color;
 8001492:	88fb      	ldrh	r3, [r7, #6]
 8001494:	019b      	lsls	r3, r3, #6
 8001496:	b25a      	sxtb	r2, r3
 8001498:	88fb      	ldrh	r3, [r7, #6]
 800149a:	011b      	lsls	r3, r3, #4
 800149c:	b25b      	sxtb	r3, r3
 800149e:	4313      	orrs	r3, r2
 80014a0:	b25a      	sxtb	r2, r3
 80014a2:	88fb      	ldrh	r3, [r7, #6]
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	b25b      	sxtb	r3, r3
 80014a8:	4313      	orrs	r3, r2
 80014aa:	b25a      	sxtb	r2, r3
 80014ac:	88fb      	ldrh	r3, [r7, #6]
 80014ae:	b25b      	sxtb	r3, r3
 80014b0:	4313      	orrs	r3, r2
 80014b2:	b259      	sxtb	r1, r3
 80014b4:	4b27      	ldr	r3, [pc, #156]	@ (8001554 <Paint_Clear+0x144>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4413      	add	r3, r2
 80014bc:	b2ca      	uxtb	r2, r1
 80014be:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 80014c0:	8b3b      	ldrh	r3, [r7, #24]
 80014c2:	3301      	adds	r3, #1
 80014c4:	833b      	strh	r3, [r7, #24]
 80014c6:	4b23      	ldr	r3, [pc, #140]	@ (8001554 <Paint_Clear+0x144>)
 80014c8:	8a5b      	ldrh	r3, [r3, #18]
 80014ca:	8b3a      	ldrh	r2, [r7, #24]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d3d8      	bcc.n	8001482 <Paint_Clear+0x72>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80014d0:	8b7b      	ldrh	r3, [r7, #26]
 80014d2:	3301      	adds	r3, #1
 80014d4:	837b      	strh	r3, [r7, #26]
 80014d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001554 <Paint_Clear+0x144>)
 80014d8:	8a9b      	ldrh	r3, [r3, #20]
 80014da:	8b7a      	ldrh	r2, [r7, #26]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d3cd      	bcc.n	800147c <Paint_Clear+0x6c>
}
 80014e0:	e032      	b.n	8001548 <Paint_Clear+0x138>
	}else if(Paint.Scale == 6 || Paint.Scale == 7) {
 80014e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001554 <Paint_Clear+0x144>)
 80014e4:	8adb      	ldrh	r3, [r3, #22]
 80014e6:	2b06      	cmp	r3, #6
 80014e8:	d003      	beq.n	80014f2 <Paint_Clear+0xe2>
 80014ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001554 <Paint_Clear+0x144>)
 80014ec:	8adb      	ldrh	r3, [r3, #22]
 80014ee:	2b07      	cmp	r3, #7
 80014f0:	d12a      	bne.n	8001548 <Paint_Clear+0x138>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80014f2:	2300      	movs	r3, #0
 80014f4:	82fb      	strh	r3, [r7, #22]
 80014f6:	e022      	b.n	800153e <Paint_Clear+0x12e>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 80014f8:	2300      	movs	r3, #0
 80014fa:	82bb      	strh	r3, [r7, #20]
 80014fc:	e017      	b.n	800152e <Paint_Clear+0x11e>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 80014fe:	8aba      	ldrh	r2, [r7, #20]
 8001500:	8afb      	ldrh	r3, [r7, #22]
 8001502:	4914      	ldr	r1, [pc, #80]	@ (8001554 <Paint_Clear+0x144>)
 8001504:	8a49      	ldrh	r1, [r1, #18]
 8001506:	fb01 f303 	mul.w	r3, r1, r3
 800150a:	4413      	add	r3, r2
 800150c:	613b      	str	r3, [r7, #16]
				Paint.Image[Addr] = (Color<<4)|Color;
 800150e:	88fb      	ldrh	r3, [r7, #6]
 8001510:	011b      	lsls	r3, r3, #4
 8001512:	b25a      	sxtb	r2, r3
 8001514:	88fb      	ldrh	r3, [r7, #6]
 8001516:	b25b      	sxtb	r3, r3
 8001518:	4313      	orrs	r3, r2
 800151a:	b259      	sxtb	r1, r3
 800151c:	4b0d      	ldr	r3, [pc, #52]	@ (8001554 <Paint_Clear+0x144>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	4413      	add	r3, r2
 8001524:	b2ca      	uxtb	r2, r1
 8001526:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8001528:	8abb      	ldrh	r3, [r7, #20]
 800152a:	3301      	adds	r3, #1
 800152c:	82bb      	strh	r3, [r7, #20]
 800152e:	4b09      	ldr	r3, [pc, #36]	@ (8001554 <Paint_Clear+0x144>)
 8001530:	8a5b      	ldrh	r3, [r3, #18]
 8001532:	8aba      	ldrh	r2, [r7, #20]
 8001534:	429a      	cmp	r2, r3
 8001536:	d3e2      	bcc.n	80014fe <Paint_Clear+0xee>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8001538:	8afb      	ldrh	r3, [r7, #22]
 800153a:	3301      	adds	r3, #1
 800153c:	82fb      	strh	r3, [r7, #22]
 800153e:	4b05      	ldr	r3, [pc, #20]	@ (8001554 <Paint_Clear+0x144>)
 8001540:	8a9b      	ldrh	r3, [r3, #20]
 8001542:	8afa      	ldrh	r2, [r7, #22]
 8001544:	429a      	cmp	r2, r3
 8001546:	d3d7      	bcc.n	80014f8 <Paint_Clear+0xe8>
}
 8001548:	bf00      	nop
 800154a:	3724      	adds	r7, #36	@ 0x24
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	240000b8 	.word	0x240000b8

08001558 <Paint_DrawPoint>:
    Dot_Pixel	: point size
    Dot_Style	: point Style
******************************************************************************/
void Paint_DrawPoint(UWORD Xpoint, UWORD Ypoint, UWORD Color,
                     DOT_PIXEL Dot_Pixel, DOT_STYLE Dot_Style)
{
 8001558:	b590      	push	{r4, r7, lr}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	4604      	mov	r4, r0
 8001560:	4608      	mov	r0, r1
 8001562:	4611      	mov	r1, r2
 8001564:	461a      	mov	r2, r3
 8001566:	4623      	mov	r3, r4
 8001568:	80fb      	strh	r3, [r7, #6]
 800156a:	4603      	mov	r3, r0
 800156c:	80bb      	strh	r3, [r7, #4]
 800156e:	460b      	mov	r3, r1
 8001570:	807b      	strh	r3, [r7, #2]
 8001572:	4613      	mov	r3, r2
 8001574:	707b      	strb	r3, [r7, #1]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8001576:	4b4a      	ldr	r3, [pc, #296]	@ (80016a0 <Paint_DrawPoint+0x148>)
 8001578:	889b      	ldrh	r3, [r3, #4]
 800157a:	88fa      	ldrh	r2, [r7, #6]
 800157c:	429a      	cmp	r2, r3
 800157e:	d804      	bhi.n	800158a <Paint_DrawPoint+0x32>
 8001580:	4b47      	ldr	r3, [pc, #284]	@ (80016a0 <Paint_DrawPoint+0x148>)
 8001582:	88db      	ldrh	r3, [r3, #6]
 8001584:	88ba      	ldrh	r2, [r7, #4]
 8001586:	429a      	cmp	r2, r3
 8001588:	d911      	bls.n	80015ae <Paint_DrawPoint+0x56>
        Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
 800158a:	4846      	ldr	r0, [pc, #280]	@ (80016a4 <Paint_DrawPoint+0x14c>)
 800158c:	f007 fe9e 	bl	80092cc <puts>
				printf("Xpoint = %d , Paint.Width = %d  \r\n ",Xpoint,Paint.Width);
 8001590:	88fb      	ldrh	r3, [r7, #6]
 8001592:	4a43      	ldr	r2, [pc, #268]	@ (80016a0 <Paint_DrawPoint+0x148>)
 8001594:	8892      	ldrh	r2, [r2, #4]
 8001596:	4619      	mov	r1, r3
 8001598:	4843      	ldr	r0, [pc, #268]	@ (80016a8 <Paint_DrawPoint+0x150>)
 800159a:	f007 fe2f 	bl	80091fc <iprintf>
				printf("Ypoint = %d , Paint.Height = %d  \r\n ",Ypoint,Paint.Height);
 800159e:	88bb      	ldrh	r3, [r7, #4]
 80015a0:	4a3f      	ldr	r2, [pc, #252]	@ (80016a0 <Paint_DrawPoint+0x148>)
 80015a2:	88d2      	ldrh	r2, [r2, #6]
 80015a4:	4619      	mov	r1, r3
 80015a6:	4841      	ldr	r0, [pc, #260]	@ (80016ac <Paint_DrawPoint+0x154>)
 80015a8:	f007 fe28 	bl	80091fc <iprintf>
        return;
 80015ac:	e074      	b.n	8001698 <Paint_DrawPoint+0x140>
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_Style == DOT_FILL_AROUND) {
 80015ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d144      	bne.n	8001640 <Paint_DrawPoint+0xe8>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 80015b6:	2300      	movs	r3, #0
 80015b8:	81fb      	strh	r3, [r7, #14]
 80015ba:	e039      	b.n	8001630 <Paint_DrawPoint+0xd8>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 80015bc:	2300      	movs	r3, #0
 80015be:	81bb      	strh	r3, [r7, #12]
 80015c0:	e029      	b.n	8001616 <Paint_DrawPoint+0xbe>
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 80015c2:	88fa      	ldrh	r2, [r7, #6]
 80015c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015c8:	441a      	add	r2, r3
 80015ca:	787b      	ldrb	r3, [r7, #1]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	db28      	blt.n	8001624 <Paint_DrawPoint+0xcc>
 80015d2:	88ba      	ldrh	r2, [r7, #4]
 80015d4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80015d8:	441a      	add	r2, r3
 80015da:	787b      	ldrb	r3, [r7, #1]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b00      	cmp	r3, #0
 80015e0:	db20      	blt.n	8001624 <Paint_DrawPoint+0xcc>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 80015e2:	89fa      	ldrh	r2, [r7, #14]
 80015e4:	88fb      	ldrh	r3, [r7, #6]
 80015e6:	4413      	add	r3, r2
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	787b      	ldrb	r3, [r7, #1]
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	b298      	uxth	r0, r3
 80015f2:	89ba      	ldrh	r2, [r7, #12]
 80015f4:	88bb      	ldrh	r3, [r7, #4]
 80015f6:	4413      	add	r3, r2
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	787b      	ldrb	r3, [r7, #1]
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	b29b      	uxth	r3, r3
 8001602:	887a      	ldrh	r2, [r7, #2]
 8001604:	4619      	mov	r1, r3
 8001606:	f7ff fdb3 	bl	8001170 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 800160a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800160e:	b29b      	uxth	r3, r3
 8001610:	3301      	adds	r3, #1
 8001612:	b29b      	uxth	r3, r3
 8001614:	81bb      	strh	r3, [r7, #12]
 8001616:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800161a:	787b      	ldrb	r3, [r7, #1]
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	3b01      	subs	r3, #1
 8001620:	429a      	cmp	r2, r3
 8001622:	dbce      	blt.n	80015c2 <Paint_DrawPoint+0x6a>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 8001624:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001628:	b29b      	uxth	r3, r3
 800162a:	3301      	adds	r3, #1
 800162c:	b29b      	uxth	r3, r3
 800162e:	81fb      	strh	r3, [r7, #14]
 8001630:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001634:	787b      	ldrb	r3, [r7, #1]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	3b01      	subs	r3, #1
 800163a:	429a      	cmp	r2, r3
 800163c:	dbbe      	blt.n	80015bc <Paint_DrawPoint+0x64>
 800163e:	e02b      	b.n	8001698 <Paint_DrawPoint+0x140>
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8001640:	2300      	movs	r3, #0
 8001642:	81fb      	strh	r3, [r7, #14]
 8001644:	e023      	b.n	800168e <Paint_DrawPoint+0x136>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 8001646:	2300      	movs	r3, #0
 8001648:	81bb      	strh	r3, [r7, #12]
 800164a:	e015      	b.n	8001678 <Paint_DrawPoint+0x120>
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 800164c:	89fa      	ldrh	r2, [r7, #14]
 800164e:	88fb      	ldrh	r3, [r7, #6]
 8001650:	4413      	add	r3, r2
 8001652:	b29b      	uxth	r3, r3
 8001654:	3b01      	subs	r3, #1
 8001656:	b298      	uxth	r0, r3
 8001658:	89ba      	ldrh	r2, [r7, #12]
 800165a:	88bb      	ldrh	r3, [r7, #4]
 800165c:	4413      	add	r3, r2
 800165e:	b29b      	uxth	r3, r3
 8001660:	3b01      	subs	r3, #1
 8001662:	b29b      	uxth	r3, r3
 8001664:	887a      	ldrh	r2, [r7, #2]
 8001666:	4619      	mov	r1, r3
 8001668:	f7ff fd82 	bl	8001170 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 800166c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001670:	b29b      	uxth	r3, r3
 8001672:	3301      	adds	r3, #1
 8001674:	b29b      	uxth	r3, r3
 8001676:	81bb      	strh	r3, [r7, #12]
 8001678:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800167c:	787b      	ldrb	r3, [r7, #1]
 800167e:	429a      	cmp	r2, r3
 8001680:	dbe4      	blt.n	800164c <Paint_DrawPoint+0xf4>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8001682:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001686:	b29b      	uxth	r3, r3
 8001688:	3301      	adds	r3, #1
 800168a:	b29b      	uxth	r3, r3
 800168c:	81fb      	strh	r3, [r7, #14]
 800168e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001692:	787b      	ldrb	r3, [r7, #1]
 8001694:	429a      	cmp	r2, r3
 8001696:	dbd6      	blt.n	8001646 <Paint_DrawPoint+0xee>
            }
        }
    }
}
 8001698:	3714      	adds	r7, #20
 800169a:	46bd      	mov	sp, r7
 800169c:	bd90      	pop	{r4, r7, pc}
 800169e:	bf00      	nop
 80016a0:	240000b8 	.word	0x240000b8
 80016a4:	08009fd8 	.word	0x08009fd8
 80016a8:	0800a018 	.word	0x0800a018
 80016ac:	0800a03c 	.word	0x0800a03c

080016b0 <Paint_DrawLine>:
    Line_width : Line width
    Line_Style: Solid and dotted lines
******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 80016b0:	b590      	push	{r4, r7, lr}
 80016b2:	b08d      	sub	sp, #52	@ 0x34
 80016b4:	af02      	add	r7, sp, #8
 80016b6:	4604      	mov	r4, r0
 80016b8:	4608      	mov	r0, r1
 80016ba:	4611      	mov	r1, r2
 80016bc:	461a      	mov	r2, r3
 80016be:	4623      	mov	r3, r4
 80016c0:	80fb      	strh	r3, [r7, #6]
 80016c2:	4603      	mov	r3, r0
 80016c4:	80bb      	strh	r3, [r7, #4]
 80016c6:	460b      	mov	r3, r1
 80016c8:	807b      	strh	r3, [r7, #2]
 80016ca:	4613      	mov	r3, r2
 80016cc:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 80016ce:	4b4b      	ldr	r3, [pc, #300]	@ (80017fc <Paint_DrawLine+0x14c>)
 80016d0:	889b      	ldrh	r3, [r3, #4]
 80016d2:	88fa      	ldrh	r2, [r7, #6]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d80e      	bhi.n	80016f6 <Paint_DrawLine+0x46>
 80016d8:	4b48      	ldr	r3, [pc, #288]	@ (80017fc <Paint_DrawLine+0x14c>)
 80016da:	88db      	ldrh	r3, [r3, #6]
 80016dc:	88ba      	ldrh	r2, [r7, #4]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d809      	bhi.n	80016f6 <Paint_DrawLine+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 80016e2:	4b46      	ldr	r3, [pc, #280]	@ (80017fc <Paint_DrawLine+0x14c>)
 80016e4:	889b      	ldrh	r3, [r3, #4]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 80016e6:	887a      	ldrh	r2, [r7, #2]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d804      	bhi.n	80016f6 <Paint_DrawLine+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 80016ec:	4b43      	ldr	r3, [pc, #268]	@ (80017fc <Paint_DrawLine+0x14c>)
 80016ee:	88db      	ldrh	r3, [r3, #6]
 80016f0:	883a      	ldrh	r2, [r7, #0]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d903      	bls.n	80016fe <Paint_DrawLine+0x4e>
        Debug("Paint_DrawLine Input exceeds the normal display range\r\n");
 80016f6:	4842      	ldr	r0, [pc, #264]	@ (8001800 <Paint_DrawLine+0x150>)
 80016f8:	f007 fde8 	bl	80092cc <puts>
        return;
 80016fc:	e07a      	b.n	80017f4 <Paint_DrawLine+0x144>
    }

    UWORD Xpoint = Xstart;
 80016fe:	88fb      	ldrh	r3, [r7, #6]
 8001700:	84fb      	strh	r3, [r7, #38]	@ 0x26
    UWORD Ypoint = Ystart;
 8001702:	88bb      	ldrh	r3, [r7, #4]
 8001704:	84bb      	strh	r3, [r7, #36]	@ 0x24
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 8001706:	887a      	ldrh	r2, [r7, #2]
 8001708:	88fb      	ldrh	r3, [r7, #6]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b00      	cmp	r3, #0
 800170e:	bfb8      	it	lt
 8001710:	425b      	neglt	r3, r3
 8001712:	61bb      	str	r3, [r7, #24]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 8001714:	883a      	ldrh	r2, [r7, #0]
 8001716:	88bb      	ldrh	r3, [r7, #4]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	bfb8      	it	lt
 800171e:	425b      	neglt	r3, r3
 8001720:	425b      	negs	r3, r3
 8001722:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 8001724:	88fa      	ldrh	r2, [r7, #6]
 8001726:	887b      	ldrh	r3, [r7, #2]
 8001728:	429a      	cmp	r2, r3
 800172a:	d201      	bcs.n	8001730 <Paint_DrawLine+0x80>
 800172c:	2301      	movs	r3, #1
 800172e:	e001      	b.n	8001734 <Paint_DrawLine+0x84>
 8001730:	f04f 33ff 	mov.w	r3, #4294967295
 8001734:	613b      	str	r3, [r7, #16]
    int YAddway = Ystart < Yend ? 1 : -1;
 8001736:	88ba      	ldrh	r2, [r7, #4]
 8001738:	883b      	ldrh	r3, [r7, #0]
 800173a:	429a      	cmp	r2, r3
 800173c:	d201      	bcs.n	8001742 <Paint_DrawLine+0x92>
 800173e:	2301      	movs	r3, #1
 8001740:	e001      	b.n	8001746 <Paint_DrawLine+0x96>
 8001742:	f04f 33ff 	mov.w	r3, #4294967295
 8001746:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int Esp = dx + dy;
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	4413      	add	r3, r2
 800174e:	623b      	str	r3, [r7, #32]
    char Dotted_Len = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	77fb      	strb	r3, [r7, #31]

    for (;;) {
        Dotted_Len++;
 8001754:	7ffb      	ldrb	r3, [r7, #31]
 8001756:	3301      	adds	r3, #1
 8001758:	77fb      	strb	r3, [r7, #31]
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 800175a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800175e:	2b01      	cmp	r3, #1
 8001760:	d117      	bne.n	8001792 <Paint_DrawLine+0xe2>
 8001762:	7ffa      	ldrb	r2, [r7, #31]
 8001764:	4b27      	ldr	r3, [pc, #156]	@ (8001804 <Paint_DrawLine+0x154>)
 8001766:	fba3 1302 	umull	r1, r3, r3, r2
 800176a:	0859      	lsrs	r1, r3, #1
 800176c:	460b      	mov	r3, r1
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	440b      	add	r3, r1
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d10b      	bne.n	8001792 <Paint_DrawLine+0xe2>
            //Debug("LINE_DOTTED\r\n");
            Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
 800177a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800177e:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8001780:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 8001782:	2201      	movs	r2, #1
 8001784:	9200      	str	r2, [sp, #0]
 8001786:	22ff      	movs	r2, #255	@ 0xff
 8001788:	f7ff fee6 	bl	8001558 <Paint_DrawPoint>
            Dotted_Len = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	77fb      	strb	r3, [r7, #31]
 8001790:	e008      	b.n	80017a4 <Paint_DrawLine+0xf4>
        } else {
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 8001792:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001796:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8001798:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 800179a:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 800179c:	2401      	movs	r4, #1
 800179e:	9400      	str	r4, [sp, #0]
 80017a0:	f7ff feda 	bl	8001558 <Paint_DrawPoint>
        }
        if (2 * Esp >= dy) {
 80017a4:	6a3b      	ldr	r3, [r7, #32]
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	697a      	ldr	r2, [r7, #20]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	dc0c      	bgt.n	80017c8 <Paint_DrawLine+0x118>
            if (Xpoint == Xend)
 80017ae:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80017b0:	887b      	ldrh	r3, [r7, #2]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d01b      	beq.n	80017ee <Paint_DrawLine+0x13e>
                break;
            Esp += dy;
 80017b6:	6a3a      	ldr	r2, [r7, #32]
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	4413      	add	r3, r2
 80017bc:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80017c4:	4413      	add	r3, r2
 80017c6:	84fb      	strh	r3, [r7, #38]	@ 0x26
        }
        if (2 * Esp <= dx) {
 80017c8:	6a3b      	ldr	r3, [r7, #32]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	dbc0      	blt.n	8001754 <Paint_DrawLine+0xa4>
            if (Ypoint == Yend)
 80017d2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80017d4:	883b      	ldrh	r3, [r7, #0]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d00b      	beq.n	80017f2 <Paint_DrawLine+0x142>
                break;
            Esp += dx;
 80017da:	6a3a      	ldr	r2, [r7, #32]
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	4413      	add	r3, r2
 80017e0:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80017e8:	4413      	add	r3, r2
 80017ea:	84bb      	strh	r3, [r7, #36]	@ 0x24
        Dotted_Len++;
 80017ec:	e7b2      	b.n	8001754 <Paint_DrawLine+0xa4>
                break;
 80017ee:	bf00      	nop
 80017f0:	e000      	b.n	80017f4 <Paint_DrawLine+0x144>
                break;
 80017f2:	bf00      	nop
        }
    }
}
 80017f4:	372c      	adds	r7, #44	@ 0x2c
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd90      	pop	{r4, r7, pc}
 80017fa:	bf00      	nop
 80017fc:	240000b8 	.word	0x240000b8
 8001800:	0800a064 	.word	0x0800a064
 8001804:	aaaaaaab 	.word	0xaaaaaaab

08001808 <Paint_DrawRectangle>:
    Line_width: Line width
    Draw_Fill : Whether to fill the inside of the rectangle
******************************************************************************/
void Paint_DrawRectangle(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
                         UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill)
{
 8001808:	b590      	push	{r4, r7, lr}
 800180a:	b089      	sub	sp, #36	@ 0x24
 800180c:	af04      	add	r7, sp, #16
 800180e:	4604      	mov	r4, r0
 8001810:	4608      	mov	r0, r1
 8001812:	4611      	mov	r1, r2
 8001814:	461a      	mov	r2, r3
 8001816:	4623      	mov	r3, r4
 8001818:	80fb      	strh	r3, [r7, #6]
 800181a:	4603      	mov	r3, r0
 800181c:	80bb      	strh	r3, [r7, #4]
 800181e:	460b      	mov	r3, r1
 8001820:	807b      	strh	r3, [r7, #2]
 8001822:	4613      	mov	r3, r2
 8001824:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8001826:	4b38      	ldr	r3, [pc, #224]	@ (8001908 <Paint_DrawRectangle+0x100>)
 8001828:	889b      	ldrh	r3, [r3, #4]
 800182a:	88fa      	ldrh	r2, [r7, #6]
 800182c:	429a      	cmp	r2, r3
 800182e:	d80e      	bhi.n	800184e <Paint_DrawRectangle+0x46>
 8001830:	4b35      	ldr	r3, [pc, #212]	@ (8001908 <Paint_DrawRectangle+0x100>)
 8001832:	88db      	ldrh	r3, [r3, #6]
 8001834:	88ba      	ldrh	r2, [r7, #4]
 8001836:	429a      	cmp	r2, r3
 8001838:	d809      	bhi.n	800184e <Paint_DrawRectangle+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 800183a:	4b33      	ldr	r3, [pc, #204]	@ (8001908 <Paint_DrawRectangle+0x100>)
 800183c:	889b      	ldrh	r3, [r3, #4]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800183e:	887a      	ldrh	r2, [r7, #2]
 8001840:	429a      	cmp	r2, r3
 8001842:	d804      	bhi.n	800184e <Paint_DrawRectangle+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 8001844:	4b30      	ldr	r3, [pc, #192]	@ (8001908 <Paint_DrawRectangle+0x100>)
 8001846:	88db      	ldrh	r3, [r3, #6]
 8001848:	883a      	ldrh	r2, [r7, #0]
 800184a:	429a      	cmp	r2, r3
 800184c:	d903      	bls.n	8001856 <Paint_DrawRectangle+0x4e>
        Debug("Input exceeds the normal display range\r\n");
 800184e:	482f      	ldr	r0, [pc, #188]	@ (800190c <Paint_DrawRectangle+0x104>)
 8001850:	f007 fd3c 	bl	80092cc <puts>
        return;
 8001854:	e054      	b.n	8001900 <Paint_DrawRectangle+0xf8>
    }

    if (Draw_Fill) {
 8001856:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800185a:	2b00      	cmp	r3, #0
 800185c:	d018      	beq.n	8001890 <Paint_DrawRectangle+0x88>
        UWORD Ypoint;
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 800185e:	88bb      	ldrh	r3, [r7, #4]
 8001860:	81fb      	strh	r3, [r7, #14]
 8001862:	e010      	b.n	8001886 <Paint_DrawRectangle+0x7e>
            Paint_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color , Line_width, LINE_STYLE_SOLID);
 8001864:	89fc      	ldrh	r4, [r7, #14]
 8001866:	887a      	ldrh	r2, [r7, #2]
 8001868:	89f9      	ldrh	r1, [r7, #14]
 800186a:	88f8      	ldrh	r0, [r7, #6]
 800186c:	2300      	movs	r3, #0
 800186e:	9302      	str	r3, [sp, #8]
 8001870:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001874:	9301      	str	r3, [sp, #4]
 8001876:	8c3b      	ldrh	r3, [r7, #32]
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	4623      	mov	r3, r4
 800187c:	f7ff ff18 	bl	80016b0 <Paint_DrawLine>
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 8001880:	89fb      	ldrh	r3, [r7, #14]
 8001882:	3301      	adds	r3, #1
 8001884:	81fb      	strh	r3, [r7, #14]
 8001886:	89fa      	ldrh	r2, [r7, #14]
 8001888:	883b      	ldrh	r3, [r7, #0]
 800188a:	429a      	cmp	r2, r3
 800188c:	d3ea      	bcc.n	8001864 <Paint_DrawRectangle+0x5c>
 800188e:	e037      	b.n	8001900 <Paint_DrawRectangle+0xf8>
        }
    } else {
        Paint_DrawLine(Xstart, Ystart, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
 8001890:	88bc      	ldrh	r4, [r7, #4]
 8001892:	887a      	ldrh	r2, [r7, #2]
 8001894:	88b9      	ldrh	r1, [r7, #4]
 8001896:	88f8      	ldrh	r0, [r7, #6]
 8001898:	2300      	movs	r3, #0
 800189a:	9302      	str	r3, [sp, #8]
 800189c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80018a0:	9301      	str	r3, [sp, #4]
 80018a2:	8c3b      	ldrh	r3, [r7, #32]
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	4623      	mov	r3, r4
 80018a8:	f7ff ff02 	bl	80016b0 <Paint_DrawLine>
        Paint_DrawLine(Xstart, Ystart, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
 80018ac:	883c      	ldrh	r4, [r7, #0]
 80018ae:	88fa      	ldrh	r2, [r7, #6]
 80018b0:	88b9      	ldrh	r1, [r7, #4]
 80018b2:	88f8      	ldrh	r0, [r7, #6]
 80018b4:	2300      	movs	r3, #0
 80018b6:	9302      	str	r3, [sp, #8]
 80018b8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80018bc:	9301      	str	r3, [sp, #4]
 80018be:	8c3b      	ldrh	r3, [r7, #32]
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	4623      	mov	r3, r4
 80018c4:	f7ff fef4 	bl	80016b0 <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
 80018c8:	88bc      	ldrh	r4, [r7, #4]
 80018ca:	887a      	ldrh	r2, [r7, #2]
 80018cc:	8839      	ldrh	r1, [r7, #0]
 80018ce:	8878      	ldrh	r0, [r7, #2]
 80018d0:	2300      	movs	r3, #0
 80018d2:	9302      	str	r3, [sp, #8]
 80018d4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80018d8:	9301      	str	r3, [sp, #4]
 80018da:	8c3b      	ldrh	r3, [r7, #32]
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	4623      	mov	r3, r4
 80018e0:	f7ff fee6 	bl	80016b0 <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
 80018e4:	883c      	ldrh	r4, [r7, #0]
 80018e6:	88fa      	ldrh	r2, [r7, #6]
 80018e8:	8839      	ldrh	r1, [r7, #0]
 80018ea:	8878      	ldrh	r0, [r7, #2]
 80018ec:	2300      	movs	r3, #0
 80018ee:	9302      	str	r3, [sp, #8]
 80018f0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80018f4:	9301      	str	r3, [sp, #4]
 80018f6:	8c3b      	ldrh	r3, [r7, #32]
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	4623      	mov	r3, r4
 80018fc:	f7ff fed8 	bl	80016b0 <Paint_DrawLine>
    }
}
 8001900:	3714      	adds	r7, #20
 8001902:	46bd      	mov	sp, r7
 8001904:	bd90      	pop	{r4, r7, pc}
 8001906:	bf00      	nop
 8001908:	240000b8 	.word	0x240000b8
 800190c:	0800a0a4 	.word	0x0800a0a4

08001910 <Paint_DrawCircle>:
    Line_width: Line width
    Draw_Fill : Whether to fill the inside of the Circle
******************************************************************************/
void Paint_DrawCircle(UWORD X_Center, UWORD Y_Center, UWORD Radius,
                      UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill)
{
 8001910:	b590      	push	{r4, r7, lr}
 8001912:	b087      	sub	sp, #28
 8001914:	af02      	add	r7, sp, #8
 8001916:	4604      	mov	r4, r0
 8001918:	4608      	mov	r0, r1
 800191a:	4611      	mov	r1, r2
 800191c:	461a      	mov	r2, r3
 800191e:	4623      	mov	r3, r4
 8001920:	80fb      	strh	r3, [r7, #6]
 8001922:	4603      	mov	r3, r0
 8001924:	80bb      	strh	r3, [r7, #4]
 8001926:	460b      	mov	r3, r1
 8001928:	807b      	strh	r3, [r7, #2]
 800192a:	4613      	mov	r3, r2
 800192c:	803b      	strh	r3, [r7, #0]
    if (X_Center > Paint.Width || Y_Center >= Paint.Height) {
 800192e:	4b67      	ldr	r3, [pc, #412]	@ (8001acc <Paint_DrawCircle+0x1bc>)
 8001930:	889b      	ldrh	r3, [r3, #4]
 8001932:	88fa      	ldrh	r2, [r7, #6]
 8001934:	429a      	cmp	r2, r3
 8001936:	d804      	bhi.n	8001942 <Paint_DrawCircle+0x32>
 8001938:	4b64      	ldr	r3, [pc, #400]	@ (8001acc <Paint_DrawCircle+0x1bc>)
 800193a:	88db      	ldrh	r3, [r3, #6]
 800193c:	88ba      	ldrh	r2, [r7, #4]
 800193e:	429a      	cmp	r2, r3
 8001940:	d303      	bcc.n	800194a <Paint_DrawCircle+0x3a>
        Debug("Paint_DrawCircle Input exceeds the normal display range\r\n");
 8001942:	4863      	ldr	r0, [pc, #396]	@ (8001ad0 <Paint_DrawCircle+0x1c0>)
 8001944:	f007 fcc2 	bl	80092cc <puts>
        return;
 8001948:	e16b      	b.n	8001c22 <Paint_DrawCircle+0x312>
    }

    //Draw a circle from(0, R) as a starting point
    int16_t XCurrent, YCurrent;
    XCurrent = 0;
 800194a:	2300      	movs	r3, #0
 800194c:	81fb      	strh	r3, [r7, #14]
    YCurrent = Radius;
 800194e:	887b      	ldrh	r3, [r7, #2]
 8001950:	81bb      	strh	r3, [r7, #12]

    //Cumulative error,judge the next point of the logo
    int16_t Esp = 3 - (Radius << 1 );
 8001952:	887b      	ldrh	r3, [r7, #2]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	b29b      	uxth	r3, r3
 8001958:	f1c3 0303 	rsb	r3, r3, #3
 800195c:	b29b      	uxth	r3, r3
 800195e:	817b      	strh	r3, [r7, #10]

    int16_t sCountY;
    if (Draw_Fill == DRAW_FILL_FULL) {
 8001960:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001964:	2b01      	cmp	r3, #1
 8001966:	f040 8155 	bne.w	8001c14 <Paint_DrawCircle+0x304>
        while (XCurrent <= YCurrent ) { //Realistic circles
 800196a:	e0a6      	b.n	8001aba <Paint_DrawCircle+0x1aa>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 800196c:	89fb      	ldrh	r3, [r7, #14]
 800196e:	813b      	strh	r3, [r7, #8]
 8001970:	e075      	b.n	8001a5e <Paint_DrawCircle+0x14e>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//1
 8001972:	89fa      	ldrh	r2, [r7, #14]
 8001974:	88fb      	ldrh	r3, [r7, #6]
 8001976:	4413      	add	r3, r2
 8001978:	b298      	uxth	r0, r3
 800197a:	893a      	ldrh	r2, [r7, #8]
 800197c:	88bb      	ldrh	r3, [r7, #4]
 800197e:	4413      	add	r3, r2
 8001980:	b299      	uxth	r1, r3
 8001982:	883a      	ldrh	r2, [r7, #0]
 8001984:	2301      	movs	r3, #1
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	2301      	movs	r3, #1
 800198a:	f7ff fde5 	bl	8001558 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//2
 800198e:	89fb      	ldrh	r3, [r7, #14]
 8001990:	88fa      	ldrh	r2, [r7, #6]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	b298      	uxth	r0, r3
 8001996:	893a      	ldrh	r2, [r7, #8]
 8001998:	88bb      	ldrh	r3, [r7, #4]
 800199a:	4413      	add	r3, r2
 800199c:	b299      	uxth	r1, r3
 800199e:	883a      	ldrh	r2, [r7, #0]
 80019a0:	2301      	movs	r3, #1
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	2301      	movs	r3, #1
 80019a6:	f7ff fdd7 	bl	8001558 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//3
 80019aa:	893b      	ldrh	r3, [r7, #8]
 80019ac:	88fa      	ldrh	r2, [r7, #6]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	b298      	uxth	r0, r3
 80019b2:	89fa      	ldrh	r2, [r7, #14]
 80019b4:	88bb      	ldrh	r3, [r7, #4]
 80019b6:	4413      	add	r3, r2
 80019b8:	b299      	uxth	r1, r3
 80019ba:	883a      	ldrh	r2, [r7, #0]
 80019bc:	2301      	movs	r3, #1
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	2301      	movs	r3, #1
 80019c2:	f7ff fdc9 	bl	8001558 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//4
 80019c6:	893b      	ldrh	r3, [r7, #8]
 80019c8:	88fa      	ldrh	r2, [r7, #6]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	b298      	uxth	r0, r3
 80019ce:	89fb      	ldrh	r3, [r7, #14]
 80019d0:	88ba      	ldrh	r2, [r7, #4]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	b299      	uxth	r1, r3
 80019d6:	883a      	ldrh	r2, [r7, #0]
 80019d8:	2301      	movs	r3, #1
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	2301      	movs	r3, #1
 80019de:	f7ff fdbb 	bl	8001558 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//5
 80019e2:	89fb      	ldrh	r3, [r7, #14]
 80019e4:	88fa      	ldrh	r2, [r7, #6]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	b298      	uxth	r0, r3
 80019ea:	893b      	ldrh	r3, [r7, #8]
 80019ec:	88ba      	ldrh	r2, [r7, #4]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	b299      	uxth	r1, r3
 80019f2:	883a      	ldrh	r2, [r7, #0]
 80019f4:	2301      	movs	r3, #1
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	2301      	movs	r3, #1
 80019fa:	f7ff fdad 	bl	8001558 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//6
 80019fe:	89fa      	ldrh	r2, [r7, #14]
 8001a00:	88fb      	ldrh	r3, [r7, #6]
 8001a02:	4413      	add	r3, r2
 8001a04:	b298      	uxth	r0, r3
 8001a06:	893b      	ldrh	r3, [r7, #8]
 8001a08:	88ba      	ldrh	r2, [r7, #4]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	b299      	uxth	r1, r3
 8001a0e:	883a      	ldrh	r2, [r7, #0]
 8001a10:	2301      	movs	r3, #1
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	2301      	movs	r3, #1
 8001a16:	f7ff fd9f 	bl	8001558 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//7
 8001a1a:	893a      	ldrh	r2, [r7, #8]
 8001a1c:	88fb      	ldrh	r3, [r7, #6]
 8001a1e:	4413      	add	r3, r2
 8001a20:	b298      	uxth	r0, r3
 8001a22:	89fb      	ldrh	r3, [r7, #14]
 8001a24:	88ba      	ldrh	r2, [r7, #4]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	b299      	uxth	r1, r3
 8001a2a:	883a      	ldrh	r2, [r7, #0]
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	2301      	movs	r3, #1
 8001a32:	f7ff fd91 	bl	8001558 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 8001a36:	893a      	ldrh	r2, [r7, #8]
 8001a38:	88fb      	ldrh	r3, [r7, #6]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	b298      	uxth	r0, r3
 8001a3e:	89fa      	ldrh	r2, [r7, #14]
 8001a40:	88bb      	ldrh	r3, [r7, #4]
 8001a42:	4413      	add	r3, r2
 8001a44:	b299      	uxth	r1, r3
 8001a46:	883a      	ldrh	r2, [r7, #0]
 8001a48:	2301      	movs	r3, #1
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	f7ff fd83 	bl	8001558 <Paint_DrawPoint>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 8001a52:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	3301      	adds	r3, #1
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	813b      	strh	r3, [r7, #8]
 8001a5e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001a62:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	dd83      	ble.n	8001972 <Paint_DrawCircle+0x62>
            }
            if (Esp < 0 )
 8001a6a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	da09      	bge.n	8001a86 <Paint_DrawCircle+0x176>
                Esp += 4 * XCurrent + 6;
 8001a72:	89fb      	ldrh	r3, [r7, #14]
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	897b      	ldrh	r3, [r7, #10]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	3306      	adds	r3, #6
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	817b      	strh	r3, [r7, #10]
 8001a84:	e013      	b.n	8001aae <Paint_DrawCircle+0x19e>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 8001a86:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001a8a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	897b      	ldrh	r3, [r7, #10]
 8001a98:	4413      	add	r3, r2
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	330a      	adds	r3, #10
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 8001aa2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 8001aae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) { //Realistic circles
 8001aba:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001abe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	f77f af52 	ble.w	800196c <Paint_DrawCircle+0x5c>
 8001ac8:	e0ab      	b.n	8001c22 <Paint_DrawCircle+0x312>
 8001aca:	bf00      	nop
 8001acc:	240000b8 	.word	0x240000b8
 8001ad0:	0800a0d4 	.word	0x0800a0d4
        }
    } else { //Draw a hollow circle
        while (XCurrent <= YCurrent ) {
            Paint_DrawPoint(X_Center + XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//1
 8001ad4:	89fa      	ldrh	r2, [r7, #14]
 8001ad6:	88fb      	ldrh	r3, [r7, #6]
 8001ad8:	4413      	add	r3, r2
 8001ada:	b298      	uxth	r0, r3
 8001adc:	89ba      	ldrh	r2, [r7, #12]
 8001ade:	88bb      	ldrh	r3, [r7, #4]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	b299      	uxth	r1, r3
 8001ae4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ae8:	883a      	ldrh	r2, [r7, #0]
 8001aea:	2401      	movs	r4, #1
 8001aec:	9400      	str	r4, [sp, #0]
 8001aee:	f7ff fd33 	bl	8001558 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//2
 8001af2:	89fb      	ldrh	r3, [r7, #14]
 8001af4:	88fa      	ldrh	r2, [r7, #6]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	b298      	uxth	r0, r3
 8001afa:	89ba      	ldrh	r2, [r7, #12]
 8001afc:	88bb      	ldrh	r3, [r7, #4]
 8001afe:	4413      	add	r3, r2
 8001b00:	b299      	uxth	r1, r3
 8001b02:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b06:	883a      	ldrh	r2, [r7, #0]
 8001b08:	2401      	movs	r4, #1
 8001b0a:	9400      	str	r4, [sp, #0]
 8001b0c:	f7ff fd24 	bl	8001558 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//3
 8001b10:	89bb      	ldrh	r3, [r7, #12]
 8001b12:	88fa      	ldrh	r2, [r7, #6]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	b298      	uxth	r0, r3
 8001b18:	89fa      	ldrh	r2, [r7, #14]
 8001b1a:	88bb      	ldrh	r3, [r7, #4]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	b299      	uxth	r1, r3
 8001b20:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b24:	883a      	ldrh	r2, [r7, #0]
 8001b26:	2401      	movs	r4, #1
 8001b28:	9400      	str	r4, [sp, #0]
 8001b2a:	f7ff fd15 	bl	8001558 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//4
 8001b2e:	89bb      	ldrh	r3, [r7, #12]
 8001b30:	88fa      	ldrh	r2, [r7, #6]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	b298      	uxth	r0, r3
 8001b36:	89fb      	ldrh	r3, [r7, #14]
 8001b38:	88ba      	ldrh	r2, [r7, #4]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	b299      	uxth	r1, r3
 8001b3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b42:	883a      	ldrh	r2, [r7, #0]
 8001b44:	2401      	movs	r4, #1
 8001b46:	9400      	str	r4, [sp, #0]
 8001b48:	f7ff fd06 	bl	8001558 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//5
 8001b4c:	89fb      	ldrh	r3, [r7, #14]
 8001b4e:	88fa      	ldrh	r2, [r7, #6]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	b298      	uxth	r0, r3
 8001b54:	89bb      	ldrh	r3, [r7, #12]
 8001b56:	88ba      	ldrh	r2, [r7, #4]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	b299      	uxth	r1, r3
 8001b5c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b60:	883a      	ldrh	r2, [r7, #0]
 8001b62:	2401      	movs	r4, #1
 8001b64:	9400      	str	r4, [sp, #0]
 8001b66:	f7ff fcf7 	bl	8001558 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//6
 8001b6a:	89fa      	ldrh	r2, [r7, #14]
 8001b6c:	88fb      	ldrh	r3, [r7, #6]
 8001b6e:	4413      	add	r3, r2
 8001b70:	b298      	uxth	r0, r3
 8001b72:	89bb      	ldrh	r3, [r7, #12]
 8001b74:	88ba      	ldrh	r2, [r7, #4]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	b299      	uxth	r1, r3
 8001b7a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b7e:	883a      	ldrh	r2, [r7, #0]
 8001b80:	2401      	movs	r4, #1
 8001b82:	9400      	str	r4, [sp, #0]
 8001b84:	f7ff fce8 	bl	8001558 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//7
 8001b88:	89ba      	ldrh	r2, [r7, #12]
 8001b8a:	88fb      	ldrh	r3, [r7, #6]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	b298      	uxth	r0, r3
 8001b90:	89fb      	ldrh	r3, [r7, #14]
 8001b92:	88ba      	ldrh	r2, [r7, #4]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	b299      	uxth	r1, r3
 8001b98:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b9c:	883a      	ldrh	r2, [r7, #0]
 8001b9e:	2401      	movs	r4, #1
 8001ba0:	9400      	str	r4, [sp, #0]
 8001ba2:	f7ff fcd9 	bl	8001558 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//0
 8001ba6:	89ba      	ldrh	r2, [r7, #12]
 8001ba8:	88fb      	ldrh	r3, [r7, #6]
 8001baa:	4413      	add	r3, r2
 8001bac:	b298      	uxth	r0, r3
 8001bae:	89fa      	ldrh	r2, [r7, #14]
 8001bb0:	88bb      	ldrh	r3, [r7, #4]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	b299      	uxth	r1, r3
 8001bb6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001bba:	883a      	ldrh	r2, [r7, #0]
 8001bbc:	2401      	movs	r4, #1
 8001bbe:	9400      	str	r4, [sp, #0]
 8001bc0:	f7ff fcca 	bl	8001558 <Paint_DrawPoint>

            if (Esp < 0 )
 8001bc4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	da09      	bge.n	8001be0 <Paint_DrawCircle+0x2d0>
                Esp += 4 * XCurrent + 6;
 8001bcc:	89fb      	ldrh	r3, [r7, #14]
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	897b      	ldrh	r3, [r7, #10]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	3306      	adds	r3, #6
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	817b      	strh	r3, [r7, #10]
 8001bde:	e013      	b.n	8001c08 <Paint_DrawCircle+0x2f8>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 8001be0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001be4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	897b      	ldrh	r3, [r7, #10]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	330a      	adds	r3, #10
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 8001bfc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	3b01      	subs	r3, #1
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 8001c08:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	3301      	adds	r3, #1
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) {
 8001c14:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001c18:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	f77f af59 	ble.w	8001ad4 <Paint_DrawCircle+0x1c4>
        }
    }
}
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd90      	pop	{r4, r7, pc}

08001c28 <Paint_DrawChar>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b088      	sub	sp, #32
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	607b      	str	r3, [r7, #4]
 8001c30:	4603      	mov	r3, r0
 8001c32:	81fb      	strh	r3, [r7, #14]
 8001c34:	460b      	mov	r3, r1
 8001c36:	81bb      	strh	r3, [r7, #12]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8001c3c:	4b4c      	ldr	r3, [pc, #304]	@ (8001d70 <Paint_DrawChar+0x148>)
 8001c3e:	889b      	ldrh	r3, [r3, #4]
 8001c40:	89fa      	ldrh	r2, [r7, #14]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d804      	bhi.n	8001c50 <Paint_DrawChar+0x28>
 8001c46:	4b4a      	ldr	r3, [pc, #296]	@ (8001d70 <Paint_DrawChar+0x148>)
 8001c48:	88db      	ldrh	r3, [r3, #6]
 8001c4a:	89ba      	ldrh	r2, [r7, #12]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d903      	bls.n	8001c58 <Paint_DrawChar+0x30>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 8001c50:	4848      	ldr	r0, [pc, #288]	@ (8001d74 <Paint_DrawChar+0x14c>)
 8001c52:	f007 fb3b 	bl	80092cc <puts>
        return;
 8001c56:	e087      	b.n	8001d68 <Paint_DrawChar+0x140>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8001c58:	7afb      	ldrb	r3, [r7, #11]
 8001c5a:	3b20      	subs	r3, #32
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	88d2      	ldrh	r2, [r2, #6]
 8001c60:	fb02 f303 	mul.w	r3, r2, r3
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	8892      	ldrh	r2, [r2, #4]
 8001c68:	08d2      	lsrs	r2, r2, #3
 8001c6a:	b292      	uxth	r2, r2
 8001c6c:	4611      	mov	r1, r2
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	8892      	ldrh	r2, [r2, #4]
 8001c72:	f002 0207 	and.w	r2, r2, #7
 8001c76:	b292      	uxth	r2, r2
 8001c78:	2a00      	cmp	r2, #0
 8001c7a:	bf14      	ite	ne
 8001c7c:	2201      	movne	r2, #1
 8001c7e:	2200      	moveq	r2, #0
 8001c80:	b2d2      	uxtb	r2, r2
 8001c82:	440a      	add	r2, r1
 8001c84:	fb02 f303 	mul.w	r3, r2, r3
 8001c88:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	4413      	add	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 8001c94:	2300      	movs	r3, #0
 8001c96:	83fb      	strh	r3, [r7, #30]
 8001c98:	e061      	b.n	8001d5e <Paint_DrawChar+0x136>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	83bb      	strh	r3, [r7, #28]
 8001c9e:	e04c      	b.n	8001d3a <Paint_DrawChar+0x112>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8001ca0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001ca2:	2bff      	cmp	r3, #255	@ 0xff
 8001ca4:	d118      	bne.n	8001cd8 <Paint_DrawChar+0xb0>
                if (*ptr & (0x80 >> (Column % 8)))
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	4619      	mov	r1, r3
 8001cac:	8bbb      	ldrh	r3, [r7, #28]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	2280      	movs	r2, #128	@ 0x80
 8001cb4:	fa42 f303 	asr.w	r3, r2, r3
 8001cb8:	400b      	ands	r3, r1
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d031      	beq.n	8001d22 <Paint_DrawChar+0xfa>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8001cbe:	89fa      	ldrh	r2, [r7, #14]
 8001cc0:	8bbb      	ldrh	r3, [r7, #28]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	b298      	uxth	r0, r3
 8001cc6:	89ba      	ldrh	r2, [r7, #12]
 8001cc8:	8bfb      	ldrh	r3, [r7, #30]
 8001cca:	4413      	add	r3, r2
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f7ff fa4d 	bl	8001170 <Paint_SetPixel>
 8001cd6:	e024      	b.n	8001d22 <Paint_DrawChar+0xfa>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	4619      	mov	r1, r3
 8001cde:	8bbb      	ldrh	r3, [r7, #28]
 8001ce0:	f003 0307 	and.w	r3, r3, #7
 8001ce4:	2280      	movs	r2, #128	@ 0x80
 8001ce6:	fa42 f303 	asr.w	r3, r2, r3
 8001cea:	400b      	ands	r3, r1
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d00c      	beq.n	8001d0a <Paint_DrawChar+0xe2>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8001cf0:	89fa      	ldrh	r2, [r7, #14]
 8001cf2:	8bbb      	ldrh	r3, [r7, #28]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	b298      	uxth	r0, r3
 8001cf8:	89ba      	ldrh	r2, [r7, #12]
 8001cfa:	8bfb      	ldrh	r3, [r7, #30]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001d02:	4619      	mov	r1, r3
 8001d04:	f7ff fa34 	bl	8001170 <Paint_SetPixel>
 8001d08:	e00b      	b.n	8001d22 <Paint_DrawChar+0xfa>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8001d0a:	89fa      	ldrh	r2, [r7, #14]
 8001d0c:	8bbb      	ldrh	r3, [r7, #28]
 8001d0e:	4413      	add	r3, r2
 8001d10:	b298      	uxth	r0, r3
 8001d12:	89ba      	ldrh	r2, [r7, #12]
 8001d14:	8bfb      	ldrh	r3, [r7, #30]
 8001d16:	4413      	add	r3, r2
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	f7ff fa27 	bl	8001170 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8001d22:	8bbb      	ldrh	r3, [r7, #28]
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	2b07      	cmp	r3, #7
 8001d2c:	d102      	bne.n	8001d34 <Paint_DrawChar+0x10c>
                ptr++;
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	3301      	adds	r3, #1
 8001d32:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8001d34:	8bbb      	ldrh	r3, [r7, #28]
 8001d36:	3301      	adds	r3, #1
 8001d38:	83bb      	strh	r3, [r7, #28]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	889b      	ldrh	r3, [r3, #4]
 8001d3e:	8bba      	ldrh	r2, [r7, #28]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d3ad      	bcc.n	8001ca0 <Paint_DrawChar+0x78>
        }// Write a line
        if (Font->Width % 8 != 0)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	889b      	ldrh	r3, [r3, #4]
 8001d48:	f003 0307 	and.w	r3, r3, #7
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d002      	beq.n	8001d58 <Paint_DrawChar+0x130>
            ptr++;
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	3301      	adds	r3, #1
 8001d56:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8001d58:	8bfb      	ldrh	r3, [r7, #30]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	83fb      	strh	r3, [r7, #30]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	88db      	ldrh	r3, [r3, #6]
 8001d62:	8bfa      	ldrh	r2, [r7, #30]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d398      	bcc.n	8001c9a <Paint_DrawChar+0x72>
    }// Write all
}
 8001d68:	3720      	adds	r7, #32
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	240000b8 	.word	0x240000b8
 8001d74:	0800a114 	.word	0x0800a114

08001d78 <Paint_DrawString_EN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b088      	sub	sp, #32
 8001d7c:	af02      	add	r7, sp, #8
 8001d7e:	60ba      	str	r2, [r7, #8]
 8001d80:	607b      	str	r3, [r7, #4]
 8001d82:	4603      	mov	r3, r0
 8001d84:	81fb      	strh	r3, [r7, #14]
 8001d86:	460b      	mov	r3, r1
 8001d88:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 8001d8a:	89fb      	ldrh	r3, [r7, #14]
 8001d8c:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 8001d8e:	89bb      	ldrh	r3, [r7, #12]
 8001d90:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 8001d92:	4b21      	ldr	r3, [pc, #132]	@ (8001e18 <Paint_DrawString_EN+0xa0>)
 8001d94:	889b      	ldrh	r3, [r3, #4]
 8001d96:	89fa      	ldrh	r2, [r7, #14]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d804      	bhi.n	8001da6 <Paint_DrawString_EN+0x2e>
 8001d9c:	4b1e      	ldr	r3, [pc, #120]	@ (8001e18 <Paint_DrawString_EN+0xa0>)
 8001d9e:	88db      	ldrh	r3, [r3, #6]
 8001da0:	89ba      	ldrh	r2, [r7, #12]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d931      	bls.n	8001e0a <Paint_DrawString_EN+0x92>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 8001da6:	481d      	ldr	r0, [pc, #116]	@ (8001e1c <Paint_DrawString_EN+0xa4>)
 8001da8:	f007 fa90 	bl	80092cc <puts>
        return;
 8001dac:	e031      	b.n	8001e12 <Paint_DrawString_EN+0x9a>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 8001dae:	8afb      	ldrh	r3, [r7, #22]
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	8892      	ldrh	r2, [r2, #4]
 8001db4:	4413      	add	r3, r2
 8001db6:	4a18      	ldr	r2, [pc, #96]	@ (8001e18 <Paint_DrawString_EN+0xa0>)
 8001db8:	8892      	ldrh	r2, [r2, #4]
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	dd06      	ble.n	8001dcc <Paint_DrawString_EN+0x54>
            Xpoint = Xstart;
 8001dbe:	89fb      	ldrh	r3, [r7, #14]
 8001dc0:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	88da      	ldrh	r2, [r3, #6]
 8001dc6:	8abb      	ldrh	r3, [r7, #20]
 8001dc8:	4413      	add	r3, r2
 8001dca:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 8001dcc:	8abb      	ldrh	r3, [r7, #20]
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	88d2      	ldrh	r2, [r2, #6]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	4a10      	ldr	r2, [pc, #64]	@ (8001e18 <Paint_DrawString_EN+0xa0>)
 8001dd6:	88d2      	ldrh	r2, [r2, #6]
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	dd03      	ble.n	8001de4 <Paint_DrawString_EN+0x6c>
            Xpoint = Xstart;
 8001ddc:	89fb      	ldrh	r3, [r7, #14]
 8001dde:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8001de0:	89bb      	ldrh	r3, [r7, #12]
 8001de2:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	781a      	ldrb	r2, [r3, #0]
 8001de8:	8ab9      	ldrh	r1, [r7, #20]
 8001dea:	8af8      	ldrh	r0, [r7, #22]
 8001dec:	8c3b      	ldrh	r3, [r7, #32]
 8001dee:	9301      	str	r3, [sp, #4]
 8001df0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f7ff ff17 	bl	8001c28 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	889a      	ldrh	r2, [r3, #4]
 8001e04:	8afb      	ldrh	r3, [r7, #22]
 8001e06:	4413      	add	r3, r2
 8001e08:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1cd      	bne.n	8001dae <Paint_DrawString_EN+0x36>
    }
}
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	240000b8 	.word	0x240000b8
 8001e1c:	0800a154 	.word	0x0800a154

08001e20 <Paint_DrawString_CN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_CN(UWORD Xstart, UWORD Ystart, const char * pString, cFONT* font,
                        UWORD Color_Foreground, UWORD Color_Background)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08c      	sub	sp, #48	@ 0x30
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60ba      	str	r2, [r7, #8]
 8001e28:	607b      	str	r3, [r7, #4]
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	81fb      	strh	r3, [r7, #14]
 8001e2e:	460b      	mov	r3, r1
 8001e30:	81bb      	strh	r3, [r7, #12]
    const char* p_text = pString;
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int x = Xstart, y = Ystart;
 8001e36:	89fb      	ldrh	r3, [r7, #14]
 8001e38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e3a:	89bb      	ldrh	r3, [r7, #12]
 8001e3c:	613b      	str	r3, [r7, #16]
    int i, j,Num;

    /* Send the string character by character on EPD */
    while (*p_text != 0) {
 8001e3e:	e166      	b.n	800210e <Paint_DrawString_CN+0x2ee>
        if(*p_text <= 0x7F) {  //ASCII < 126
 8001e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	b25b      	sxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f2c0 80aa 	blt.w	8001fa0 <Paint_DrawString_CN+0x180>
            for(Num = 0; Num < font->size; Num++) {
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	61fb      	str	r3, [r7, #28]
 8001e50:	e095      	b.n	8001f7e <Paint_DrawString_CN+0x15e>
                if(*p_text== font->table[Num].index[0]) {
 8001e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e54:	781a      	ldrb	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6819      	ldr	r1, [r3, #0]
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	20a6      	movs	r0, #166	@ 0xa6
 8001e5e:	fb00 f303 	mul.w	r3, r0, r3
 8001e62:	440b      	add	r3, r1
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	f040 8086 	bne.w	8001f78 <Paint_DrawString_CN+0x158>
                    const char* ptr = &font->table[Num].matrix[0];
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	21a6      	movs	r1, #166	@ 0xa6
 8001e74:	fb01 f303 	mul.w	r3, r1, r3
 8001e78:	4413      	add	r3, r2
 8001e7a:	3302      	adds	r3, #2
 8001e7c:	61bb      	str	r3, [r7, #24]

                    for (j = 0; j < font->Height; j++) {
 8001e7e:	2300      	movs	r3, #0
 8001e80:	623b      	str	r3, [r7, #32]
 8001e82:	e072      	b.n	8001f6a <Paint_DrawString_CN+0x14a>
                        for (i = 0; i < font->Width; i++) {
 8001e84:	2300      	movs	r3, #0
 8001e86:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e88:	e05c      	b.n	8001f44 <Paint_DrawString_CN+0x124>
                            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8001e8a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001e8c:	2bff      	cmp	r3, #255	@ 0xff
 8001e8e:	d11c      	bne.n	8001eca <Paint_DrawString_CN+0xaa>
                                if (*ptr & (0x80 >> (i % 8))) {
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	4619      	mov	r1, r3
 8001e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	2280      	movs	r2, #128	@ 0x80
 8001e9e:	fa42 f303 	asr.w	r3, r2, r3
 8001ea2:	400b      	ands	r3, r1
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d03d      	beq.n	8001f24 <Paint_DrawString_CN+0x104>
                                    Paint_SetPixel(x + i, y + j, Color_Foreground);
 8001ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	4413      	add	r3, r2
 8001eb2:	b298      	uxth	r0, r3
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	6a3b      	ldr	r3, [r7, #32]
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	4413      	add	r3, r2
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	f7ff f954 	bl	8001170 <Paint_SetPixel>
 8001ec8:	e02c      	b.n	8001f24 <Paint_DrawString_CN+0x104>
                                    // Paint_DrawPoint(x + i, y + j, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                }
                            } else {
                                if (*ptr & (0x80 >> (i % 8))) {
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	4619      	mov	r1, r3
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	2280      	movs	r2, #128	@ 0x80
 8001ed8:	fa42 f303 	asr.w	r3, r2, r3
 8001edc:	400b      	ands	r3, r1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d010      	beq.n	8001f04 <Paint_DrawString_CN+0xe4>
                                    Paint_SetPixel(x + i, y + j, Color_Foreground);
 8001ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	4413      	add	r3, r2
 8001eec:	b298      	uxth	r0, r3
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	6a3b      	ldr	r3, [r7, #32]
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	4413      	add	r3, r2
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8001efc:	4619      	mov	r1, r3
 8001efe:	f7ff f937 	bl	8001170 <Paint_SetPixel>
 8001f02:	e00f      	b.n	8001f24 <Paint_DrawString_CN+0x104>
                                    // Paint_DrawPoint(x + i, y + j, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                } else {
                                    Paint_SetPixel(x + i, y + j, Color_Background);
 8001f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	4413      	add	r3, r2
 8001f0e:	b298      	uxth	r0, r3
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	6a3b      	ldr	r3, [r7, #32]
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	4413      	add	r3, r2
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8001f1e:	4619      	mov	r1, r3
 8001f20:	f7ff f926 	bl	8001170 <Paint_SetPixel>
                                    // Paint_DrawPoint(x + i, y + j, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                }
                            }
                            if (i % 8 == 7) {
 8001f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f26:	425a      	negs	r2, r3
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	f002 0207 	and.w	r2, r2, #7
 8001f30:	bf58      	it	pl
 8001f32:	4253      	negpl	r3, r2
 8001f34:	2b07      	cmp	r3, #7
 8001f36:	d102      	bne.n	8001f3e <Paint_DrawString_CN+0x11e>
                                ptr++;
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	61bb      	str	r3, [r7, #24]
                        for (i = 0; i < font->Width; i++) {
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f40:	3301      	adds	r3, #1
 8001f42:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	891b      	ldrh	r3, [r3, #8]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	db9c      	blt.n	8001e8a <Paint_DrawString_CN+0x6a>
                            }
                        }
                        if (font->Width % 8 != 0) {
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	891b      	ldrh	r3, [r3, #8]
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d002      	beq.n	8001f64 <Paint_DrawString_CN+0x144>
                            ptr++;
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	3301      	adds	r3, #1
 8001f62:	61bb      	str	r3, [r7, #24]
                    for (j = 0; j < font->Height; j++) {
 8001f64:	6a3b      	ldr	r3, [r7, #32]
 8001f66:	3301      	adds	r3, #1
 8001f68:	623b      	str	r3, [r7, #32]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	895b      	ldrh	r3, [r3, #10]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	6a3b      	ldr	r3, [r7, #32]
 8001f72:	4293      	cmp	r3, r2
 8001f74:	db86      	blt.n	8001e84 <Paint_DrawString_CN+0x64>
                        }
                    }
                    break;
 8001f76:	e009      	b.n	8001f8c <Paint_DrawString_CN+0x16c>
            for(Num = 0; Num < font->size; Num++) {
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	61fb      	str	r3, [r7, #28]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	889b      	ldrh	r3, [r3, #4]
 8001f82:	461a      	mov	r2, r3
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	4293      	cmp	r3, r2
 8001f88:	f6ff af63 	blt.w	8001e52 <Paint_DrawString_CN+0x32>
                }
            }
            /* Point on the next character */
            p_text += 1;
 8001f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f8e:	3301      	adds	r3, #1
 8001f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Decrement the column position by 16 */
            x += font->ASCII_Width;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	88db      	ldrh	r3, [r3, #6]
 8001f96:	461a      	mov	r2, r3
 8001f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f9a:	4413      	add	r3, r2
 8001f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f9e:	e0b6      	b.n	800210e <Paint_DrawString_CN+0x2ee>
        } else {        //Chinese
            for(Num = 0; Num < font->size; Num++) {
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61fb      	str	r3, [r7, #28]
 8001fa4:	e0a3      	b.n	80020ee <Paint_DrawString_CN+0x2ce>
                if((*p_text== font->table[Num].index[0]) && (*(p_text+1) == font->table[Num].index[1])) {
 8001fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fa8:	781a      	ldrb	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6819      	ldr	r1, [r3, #0]
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	20a6      	movs	r0, #166	@ 0xa6
 8001fb2:	fb00 f303 	mul.w	r3, r0, r3
 8001fb6:	440b      	add	r3, r1
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	f040 8094 	bne.w	80020e8 <Paint_DrawString_CN+0x2c8>
 8001fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	781a      	ldrb	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6819      	ldr	r1, [r3, #0]
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	20a6      	movs	r0, #166	@ 0xa6
 8001fce:	fb00 f303 	mul.w	r3, r0, r3
 8001fd2:	440b      	add	r3, r1
 8001fd4:	785b      	ldrb	r3, [r3, #1]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	f040 8086 	bne.w	80020e8 <Paint_DrawString_CN+0x2c8>
                    const char* ptr = &font->table[Num].matrix[0];
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	21a6      	movs	r1, #166	@ 0xa6
 8001fe4:	fb01 f303 	mul.w	r3, r1, r3
 8001fe8:	4413      	add	r3, r2
 8001fea:	3302      	adds	r3, #2
 8001fec:	617b      	str	r3, [r7, #20]

                    for (j = 0; j < font->Height; j++) {
 8001fee:	2300      	movs	r3, #0
 8001ff0:	623b      	str	r3, [r7, #32]
 8001ff2:	e072      	b.n	80020da <Paint_DrawString_CN+0x2ba>
                        for (i = 0; i < font->Width; i++) {
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ff8:	e05c      	b.n	80020b4 <Paint_DrawString_CN+0x294>
                            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8001ffa:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001ffc:	2bff      	cmp	r3, #255	@ 0xff
 8001ffe:	d11c      	bne.n	800203a <Paint_DrawString_CN+0x21a>
                                if (*ptr & (0x80 >> (i % 8))) {
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	4619      	mov	r1, r3
 8002006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	2280      	movs	r2, #128	@ 0x80
 800200e:	fa42 f303 	asr.w	r3, r2, r3
 8002012:	400b      	ands	r3, r1
 8002014:	2b00      	cmp	r3, #0
 8002016:	d03d      	beq.n	8002094 <Paint_DrawString_CN+0x274>
                                    Paint_SetPixel(x + i, y + j, Color_Foreground);
 8002018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800201a:	b29a      	uxth	r2, r3
 800201c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201e:	b29b      	uxth	r3, r3
 8002020:	4413      	add	r3, r2
 8002022:	b298      	uxth	r0, r3
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	b29a      	uxth	r2, r3
 8002028:	6a3b      	ldr	r3, [r7, #32]
 800202a:	b29b      	uxth	r3, r3
 800202c:	4413      	add	r3, r2
 800202e:	b29b      	uxth	r3, r3
 8002030:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8002032:	4619      	mov	r1, r3
 8002034:	f7ff f89c 	bl	8001170 <Paint_SetPixel>
 8002038:	e02c      	b.n	8002094 <Paint_DrawString_CN+0x274>
                                    // Paint_DrawPoint(x + i, y + j, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                }
                            } else {
                                if (*ptr & (0x80 >> (i % 8))) {
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	4619      	mov	r1, r3
 8002040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	2280      	movs	r2, #128	@ 0x80
 8002048:	fa42 f303 	asr.w	r3, r2, r3
 800204c:	400b      	ands	r3, r1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d010      	beq.n	8002074 <Paint_DrawString_CN+0x254>
                                    Paint_SetPixel(x + i, y + j, Color_Foreground);
 8002052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002054:	b29a      	uxth	r2, r3
 8002056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002058:	b29b      	uxth	r3, r3
 800205a:	4413      	add	r3, r2
 800205c:	b298      	uxth	r0, r3
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	b29a      	uxth	r2, r3
 8002062:	6a3b      	ldr	r3, [r7, #32]
 8002064:	b29b      	uxth	r3, r3
 8002066:	4413      	add	r3, r2
 8002068:	b29b      	uxth	r3, r3
 800206a:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800206c:	4619      	mov	r1, r3
 800206e:	f7ff f87f 	bl	8001170 <Paint_SetPixel>
 8002072:	e00f      	b.n	8002094 <Paint_DrawString_CN+0x274>
                                    // Paint_DrawPoint(x + i, y + j, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                } else {
                                    Paint_SetPixel(x + i, y + j, Color_Background);
 8002074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002076:	b29a      	uxth	r2, r3
 8002078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207a:	b29b      	uxth	r3, r3
 800207c:	4413      	add	r3, r2
 800207e:	b298      	uxth	r0, r3
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	b29a      	uxth	r2, r3
 8002084:	6a3b      	ldr	r3, [r7, #32]
 8002086:	b29b      	uxth	r3, r3
 8002088:	4413      	add	r3, r2
 800208a:	b29b      	uxth	r3, r3
 800208c:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800208e:	4619      	mov	r1, r3
 8002090:	f7ff f86e 	bl	8001170 <Paint_SetPixel>
                                    // Paint_DrawPoint(x + i, y + j, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                }
                            }
                            if (i % 8 == 7) {
 8002094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002096:	425a      	negs	r2, r3
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	f002 0207 	and.w	r2, r2, #7
 80020a0:	bf58      	it	pl
 80020a2:	4253      	negpl	r3, r2
 80020a4:	2b07      	cmp	r3, #7
 80020a6:	d102      	bne.n	80020ae <Paint_DrawString_CN+0x28e>
                                ptr++;
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	3301      	adds	r3, #1
 80020ac:	617b      	str	r3, [r7, #20]
                        for (i = 0; i < font->Width; i++) {
 80020ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b0:	3301      	adds	r3, #1
 80020b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	891b      	ldrh	r3, [r3, #8]
 80020b8:	461a      	mov	r2, r3
 80020ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020bc:	4293      	cmp	r3, r2
 80020be:	db9c      	blt.n	8001ffa <Paint_DrawString_CN+0x1da>
                            }
                        }
                        if (font->Width % 8 != 0) {
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	891b      	ldrh	r3, [r3, #8]
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d002      	beq.n	80020d4 <Paint_DrawString_CN+0x2b4>
                            ptr++;
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	3301      	adds	r3, #1
 80020d2:	617b      	str	r3, [r7, #20]
                    for (j = 0; j < font->Height; j++) {
 80020d4:	6a3b      	ldr	r3, [r7, #32]
 80020d6:	3301      	adds	r3, #1
 80020d8:	623b      	str	r3, [r7, #32]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	895b      	ldrh	r3, [r3, #10]
 80020de:	461a      	mov	r2, r3
 80020e0:	6a3b      	ldr	r3, [r7, #32]
 80020e2:	4293      	cmp	r3, r2
 80020e4:	db86      	blt.n	8001ff4 <Paint_DrawString_CN+0x1d4>
                        }
                    }
                    break;
 80020e6:	e009      	b.n	80020fc <Paint_DrawString_CN+0x2dc>
            for(Num = 0; Num < font->size; Num++) {
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	3301      	adds	r3, #1
 80020ec:	61fb      	str	r3, [r7, #28]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	889b      	ldrh	r3, [r3, #4]
 80020f2:	461a      	mov	r2, r3
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	4293      	cmp	r3, r2
 80020f8:	f6ff af55 	blt.w	8001fa6 <Paint_DrawString_CN+0x186>
                }
            }
            /* Point on the next character */
            p_text += 2;
 80020fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020fe:	3302      	adds	r3, #2
 8002100:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Decrement the column position by 16 */
            x += font->Width;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	891b      	ldrh	r3, [r3, #8]
 8002106:	461a      	mov	r2, r3
 8002108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800210a:	4413      	add	r3, r2
 800210c:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (*p_text != 0) {
 800210e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	2b00      	cmp	r3, #0
 8002114:	f47f ae94 	bne.w	8001e40 <Paint_DrawString_CN+0x20>
        }
    }
}
 8002118:	bf00      	nop
 800211a:	bf00      	nop
 800211c:	3730      	adds	r7, #48	@ 0x30
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <Paint_DrawNum>:
    Color_Background : Select the background color
******************************************************************************/
#define  ARRAY_LEN 255
void Paint_DrawNum(UWORD Xpoint, UWORD Ypoint, int32_t Nummber,
                   sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 8002124:	b590      	push	{r4, r7, lr}
 8002126:	f5ad 7d09 	sub.w	sp, sp, #548	@ 0x224
 800212a:	af02      	add	r7, sp, #8
 800212c:	4604      	mov	r4, r0
 800212e:	4608      	mov	r0, r1
 8002130:	f507 7106 	add.w	r1, r7, #536	@ 0x218
 8002134:	f5a1 7104 	sub.w	r1, r1, #528	@ 0x210
 8002138:	600a      	str	r2, [r1, #0]
 800213a:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800213e:	f5a2 7205 	sub.w	r2, r2, #532	@ 0x214
 8002142:	6013      	str	r3, [r2, #0]
 8002144:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002148:	f2a3 230a 	subw	r3, r3, #522	@ 0x20a
 800214c:	4622      	mov	r2, r4
 800214e:	801a      	strh	r2, [r3, #0]
 8002150:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002154:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002158:	4602      	mov	r2, r0
 800215a:	801a      	strh	r2, [r3, #0]

    int16_t Num_Bit = 0, Str_Bit = 0;
 800215c:	2300      	movs	r3, #0
 800215e:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
 8002162:	2300      	movs	r3, #0
 8002164:	f8a7 3214 	strh.w	r3, [r7, #532]	@ 0x214
    uint8_t Str_Array[ARRAY_LEN] = {0}, Num_Array[ARRAY_LEN] = {0};
 8002168:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800216c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	3304      	adds	r3, #4
 8002176:	22fb      	movs	r2, #251	@ 0xfb
 8002178:	2100      	movs	r1, #0
 800217a:	4618      	mov	r0, r3
 800217c:	f007 f986 	bl	800948c <memset>
 8002180:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002184:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	3304      	adds	r3, #4
 800218e:	22fb      	movs	r2, #251	@ 0xfb
 8002190:	2100      	movs	r1, #0
 8002192:	4618      	mov	r0, r3
 8002194:	f007 f97a 	bl	800948c <memset>
    uint8_t *pStr = Str_Array;
 8002198:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800219c:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 80021a0:	4b46      	ldr	r3, [pc, #280]	@ (80022bc <Paint_DrawNum+0x198>)
 80021a2:	889b      	ldrh	r3, [r3, #4]
 80021a4:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80021a8:	f2a2 220a 	subw	r2, r2, #522	@ 0x20a
 80021ac:	8812      	ldrh	r2, [r2, #0]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d808      	bhi.n	80021c4 <Paint_DrawNum+0xa0>
 80021b2:	4b42      	ldr	r3, [pc, #264]	@ (80022bc <Paint_DrawNum+0x198>)
 80021b4:	88db      	ldrh	r3, [r3, #6]
 80021b6:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80021ba:	f5a2 7203 	sub.w	r2, r2, #524	@ 0x20c
 80021be:	8812      	ldrh	r2, [r2, #0]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d903      	bls.n	80021cc <Paint_DrawNum+0xa8>
        Debug("Paint_DisNum Input exceeds the normal display range\r\n");
 80021c4:	483e      	ldr	r0, [pc, #248]	@ (80022c0 <Paint_DrawNum+0x19c>)
 80021c6:	f007 f881 	bl	80092cc <puts>
 80021ca:	e072      	b.n	80022b2 <Paint_DrawNum+0x18e>
        return;
    }

    //Converts a number to a string
    do {
        Num_Array[Num_Bit] = Nummber % 10 + '0';
 80021cc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80021d0:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	4b3b      	ldr	r3, [pc, #236]	@ (80022c4 <Paint_DrawNum+0x1a0>)
 80021d8:	fb83 1302 	smull	r1, r3, r3, r2
 80021dc:	1099      	asrs	r1, r3, #2
 80021de:	17d3      	asrs	r3, r2, #31
 80021e0:	1ac9      	subs	r1, r1, r3
 80021e2:	460b      	mov	r3, r1
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	440b      	add	r3, r1
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	1ad1      	subs	r1, r2, r3
 80021ec:	b2ca      	uxtb	r2, r1
 80021ee:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	@ 0x216
 80021f2:	3230      	adds	r2, #48	@ 0x30
 80021f4:	b2d1      	uxtb	r1, r2
 80021f6:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80021fa:	f5a2 7202 	sub.w	r2, r2, #520	@ 0x208
 80021fe:	54d1      	strb	r1, [r2, r3]
        Num_Bit++;
 8002200:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	@ 0x216
 8002204:	b29b      	uxth	r3, r3
 8002206:	3301      	adds	r3, #1
 8002208:	b29b      	uxth	r3, r3
 800220a:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
        Nummber /= 10;
 800220e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002212:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8002216:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800221a:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4928      	ldr	r1, [pc, #160]	@ (80022c4 <Paint_DrawNum+0x1a0>)
 8002222:	fb81 0103 	smull	r0, r1, r1, r3
 8002226:	1089      	asrs	r1, r1, #2
 8002228:	17db      	asrs	r3, r3, #31
 800222a:	1acb      	subs	r3, r1, r3
 800222c:	6013      	str	r3, [r2, #0]
    } while(Nummber);
 800222e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002232:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1c7      	bne.n	80021cc <Paint_DrawNum+0xa8>
    

    //The string is inverted
    while (Num_Bit > 0) {
 800223c:	e01c      	b.n	8002278 <Paint_DrawNum+0x154>
        Str_Array[Str_Bit] = Num_Array[Num_Bit - 1];
 800223e:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	@ 0x216
 8002242:	1e5a      	subs	r2, r3, #1
 8002244:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	@ 0x214
 8002248:	f507 7106 	add.w	r1, r7, #536	@ 0x218
 800224c:	f5a1 7102 	sub.w	r1, r1, #520	@ 0x208
 8002250:	5c89      	ldrb	r1, [r1, r2]
 8002252:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8002256:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800225a:	54d1      	strb	r1, [r2, r3]
        Str_Bit ++;
 800225c:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	@ 0x214
 8002260:	b29b      	uxth	r3, r3
 8002262:	3301      	adds	r3, #1
 8002264:	b29b      	uxth	r3, r3
 8002266:	f8a7 3214 	strh.w	r3, [r7, #532]	@ 0x214
        Num_Bit --;
 800226a:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	@ 0x216
 800226e:	b29b      	uxth	r3, r3
 8002270:	3b01      	subs	r3, #1
 8002272:	b29b      	uxth	r3, r3
 8002274:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    while (Num_Bit > 0) {
 8002278:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	@ 0x216
 800227c:	2b00      	cmp	r3, #0
 800227e:	dcde      	bgt.n	800223e <Paint_DrawNum+0x11a>
    }

    //show
    Paint_DrawString_EN(Xpoint, Ypoint, (const char*)pStr, Font, Color_Background, Color_Foreground);
 8002280:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002284:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8002288:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800228c:	f5a2 7203 	sub.w	r2, r2, #524	@ 0x20c
 8002290:	8811      	ldrh	r1, [r2, #0]
 8002292:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8002296:	f2a2 220a 	subw	r2, r2, #522	@ 0x20a
 800229a:	8810      	ldrh	r0, [r2, #0]
 800229c:	f8b7 2228 	ldrh.w	r2, [r7, #552]	@ 0x228
 80022a0:	9201      	str	r2, [sp, #4]
 80022a2:	f8b7 222c 	ldrh.w	r2, [r7, #556]	@ 0x22c
 80022a6:	9200      	str	r2, [sp, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 80022ae:	f7ff fd63 	bl	8001d78 <Paint_DrawString_EN>
}
 80022b2:	f507 7707 	add.w	r7, r7, #540	@ 0x21c
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd90      	pop	{r4, r7, pc}
 80022ba:	bf00      	nop
 80022bc:	240000b8 	.word	0x240000b8
 80022c0:	0800a198 	.word	0x0800a198
 80022c4:	66666667 	.word	0x66666667

080022c8 <Paint_DrawBitMap>:
info:
    Use a computer to convert the image into a corresponding array,
    and then embed the array directly into Imagedata.cpp as a .c file.
******************************************************************************/
void Paint_DrawBitMap(const unsigned char* image_buffer)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
    UWORD x, y;
    UDOUBLE Addr = 0;
 80022d0:	2300      	movs	r3, #0
 80022d2:	60bb      	str	r3, [r7, #8]

    for (y = 0; y < Paint.HeightByte; y++) {
 80022d4:	2300      	movs	r3, #0
 80022d6:	81bb      	strh	r3, [r7, #12]
 80022d8:	e01e      	b.n	8002318 <Paint_DrawBitMap+0x50>
        for (x = 0; x < Paint.WidthByte; x++) {//8 pixel =  1 byte
 80022da:	2300      	movs	r3, #0
 80022dc:	81fb      	strh	r3, [r7, #14]
 80022de:	e013      	b.n	8002308 <Paint_DrawBitMap+0x40>
            Addr = x + y * Paint.WidthByte;
 80022e0:	89fa      	ldrh	r2, [r7, #14]
 80022e2:	89bb      	ldrh	r3, [r7, #12]
 80022e4:	4912      	ldr	r1, [pc, #72]	@ (8002330 <Paint_DrawBitMap+0x68>)
 80022e6:	8a49      	ldrh	r1, [r1, #18]
 80022e8:	fb01 f303 	mul.w	r3, r1, r3
 80022ec:	4413      	add	r3, r2
 80022ee:	60bb      	str	r3, [r7, #8]
            Paint.Image[Addr] = (unsigned char)image_buffer[Addr];
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	441a      	add	r2, r3
 80022f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002330 <Paint_DrawBitMap+0x68>)
 80022f8:	6819      	ldr	r1, [r3, #0]
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	440b      	add	r3, r1
 80022fe:	7812      	ldrb	r2, [r2, #0]
 8002300:	701a      	strb	r2, [r3, #0]
        for (x = 0; x < Paint.WidthByte; x++) {//8 pixel =  1 byte
 8002302:	89fb      	ldrh	r3, [r7, #14]
 8002304:	3301      	adds	r3, #1
 8002306:	81fb      	strh	r3, [r7, #14]
 8002308:	4b09      	ldr	r3, [pc, #36]	@ (8002330 <Paint_DrawBitMap+0x68>)
 800230a:	8a5b      	ldrh	r3, [r3, #18]
 800230c:	89fa      	ldrh	r2, [r7, #14]
 800230e:	429a      	cmp	r2, r3
 8002310:	d3e6      	bcc.n	80022e0 <Paint_DrawBitMap+0x18>
    for (y = 0; y < Paint.HeightByte; y++) {
 8002312:	89bb      	ldrh	r3, [r7, #12]
 8002314:	3301      	adds	r3, #1
 8002316:	81bb      	strh	r3, [r7, #12]
 8002318:	4b05      	ldr	r3, [pc, #20]	@ (8002330 <Paint_DrawBitMap+0x68>)
 800231a:	8a9b      	ldrh	r3, [r3, #20]
 800231c:	89ba      	ldrh	r2, [r7, #12]
 800231e:	429a      	cmp	r2, r3
 8002320:	d3db      	bcc.n	80022da <Paint_DrawBitMap+0x12>
        }
    }
}
 8002322:	bf00      	nop
 8002324:	bf00      	nop
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	240000b8 	.word	0x240000b8

08002334 <__io_putchar>:
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart4, (uint8_t *)&ch, 1, 0xFFFF);
 800233c:	1d39      	adds	r1, r7, #4
 800233e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002342:	2201      	movs	r2, #1
 8002344:	4803      	ldr	r0, [pc, #12]	@ (8002354 <__io_putchar+0x20>)
 8002346:	f005 fbbb 	bl	8007ac0 <HAL_UART_Transmit>
  return ch;
 800234a:	687b      	ldr	r3, [r7, #4]
}
 800234c:	4618      	mov	r0, r3
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	240001a4 	.word	0x240001a4

08002358 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800235c:	f000 fd38 	bl	8002dd0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002360:	f001 f80e 	bl	8003380 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002364:	f000 f816 	bl	8002394 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002368:	f000 f9ba 	bl	80026e0 <MX_GPIO_Init>
  MX_TIM8_Init();
 800236c:	f000 f8dc 	bl	8002528 <MX_TIM8_Init>
  MX_UART4_Init();
 8002370:	f000 f96a 	bl	8002648 <MX_UART4_Init>
  MX_SPI2_Init();
 8002374:	f000 f87e 	bl	8002474 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  #ifdef __WE_ACT_STUDIO_VERSION
    _mainWeActStudio();
  #else
    _mainWaveShare();
 8002378:	f000 fa38 	bl	80027ec <_mainWaveShare>
      /*ITM_SendChar('a');
      ITM_SendChar('b');
      ITM_SendChar('c');
      ITM_SendChar('\n');*/

      HAL_GPIO_TogglePin (GPIOE, GPIO_PIN_3);
 800237c:	2108      	movs	r1, #8
 800237e:	4804      	ldr	r0, [pc, #16]	@ (8002390 <main+0x38>)
 8002380:	f001 fbe9 	bl	8003b56 <HAL_GPIO_TogglePin>
      HAL_Delay (4000);   /* Insert delay 100 ms */
 8002384:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8002388:	f001 f88c 	bl	80034a4 <HAL_Delay>
      HAL_GPIO_TogglePin (GPIOE, GPIO_PIN_3);
 800238c:	bf00      	nop
 800238e:	e7f5      	b.n	800237c <main+0x24>
 8002390:	58021000 	.word	0x58021000

08002394 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b09c      	sub	sp, #112	@ 0x70
 8002398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800239a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800239e:	224c      	movs	r2, #76	@ 0x4c
 80023a0:	2100      	movs	r1, #0
 80023a2:	4618      	mov	r0, r3
 80023a4:	f007 f872 	bl	800948c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023a8:	1d3b      	adds	r3, r7, #4
 80023aa:	2220      	movs	r2, #32
 80023ac:	2100      	movs	r1, #0
 80023ae:	4618      	mov	r0, r3
 80023b0:	f007 f86c 	bl	800948c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80023b4:	2002      	movs	r0, #2
 80023b6:	f001 fbe9 	bl	8003b8c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80023ba:	2300      	movs	r3, #0
 80023bc:	603b      	str	r3, [r7, #0]
 80023be:	4b2c      	ldr	r3, [pc, #176]	@ (8002470 <SystemClock_Config+0xdc>)
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80023c6:	4a2a      	ldr	r2, [pc, #168]	@ (8002470 <SystemClock_Config+0xdc>)
 80023c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023cc:	6193      	str	r3, [r2, #24]
 80023ce:	4b28      	ldr	r3, [pc, #160]	@ (8002470 <SystemClock_Config+0xdc>)
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80023d6:	603b      	str	r3, [r7, #0]
 80023d8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80023da:	bf00      	nop
 80023dc:	4b24      	ldr	r3, [pc, #144]	@ (8002470 <SystemClock_Config+0xdc>)
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023e8:	d1f8      	bne.n	80023dc <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023ea:	2302      	movs	r3, #2
 80023ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80023ee:	2301      	movs	r3, #1
 80023f0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80023f2:	2340      	movs	r3, #64	@ 0x40
 80023f4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023f6:	2302      	movs	r3, #2
 80023f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80023fa:	2300      	movs	r3, #0
 80023fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80023fe:	2304      	movs	r3, #4
 8002400:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8002402:	230c      	movs	r3, #12
 8002404:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002406:	2302      	movs	r3, #2
 8002408:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800240a:	2303      	movs	r3, #3
 800240c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800240e:	2302      	movs	r3, #2
 8002410:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002412:	230c      	movs	r3, #12
 8002414:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002416:	2300      	movs	r3, #0
 8002418:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800241a:	2300      	movs	r3, #0
 800241c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800241e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002422:	4618      	mov	r0, r3
 8002424:	f001 fbec 	bl	8003c00 <HAL_RCC_OscConfig>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800242e:	f000 fcfb 	bl	8002e28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002432:	233f      	movs	r3, #63	@ 0x3f
 8002434:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002436:	2300      	movs	r3, #0
 8002438:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800243a:	2300      	movs	r3, #0
 800243c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800243e:	2300      	movs	r3, #0
 8002440:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8002442:	2300      	movs	r3, #0
 8002444:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002446:	2340      	movs	r3, #64	@ 0x40
 8002448:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800244a:	2300      	movs	r3, #0
 800244c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800244e:	2300      	movs	r3, #0
 8002450:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002452:	1d3b      	adds	r3, r7, #4
 8002454:	2101      	movs	r1, #1
 8002456:	4618      	mov	r0, r3
 8002458:	f001 ffac 	bl	80043b4 <HAL_RCC_ClockConfig>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8002462:	f000 fce1 	bl	8002e28 <Error_Handler>
  }
}
 8002466:	bf00      	nop
 8002468:	3770      	adds	r7, #112	@ 0x70
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	58024800 	.word	0x58024800

08002474 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002478:	4b29      	ldr	r3, [pc, #164]	@ (8002520 <MX_SPI2_Init+0xac>)
 800247a:	4a2a      	ldr	r2, [pc, #168]	@ (8002524 <MX_SPI2_Init+0xb0>)
 800247c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800247e:	4b28      	ldr	r3, [pc, #160]	@ (8002520 <MX_SPI2_Init+0xac>)
 8002480:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002484:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8002486:	4b26      	ldr	r3, [pc, #152]	@ (8002520 <MX_SPI2_Init+0xac>)
 8002488:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800248c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800248e:	4b24      	ldr	r3, [pc, #144]	@ (8002520 <MX_SPI2_Init+0xac>)
 8002490:	2207      	movs	r2, #7
 8002492:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002494:	4b22      	ldr	r3, [pc, #136]	@ (8002520 <MX_SPI2_Init+0xac>)
 8002496:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800249a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800249c:	4b20      	ldr	r3, [pc, #128]	@ (8002520 <MX_SPI2_Init+0xac>)
 800249e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80024a2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80024a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002520 <MX_SPI2_Init+0xac>)
 80024a6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80024aa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80024ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002520 <MX_SPI2_Init+0xac>)
 80024ae:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 80024b2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002520 <MX_SPI2_Init+0xac>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80024ba:	4b19      	ldr	r3, [pc, #100]	@ (8002520 <MX_SPI2_Init+0xac>)
 80024bc:	2200      	movs	r2, #0
 80024be:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024c0:	4b17      	ldr	r3, [pc, #92]	@ (8002520 <MX_SPI2_Init+0xac>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80024c6:	4b16      	ldr	r3, [pc, #88]	@ (8002520 <MX_SPI2_Init+0xac>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80024cc:	4b14      	ldr	r3, [pc, #80]	@ (8002520 <MX_SPI2_Init+0xac>)
 80024ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80024d2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80024d4:	4b12      	ldr	r3, [pc, #72]	@ (8002520 <MX_SPI2_Init+0xac>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80024da:	4b11      	ldr	r3, [pc, #68]	@ (8002520 <MX_SPI2_Init+0xac>)
 80024dc:	2200      	movs	r2, #0
 80024de:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80024e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002520 <MX_SPI2_Init+0xac>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80024e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002520 <MX_SPI2_Init+0xac>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80024ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002520 <MX_SPI2_Init+0xac>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80024f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002520 <MX_SPI2_Init+0xac>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80024f8:	4b09      	ldr	r3, [pc, #36]	@ (8002520 <MX_SPI2_Init+0xac>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80024fe:	4b08      	ldr	r3, [pc, #32]	@ (8002520 <MX_SPI2_Init+0xac>)
 8002500:	2200      	movs	r2, #0
 8002502:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002504:	4b06      	ldr	r3, [pc, #24]	@ (8002520 <MX_SPI2_Init+0xac>)
 8002506:	2200      	movs	r2, #0
 8002508:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800250a:	4805      	ldr	r0, [pc, #20]	@ (8002520 <MX_SPI2_Init+0xac>)
 800250c:	f004 f8a0 	bl	8006650 <HAL_SPI_Init>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <MX_SPI2_Init+0xa6>
  {
    Error_Handler();
 8002516:	f000 fc87 	bl	8002e28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800251a:	bf00      	nop
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	240000d0 	.word	0x240000d0
 8002524:	40003800 	.word	0x40003800

08002528 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b08c      	sub	sp, #48	@ 0x30
 800252c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800252e:	f107 031c 	add.w	r3, r7, #28
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	605a      	str	r2, [r3, #4]
 8002538:	609a      	str	r2, [r3, #8]
 800253a:	60da      	str	r2, [r3, #12]
 800253c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800253e:	f107 0310 	add.w	r3, r7, #16
 8002542:	2200      	movs	r2, #0
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	605a      	str	r2, [r3, #4]
 8002548:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800254a:	463b      	mov	r3, r7
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	605a      	str	r2, [r3, #4]
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002556:	4b3a      	ldr	r3, [pc, #232]	@ (8002640 <MX_TIM8_Init+0x118>)
 8002558:	4a3a      	ldr	r2, [pc, #232]	@ (8002644 <MX_TIM8_Init+0x11c>)
 800255a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800255c:	4b38      	ldr	r3, [pc, #224]	@ (8002640 <MX_TIM8_Init+0x118>)
 800255e:	2200      	movs	r2, #0
 8002560:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002562:	4b37      	ldr	r3, [pc, #220]	@ (8002640 <MX_TIM8_Init+0x118>)
 8002564:	2200      	movs	r2, #0
 8002566:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002568:	4b35      	ldr	r3, [pc, #212]	@ (8002640 <MX_TIM8_Init+0x118>)
 800256a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800256e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002570:	4b33      	ldr	r3, [pc, #204]	@ (8002640 <MX_TIM8_Init+0x118>)
 8002572:	2200      	movs	r2, #0
 8002574:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002576:	4b32      	ldr	r3, [pc, #200]	@ (8002640 <MX_TIM8_Init+0x118>)
 8002578:	2200      	movs	r2, #0
 800257a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800257c:	4b30      	ldr	r3, [pc, #192]	@ (8002640 <MX_TIM8_Init+0x118>)
 800257e:	2200      	movs	r2, #0
 8002580:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002582:	482f      	ldr	r0, [pc, #188]	@ (8002640 <MX_TIM8_Init+0x118>)
 8002584:	f004 fc5f 	bl	8006e46 <HAL_TIM_Base_Init>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <MX_TIM8_Init+0x6a>
  {
    Error_Handler();
 800258e:	f000 fc4b 	bl	8002e28 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8002592:	482b      	ldr	r0, [pc, #172]	@ (8002640 <MX_TIM8_Init+0x118>)
 8002594:	f004 fcae 	bl	8006ef4 <HAL_TIM_IC_Init>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800259e:	f000 fc43 	bl	8002e28 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80025a2:	2307      	movs	r3, #7
 80025a4:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80025a6:	2300      	movs	r3, #0
 80025a8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 80025aa:	f107 031c 	add.w	r3, r7, #28
 80025ae:	4619      	mov	r1, r3
 80025b0:	4823      	ldr	r0, [pc, #140]	@ (8002640 <MX_TIM8_Init+0x118>)
 80025b2:	f004 fd9c 	bl	80070ee <HAL_TIM_SlaveConfigSynchro>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80025bc:	f000 fc34 	bl	8002e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025c0:	2300      	movs	r3, #0
 80025c2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80025c4:	2300      	movs	r3, #0
 80025c6:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025c8:	2300      	movs	r3, #0
 80025ca:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80025cc:	f107 0310 	add.w	r3, r7, #16
 80025d0:	4619      	mov	r1, r3
 80025d2:	481b      	ldr	r0, [pc, #108]	@ (8002640 <MX_TIM8_Init+0x118>)
 80025d4:	f005 f91a 	bl	800780c <HAL_TIMEx_MasterConfigSynchronization>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <MX_TIM8_Init+0xba>
  {
    Error_Handler();
 80025de:	f000 fc23 	bl	8002e28 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80025e2:	2300      	movs	r3, #0
 80025e4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80025e6:	2301      	movs	r3, #1
 80025e8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80025ea:	2300      	movs	r3, #0
 80025ec:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80025ee:	2300      	movs	r3, #0
 80025f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80025f2:	463b      	mov	r3, r7
 80025f4:	2200      	movs	r2, #0
 80025f6:	4619      	mov	r1, r3
 80025f8:	4811      	ldr	r0, [pc, #68]	@ (8002640 <MX_TIM8_Init+0x118>)
 80025fa:	f004 fcdc 	bl	8006fb6 <HAL_TIM_IC_ConfigChannel>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <MX_TIM8_Init+0xe0>
  {
    Error_Handler();
 8002604:	f000 fc10 	bl	8002e28 <Error_Handler>
  }
  if (HAL_TIMEx_TISelection(&htim8, TIM_TIM8_TI1_COMP2, TIM_CHANNEL_1) != HAL_OK)
 8002608:	2200      	movs	r2, #0
 800260a:	2101      	movs	r1, #1
 800260c:	480c      	ldr	r0, [pc, #48]	@ (8002640 <MX_TIM8_Init+0x118>)
 800260e:	f005 f999 	bl	8007944 <HAL_TIMEx_TISelection>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 8002618:	f000 fc06 	bl	8002e28 <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800261c:	2302      	movs	r3, #2
 800261e:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002620:	463b      	mov	r3, r7
 8002622:	2204      	movs	r2, #4
 8002624:	4619      	mov	r1, r3
 8002626:	4806      	ldr	r0, [pc, #24]	@ (8002640 <MX_TIM8_Init+0x118>)
 8002628:	f004 fcc5 	bl	8006fb6 <HAL_TIM_IC_ConfigChannel>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8002632:	f000 fbf9 	bl	8002e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002636:	bf00      	nop
 8002638:	3730      	adds	r7, #48	@ 0x30
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	24000158 	.word	0x24000158
 8002644:	40010400 	.word	0x40010400

08002648 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800264c:	4b22      	ldr	r3, [pc, #136]	@ (80026d8 <MX_UART4_Init+0x90>)
 800264e:	4a23      	ldr	r2, [pc, #140]	@ (80026dc <MX_UART4_Init+0x94>)
 8002650:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002652:	4b21      	ldr	r3, [pc, #132]	@ (80026d8 <MX_UART4_Init+0x90>)
 8002654:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002658:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800265a:	4b1f      	ldr	r3, [pc, #124]	@ (80026d8 <MX_UART4_Init+0x90>)
 800265c:	2200      	movs	r2, #0
 800265e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002660:	4b1d      	ldr	r3, [pc, #116]	@ (80026d8 <MX_UART4_Init+0x90>)
 8002662:	2200      	movs	r2, #0
 8002664:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002666:	4b1c      	ldr	r3, [pc, #112]	@ (80026d8 <MX_UART4_Init+0x90>)
 8002668:	2200      	movs	r2, #0
 800266a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800266c:	4b1a      	ldr	r3, [pc, #104]	@ (80026d8 <MX_UART4_Init+0x90>)
 800266e:	220c      	movs	r2, #12
 8002670:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002672:	4b19      	ldr	r3, [pc, #100]	@ (80026d8 <MX_UART4_Init+0x90>)
 8002674:	2200      	movs	r2, #0
 8002676:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002678:	4b17      	ldr	r3, [pc, #92]	@ (80026d8 <MX_UART4_Init+0x90>)
 800267a:	2200      	movs	r2, #0
 800267c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800267e:	4b16      	ldr	r3, [pc, #88]	@ (80026d8 <MX_UART4_Init+0x90>)
 8002680:	2200      	movs	r2, #0
 8002682:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002684:	4b14      	ldr	r3, [pc, #80]	@ (80026d8 <MX_UART4_Init+0x90>)
 8002686:	2200      	movs	r2, #0
 8002688:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800268a:	4b13      	ldr	r3, [pc, #76]	@ (80026d8 <MX_UART4_Init+0x90>)
 800268c:	2200      	movs	r2, #0
 800268e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002690:	4811      	ldr	r0, [pc, #68]	@ (80026d8 <MX_UART4_Init+0x90>)
 8002692:	f005 f9c5 	bl	8007a20 <HAL_UART_Init>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800269c:	f000 fbc4 	bl	8002e28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026a0:	2100      	movs	r1, #0
 80026a2:	480d      	ldr	r0, [pc, #52]	@ (80026d8 <MX_UART4_Init+0x90>)
 80026a4:	f006 fb5f 	bl	8008d66 <HAL_UARTEx_SetTxFifoThreshold>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80026ae:	f000 fbbb 	bl	8002e28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026b2:	2100      	movs	r1, #0
 80026b4:	4808      	ldr	r0, [pc, #32]	@ (80026d8 <MX_UART4_Init+0x90>)
 80026b6:	f006 fb94 	bl	8008de2 <HAL_UARTEx_SetRxFifoThreshold>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80026c0:	f000 fbb2 	bl	8002e28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80026c4:	4804      	ldr	r0, [pc, #16]	@ (80026d8 <MX_UART4_Init+0x90>)
 80026c6:	f006 fb15 	bl	8008cf4 <HAL_UARTEx_DisableFifoMode>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80026d0:	f000 fbaa 	bl	8002e28 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80026d4:	bf00      	nop
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	240001a4 	.word	0x240001a4
 80026dc:	40004c00 	.word	0x40004c00

080026e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08a      	sub	sp, #40	@ 0x28
 80026e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e6:	f107 0314 	add.w	r3, r7, #20
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	605a      	str	r2, [r3, #4]
 80026f0:	609a      	str	r2, [r3, #8]
 80026f2:	60da      	str	r2, [r3, #12]
 80026f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80026f6:	4b3a      	ldr	r3, [pc, #232]	@ (80027e0 <MX_GPIO_Init+0x100>)
 80026f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026fc:	4a38      	ldr	r2, [pc, #224]	@ (80027e0 <MX_GPIO_Init+0x100>)
 80026fe:	f043 0310 	orr.w	r3, r3, #16
 8002702:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002706:	4b36      	ldr	r3, [pc, #216]	@ (80027e0 <MX_GPIO_Init+0x100>)
 8002708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800270c:	f003 0310 	and.w	r3, r3, #16
 8002710:	613b      	str	r3, [r7, #16]
 8002712:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002714:	4b32      	ldr	r3, [pc, #200]	@ (80027e0 <MX_GPIO_Init+0x100>)
 8002716:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800271a:	4a31      	ldr	r2, [pc, #196]	@ (80027e0 <MX_GPIO_Init+0x100>)
 800271c:	f043 0304 	orr.w	r3, r3, #4
 8002720:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002724:	4b2e      	ldr	r3, [pc, #184]	@ (80027e0 <MX_GPIO_Init+0x100>)
 8002726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800272a:	f003 0304 	and.w	r3, r3, #4
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002732:	4b2b      	ldr	r3, [pc, #172]	@ (80027e0 <MX_GPIO_Init+0x100>)
 8002734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002738:	4a29      	ldr	r2, [pc, #164]	@ (80027e0 <MX_GPIO_Init+0x100>)
 800273a:	f043 0301 	orr.w	r3, r3, #1
 800273e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002742:	4b27      	ldr	r3, [pc, #156]	@ (80027e0 <MX_GPIO_Init+0x100>)
 8002744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	60bb      	str	r3, [r7, #8]
 800274e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002750:	4b23      	ldr	r3, [pc, #140]	@ (80027e0 <MX_GPIO_Init+0x100>)
 8002752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002756:	4a22      	ldr	r2, [pc, #136]	@ (80027e0 <MX_GPIO_Init+0x100>)
 8002758:	f043 0302 	orr.w	r3, r3, #2
 800275c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002760:	4b1f      	ldr	r3, [pc, #124]	@ (80027e0 <MX_GPIO_Init+0x100>)
 8002762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	607b      	str	r3, [r7, #4]
 800276c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800276e:	2200      	movs	r2, #0
 8002770:	2108      	movs	r1, #8
 8002772:	481c      	ldr	r0, [pc, #112]	@ (80027e4 <MX_GPIO_Init+0x104>)
 8002774:	f001 f9d6 	bl	8003b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin|SPI2_CS_Pin|SPI2_RESET_Pin, GPIO_PIN_RESET);
 8002778:	2200      	movs	r2, #0
 800277a:	f640 0106 	movw	r1, #2054	@ 0x806
 800277e:	481a      	ldr	r0, [pc, #104]	@ (80027e8 <MX_GPIO_Init+0x108>)
 8002780:	f001 f9d0 	bl	8003b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002784:	2308      	movs	r3, #8
 8002786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002788:	2301      	movs	r3, #1
 800278a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278c:	2300      	movs	r3, #0
 800278e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002790:	2300      	movs	r3, #0
 8002792:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002794:	f107 0314 	add.w	r3, r7, #20
 8002798:	4619      	mov	r1, r3
 800279a:	4812      	ldr	r0, [pc, #72]	@ (80027e4 <MX_GPIO_Init+0x104>)
 800279c:	f001 f802 	bl	80037a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_BUSY_Pin */
  GPIO_InitStruct.Pin = SPI2_BUSY_Pin;
 80027a0:	2301      	movs	r3, #1
 80027a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027a4:	2300      	movs	r3, #0
 80027a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a8:	2300      	movs	r3, #0
 80027aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI2_BUSY_GPIO_Port, &GPIO_InitStruct);
 80027ac:	f107 0314 	add.w	r3, r7, #20
 80027b0:	4619      	mov	r1, r3
 80027b2:	480d      	ldr	r0, [pc, #52]	@ (80027e8 <MX_GPIO_Init+0x108>)
 80027b4:	f000 fff6 	bl	80037a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_DC_Pin SPI2_CS_Pin SPI2_RESET_Pin */
  GPIO_InitStruct.Pin = SPI2_DC_Pin|SPI2_CS_Pin|SPI2_RESET_Pin;
 80027b8:	f640 0306 	movw	r3, #2054	@ 0x806
 80027bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027be:	2301      	movs	r3, #1
 80027c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80027c6:	2301      	movs	r3, #1
 80027c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ca:	f107 0314 	add.w	r3, r7, #20
 80027ce:	4619      	mov	r1, r3
 80027d0:	4805      	ldr	r0, [pc, #20]	@ (80027e8 <MX_GPIO_Init+0x108>)
 80027d2:	f000 ffe7 	bl	80037a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80027d6:	bf00      	nop
 80027d8:	3728      	adds	r7, #40	@ 0x28
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	58024400 	.word	0x58024400
 80027e4:	58021000 	.word	0x58021000
 80027e8:	58020400 	.word	0x58020400

080027ec <_mainWaveShare>:
    printf("(WeActStudio Code)\r\n");
  }

#else

  int _mainWaveShare(void) {
 80027ec:	b590      	push	{r4, r7, lr}
 80027ee:	b08d      	sub	sp, #52	@ 0x34
 80027f0:	af04      	add	r7, sp, #16
    printf("EPD_4IN2_V2_test Demo\r\n");
 80027f2:	48be      	ldr	r0, [pc, #760]	@ (8002aec <_mainWaveShare+0x300>)
 80027f4:	f006 fd6a 	bl	80092cc <puts>
    if(DEV_Module_Init()!=0){
 80027f8:	f7fd ff64 	bl	80006c4 <DEV_Module_Init>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d002      	beq.n	8002808 <_mainWaveShare+0x1c>
      return -1;
 8002802:	f04f 33ff 	mov.w	r3, #4294967295
 8002806:	e2c5      	b.n	8002d94 <_mainWaveShare+0x5a8>
    }

    printf("e-Paper Init and Clear...\r\n");
 8002808:	48b9      	ldr	r0, [pc, #740]	@ (8002af0 <_mainWaveShare+0x304>)
 800280a:	f006 fd5f 	bl	80092cc <puts>
    EPD_4IN2_V2_Init();
 800280e:	f7fe f8f9 	bl	8000a04 <EPD_4IN2_V2_Init>
    EPD_4IN2_V2_Clear();
 8002812:	f7fe f964 	bl	8000ade <EPD_4IN2_V2_Clear>
    DEV_Delay_ms(500);
 8002816:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800281a:	f000 fe43 	bl	80034a4 <HAL_Delay>

    //Create a new image cache
    UBYTE *BlackImage;
    /* you have to edit the startup_stm32fxxx.s file and set a big enough heap size */
    UWORD Imagesize = ((EPD_4IN2_V2_WIDTH % 8 == 0)? (EPD_4IN2_V2_WIDTH / 8 ): (EPD_4IN2_V2_WIDTH / 8 + 1)) * EPD_4IN2_V2_HEIGHT;
 800281e:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8002822:	837b      	strh	r3, [r7, #26]
    if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 8002824:	8b7b      	ldrh	r3, [r7, #26]
 8002826:	4618      	mov	r0, r3
 8002828:	f006 fb68 	bl	8008efc <malloc>
 800282c:	4603      	mov	r3, r0
 800282e:	617b      	str	r3, [r7, #20]
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d105      	bne.n	8002842 <_mainWaveShare+0x56>
      printf("Failed to apply for black memory...\r\n");
 8002836:	48af      	ldr	r0, [pc, #700]	@ (8002af4 <_mainWaveShare+0x308>)
 8002838:	f006 fd48 	bl	80092cc <puts>
      return -1;
 800283c:	f04f 33ff 	mov.w	r3, #4294967295
 8002840:	e2a8      	b.n	8002d94 <_mainWaveShare+0x5a8>
    }
    printf("Paint_NewImage\r\n");
 8002842:	48ad      	ldr	r0, [pc, #692]	@ (8002af8 <_mainWaveShare+0x30c>)
 8002844:	f006 fd42 	bl	80092cc <puts>
    Paint_NewImage(BlackImage, EPD_4IN2_V2_WIDTH, EPD_4IN2_V2_HEIGHT, 0, WHITE);
 8002848:	23ff      	movs	r3, #255	@ 0xff
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	2300      	movs	r3, #0
 800284e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002852:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002856:	6978      	ldr	r0, [r7, #20]
 8002858:	f7fe fbb8 	bl	8000fcc <Paint_NewImage>
      DEV_Delay_ms(2000);
    #endif

    #if 1   // Drawing on the image

      EPD_4IN2_V2_Init();
 800285c:	f7fe f8d2 	bl	8000a04 <EPD_4IN2_V2_Init>
      //1.Select Image
      printf("SelectImage:BlackImage\r\n");
 8002860:	48a6      	ldr	r0, [pc, #664]	@ (8002afc <_mainWaveShare+0x310>)
 8002862:	f006 fd33 	bl	80092cc <puts>
      Paint_SelectImage(BlackImage);
 8002866:	6978      	ldr	r0, [r7, #20]
 8002868:	f7fe fc06 	bl	8001078 <Paint_SelectImage>
      Paint_Clear(WHITE);
 800286c:	20ff      	movs	r0, #255	@ 0xff
 800286e:	f7fe fdcf 	bl	8001410 <Paint_Clear>

      // 2.Drawing on the image
      printf("Drawing:BlackImage\r\n");
 8002872:	48a3      	ldr	r0, [pc, #652]	@ (8002b00 <_mainWaveShare+0x314>)
 8002874:	f006 fd2a 	bl	80092cc <puts>
      Paint_DrawPoint(10, 80, BLACK, DOT_PIXEL_1X1, DOT_STYLE_DFT);
 8002878:	2301      	movs	r3, #1
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	2301      	movs	r3, #1
 800287e:	2200      	movs	r2, #0
 8002880:	2150      	movs	r1, #80	@ 0x50
 8002882:	200a      	movs	r0, #10
 8002884:	f7fe fe68 	bl	8001558 <Paint_DrawPoint>
      Paint_DrawPoint(10, 90, BLACK, DOT_PIXEL_2X2, DOT_STYLE_DFT);
 8002888:	2301      	movs	r3, #1
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	2302      	movs	r3, #2
 800288e:	2200      	movs	r2, #0
 8002890:	215a      	movs	r1, #90	@ 0x5a
 8002892:	200a      	movs	r0, #10
 8002894:	f7fe fe60 	bl	8001558 <Paint_DrawPoint>
      Paint_DrawPoint(10, 100, BLACK, DOT_PIXEL_3X3, DOT_STYLE_DFT);
 8002898:	2301      	movs	r3, #1
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	2303      	movs	r3, #3
 800289e:	2200      	movs	r2, #0
 80028a0:	2164      	movs	r1, #100	@ 0x64
 80028a2:	200a      	movs	r0, #10
 80028a4:	f7fe fe58 	bl	8001558 <Paint_DrawPoint>
      Paint_DrawLine(20, 70, 70, 120, BLACK, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
 80028a8:	2300      	movs	r3, #0
 80028aa:	9302      	str	r3, [sp, #8]
 80028ac:	2301      	movs	r3, #1
 80028ae:	9301      	str	r3, [sp, #4]
 80028b0:	2300      	movs	r3, #0
 80028b2:	9300      	str	r3, [sp, #0]
 80028b4:	2378      	movs	r3, #120	@ 0x78
 80028b6:	2246      	movs	r2, #70	@ 0x46
 80028b8:	2146      	movs	r1, #70	@ 0x46
 80028ba:	2014      	movs	r0, #20
 80028bc:	f7fe fef8 	bl	80016b0 <Paint_DrawLine>
      Paint_DrawLine(70, 70, 20, 120, BLACK, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
 80028c0:	2300      	movs	r3, #0
 80028c2:	9302      	str	r3, [sp, #8]
 80028c4:	2301      	movs	r3, #1
 80028c6:	9301      	str	r3, [sp, #4]
 80028c8:	2300      	movs	r3, #0
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	2378      	movs	r3, #120	@ 0x78
 80028ce:	2214      	movs	r2, #20
 80028d0:	2146      	movs	r1, #70	@ 0x46
 80028d2:	2046      	movs	r0, #70	@ 0x46
 80028d4:	f7fe feec 	bl	80016b0 <Paint_DrawLine>
      Paint_DrawRectangle(20, 70, 70, 120, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 80028d8:	2300      	movs	r3, #0
 80028da:	9302      	str	r3, [sp, #8]
 80028dc:	2301      	movs	r3, #1
 80028de:	9301      	str	r3, [sp, #4]
 80028e0:	2300      	movs	r3, #0
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	2378      	movs	r3, #120	@ 0x78
 80028e6:	2246      	movs	r2, #70	@ 0x46
 80028e8:	2146      	movs	r1, #70	@ 0x46
 80028ea:	2014      	movs	r0, #20
 80028ec:	f7fe ff8c 	bl	8001808 <Paint_DrawRectangle>
      Paint_DrawRectangle(80, 70, 130, 120, BLACK, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 80028f0:	2301      	movs	r3, #1
 80028f2:	9302      	str	r3, [sp, #8]
 80028f4:	2301      	movs	r3, #1
 80028f6:	9301      	str	r3, [sp, #4]
 80028f8:	2300      	movs	r3, #0
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	2378      	movs	r3, #120	@ 0x78
 80028fe:	2282      	movs	r2, #130	@ 0x82
 8002900:	2146      	movs	r1, #70	@ 0x46
 8002902:	2050      	movs	r0, #80	@ 0x50
 8002904:	f7fe ff80 	bl	8001808 <Paint_DrawRectangle>
      Paint_DrawCircle(45, 95, 20, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 8002908:	2300      	movs	r3, #0
 800290a:	9301      	str	r3, [sp, #4]
 800290c:	2301      	movs	r3, #1
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	2300      	movs	r3, #0
 8002912:	2214      	movs	r2, #20
 8002914:	215f      	movs	r1, #95	@ 0x5f
 8002916:	202d      	movs	r0, #45	@ 0x2d
 8002918:	f7fe fffa 	bl	8001910 <Paint_DrawCircle>
      Paint_DrawCircle(105, 95, 20, WHITE, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 800291c:	2301      	movs	r3, #1
 800291e:	9301      	str	r3, [sp, #4]
 8002920:	2301      	movs	r3, #1
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	23ff      	movs	r3, #255	@ 0xff
 8002926:	2214      	movs	r2, #20
 8002928:	215f      	movs	r1, #95	@ 0x5f
 800292a:	2069      	movs	r0, #105	@ 0x69
 800292c:	f7fe fff0 	bl	8001910 <Paint_DrawCircle>
      Paint_DrawLine(85, 95, 125, 95, BLACK, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);
 8002930:	2301      	movs	r3, #1
 8002932:	9302      	str	r3, [sp, #8]
 8002934:	2301      	movs	r3, #1
 8002936:	9301      	str	r3, [sp, #4]
 8002938:	2300      	movs	r3, #0
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	235f      	movs	r3, #95	@ 0x5f
 800293e:	227d      	movs	r2, #125	@ 0x7d
 8002940:	215f      	movs	r1, #95	@ 0x5f
 8002942:	2055      	movs	r0, #85	@ 0x55
 8002944:	f7fe feb4 	bl	80016b0 <Paint_DrawLine>
      Paint_DrawLine(105, 75, 105, 115, BLACK, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);
 8002948:	2301      	movs	r3, #1
 800294a:	9302      	str	r3, [sp, #8]
 800294c:	2301      	movs	r3, #1
 800294e:	9301      	str	r3, [sp, #4]
 8002950:	2300      	movs	r3, #0
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	2373      	movs	r3, #115	@ 0x73
 8002956:	2269      	movs	r2, #105	@ 0x69
 8002958:	214b      	movs	r1, #75	@ 0x4b
 800295a:	2069      	movs	r0, #105	@ 0x69
 800295c:	f7fe fea8 	bl	80016b0 <Paint_DrawLine>
      Paint_DrawString_EN(10, 0, "waveshare", &Font16, BLACK, WHITE);
 8002960:	23ff      	movs	r3, #255	@ 0xff
 8002962:	9301      	str	r3, [sp, #4]
 8002964:	2300      	movs	r3, #0
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	4b66      	ldr	r3, [pc, #408]	@ (8002b04 <_mainWaveShare+0x318>)
 800296a:	4a67      	ldr	r2, [pc, #412]	@ (8002b08 <_mainWaveShare+0x31c>)
 800296c:	2100      	movs	r1, #0
 800296e:	200a      	movs	r0, #10
 8002970:	f7ff fa02 	bl	8001d78 <Paint_DrawString_EN>
      Paint_DrawString_EN(10, 20, "hello world", &Font12, WHITE, BLACK);
 8002974:	2300      	movs	r3, #0
 8002976:	9301      	str	r3, [sp, #4]
 8002978:	23ff      	movs	r3, #255	@ 0xff
 800297a:	9300      	str	r3, [sp, #0]
 800297c:	4b63      	ldr	r3, [pc, #396]	@ (8002b0c <_mainWaveShare+0x320>)
 800297e:	4a64      	ldr	r2, [pc, #400]	@ (8002b10 <_mainWaveShare+0x324>)
 8002980:	2114      	movs	r1, #20
 8002982:	200a      	movs	r0, #10
 8002984:	f7ff f9f8 	bl	8001d78 <Paint_DrawString_EN>
      Paint_DrawNum(10, 33, 123456789, &Font12, BLACK, WHITE);
 8002988:	23ff      	movs	r3, #255	@ 0xff
 800298a:	9301      	str	r3, [sp, #4]
 800298c:	2300      	movs	r3, #0
 800298e:	9300      	str	r3, [sp, #0]
 8002990:	4b5e      	ldr	r3, [pc, #376]	@ (8002b0c <_mainWaveShare+0x320>)
 8002992:	4a60      	ldr	r2, [pc, #384]	@ (8002b14 <_mainWaveShare+0x328>)
 8002994:	2121      	movs	r1, #33	@ 0x21
 8002996:	200a      	movs	r0, #10
 8002998:	f7ff fbc4 	bl	8002124 <Paint_DrawNum>
      Paint_DrawNum(10, 50, 987654321, &Font16, WHITE, BLACK);
 800299c:	2300      	movs	r3, #0
 800299e:	9301      	str	r3, [sp, #4]
 80029a0:	23ff      	movs	r3, #255	@ 0xff
 80029a2:	9300      	str	r3, [sp, #0]
 80029a4:	4b57      	ldr	r3, [pc, #348]	@ (8002b04 <_mainWaveShare+0x318>)
 80029a6:	4a5c      	ldr	r2, [pc, #368]	@ (8002b18 <_mainWaveShare+0x32c>)
 80029a8:	2132      	movs	r1, #50	@ 0x32
 80029aa:	200a      	movs	r0, #10
 80029ac:	f7ff fbba 	bl	8002124 <Paint_DrawNum>
      Paint_DrawString_CN(130, 0, " ���abc", &Font12CN, BLACK, WHITE);
 80029b0:	23ff      	movs	r3, #255	@ 0xff
 80029b2:	9301      	str	r3, [sp, #4]
 80029b4:	2300      	movs	r3, #0
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	4b58      	ldr	r3, [pc, #352]	@ (8002b1c <_mainWaveShare+0x330>)
 80029ba:	4a59      	ldr	r2, [pc, #356]	@ (8002b20 <_mainWaveShare+0x334>)
 80029bc:	2100      	movs	r1, #0
 80029be:	2082      	movs	r0, #130	@ 0x82
 80029c0:	f7ff fa2e 	bl	8001e20 <Paint_DrawString_CN>
      Paint_DrawString_CN(130, 20, "΢ѩ����", &Font24CN, WHITE, BLACK);
 80029c4:	2300      	movs	r3, #0
 80029c6:	9301      	str	r3, [sp, #4]
 80029c8:	23ff      	movs	r3, #255	@ 0xff
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	4b55      	ldr	r3, [pc, #340]	@ (8002b24 <_mainWaveShare+0x338>)
 80029ce:	4a56      	ldr	r2, [pc, #344]	@ (8002b28 <_mainWaveShare+0x33c>)
 80029d0:	2114      	movs	r1, #20
 80029d2:	2082      	movs	r0, #130	@ 0x82
 80029d4:	f7ff fa24 	bl	8001e20 <Paint_DrawString_CN>

      printf("EPD_Display\r\n");
 80029d8:	4854      	ldr	r0, [pc, #336]	@ (8002b2c <_mainWaveShare+0x340>)
 80029da:	f006 fc77 	bl	80092cc <puts>
       // EPD_4IN2_V2_Display(BlackImage);
      EPD_4IN2_V2_Display(BlackImage);
 80029de:	6978      	ldr	r0, [r7, #20]
 80029e0:	f7fe f8bf 	bl	8000b62 <EPD_4IN2_V2_Display>
      DEV_Delay_ms(1000);
 80029e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80029e8:	f000 fd5c 	bl	80034a4 <HAL_Delay>
      Paint_Clear(WHITE);
 80029ec:	20ff      	movs	r0, #255	@ 0xff
 80029ee:	f7fe fd0f 	bl	8001410 <Paint_Clear>
      EPD_4IN2_V2_Display(BlackImage);
 80029f2:	6978      	ldr	r0, [r7, #20]
 80029f4:	f7fe f8b5 	bl	8000b62 <EPD_4IN2_V2_Display>
       num = num - 1;
       if(num == 0) {
         break;
       }
       }*/
      Paint_Clear(WHITE);
 80029f8:	20ff      	movs	r0, #255	@ 0xff
 80029fa:	f7fe fd09 	bl	8001410 <Paint_Clear>

      UWORD Dx = Font20.Width;
 80029fe:	4b4c      	ldr	r3, [pc, #304]	@ (8002b30 <_mainWaveShare+0x344>)
 8002a00:	889b      	ldrh	r3, [r3, #4]
 8002a02:	827b      	strh	r3, [r7, #18]
      UWORD Dy = Font20.Height;
 8002a04:	4b4a      	ldr	r3, [pc, #296]	@ (8002b30 <_mainWaveShare+0x344>)
 8002a06:	88db      	ldrh	r3, [r3, #6]
 8002a08:	823b      	strh	r3, [r7, #16]
      printf("\r\n\r\nPartial refresh on (%i * %i)\r\n", 30 * Dx, Dy);
 8002a0a:	8a7a      	ldrh	r2, [r7, #18]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	011b      	lsls	r3, r3, #4
 8002a10:	1a9b      	subs	r3, r3, r2
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	4619      	mov	r1, r3
 8002a16:	8a3b      	ldrh	r3, [r7, #16]
 8002a18:	461a      	mov	r2, r3
 8002a1a:	4846      	ldr	r0, [pc, #280]	@ (8002b34 <_mainWaveShare+0x348>)
 8002a1c:	f006 fbee 	bl	80091fc <iprintf>
      int subImageWidth = 10;
 8002a20:	230a      	movs	r3, #10
 8002a22:	60fb      	str	r3, [r7, #12]
      int subImageHeight = 20;
 8002a24:	2314      	movs	r3, #20
 8002a26:	60bb      	str	r3, [r7, #8]
      Paint_NewImage(BlackImage, 10, 20, 0, WHITE);
 8002a28:	23ff      	movs	r3, #255	@ 0xff
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	2214      	movs	r2, #20
 8002a30:	210a      	movs	r1, #10
 8002a32:	6978      	ldr	r0, [r7, #20]
 8002a34:	f7fe faca 	bl	8000fcc <Paint_NewImage>
      for (int i = 0; i < 30; i++) {
 8002a38:	2300      	movs	r3, #0
 8002a3a:	61fb      	str	r3, [r7, #28]
 8002a3c:	e031      	b.n	8002aa2 <_mainWaveShare+0x2b6>
        printf("  -> display one letter\r\n");
 8002a3e:	483e      	ldr	r0, [pc, #248]	@ (8002b38 <_mainWaveShare+0x34c>)
 8002a40:	f006 fc44 	bl	80092cc <puts>
        Paint_Clear(WHITE);
 8002a44:	20ff      	movs	r0, #255	@ 0xff
 8002a46:	f7fe fce3 	bl	8001410 <Paint_Clear>
        Paint_DrawChar(0, 0, 'a', &Font20, BLACK, WHITE);
 8002a4a:	23ff      	movs	r3, #255	@ 0xff
 8002a4c:	9301      	str	r3, [sp, #4]
 8002a4e:	2300      	movs	r3, #0
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	4b37      	ldr	r3, [pc, #220]	@ (8002b30 <_mainWaveShare+0x344>)
 8002a54:	2261      	movs	r2, #97	@ 0x61
 8002a56:	2100      	movs	r1, #0
 8002a58:	2000      	movs	r0, #0
 8002a5a:	f7ff f8e5 	bl	8001c28 <Paint_DrawChar>
        int posX = 10 + i * 10;
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	1c5a      	adds	r2, r3, #1
 8002a62:	4613      	mov	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	607b      	str	r3, [r7, #4]
        int posY = 100;
 8002a6c:	2364      	movs	r3, #100	@ 0x64
 8002a6e:	603b      	str	r3, [r7, #0]
        EPD_4IN2_V2_PartialDisplay(BlackImage, posX, posY, posX + subImageWidth, posY + subImageHeight);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	b299      	uxth	r1, r3
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	b298      	uxth	r0, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	4413      	add	r3, r2
 8002a82:	b29c      	uxth	r4, r3
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	4413      	add	r3, r2
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	4623      	mov	r3, r4
 8002a94:	4602      	mov	r2, r0
 8002a96:	6978      	ldr	r0, [r7, #20]
 8002a98:	f7fe f9b6 	bl	8000e08 <EPD_4IN2_V2_PartialDisplay>
      for (int i = 0; i < 30; i++) {
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	61fb      	str	r3, [r7, #28]
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	2b1d      	cmp	r3, #29
 8002aa6:	ddca      	ble.n	8002a3e <_mainWaveShare+0x252>
        //EPD_4IN2_V2_PartialDisplay(BlackImage, 10 + Dx * i, 200, 10 + Dx * (i + 1), 200 + Dy);
      }
      printf("\r\n\r\nPartial refresh END\r\n");
 8002aa8:	4824      	ldr	r0, [pc, #144]	@ (8002b3c <_mainWaveShare+0x350>)
 8002aaa:	f006 fc0f 	bl	80092cc <puts>
      Paint_Clear(WHITE);
 8002aae:	20ff      	movs	r0, #255	@ 0xff
 8002ab0:	f7fe fcae 	bl	8001410 <Paint_Clear>


   #if 1
       // EPD_4IN2_V2_Init();
     // EPD_4IN2_V2_Clear();
     EPD_4IN2_V2_Init_4Gray();
 8002ab4:	f7fd ffd6 	bl	8000a64 <EPD_4IN2_V2_Init_4Gray>
     printf("show Gray------------------------\r\n");
 8002ab8:	4821      	ldr	r0, [pc, #132]	@ (8002b40 <_mainWaveShare+0x354>)
 8002aba:	f006 fc07 	bl	80092cc <puts>
     free(BlackImage);
 8002abe:	6978      	ldr	r0, [r7, #20]
 8002ac0:	f006 fa24 	bl	8008f0c <free>
     BlackImage = NULL;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]
     Imagesize = ((EPD_4IN2_V2_WIDTH % 8 == 0)? (EPD_4IN2_V2_WIDTH / 4 ): (EPD_4IN2_V2_WIDTH / 4 + 1)) * EPD_4IN2_V2_HEIGHT;
 8002ac8:	f247 5330 	movw	r3, #30000	@ 0x7530
 8002acc:	837b      	strh	r3, [r7, #26]
       if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 8002ace:	8b7b      	ldrh	r3, [r7, #26]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f006 fa13 	bl	8008efc <malloc>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	617b      	str	r3, [r7, #20]
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d131      	bne.n	8002b44 <_mainWaveShare+0x358>
           printf("Failed to apply for black memory...\r\n");
 8002ae0:	4804      	ldr	r0, [pc, #16]	@ (8002af4 <_mainWaveShare+0x308>)
 8002ae2:	f006 fbf3 	bl	80092cc <puts>
           return -1;
 8002ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8002aea:	e153      	b.n	8002d94 <_mainWaveShare+0x5a8>
 8002aec:	0800a1e0 	.word	0x0800a1e0
 8002af0:	0800a1f8 	.word	0x0800a1f8
 8002af4:	0800a214 	.word	0x0800a214
 8002af8:	0800a23c 	.word	0x0800a23c
 8002afc:	0800a24c 	.word	0x0800a24c
 8002b00:	0800a264 	.word	0x0800a264
 8002b04:	24000014 	.word	0x24000014
 8002b08:	0800a278 	.word	0x0800a278
 8002b0c:	24000000 	.word	0x24000000
 8002b10:	0800a284 	.word	0x0800a284
 8002b14:	075bcd15 	.word	0x075bcd15
 8002b18:	3ade68b1 	.word	0x3ade68b1
 8002b1c:	24000008 	.word	0x24000008
 8002b20:	0800a290 	.word	0x0800a290
 8002b24:	24000024 	.word	0x24000024
 8002b28:	0800a2a0 	.word	0x0800a2a0
 8002b2c:	0800a2b4 	.word	0x0800a2b4
 8002b30:	2400001c 	.word	0x2400001c
 8002b34:	0800a2c4 	.word	0x0800a2c4
 8002b38:	0800a2e8 	.word	0x0800a2e8
 8002b3c:	0800a304 	.word	0x0800a304
 8002b40:	0800a320 	.word	0x0800a320
       }
     Paint_NewImage(BlackImage, EPD_4IN2_V2_WIDTH, EPD_4IN2_V2_HEIGHT, 0, WHITE);
 8002b44:	23ff      	movs	r3, #255	@ 0xff
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	2300      	movs	r3, #0
 8002b4a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002b4e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002b52:	6978      	ldr	r0, [r7, #20]
 8002b54:	f7fe fa3a 	bl	8000fcc <Paint_NewImage>
     Paint_SetScale(4);
 8002b58:	2004      	movs	r0, #4
 8002b5a:	f7fe fa9d 	bl	8001098 <Paint_SetScale>
     Paint_Clear(WHITE);
 8002b5e:	20ff      	movs	r0, #255	@ 0xff
 8002b60:	f7fe fc56 	bl	8001410 <Paint_Clear>

     Paint_DrawPoint(10, 80, BLACK, DOT_PIXEL_1X1, DOT_STYLE_DFT);
 8002b64:	2301      	movs	r3, #1
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	2301      	movs	r3, #1
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	2150      	movs	r1, #80	@ 0x50
 8002b6e:	200a      	movs	r0, #10
 8002b70:	f7fe fcf2 	bl	8001558 <Paint_DrawPoint>
       Paint_DrawPoint(10, 90, BLACK, DOT_PIXEL_2X2, DOT_STYLE_DFT);
 8002b74:	2301      	movs	r3, #1
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	2302      	movs	r3, #2
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	215a      	movs	r1, #90	@ 0x5a
 8002b7e:	200a      	movs	r0, #10
 8002b80:	f7fe fcea 	bl	8001558 <Paint_DrawPoint>
       Paint_DrawPoint(10, 100, BLACK, DOT_PIXEL_3X3, DOT_STYLE_DFT);
 8002b84:	2301      	movs	r3, #1
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	2303      	movs	r3, #3
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2164      	movs	r1, #100	@ 0x64
 8002b8e:	200a      	movs	r0, #10
 8002b90:	f7fe fce2 	bl	8001558 <Paint_DrawPoint>
       Paint_DrawLine(20, 70, 70, 120, BLACK, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
 8002b94:	2300      	movs	r3, #0
 8002b96:	9302      	str	r3, [sp, #8]
 8002b98:	2301      	movs	r3, #1
 8002b9a:	9301      	str	r3, [sp, #4]
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	2378      	movs	r3, #120	@ 0x78
 8002ba2:	2246      	movs	r2, #70	@ 0x46
 8002ba4:	2146      	movs	r1, #70	@ 0x46
 8002ba6:	2014      	movs	r0, #20
 8002ba8:	f7fe fd82 	bl	80016b0 <Paint_DrawLine>
       Paint_DrawLine(70, 70, 20, 120, BLACK, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
 8002bac:	2300      	movs	r3, #0
 8002bae:	9302      	str	r3, [sp, #8]
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	9301      	str	r3, [sp, #4]
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	2378      	movs	r3, #120	@ 0x78
 8002bba:	2214      	movs	r2, #20
 8002bbc:	2146      	movs	r1, #70	@ 0x46
 8002bbe:	2046      	movs	r0, #70	@ 0x46
 8002bc0:	f7fe fd76 	bl	80016b0 <Paint_DrawLine>
       Paint_DrawRectangle(20, 70, 70, 120, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	9302      	str	r3, [sp, #8]
 8002bc8:	2301      	movs	r3, #1
 8002bca:	9301      	str	r3, [sp, #4]
 8002bcc:	2300      	movs	r3, #0
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	2378      	movs	r3, #120	@ 0x78
 8002bd2:	2246      	movs	r2, #70	@ 0x46
 8002bd4:	2146      	movs	r1, #70	@ 0x46
 8002bd6:	2014      	movs	r0, #20
 8002bd8:	f7fe fe16 	bl	8001808 <Paint_DrawRectangle>
       Paint_DrawRectangle(80, 70, 130, 120, BLACK, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 8002bdc:	2301      	movs	r3, #1
 8002bde:	9302      	str	r3, [sp, #8]
 8002be0:	2301      	movs	r3, #1
 8002be2:	9301      	str	r3, [sp, #4]
 8002be4:	2300      	movs	r3, #0
 8002be6:	9300      	str	r3, [sp, #0]
 8002be8:	2378      	movs	r3, #120	@ 0x78
 8002bea:	2282      	movs	r2, #130	@ 0x82
 8002bec:	2146      	movs	r1, #70	@ 0x46
 8002bee:	2050      	movs	r0, #80	@ 0x50
 8002bf0:	f7fe fe0a 	bl	8001808 <Paint_DrawRectangle>
       Paint_DrawCircle(45, 95, 20, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	9301      	str	r3, [sp, #4]
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	2214      	movs	r2, #20
 8002c00:	215f      	movs	r1, #95	@ 0x5f
 8002c02:	202d      	movs	r0, #45	@ 0x2d
 8002c04:	f7fe fe84 	bl	8001910 <Paint_DrawCircle>
       Paint_DrawCircle(105, 95, 20, WHITE, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 8002c08:	2301      	movs	r3, #1
 8002c0a:	9301      	str	r3, [sp, #4]
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	23ff      	movs	r3, #255	@ 0xff
 8002c12:	2214      	movs	r2, #20
 8002c14:	215f      	movs	r1, #95	@ 0x5f
 8002c16:	2069      	movs	r0, #105	@ 0x69
 8002c18:	f7fe fe7a 	bl	8001910 <Paint_DrawCircle>
       Paint_DrawLine(85, 95, 125, 95, BLACK, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	2301      	movs	r3, #1
 8002c22:	9301      	str	r3, [sp, #4]
 8002c24:	2300      	movs	r3, #0
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	235f      	movs	r3, #95	@ 0x5f
 8002c2a:	227d      	movs	r2, #125	@ 0x7d
 8002c2c:	215f      	movs	r1, #95	@ 0x5f
 8002c2e:	2055      	movs	r0, #85	@ 0x55
 8002c30:	f7fe fd3e 	bl	80016b0 <Paint_DrawLine>
       Paint_DrawLine(105, 75, 105, 115, BLACK, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);
 8002c34:	2301      	movs	r3, #1
 8002c36:	9302      	str	r3, [sp, #8]
 8002c38:	2301      	movs	r3, #1
 8002c3a:	9301      	str	r3, [sp, #4]
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	2373      	movs	r3, #115	@ 0x73
 8002c42:	2269      	movs	r2, #105	@ 0x69
 8002c44:	214b      	movs	r1, #75	@ 0x4b
 8002c46:	2069      	movs	r0, #105	@ 0x69
 8002c48:	f7fe fd32 	bl	80016b0 <Paint_DrawLine>
       Paint_DrawString_EN(10, 0, "waveshare", &Font16, BLACK, WHITE);
 8002c4c:	23ff      	movs	r3, #255	@ 0xff
 8002c4e:	9301      	str	r3, [sp, #4]
 8002c50:	2300      	movs	r3, #0
 8002c52:	9300      	str	r3, [sp, #0]
 8002c54:	4b51      	ldr	r3, [pc, #324]	@ (8002d9c <_mainWaveShare+0x5b0>)
 8002c56:	4a52      	ldr	r2, [pc, #328]	@ (8002da0 <_mainWaveShare+0x5b4>)
 8002c58:	2100      	movs	r1, #0
 8002c5a:	200a      	movs	r0, #10
 8002c5c:	f7ff f88c 	bl	8001d78 <Paint_DrawString_EN>
       Paint_DrawString_EN(10, 20, "hello world", &Font12, WHITE, BLACK);
 8002c60:	2300      	movs	r3, #0
 8002c62:	9301      	str	r3, [sp, #4]
 8002c64:	23ff      	movs	r3, #255	@ 0xff
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	4b4e      	ldr	r3, [pc, #312]	@ (8002da4 <_mainWaveShare+0x5b8>)
 8002c6a:	4a4f      	ldr	r2, [pc, #316]	@ (8002da8 <_mainWaveShare+0x5bc>)
 8002c6c:	2114      	movs	r1, #20
 8002c6e:	200a      	movs	r0, #10
 8002c70:	f7ff f882 	bl	8001d78 <Paint_DrawString_EN>
       Paint_DrawNum(10, 33, 123456789, &Font12, BLACK, WHITE);
 8002c74:	23ff      	movs	r3, #255	@ 0xff
 8002c76:	9301      	str	r3, [sp, #4]
 8002c78:	2300      	movs	r3, #0
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	4b49      	ldr	r3, [pc, #292]	@ (8002da4 <_mainWaveShare+0x5b8>)
 8002c7e:	4a4b      	ldr	r2, [pc, #300]	@ (8002dac <_mainWaveShare+0x5c0>)
 8002c80:	2121      	movs	r1, #33	@ 0x21
 8002c82:	200a      	movs	r0, #10
 8002c84:	f7ff fa4e 	bl	8002124 <Paint_DrawNum>
       Paint_DrawNum(10, 50, 987654321, &Font16, WHITE, BLACK);
 8002c88:	2300      	movs	r3, #0
 8002c8a:	9301      	str	r3, [sp, #4]
 8002c8c:	23ff      	movs	r3, #255	@ 0xff
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	4b42      	ldr	r3, [pc, #264]	@ (8002d9c <_mainWaveShare+0x5b0>)
 8002c92:	4a47      	ldr	r2, [pc, #284]	@ (8002db0 <_mainWaveShare+0x5c4>)
 8002c94:	2132      	movs	r1, #50	@ 0x32
 8002c96:	200a      	movs	r0, #10
 8002c98:	f7ff fa44 	bl	8002124 <Paint_DrawNum>
       Paint_DrawString_CN(140, 0, "���abc", &Font12CN, GRAY1, GRAY4);
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	9301      	str	r3, [sp, #4]
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	4b43      	ldr	r3, [pc, #268]	@ (8002db4 <_mainWaveShare+0x5c8>)
 8002ca6:	4a44      	ldr	r2, [pc, #272]	@ (8002db8 <_mainWaveShare+0x5cc>)
 8002ca8:	2100      	movs	r1, #0
 8002caa:	208c      	movs	r0, #140	@ 0x8c
 8002cac:	f7ff f8b8 	bl	8001e20 <Paint_DrawString_CN>
       Paint_DrawString_CN(140, 40, "���abc", &Font12CN, GRAY2, GRAY3);
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	9301      	str	r3, [sp, #4]
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	4b3e      	ldr	r3, [pc, #248]	@ (8002db4 <_mainWaveShare+0x5c8>)
 8002cba:	4a3f      	ldr	r2, [pc, #252]	@ (8002db8 <_mainWaveShare+0x5cc>)
 8002cbc:	2128      	movs	r1, #40	@ 0x28
 8002cbe:	208c      	movs	r0, #140	@ 0x8c
 8002cc0:	f7ff f8ae 	bl	8001e20 <Paint_DrawString_CN>
       Paint_DrawString_CN(140, 80, "���abc", &Font12CN, GRAY3, GRAY2);
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	9301      	str	r3, [sp, #4]
 8002cc8:	2301      	movs	r3, #1
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	4b39      	ldr	r3, [pc, #228]	@ (8002db4 <_mainWaveShare+0x5c8>)
 8002cce:	4a3a      	ldr	r2, [pc, #232]	@ (8002db8 <_mainWaveShare+0x5cc>)
 8002cd0:	2150      	movs	r1, #80	@ 0x50
 8002cd2:	208c      	movs	r0, #140	@ 0x8c
 8002cd4:	f7ff f8a4 	bl	8001e20 <Paint_DrawString_CN>
       Paint_DrawString_CN(140, 120, "���abc", &Font12CN, GRAY4, GRAY1);
 8002cd8:	2303      	movs	r3, #3
 8002cda:	9301      	str	r3, [sp, #4]
 8002cdc:	2300      	movs	r3, #0
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	4b34      	ldr	r3, [pc, #208]	@ (8002db4 <_mainWaveShare+0x5c8>)
 8002ce2:	4a35      	ldr	r2, [pc, #212]	@ (8002db8 <_mainWaveShare+0x5cc>)
 8002ce4:	2178      	movs	r1, #120	@ 0x78
 8002ce6:	208c      	movs	r0, #140	@ 0x8c
 8002ce8:	f7ff f89a 	bl	8001e20 <Paint_DrawString_CN>

       Paint_DrawString_CN(220, 0, "΢ѩ����", &Font24CN, GRAY1, GRAY4);
 8002cec:	2300      	movs	r3, #0
 8002cee:	9301      	str	r3, [sp, #4]
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	4b31      	ldr	r3, [pc, #196]	@ (8002dbc <_mainWaveShare+0x5d0>)
 8002cf6:	4a32      	ldr	r2, [pc, #200]	@ (8002dc0 <_mainWaveShare+0x5d4>)
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	20dc      	movs	r0, #220	@ 0xdc
 8002cfc:	f7ff f890 	bl	8001e20 <Paint_DrawString_CN>
       Paint_DrawString_CN(220, 40, "΢ѩ����", &Font24CN, GRAY2, GRAY3);
 8002d00:	2301      	movs	r3, #1
 8002d02:	9301      	str	r3, [sp, #4]
 8002d04:	2302      	movs	r3, #2
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	4b2c      	ldr	r3, [pc, #176]	@ (8002dbc <_mainWaveShare+0x5d0>)
 8002d0a:	4a2d      	ldr	r2, [pc, #180]	@ (8002dc0 <_mainWaveShare+0x5d4>)
 8002d0c:	2128      	movs	r1, #40	@ 0x28
 8002d0e:	20dc      	movs	r0, #220	@ 0xdc
 8002d10:	f7ff f886 	bl	8001e20 <Paint_DrawString_CN>
       Paint_DrawString_CN(220, 80, "΢ѩ����", &Font24CN, GRAY3, GRAY2);
 8002d14:	2302      	movs	r3, #2
 8002d16:	9301      	str	r3, [sp, #4]
 8002d18:	2301      	movs	r3, #1
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	4b27      	ldr	r3, [pc, #156]	@ (8002dbc <_mainWaveShare+0x5d0>)
 8002d1e:	4a28      	ldr	r2, [pc, #160]	@ (8002dc0 <_mainWaveShare+0x5d4>)
 8002d20:	2150      	movs	r1, #80	@ 0x50
 8002d22:	20dc      	movs	r0, #220	@ 0xdc
 8002d24:	f7ff f87c 	bl	8001e20 <Paint_DrawString_CN>
       Paint_DrawString_CN(220, 120, "΢ѩ����", &Font24CN, GRAY4, GRAY1);
 8002d28:	2303      	movs	r3, #3
 8002d2a:	9301      	str	r3, [sp, #4]
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	9300      	str	r3, [sp, #0]
 8002d30:	4b22      	ldr	r3, [pc, #136]	@ (8002dbc <_mainWaveShare+0x5d0>)
 8002d32:	4a23      	ldr	r2, [pc, #140]	@ (8002dc0 <_mainWaveShare+0x5d4>)
 8002d34:	2178      	movs	r1, #120	@ 0x78
 8002d36:	20dc      	movs	r0, #220	@ 0xdc
 8002d38:	f7ff f872 	bl	8001e20 <Paint_DrawString_CN>

     EPD_4IN2_V2_Display_4Gray(BlackImage);
 8002d3c:	6978      	ldr	r0, [r7, #20]
 8002d3e:	f7fd ff67 	bl	8000c10 <EPD_4IN2_V2_Display_4Gray>
     DEV_Delay_ms(2000);
 8002d42:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002d46:	f000 fbad 	bl	80034a4 <HAL_Delay>

     Paint_Clear(WHITE);
 8002d4a:	20ff      	movs	r0, #255	@ 0xff
 8002d4c:	f7fe fb60 	bl	8001410 <Paint_Clear>
       Paint_DrawBitMap(gImage_4in2_4Gray);
 8002d50:	481c      	ldr	r0, [pc, #112]	@ (8002dc4 <_mainWaveShare+0x5d8>)
 8002d52:	f7ff fab9 	bl	80022c8 <Paint_DrawBitMap>
       EPD_4IN2_V2_Display_4Gray(BlackImage);
 8002d56:	6978      	ldr	r0, [r7, #20]
 8002d58:	f7fd ff5a 	bl	8000c10 <EPD_4IN2_V2_Display_4Gray>
     DEV_Delay_ms(2000);
 8002d5c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002d60:	f000 fba0 	bl	80034a4 <HAL_Delay>

   #endif

       EPD_4IN2_V2_Init();
 8002d64:	f7fd fe4e 	bl	8000a04 <EPD_4IN2_V2_Init>
       EPD_4IN2_V2_Clear();
 8002d68:	f7fd feb9 	bl	8000ade <EPD_4IN2_V2_Clear>
       printf("Goto Sleep...\r\n");
 8002d6c:	4816      	ldr	r0, [pc, #88]	@ (8002dc8 <_mainWaveShare+0x5dc>)
 8002d6e:	f006 faad 	bl	80092cc <puts>
       EPD_4IN2_V2_Sleep();
 8002d72:	f7fe f91e 	bl	8000fb2 <EPD_4IN2_V2_Sleep>
       free(BlackImage);
 8002d76:	6978      	ldr	r0, [r7, #20]
 8002d78:	f006 f8c8 	bl	8008f0c <free>
       BlackImage = NULL;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	617b      	str	r3, [r7, #20]
       DEV_Delay_ms(2000);//important, at least 2s
 8002d80:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002d84:	f000 fb8e 	bl	80034a4 <HAL_Delay>
       // close 5V
       printf("close 5V, Module enters 0 power consumption ...\r\n");
 8002d88:	4810      	ldr	r0, [pc, #64]	@ (8002dcc <_mainWaveShare+0x5e0>)
 8002d8a:	f006 fa9f 	bl	80092cc <puts>
       DEV_Module_Exit();
 8002d8e:	f7fd fcb1 	bl	80006f4 <DEV_Module_Exit>

       return 0;
 8002d92:	2300      	movs	r3, #0
  }
 8002d94:	4618      	mov	r0, r3
 8002d96:	3724      	adds	r7, #36	@ 0x24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd90      	pop	{r4, r7, pc}
 8002d9c:	24000014 	.word	0x24000014
 8002da0:	0800a278 	.word	0x0800a278
 8002da4:	24000000 	.word	0x24000000
 8002da8:	0800a284 	.word	0x0800a284
 8002dac:	075bcd15 	.word	0x075bcd15
 8002db0:	3ade68b1 	.word	0x3ade68b1
 8002db4:	24000008 	.word	0x24000008
 8002db8:	0800a344 	.word	0x0800a344
 8002dbc:	24000024 	.word	0x24000024
 8002dc0:	0800a2a0 	.word	0x0800a2a0
 8002dc4:	0800a484 	.word	0x0800a484
 8002dc8:	0800a354 	.word	0x0800a354
 8002dcc:	0800a364 	.word	0x0800a364

08002dd0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002dd6:	463b      	mov	r3, r7
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	605a      	str	r2, [r3, #4]
 8002dde:	609a      	str	r2, [r3, #8]
 8002de0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002de2:	f000 fc67 	bl	80036b4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002de6:	2301      	movs	r3, #1
 8002de8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002dea:	2300      	movs	r3, #0
 8002dec:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8002dee:	2300      	movs	r3, #0
 8002df0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8002df2:	231f      	movs	r3, #31
 8002df4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8002df6:	2387      	movs	r3, #135	@ 0x87
 8002df8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002e02:	2301      	movs	r3, #1
 8002e04:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002e06:	2301      	movs	r3, #1
 8002e08:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002e12:	463b      	mov	r3, r7
 8002e14:	4618      	mov	r0, r3
 8002e16:	f000 fc85 	bl	8003724 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002e1a:	2004      	movs	r0, #4
 8002e1c:	f000 fc62 	bl	80036e4 <HAL_MPU_Enable>

}
 8002e20:	bf00      	nop
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e2c:	b672      	cpsid	i
}
 8002e2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e30:	bf00      	nop
 8002e32:	e7fd      	b.n	8002e30 <Error_Handler+0x8>

08002e34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e64 <HAL_MspInit+0x30>)
 8002e3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002e40:	4a08      	ldr	r2, [pc, #32]	@ (8002e64 <HAL_MspInit+0x30>)
 8002e42:	f043 0302 	orr.w	r3, r3, #2
 8002e46:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002e4a:	4b06      	ldr	r3, [pc, #24]	@ (8002e64 <HAL_MspInit+0x30>)
 8002e4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	607b      	str	r3, [r7, #4]
 8002e56:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	58024400 	.word	0x58024400

08002e68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b0ba      	sub	sp, #232	@ 0xe8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e70:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	605a      	str	r2, [r3, #4]
 8002e7a:	609a      	str	r2, [r3, #8]
 8002e7c:	60da      	str	r2, [r3, #12]
 8002e7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e80:	f107 0318 	add.w	r3, r7, #24
 8002e84:	22b8      	movs	r2, #184	@ 0xb8
 8002e86:	2100      	movs	r1, #0
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f006 faff 	bl	800948c <memset>
  if(hspi->Instance==SPI2)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a38      	ldr	r2, [pc, #224]	@ (8002f74 <HAL_SPI_MspInit+0x10c>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d169      	bne.n	8002f6c <HAL_SPI_MspInit+0x104>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002e98:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002e9c:	f04f 0300 	mov.w	r3, #0
 8002ea0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ea8:	f107 0318 	add.w	r3, r7, #24
 8002eac:	4618      	mov	r0, r3
 8002eae:	f001 fe0d 	bl	8004acc <HAL_RCCEx_PeriphCLKConfig>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002eb8:	f7ff ffb6 	bl	8002e28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002ebc:	4b2e      	ldr	r3, [pc, #184]	@ (8002f78 <HAL_SPI_MspInit+0x110>)
 8002ebe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ec2:	4a2d      	ldr	r2, [pc, #180]	@ (8002f78 <HAL_SPI_MspInit+0x110>)
 8002ec4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ec8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002ecc:	4b2a      	ldr	r3, [pc, #168]	@ (8002f78 <HAL_SPI_MspInit+0x110>)
 8002ece:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ed2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ed6:	617b      	str	r3, [r7, #20]
 8002ed8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eda:	4b27      	ldr	r3, [pc, #156]	@ (8002f78 <HAL_SPI_MspInit+0x110>)
 8002edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ee0:	4a25      	ldr	r2, [pc, #148]	@ (8002f78 <HAL_SPI_MspInit+0x110>)
 8002ee2:	f043 0304 	orr.w	r3, r3, #4
 8002ee6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002eea:	4b23      	ldr	r3, [pc, #140]	@ (8002f78 <HAL_SPI_MspInit+0x110>)
 8002eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	613b      	str	r3, [r7, #16]
 8002ef6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ef8:	4b1f      	ldr	r3, [pc, #124]	@ (8002f78 <HAL_SPI_MspInit+0x110>)
 8002efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002efe:	4a1e      	ldr	r2, [pc, #120]	@ (8002f78 <HAL_SPI_MspInit+0x110>)
 8002f00:	f043 0302 	orr.w	r3, r3, #2
 8002f04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f08:	4b1b      	ldr	r3, [pc, #108]	@ (8002f78 <HAL_SPI_MspInit+0x110>)
 8002f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002f16:	2302      	movs	r3, #2
 8002f18:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f22:	2300      	movs	r3, #0
 8002f24:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f2e:	2305      	movs	r3, #5
 8002f30:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f34:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4810      	ldr	r0, [pc, #64]	@ (8002f7c <HAL_SPI_MspInit+0x114>)
 8002f3c:	f000 fc32 	bl	80037a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002f40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f44:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f48:	2302      	movs	r3, #2
 8002f4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f54:	2300      	movs	r3, #0
 8002f56:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f5a:	2305      	movs	r3, #5
 8002f5c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f60:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002f64:	4619      	mov	r1, r3
 8002f66:	4806      	ldr	r0, [pc, #24]	@ (8002f80 <HAL_SPI_MspInit+0x118>)
 8002f68:	f000 fc1c 	bl	80037a4 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002f6c:	bf00      	nop
 8002f6e:	37e8      	adds	r7, #232	@ 0xe8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40003800 	.word	0x40003800
 8002f78:	58024400 	.word	0x58024400
 8002f7c:	58020800 	.word	0x58020800
 8002f80:	58020400 	.word	0x58020400

08002f84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a0b      	ldr	r2, [pc, #44]	@ (8002fc0 <HAL_TIM_Base_MspInit+0x3c>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d10e      	bne.n	8002fb4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002f96:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc4 <HAL_TIM_Base_MspInit+0x40>)
 8002f98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f9c:	4a09      	ldr	r2, [pc, #36]	@ (8002fc4 <HAL_TIM_Base_MspInit+0x40>)
 8002f9e:	f043 0302 	orr.w	r3, r3, #2
 8002fa2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002fa6:	4b07      	ldr	r3, [pc, #28]	@ (8002fc4 <HAL_TIM_Base_MspInit+0x40>)
 8002fa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM8_MspInit 1 */

  }

}
 8002fb4:	bf00      	nop
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr
 8002fc0:	40010400 	.word	0x40010400
 8002fc4:	58024400 	.word	0x58024400

08002fc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b0b8      	sub	sp, #224	@ 0xe0
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	605a      	str	r2, [r3, #4]
 8002fda:	609a      	str	r2, [r3, #8]
 8002fdc:	60da      	str	r2, [r3, #12]
 8002fde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002fe0:	f107 0310 	add.w	r3, r7, #16
 8002fe4:	22b8      	movs	r2, #184	@ 0xb8
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f006 fa4f 	bl	800948c <memset>
  if(huart->Instance==UART4)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a26      	ldr	r2, [pc, #152]	@ (800308c <HAL_UART_MspInit+0xc4>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d145      	bne.n	8003084 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002ff8:	f04f 0202 	mov.w	r2, #2
 8002ffc:	f04f 0300 	mov.w	r3, #0
 8003000:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003004:	2300      	movs	r3, #0
 8003006:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800300a:	f107 0310 	add.w	r3, r7, #16
 800300e:	4618      	mov	r0, r3
 8003010:	f001 fd5c 	bl	8004acc <HAL_RCCEx_PeriphCLKConfig>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800301a:	f7ff ff05 	bl	8002e28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800301e:	4b1c      	ldr	r3, [pc, #112]	@ (8003090 <HAL_UART_MspInit+0xc8>)
 8003020:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003024:	4a1a      	ldr	r2, [pc, #104]	@ (8003090 <HAL_UART_MspInit+0xc8>)
 8003026:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800302a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800302e:	4b18      	ldr	r3, [pc, #96]	@ (8003090 <HAL_UART_MspInit+0xc8>)
 8003030:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003034:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003038:	60fb      	str	r3, [r7, #12]
 800303a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800303c:	4b14      	ldr	r3, [pc, #80]	@ (8003090 <HAL_UART_MspInit+0xc8>)
 800303e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003042:	4a13      	ldr	r2, [pc, #76]	@ (8003090 <HAL_UART_MspInit+0xc8>)
 8003044:	f043 0301 	orr.w	r3, r3, #1
 8003048:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800304c:	4b10      	ldr	r3, [pc, #64]	@ (8003090 <HAL_UART_MspInit+0xc8>)
 800304e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	60bb      	str	r3, [r7, #8]
 8003058:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800305a:	2303      	movs	r3, #3
 800305c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003060:	2302      	movs	r3, #2
 8003062:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003066:	2300      	movs	r3, #0
 8003068:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800306c:	2300      	movs	r3, #0
 800306e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003072:	2308      	movs	r3, #8
 8003074:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003078:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800307c:	4619      	mov	r1, r3
 800307e:	4805      	ldr	r0, [pc, #20]	@ (8003094 <HAL_UART_MspInit+0xcc>)
 8003080:	f000 fb90 	bl	80037a4 <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8003084:	bf00      	nop
 8003086:	37e0      	adds	r7, #224	@ 0xe0
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40004c00 	.word	0x40004c00
 8003090:	58024400 	.word	0x58024400
 8003094:	58020000 	.word	0x58020000

08003098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800309c:	bf00      	nop
 800309e:	e7fd      	b.n	800309c <NMI_Handler+0x4>

080030a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030a4:	bf00      	nop
 80030a6:	e7fd      	b.n	80030a4 <HardFault_Handler+0x4>

080030a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030ac:	bf00      	nop
 80030ae:	e7fd      	b.n	80030ac <MemManage_Handler+0x4>

080030b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030b4:	bf00      	nop
 80030b6:	e7fd      	b.n	80030b4 <BusFault_Handler+0x4>

080030b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030bc:	bf00      	nop
 80030be:	e7fd      	b.n	80030bc <UsageFault_Handler+0x4>

080030c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030c4:	bf00      	nop
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030ce:	b480      	push	{r7}
 80030d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030d2:	bf00      	nop
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030e0:	bf00      	nop
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030ee:	f000 f9b9 	bl	8003464 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030f2:	bf00      	nop
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b086      	sub	sp, #24
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	60f8      	str	r0, [r7, #12]
 80030fe:	60b9      	str	r1, [r7, #8]
 8003100:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003102:	2300      	movs	r3, #0
 8003104:	617b      	str	r3, [r7, #20]
 8003106:	e00a      	b.n	800311e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003108:	f3af 8000 	nop.w
 800310c:	4601      	mov	r1, r0
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	1c5a      	adds	r2, r3, #1
 8003112:	60ba      	str	r2, [r7, #8]
 8003114:	b2ca      	uxtb	r2, r1
 8003116:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	3301      	adds	r3, #1
 800311c:	617b      	str	r3, [r7, #20]
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	429a      	cmp	r2, r3
 8003124:	dbf0      	blt.n	8003108 <_read+0x12>
  }

  return len;
 8003126:	687b      	ldr	r3, [r7, #4]
}
 8003128:	4618      	mov	r0, r3
 800312a:	3718      	adds	r7, #24
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800313c:	2300      	movs	r3, #0
 800313e:	617b      	str	r3, [r7, #20]
 8003140:	e009      	b.n	8003156 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	1c5a      	adds	r2, r3, #1
 8003146:	60ba      	str	r2, [r7, #8]
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff f8f2 	bl	8002334 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	3301      	adds	r3, #1
 8003154:	617b      	str	r3, [r7, #20]
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	429a      	cmp	r2, r3
 800315c:	dbf1      	blt.n	8003142 <_write+0x12>
  }
  return len;
 800315e:	687b      	ldr	r3, [r7, #4]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3718      	adds	r7, #24
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <_close>:

int _close(int file)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003170:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003174:	4618      	mov	r0, r3
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003190:	605a      	str	r2, [r3, #4]
  return 0;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <_isatty>:

int _isatty(int file)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80031a8:	2301      	movs	r3, #1
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b085      	sub	sp, #20
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	60f8      	str	r0, [r7, #12]
 80031be:	60b9      	str	r1, [r7, #8]
 80031c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031d8:	4a14      	ldr	r2, [pc, #80]	@ (800322c <_sbrk+0x5c>)
 80031da:	4b15      	ldr	r3, [pc, #84]	@ (8003230 <_sbrk+0x60>)
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031e4:	4b13      	ldr	r3, [pc, #76]	@ (8003234 <_sbrk+0x64>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d102      	bne.n	80031f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031ec:	4b11      	ldr	r3, [pc, #68]	@ (8003234 <_sbrk+0x64>)
 80031ee:	4a12      	ldr	r2, [pc, #72]	@ (8003238 <_sbrk+0x68>)
 80031f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031f2:	4b10      	ldr	r3, [pc, #64]	@ (8003234 <_sbrk+0x64>)
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4413      	add	r3, r2
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d207      	bcs.n	8003210 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003200:	f006 f9a2 	bl	8009548 <__errno>
 8003204:	4603      	mov	r3, r0
 8003206:	220c      	movs	r2, #12
 8003208:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800320a:	f04f 33ff 	mov.w	r3, #4294967295
 800320e:	e009      	b.n	8003224 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003210:	4b08      	ldr	r3, [pc, #32]	@ (8003234 <_sbrk+0x64>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003216:	4b07      	ldr	r3, [pc, #28]	@ (8003234 <_sbrk+0x64>)
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4413      	add	r3, r2
 800321e:	4a05      	ldr	r2, [pc, #20]	@ (8003234 <_sbrk+0x64>)
 8003220:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003222:	68fb      	ldr	r3, [r7, #12]
}
 8003224:	4618      	mov	r0, r3
 8003226:	3718      	adds	r7, #24
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	24050000 	.word	0x24050000
 8003230:	00000400 	.word	0x00000400
 8003234:	24000238 	.word	0x24000238
 8003238:	24000390 	.word	0x24000390

0800323c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003240:	4b32      	ldr	r3, [pc, #200]	@ (800330c <SystemInit+0xd0>)
 8003242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003246:	4a31      	ldr	r2, [pc, #196]	@ (800330c <SystemInit+0xd0>)
 8003248:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800324c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003250:	4b2f      	ldr	r3, [pc, #188]	@ (8003310 <SystemInit+0xd4>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 030f 	and.w	r3, r3, #15
 8003258:	2b06      	cmp	r3, #6
 800325a:	d807      	bhi.n	800326c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800325c:	4b2c      	ldr	r3, [pc, #176]	@ (8003310 <SystemInit+0xd4>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f023 030f 	bic.w	r3, r3, #15
 8003264:	4a2a      	ldr	r2, [pc, #168]	@ (8003310 <SystemInit+0xd4>)
 8003266:	f043 0307 	orr.w	r3, r3, #7
 800326a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800326c:	4b29      	ldr	r3, [pc, #164]	@ (8003314 <SystemInit+0xd8>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a28      	ldr	r2, [pc, #160]	@ (8003314 <SystemInit+0xd8>)
 8003272:	f043 0301 	orr.w	r3, r3, #1
 8003276:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003278:	4b26      	ldr	r3, [pc, #152]	@ (8003314 <SystemInit+0xd8>)
 800327a:	2200      	movs	r2, #0
 800327c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800327e:	4b25      	ldr	r3, [pc, #148]	@ (8003314 <SystemInit+0xd8>)
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	4924      	ldr	r1, [pc, #144]	@ (8003314 <SystemInit+0xd8>)
 8003284:	4b24      	ldr	r3, [pc, #144]	@ (8003318 <SystemInit+0xdc>)
 8003286:	4013      	ands	r3, r2
 8003288:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800328a:	4b21      	ldr	r3, [pc, #132]	@ (8003310 <SystemInit+0xd4>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0308 	and.w	r3, r3, #8
 8003292:	2b00      	cmp	r3, #0
 8003294:	d007      	beq.n	80032a6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003296:	4b1e      	ldr	r3, [pc, #120]	@ (8003310 <SystemInit+0xd4>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f023 030f 	bic.w	r3, r3, #15
 800329e:	4a1c      	ldr	r2, [pc, #112]	@ (8003310 <SystemInit+0xd4>)
 80032a0:	f043 0307 	orr.w	r3, r3, #7
 80032a4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80032a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003314 <SystemInit+0xd8>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80032ac:	4b19      	ldr	r3, [pc, #100]	@ (8003314 <SystemInit+0xd8>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80032b2:	4b18      	ldr	r3, [pc, #96]	@ (8003314 <SystemInit+0xd8>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80032b8:	4b16      	ldr	r3, [pc, #88]	@ (8003314 <SystemInit+0xd8>)
 80032ba:	4a18      	ldr	r2, [pc, #96]	@ (800331c <SystemInit+0xe0>)
 80032bc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80032be:	4b15      	ldr	r3, [pc, #84]	@ (8003314 <SystemInit+0xd8>)
 80032c0:	4a17      	ldr	r2, [pc, #92]	@ (8003320 <SystemInit+0xe4>)
 80032c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80032c4:	4b13      	ldr	r3, [pc, #76]	@ (8003314 <SystemInit+0xd8>)
 80032c6:	4a17      	ldr	r2, [pc, #92]	@ (8003324 <SystemInit+0xe8>)
 80032c8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80032ca:	4b12      	ldr	r3, [pc, #72]	@ (8003314 <SystemInit+0xd8>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80032d0:	4b10      	ldr	r3, [pc, #64]	@ (8003314 <SystemInit+0xd8>)
 80032d2:	4a14      	ldr	r2, [pc, #80]	@ (8003324 <SystemInit+0xe8>)
 80032d4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80032d6:	4b0f      	ldr	r3, [pc, #60]	@ (8003314 <SystemInit+0xd8>)
 80032d8:	2200      	movs	r2, #0
 80032da:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80032dc:	4b0d      	ldr	r3, [pc, #52]	@ (8003314 <SystemInit+0xd8>)
 80032de:	4a11      	ldr	r2, [pc, #68]	@ (8003324 <SystemInit+0xe8>)
 80032e0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80032e2:	4b0c      	ldr	r3, [pc, #48]	@ (8003314 <SystemInit+0xd8>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80032e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003314 <SystemInit+0xd8>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a09      	ldr	r2, [pc, #36]	@ (8003314 <SystemInit+0xd8>)
 80032ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80032f4:	4b07      	ldr	r3, [pc, #28]	@ (8003314 <SystemInit+0xd8>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80032fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003328 <SystemInit+0xec>)
 80032fc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003300:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003302:	bf00      	nop
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	e000ed00 	.word	0xe000ed00
 8003310:	52002000 	.word	0x52002000
 8003314:	58024400 	.word	0x58024400
 8003318:	eaf6ed7f 	.word	0xeaf6ed7f
 800331c:	02020200 	.word	0x02020200
 8003320:	01ff0000 	.word	0x01ff0000
 8003324:	01010280 	.word	0x01010280
 8003328:	52004000 	.word	0x52004000

0800332c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800332c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003364 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003330:	f7ff ff84 	bl	800323c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003334:	480c      	ldr	r0, [pc, #48]	@ (8003368 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003336:	490d      	ldr	r1, [pc, #52]	@ (800336c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003338:	4a0d      	ldr	r2, [pc, #52]	@ (8003370 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800333a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800333c:	e002      	b.n	8003344 <LoopCopyDataInit>

0800333e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800333e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003342:	3304      	adds	r3, #4

08003344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003348:	d3f9      	bcc.n	800333e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800334a:	4a0a      	ldr	r2, [pc, #40]	@ (8003374 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800334c:	4c0a      	ldr	r4, [pc, #40]	@ (8003378 <LoopFillZerobss+0x22>)
  movs r3, #0
 800334e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003350:	e001      	b.n	8003356 <LoopFillZerobss>

08003352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003354:	3204      	adds	r2, #4

08003356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003358:	d3fb      	bcc.n	8003352 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800335a:	f006 f8fb 	bl	8009554 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800335e:	f7fe fffb 	bl	8002358 <main>
  bx  lr
 8003362:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003364:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003368:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800336c:	2400009c 	.word	0x2400009c
  ldr r2, =_sidata
 8003370:	080150b8 	.word	0x080150b8
  ldr r2, =_sbss
 8003374:	2400009c 	.word	0x2400009c
  ldr r4, =_ebss
 8003378:	2400038c 	.word	0x2400038c

0800337c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800337c:	e7fe      	b.n	800337c <ADC3_IRQHandler>
	...

08003380 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003386:	2003      	movs	r0, #3
 8003388:	f000 f962 	bl	8003650 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800338c:	f001 f9c8 	bl	8004720 <HAL_RCC_GetSysClockFreq>
 8003390:	4602      	mov	r2, r0
 8003392:	4b15      	ldr	r3, [pc, #84]	@ (80033e8 <HAL_Init+0x68>)
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	0a1b      	lsrs	r3, r3, #8
 8003398:	f003 030f 	and.w	r3, r3, #15
 800339c:	4913      	ldr	r1, [pc, #76]	@ (80033ec <HAL_Init+0x6c>)
 800339e:	5ccb      	ldrb	r3, [r1, r3]
 80033a0:	f003 031f 	and.w	r3, r3, #31
 80033a4:	fa22 f303 	lsr.w	r3, r2, r3
 80033a8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033aa:	4b0f      	ldr	r3, [pc, #60]	@ (80033e8 <HAL_Init+0x68>)
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	f003 030f 	and.w	r3, r3, #15
 80033b2:	4a0e      	ldr	r2, [pc, #56]	@ (80033ec <HAL_Init+0x6c>)
 80033b4:	5cd3      	ldrb	r3, [r2, r3]
 80033b6:	f003 031f 	and.w	r3, r3, #31
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	fa22 f303 	lsr.w	r3, r2, r3
 80033c0:	4a0b      	ldr	r2, [pc, #44]	@ (80033f0 <HAL_Init+0x70>)
 80033c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033c4:	4a0b      	ldr	r2, [pc, #44]	@ (80033f4 <HAL_Init+0x74>)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033ca:	200f      	movs	r0, #15
 80033cc:	f000 f814 	bl	80033f8 <HAL_InitTick>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e002      	b.n	80033e0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80033da:	f7ff fd2b 	bl	8002e34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	58024400 	.word	0x58024400
 80033ec:	0801503c 	.word	0x0801503c
 80033f0:	24000034 	.word	0x24000034
 80033f4:	24000030 	.word	0x24000030

080033f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003400:	4b15      	ldr	r3, [pc, #84]	@ (8003458 <HAL_InitTick+0x60>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e021      	b.n	8003450 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800340c:	4b13      	ldr	r3, [pc, #76]	@ (800345c <HAL_InitTick+0x64>)
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	4b11      	ldr	r3, [pc, #68]	@ (8003458 <HAL_InitTick+0x60>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	4619      	mov	r1, r3
 8003416:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800341a:	fbb3 f3f1 	udiv	r3, r3, r1
 800341e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003422:	4618      	mov	r0, r3
 8003424:	f000 f939 	bl	800369a <HAL_SYSTICK_Config>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e00e      	b.n	8003450 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b0f      	cmp	r3, #15
 8003436:	d80a      	bhi.n	800344e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003438:	2200      	movs	r2, #0
 800343a:	6879      	ldr	r1, [r7, #4]
 800343c:	f04f 30ff 	mov.w	r0, #4294967295
 8003440:	f000 f911 	bl	8003666 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003444:	4a06      	ldr	r2, [pc, #24]	@ (8003460 <HAL_InitTick+0x68>)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800344a:	2300      	movs	r3, #0
 800344c:	e000      	b.n	8003450 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
}
 8003450:	4618      	mov	r0, r3
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	2400003c 	.word	0x2400003c
 800345c:	24000030 	.word	0x24000030
 8003460:	24000038 	.word	0x24000038

08003464 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003468:	4b06      	ldr	r3, [pc, #24]	@ (8003484 <HAL_IncTick+0x20>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	461a      	mov	r2, r3
 800346e:	4b06      	ldr	r3, [pc, #24]	@ (8003488 <HAL_IncTick+0x24>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4413      	add	r3, r2
 8003474:	4a04      	ldr	r2, [pc, #16]	@ (8003488 <HAL_IncTick+0x24>)
 8003476:	6013      	str	r3, [r2, #0]
}
 8003478:	bf00      	nop
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	2400003c 	.word	0x2400003c
 8003488:	2400023c 	.word	0x2400023c

0800348c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  return uwTick;
 8003490:	4b03      	ldr	r3, [pc, #12]	@ (80034a0 <HAL_GetTick+0x14>)
 8003492:	681b      	ldr	r3, [r3, #0]
}
 8003494:	4618      	mov	r0, r3
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	2400023c 	.word	0x2400023c

080034a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034ac:	f7ff ffee 	bl	800348c <HAL_GetTick>
 80034b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034bc:	d005      	beq.n	80034ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034be:	4b0a      	ldr	r3, [pc, #40]	@ (80034e8 <HAL_Delay+0x44>)
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	461a      	mov	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4413      	add	r3, r2
 80034c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034ca:	bf00      	nop
 80034cc:	f7ff ffde 	bl	800348c <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d8f7      	bhi.n	80034cc <HAL_Delay+0x28>
  {
  }
}
 80034dc:	bf00      	nop
 80034de:	bf00      	nop
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	2400003c 	.word	0x2400003c

080034ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034fc:	4b0b      	ldr	r3, [pc, #44]	@ (800352c <__NVIC_SetPriorityGrouping+0x40>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003508:	4013      	ands	r3, r2
 800350a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003514:	4b06      	ldr	r3, [pc, #24]	@ (8003530 <__NVIC_SetPriorityGrouping+0x44>)
 8003516:	4313      	orrs	r3, r2
 8003518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800351a:	4a04      	ldr	r2, [pc, #16]	@ (800352c <__NVIC_SetPriorityGrouping+0x40>)
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	60d3      	str	r3, [r2, #12]
}
 8003520:	bf00      	nop
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	e000ed00 	.word	0xe000ed00
 8003530:	05fa0000 	.word	0x05fa0000

08003534 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003538:	4b04      	ldr	r3, [pc, #16]	@ (800354c <__NVIC_GetPriorityGrouping+0x18>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	0a1b      	lsrs	r3, r3, #8
 800353e:	f003 0307 	and.w	r3, r3, #7
}
 8003542:	4618      	mov	r0, r3
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	e000ed00 	.word	0xe000ed00

08003550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	4603      	mov	r3, r0
 8003558:	6039      	str	r1, [r7, #0]
 800355a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800355c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003560:	2b00      	cmp	r3, #0
 8003562:	db0a      	blt.n	800357a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	b2da      	uxtb	r2, r3
 8003568:	490c      	ldr	r1, [pc, #48]	@ (800359c <__NVIC_SetPriority+0x4c>)
 800356a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800356e:	0112      	lsls	r2, r2, #4
 8003570:	b2d2      	uxtb	r2, r2
 8003572:	440b      	add	r3, r1
 8003574:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003578:	e00a      	b.n	8003590 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	b2da      	uxtb	r2, r3
 800357e:	4908      	ldr	r1, [pc, #32]	@ (80035a0 <__NVIC_SetPriority+0x50>)
 8003580:	88fb      	ldrh	r3, [r7, #6]
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	3b04      	subs	r3, #4
 8003588:	0112      	lsls	r2, r2, #4
 800358a:	b2d2      	uxtb	r2, r2
 800358c:	440b      	add	r3, r1
 800358e:	761a      	strb	r2, [r3, #24]
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	e000e100 	.word	0xe000e100
 80035a0:	e000ed00 	.word	0xe000ed00

080035a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b089      	sub	sp, #36	@ 0x24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	f1c3 0307 	rsb	r3, r3, #7
 80035be:	2b04      	cmp	r3, #4
 80035c0:	bf28      	it	cs
 80035c2:	2304      	movcs	r3, #4
 80035c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	3304      	adds	r3, #4
 80035ca:	2b06      	cmp	r3, #6
 80035cc:	d902      	bls.n	80035d4 <NVIC_EncodePriority+0x30>
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	3b03      	subs	r3, #3
 80035d2:	e000      	b.n	80035d6 <NVIC_EncodePriority+0x32>
 80035d4:	2300      	movs	r3, #0
 80035d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d8:	f04f 32ff 	mov.w	r2, #4294967295
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	fa02 f303 	lsl.w	r3, r2, r3
 80035e2:	43da      	mvns	r2, r3
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	401a      	ands	r2, r3
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035ec:	f04f 31ff 	mov.w	r1, #4294967295
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	fa01 f303 	lsl.w	r3, r1, r3
 80035f6:	43d9      	mvns	r1, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035fc:	4313      	orrs	r3, r2
         );
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3724      	adds	r7, #36	@ 0x24
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
	...

0800360c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3b01      	subs	r3, #1
 8003618:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800361c:	d301      	bcc.n	8003622 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800361e:	2301      	movs	r3, #1
 8003620:	e00f      	b.n	8003642 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003622:	4a0a      	ldr	r2, [pc, #40]	@ (800364c <SysTick_Config+0x40>)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	3b01      	subs	r3, #1
 8003628:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800362a:	210f      	movs	r1, #15
 800362c:	f04f 30ff 	mov.w	r0, #4294967295
 8003630:	f7ff ff8e 	bl	8003550 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003634:	4b05      	ldr	r3, [pc, #20]	@ (800364c <SysTick_Config+0x40>)
 8003636:	2200      	movs	r2, #0
 8003638:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800363a:	4b04      	ldr	r3, [pc, #16]	@ (800364c <SysTick_Config+0x40>)
 800363c:	2207      	movs	r2, #7
 800363e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	e000e010 	.word	0xe000e010

08003650 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f7ff ff47 	bl	80034ec <__NVIC_SetPriorityGrouping>
}
 800365e:	bf00      	nop
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b086      	sub	sp, #24
 800366a:	af00      	add	r7, sp, #0
 800366c:	4603      	mov	r3, r0
 800366e:	60b9      	str	r1, [r7, #8]
 8003670:	607a      	str	r2, [r7, #4]
 8003672:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003674:	f7ff ff5e 	bl	8003534 <__NVIC_GetPriorityGrouping>
 8003678:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	68b9      	ldr	r1, [r7, #8]
 800367e:	6978      	ldr	r0, [r7, #20]
 8003680:	f7ff ff90 	bl	80035a4 <NVIC_EncodePriority>
 8003684:	4602      	mov	r2, r0
 8003686:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800368a:	4611      	mov	r1, r2
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff ff5f 	bl	8003550 <__NVIC_SetPriority>
}
 8003692:	bf00      	nop
 8003694:	3718      	adds	r7, #24
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b082      	sub	sp, #8
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7ff ffb2 	bl	800360c <SysTick_Config>
 80036a8:	4603      	mov	r3, r0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
	...

080036b4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80036b8:	f3bf 8f5f 	dmb	sy
}
 80036bc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80036be:	4b07      	ldr	r3, [pc, #28]	@ (80036dc <HAL_MPU_Disable+0x28>)
 80036c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c2:	4a06      	ldr	r2, [pc, #24]	@ (80036dc <HAL_MPU_Disable+0x28>)
 80036c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036c8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80036ca:	4b05      	ldr	r3, [pc, #20]	@ (80036e0 <HAL_MPU_Disable+0x2c>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	605a      	str	r2, [r3, #4]
}
 80036d0:	bf00      	nop
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	e000ed00 	.word	0xe000ed00
 80036e0:	e000ed90 	.word	0xe000ed90

080036e4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80036ec:	4a0b      	ldr	r2, [pc, #44]	@ (800371c <HAL_MPU_Enable+0x38>)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f043 0301 	orr.w	r3, r3, #1
 80036f4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80036f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003720 <HAL_MPU_Enable+0x3c>)
 80036f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fa:	4a09      	ldr	r2, [pc, #36]	@ (8003720 <HAL_MPU_Enable+0x3c>)
 80036fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003700:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003702:	f3bf 8f4f 	dsb	sy
}
 8003706:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003708:	f3bf 8f6f 	isb	sy
}
 800370c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800370e:	bf00      	nop
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	e000ed90 	.word	0xe000ed90
 8003720:	e000ed00 	.word	0xe000ed00

08003724 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	785a      	ldrb	r2, [r3, #1]
 8003730:	4b1b      	ldr	r3, [pc, #108]	@ (80037a0 <HAL_MPU_ConfigRegion+0x7c>)
 8003732:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003734:	4b1a      	ldr	r3, [pc, #104]	@ (80037a0 <HAL_MPU_ConfigRegion+0x7c>)
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	4a19      	ldr	r2, [pc, #100]	@ (80037a0 <HAL_MPU_ConfigRegion+0x7c>)
 800373a:	f023 0301 	bic.w	r3, r3, #1
 800373e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003740:	4a17      	ldr	r2, [pc, #92]	@ (80037a0 <HAL_MPU_ConfigRegion+0x7c>)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	7b1b      	ldrb	r3, [r3, #12]
 800374c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	7adb      	ldrb	r3, [r3, #11]
 8003752:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003754:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	7a9b      	ldrb	r3, [r3, #10]
 800375a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800375c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	7b5b      	ldrb	r3, [r3, #13]
 8003762:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003764:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	7b9b      	ldrb	r3, [r3, #14]
 800376a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800376c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	7bdb      	ldrb	r3, [r3, #15]
 8003772:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003774:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	7a5b      	ldrb	r3, [r3, #9]
 800377a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800377c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	7a1b      	ldrb	r3, [r3, #8]
 8003782:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003784:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	7812      	ldrb	r2, [r2, #0]
 800378a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800378c:	4a04      	ldr	r2, [pc, #16]	@ (80037a0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800378e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003790:	6113      	str	r3, [r2, #16]
}
 8003792:	bf00      	nop
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	e000ed90 	.word	0xe000ed90

080037a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b089      	sub	sp, #36	@ 0x24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80037b2:	4b86      	ldr	r3, [pc, #536]	@ (80039cc <HAL_GPIO_Init+0x228>)
 80037b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80037b6:	e18c      	b.n	8003ad2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	2101      	movs	r1, #1
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	fa01 f303 	lsl.w	r3, r1, r3
 80037c4:	4013      	ands	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	f000 817e 	beq.w	8003acc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f003 0303 	and.w	r3, r3, #3
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d005      	beq.n	80037e8 <HAL_GPIO_Init+0x44>
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f003 0303 	and.w	r3, r3, #3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d130      	bne.n	800384a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	2203      	movs	r2, #3
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	43db      	mvns	r3, r3
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	4013      	ands	r3, r2
 80037fe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	68da      	ldr	r2, [r3, #12]
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	4313      	orrs	r3, r2
 8003810:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800381e:	2201      	movs	r2, #1
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	43db      	mvns	r3, r3
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	4013      	ands	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	091b      	lsrs	r3, r3, #4
 8003834:	f003 0201 	and.w	r2, r3, #1
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	fa02 f303 	lsl.w	r3, r2, r3
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	4313      	orrs	r3, r2
 8003842:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f003 0303 	and.w	r3, r3, #3
 8003852:	2b03      	cmp	r3, #3
 8003854:	d017      	beq.n	8003886 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	2203      	movs	r2, #3
 8003862:	fa02 f303 	lsl.w	r3, r2, r3
 8003866:	43db      	mvns	r3, r3
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	4013      	ands	r3, r2
 800386c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	689a      	ldr	r2, [r3, #8]
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	fa02 f303 	lsl.w	r3, r2, r3
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	4313      	orrs	r3, r2
 800387e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f003 0303 	and.w	r3, r3, #3
 800388e:	2b02      	cmp	r3, #2
 8003890:	d123      	bne.n	80038da <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	08da      	lsrs	r2, r3, #3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	3208      	adds	r2, #8
 800389a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800389e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	220f      	movs	r2, #15
 80038aa:	fa02 f303 	lsl.w	r3, r2, r3
 80038ae:	43db      	mvns	r3, r3
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	4013      	ands	r3, r2
 80038b4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	691a      	ldr	r2, [r3, #16]
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	fa02 f303 	lsl.w	r3, r2, r3
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	08da      	lsrs	r2, r3, #3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3208      	adds	r2, #8
 80038d4:	69b9      	ldr	r1, [r7, #24]
 80038d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	2203      	movs	r2, #3
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	43db      	mvns	r3, r3
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	4013      	ands	r3, r2
 80038f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f003 0203 	and.w	r2, r3, #3
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	4313      	orrs	r3, r2
 8003906:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003916:	2b00      	cmp	r3, #0
 8003918:	f000 80d8 	beq.w	8003acc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800391c:	4b2c      	ldr	r3, [pc, #176]	@ (80039d0 <HAL_GPIO_Init+0x22c>)
 800391e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003922:	4a2b      	ldr	r2, [pc, #172]	@ (80039d0 <HAL_GPIO_Init+0x22c>)
 8003924:	f043 0302 	orr.w	r3, r3, #2
 8003928:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800392c:	4b28      	ldr	r3, [pc, #160]	@ (80039d0 <HAL_GPIO_Init+0x22c>)
 800392e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	60fb      	str	r3, [r7, #12]
 8003938:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800393a:	4a26      	ldr	r2, [pc, #152]	@ (80039d4 <HAL_GPIO_Init+0x230>)
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	089b      	lsrs	r3, r3, #2
 8003940:	3302      	adds	r3, #2
 8003942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003946:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	f003 0303 	and.w	r3, r3, #3
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	220f      	movs	r2, #15
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	43db      	mvns	r3, r3
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	4013      	ands	r3, r2
 800395c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a1d      	ldr	r2, [pc, #116]	@ (80039d8 <HAL_GPIO_Init+0x234>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d04a      	beq.n	80039fc <HAL_GPIO_Init+0x258>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a1c      	ldr	r2, [pc, #112]	@ (80039dc <HAL_GPIO_Init+0x238>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d02b      	beq.n	80039c6 <HAL_GPIO_Init+0x222>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a1b      	ldr	r2, [pc, #108]	@ (80039e0 <HAL_GPIO_Init+0x23c>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d025      	beq.n	80039c2 <HAL_GPIO_Init+0x21e>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a1a      	ldr	r2, [pc, #104]	@ (80039e4 <HAL_GPIO_Init+0x240>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d01f      	beq.n	80039be <HAL_GPIO_Init+0x21a>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a19      	ldr	r2, [pc, #100]	@ (80039e8 <HAL_GPIO_Init+0x244>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d019      	beq.n	80039ba <HAL_GPIO_Init+0x216>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a18      	ldr	r2, [pc, #96]	@ (80039ec <HAL_GPIO_Init+0x248>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d013      	beq.n	80039b6 <HAL_GPIO_Init+0x212>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a17      	ldr	r2, [pc, #92]	@ (80039f0 <HAL_GPIO_Init+0x24c>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d00d      	beq.n	80039b2 <HAL_GPIO_Init+0x20e>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a16      	ldr	r2, [pc, #88]	@ (80039f4 <HAL_GPIO_Init+0x250>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d007      	beq.n	80039ae <HAL_GPIO_Init+0x20a>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a15      	ldr	r2, [pc, #84]	@ (80039f8 <HAL_GPIO_Init+0x254>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d101      	bne.n	80039aa <HAL_GPIO_Init+0x206>
 80039a6:	2309      	movs	r3, #9
 80039a8:	e029      	b.n	80039fe <HAL_GPIO_Init+0x25a>
 80039aa:	230a      	movs	r3, #10
 80039ac:	e027      	b.n	80039fe <HAL_GPIO_Init+0x25a>
 80039ae:	2307      	movs	r3, #7
 80039b0:	e025      	b.n	80039fe <HAL_GPIO_Init+0x25a>
 80039b2:	2306      	movs	r3, #6
 80039b4:	e023      	b.n	80039fe <HAL_GPIO_Init+0x25a>
 80039b6:	2305      	movs	r3, #5
 80039b8:	e021      	b.n	80039fe <HAL_GPIO_Init+0x25a>
 80039ba:	2304      	movs	r3, #4
 80039bc:	e01f      	b.n	80039fe <HAL_GPIO_Init+0x25a>
 80039be:	2303      	movs	r3, #3
 80039c0:	e01d      	b.n	80039fe <HAL_GPIO_Init+0x25a>
 80039c2:	2302      	movs	r3, #2
 80039c4:	e01b      	b.n	80039fe <HAL_GPIO_Init+0x25a>
 80039c6:	2301      	movs	r3, #1
 80039c8:	e019      	b.n	80039fe <HAL_GPIO_Init+0x25a>
 80039ca:	bf00      	nop
 80039cc:	58000080 	.word	0x58000080
 80039d0:	58024400 	.word	0x58024400
 80039d4:	58000400 	.word	0x58000400
 80039d8:	58020000 	.word	0x58020000
 80039dc:	58020400 	.word	0x58020400
 80039e0:	58020800 	.word	0x58020800
 80039e4:	58020c00 	.word	0x58020c00
 80039e8:	58021000 	.word	0x58021000
 80039ec:	58021400 	.word	0x58021400
 80039f0:	58021800 	.word	0x58021800
 80039f4:	58021c00 	.word	0x58021c00
 80039f8:	58022400 	.word	0x58022400
 80039fc:	2300      	movs	r3, #0
 80039fe:	69fa      	ldr	r2, [r7, #28]
 8003a00:	f002 0203 	and.w	r2, r2, #3
 8003a04:	0092      	lsls	r2, r2, #2
 8003a06:	4093      	lsls	r3, r2
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a0e:	4938      	ldr	r1, [pc, #224]	@ (8003af0 <HAL_GPIO_Init+0x34c>)
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	089b      	lsrs	r3, r3, #2
 8003a14:	3302      	adds	r3, #2
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	43db      	mvns	r3, r3
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d003      	beq.n	8003a42 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003a42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003a4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	43db      	mvns	r3, r3
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d003      	beq.n	8003a70 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003a70:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	43db      	mvns	r3, r3
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	4013      	ands	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d003      	beq.n	8003a9c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	43db      	mvns	r3, r3
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f47f ae6b 	bne.w	80037b8 <HAL_GPIO_Init+0x14>
  }
}
 8003ae2:	bf00      	nop
 8003ae4:	bf00      	nop
 8003ae6:	3724      	adds	r7, #36	@ 0x24
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr
 8003af0:	58000400 	.word	0x58000400

08003af4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	460b      	mov	r3, r1
 8003afe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	691a      	ldr	r2, [r3, #16]
 8003b04:	887b      	ldrh	r3, [r7, #2]
 8003b06:	4013      	ands	r3, r2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d002      	beq.n	8003b12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	73fb      	strb	r3, [r7, #15]
 8003b10:	e001      	b.n	8003b16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b12:	2300      	movs	r3, #0
 8003b14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3714      	adds	r7, #20
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	807b      	strh	r3, [r7, #2]
 8003b30:	4613      	mov	r3, r2
 8003b32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b34:	787b      	ldrb	r3, [r7, #1]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d003      	beq.n	8003b42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b3a:	887a      	ldrh	r2, [r7, #2]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003b40:	e003      	b.n	8003b4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003b42:	887b      	ldrh	r3, [r7, #2]
 8003b44:	041a      	lsls	r2, r3, #16
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	619a      	str	r2, [r3, #24]
}
 8003b4a:	bf00      	nop
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b085      	sub	sp, #20
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
 8003b5e:	460b      	mov	r3, r1
 8003b60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b68:	887a      	ldrh	r2, [r7, #2]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	041a      	lsls	r2, r3, #16
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	43d9      	mvns	r1, r3
 8003b74:	887b      	ldrh	r3, [r7, #2]
 8003b76:	400b      	ands	r3, r1
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	619a      	str	r2, [r3, #24]
}
 8003b7e:	bf00      	nop
 8003b80:	3714      	adds	r7, #20
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
	...

08003b8c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003b94:	4b19      	ldr	r3, [pc, #100]	@ (8003bfc <HAL_PWREx_ConfigSupply+0x70>)
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	2b04      	cmp	r3, #4
 8003b9e:	d00a      	beq.n	8003bb6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003ba0:	4b16      	ldr	r3, [pc, #88]	@ (8003bfc <HAL_PWREx_ConfigSupply+0x70>)
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	f003 0307 	and.w	r3, r3, #7
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d001      	beq.n	8003bb2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e01f      	b.n	8003bf2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	e01d      	b.n	8003bf2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003bb6:	4b11      	ldr	r3, [pc, #68]	@ (8003bfc <HAL_PWREx_ConfigSupply+0x70>)
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f023 0207 	bic.w	r2, r3, #7
 8003bbe:	490f      	ldr	r1, [pc, #60]	@ (8003bfc <HAL_PWREx_ConfigSupply+0x70>)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003bc6:	f7ff fc61 	bl	800348c <HAL_GetTick>
 8003bca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003bcc:	e009      	b.n	8003be2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003bce:	f7ff fc5d 	bl	800348c <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003bdc:	d901      	bls.n	8003be2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e007      	b.n	8003bf2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003be2:	4b06      	ldr	r3, [pc, #24]	@ (8003bfc <HAL_PWREx_ConfigSupply+0x70>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bee:	d1ee      	bne.n	8003bce <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	58024800 	.word	0x58024800

08003c00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b08c      	sub	sp, #48	@ 0x30
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e3c8      	b.n	80043a4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 8087 	beq.w	8003d2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c20:	4b88      	ldr	r3, [pc, #544]	@ (8003e44 <HAL_RCC_OscConfig+0x244>)
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c2a:	4b86      	ldr	r3, [pc, #536]	@ (8003e44 <HAL_RCC_OscConfig+0x244>)
 8003c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c32:	2b10      	cmp	r3, #16
 8003c34:	d007      	beq.n	8003c46 <HAL_RCC_OscConfig+0x46>
 8003c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c38:	2b18      	cmp	r3, #24
 8003c3a:	d110      	bne.n	8003c5e <HAL_RCC_OscConfig+0x5e>
 8003c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c3e:	f003 0303 	and.w	r3, r3, #3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d10b      	bne.n	8003c5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c46:	4b7f      	ldr	r3, [pc, #508]	@ (8003e44 <HAL_RCC_OscConfig+0x244>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d06c      	beq.n	8003d2c <HAL_RCC_OscConfig+0x12c>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d168      	bne.n	8003d2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e3a2      	b.n	80043a4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c66:	d106      	bne.n	8003c76 <HAL_RCC_OscConfig+0x76>
 8003c68:	4b76      	ldr	r3, [pc, #472]	@ (8003e44 <HAL_RCC_OscConfig+0x244>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a75      	ldr	r2, [pc, #468]	@ (8003e44 <HAL_RCC_OscConfig+0x244>)
 8003c6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c72:	6013      	str	r3, [r2, #0]
 8003c74:	e02e      	b.n	8003cd4 <HAL_RCC_OscConfig+0xd4>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10c      	bne.n	8003c98 <HAL_RCC_OscConfig+0x98>
 8003c7e:	4b71      	ldr	r3, [pc, #452]	@ (8003e44 <HAL_RCC_OscConfig+0x244>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a70      	ldr	r2, [pc, #448]	@ (8003e44 <HAL_RCC_OscConfig+0x244>)
 8003c84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	4b6e      	ldr	r3, [pc, #440]	@ (8003e44 <HAL_RCC_OscConfig+0x244>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a6d      	ldr	r2, [pc, #436]	@ (8003e44 <HAL_RCC_OscConfig+0x244>)
 8003c90:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c94:	6013      	str	r3, [r2, #0]
 8003c96:	e01d      	b.n	8003cd4 <HAL_RCC_OscConfig+0xd4>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ca0:	d10c      	bne.n	8003cbc <HAL_RCC_OscConfig+0xbc>
 8003ca2:	4b68      	ldr	r3, [pc, #416]	@ (8003e44 <HAL_RCC_OscConfig+0x244>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a67      	ldr	r2, [pc, #412]	@ (8003e44 <HAL_RCC_OscConfig+0x244>)
 8003ca8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cac:	6013      	str	r3, [r2, #0]
 8003cae:	4b65      	ldr	r3, [pc, #404]	@ (8003e44 <HAL_RCC_OscConfig+0x244>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a64      	ldr	r2, [pc, #400]	@ (8003e44 <HAL_RCC_OscConfig+0x244>)
 8003cb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cb8:	6013      	str	r3, [r2, #0]
 8003cba:	e00b      	b.n	8003cd4 <HAL_RCC_OscConfig+0xd4>
 8003cbc:	4b61      	ldr	r3, [pc, #388]	@ (8003e44 <HAL_RCC_OscConfig+0x244>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a60      	ldr	r2, [pc, #384]	@ (8003e44 <HAL_RCC_OscConfig+0x244>)
 8003cc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cc6:	6013      	str	r3, [r2, #0]
 8003cc8:	4b5e      	ldr	r3, [pc, #376]	@ (8003e44 <HAL_RCC_OscConfig+0x244>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a5d      	ldr	r2, [pc, #372]	@ (8003e44 <HAL_RCC_OscConfig+0x244>)
 8003cce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d013      	beq.n	8003d04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cdc:	f7ff fbd6 	bl	800348c <HAL_GetTick>
 8003ce0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ce4:	f7ff fbd2 	bl	800348c <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b64      	cmp	r3, #100	@ 0x64
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e356      	b.n	80043a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003cf6:	4b53      	ldr	r3, [pc, #332]	@ (8003e44 <HAL_RCC_OscConfig+0x244>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d0f0      	beq.n	8003ce4 <HAL_RCC_OscConfig+0xe4>
 8003d02:	e014      	b.n	8003d2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d04:	f7ff fbc2 	bl	800348c <HAL_GetTick>
 8003d08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d0c:	f7ff fbbe 	bl	800348c <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b64      	cmp	r3, #100	@ 0x64
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e342      	b.n	80043a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003d1e:	4b49      	ldr	r3, [pc, #292]	@ (8003e44 <HAL_RCC_OscConfig+0x244>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1f0      	bne.n	8003d0c <HAL_RCC_OscConfig+0x10c>
 8003d2a:	e000      	b.n	8003d2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f000 808c 	beq.w	8003e54 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d3c:	4b41      	ldr	r3, [pc, #260]	@ (8003e44 <HAL_RCC_OscConfig+0x244>)
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d44:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d46:	4b3f      	ldr	r3, [pc, #252]	@ (8003e44 <HAL_RCC_OscConfig+0x244>)
 8003d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d4a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d007      	beq.n	8003d62 <HAL_RCC_OscConfig+0x162>
 8003d52:	6a3b      	ldr	r3, [r7, #32]
 8003d54:	2b18      	cmp	r3, #24
 8003d56:	d137      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x1c8>
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	f003 0303 	and.w	r3, r3, #3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d132      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d62:	4b38      	ldr	r3, [pc, #224]	@ (8003e44 <HAL_RCC_OscConfig+0x244>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0304 	and.w	r3, r3, #4
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d005      	beq.n	8003d7a <HAL_RCC_OscConfig+0x17a>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e314      	b.n	80043a4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003d7a:	4b32      	ldr	r3, [pc, #200]	@ (8003e44 <HAL_RCC_OscConfig+0x244>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f023 0219 	bic.w	r2, r3, #25
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	492f      	ldr	r1, [pc, #188]	@ (8003e44 <HAL_RCC_OscConfig+0x244>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8c:	f7ff fb7e 	bl	800348c <HAL_GetTick>
 8003d90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d94:	f7ff fb7a 	bl	800348c <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e2fe      	b.n	80043a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003da6:	4b27      	ldr	r3, [pc, #156]	@ (8003e44 <HAL_RCC_OscConfig+0x244>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0304 	and.w	r3, r3, #4
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0f0      	beq.n	8003d94 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db2:	4b24      	ldr	r3, [pc, #144]	@ (8003e44 <HAL_RCC_OscConfig+0x244>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	061b      	lsls	r3, r3, #24
 8003dc0:	4920      	ldr	r1, [pc, #128]	@ (8003e44 <HAL_RCC_OscConfig+0x244>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dc6:	e045      	b.n	8003e54 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d026      	beq.n	8003e1e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003dd0:	4b1c      	ldr	r3, [pc, #112]	@ (8003e44 <HAL_RCC_OscConfig+0x244>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f023 0219 	bic.w	r2, r3, #25
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	4919      	ldr	r1, [pc, #100]	@ (8003e44 <HAL_RCC_OscConfig+0x244>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de2:	f7ff fb53 	bl	800348c <HAL_GetTick>
 8003de6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003de8:	e008      	b.n	8003dfc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dea:	f7ff fb4f 	bl	800348c <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d901      	bls.n	8003dfc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e2d3      	b.n	80043a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003dfc:	4b11      	ldr	r3, [pc, #68]	@ (8003e44 <HAL_RCC_OscConfig+0x244>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d0f0      	beq.n	8003dea <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e08:	4b0e      	ldr	r3, [pc, #56]	@ (8003e44 <HAL_RCC_OscConfig+0x244>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	061b      	lsls	r3, r3, #24
 8003e16:	490b      	ldr	r1, [pc, #44]	@ (8003e44 <HAL_RCC_OscConfig+0x244>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	604b      	str	r3, [r1, #4]
 8003e1c:	e01a      	b.n	8003e54 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e1e:	4b09      	ldr	r3, [pc, #36]	@ (8003e44 <HAL_RCC_OscConfig+0x244>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a08      	ldr	r2, [pc, #32]	@ (8003e44 <HAL_RCC_OscConfig+0x244>)
 8003e24:	f023 0301 	bic.w	r3, r3, #1
 8003e28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2a:	f7ff fb2f 	bl	800348c <HAL_GetTick>
 8003e2e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e30:	e00a      	b.n	8003e48 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e32:	f7ff fb2b 	bl	800348c <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d903      	bls.n	8003e48 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e2af      	b.n	80043a4 <HAL_RCC_OscConfig+0x7a4>
 8003e44:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e48:	4b96      	ldr	r3, [pc, #600]	@ (80040a4 <HAL_RCC_OscConfig+0x4a4>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0304 	and.w	r3, r3, #4
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1ee      	bne.n	8003e32 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0310 	and.w	r3, r3, #16
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d06a      	beq.n	8003f36 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e60:	4b90      	ldr	r3, [pc, #576]	@ (80040a4 <HAL_RCC_OscConfig+0x4a4>)
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e68:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e6a:	4b8e      	ldr	r3, [pc, #568]	@ (80040a4 <HAL_RCC_OscConfig+0x4a4>)
 8003e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e6e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	2b08      	cmp	r3, #8
 8003e74:	d007      	beq.n	8003e86 <HAL_RCC_OscConfig+0x286>
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	2b18      	cmp	r3, #24
 8003e7a:	d11b      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x2b4>
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	f003 0303 	and.w	r3, r3, #3
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d116      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e86:	4b87      	ldr	r3, [pc, #540]	@ (80040a4 <HAL_RCC_OscConfig+0x4a4>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d005      	beq.n	8003e9e <HAL_RCC_OscConfig+0x29e>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	2b80      	cmp	r3, #128	@ 0x80
 8003e98:	d001      	beq.n	8003e9e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e282      	b.n	80043a4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e9e:	4b81      	ldr	r3, [pc, #516]	@ (80040a4 <HAL_RCC_OscConfig+0x4a4>)
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	061b      	lsls	r3, r3, #24
 8003eac:	497d      	ldr	r1, [pc, #500]	@ (80040a4 <HAL_RCC_OscConfig+0x4a4>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003eb2:	e040      	b.n	8003f36 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	69db      	ldr	r3, [r3, #28]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d023      	beq.n	8003f04 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003ebc:	4b79      	ldr	r3, [pc, #484]	@ (80040a4 <HAL_RCC_OscConfig+0x4a4>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a78      	ldr	r2, [pc, #480]	@ (80040a4 <HAL_RCC_OscConfig+0x4a4>)
 8003ec2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec8:	f7ff fae0 	bl	800348c <HAL_GetTick>
 8003ecc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003ed0:	f7ff fadc 	bl	800348c <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e260      	b.n	80043a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ee2:	4b70      	ldr	r3, [pc, #448]	@ (80040a4 <HAL_RCC_OscConfig+0x4a4>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d0f0      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003eee:	4b6d      	ldr	r3, [pc, #436]	@ (80040a4 <HAL_RCC_OscConfig+0x4a4>)
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	061b      	lsls	r3, r3, #24
 8003efc:	4969      	ldr	r1, [pc, #420]	@ (80040a4 <HAL_RCC_OscConfig+0x4a4>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	60cb      	str	r3, [r1, #12]
 8003f02:	e018      	b.n	8003f36 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003f04:	4b67      	ldr	r3, [pc, #412]	@ (80040a4 <HAL_RCC_OscConfig+0x4a4>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a66      	ldr	r2, [pc, #408]	@ (80040a4 <HAL_RCC_OscConfig+0x4a4>)
 8003f0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f10:	f7ff fabc 	bl	800348c <HAL_GetTick>
 8003f14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003f18:	f7ff fab8 	bl	800348c <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e23c      	b.n	80043a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003f2a:	4b5e      	ldr	r3, [pc, #376]	@ (80040a4 <HAL_RCC_OscConfig+0x4a4>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1f0      	bne.n	8003f18 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0308 	and.w	r3, r3, #8
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d036      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d019      	beq.n	8003f7e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f4a:	4b56      	ldr	r3, [pc, #344]	@ (80040a4 <HAL_RCC_OscConfig+0x4a4>)
 8003f4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f4e:	4a55      	ldr	r2, [pc, #340]	@ (80040a4 <HAL_RCC_OscConfig+0x4a4>)
 8003f50:	f043 0301 	orr.w	r3, r3, #1
 8003f54:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f56:	f7ff fa99 	bl	800348c <HAL_GetTick>
 8003f5a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f5c:	e008      	b.n	8003f70 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f5e:	f7ff fa95 	bl	800348c <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e219      	b.n	80043a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f70:	4b4c      	ldr	r3, [pc, #304]	@ (80040a4 <HAL_RCC_OscConfig+0x4a4>)
 8003f72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d0f0      	beq.n	8003f5e <HAL_RCC_OscConfig+0x35e>
 8003f7c:	e018      	b.n	8003fb0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f7e:	4b49      	ldr	r3, [pc, #292]	@ (80040a4 <HAL_RCC_OscConfig+0x4a4>)
 8003f80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f82:	4a48      	ldr	r2, [pc, #288]	@ (80040a4 <HAL_RCC_OscConfig+0x4a4>)
 8003f84:	f023 0301 	bic.w	r3, r3, #1
 8003f88:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f8a:	f7ff fa7f 	bl	800348c <HAL_GetTick>
 8003f8e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f90:	e008      	b.n	8003fa4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f92:	f7ff fa7b 	bl	800348c <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e1ff      	b.n	80043a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003fa4:	4b3f      	ldr	r3, [pc, #252]	@ (80040a4 <HAL_RCC_OscConfig+0x4a4>)
 8003fa6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1f0      	bne.n	8003f92 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0320 	and.w	r3, r3, #32
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d036      	beq.n	800402a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d019      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003fc4:	4b37      	ldr	r3, [pc, #220]	@ (80040a4 <HAL_RCC_OscConfig+0x4a4>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a36      	ldr	r2, [pc, #216]	@ (80040a4 <HAL_RCC_OscConfig+0x4a4>)
 8003fca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003fce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003fd0:	f7ff fa5c 	bl	800348c <HAL_GetTick>
 8003fd4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fd8:	f7ff fa58 	bl	800348c <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e1dc      	b.n	80043a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003fea:	4b2e      	ldr	r3, [pc, #184]	@ (80040a4 <HAL_RCC_OscConfig+0x4a4>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d0f0      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x3d8>
 8003ff6:	e018      	b.n	800402a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ff8:	4b2a      	ldr	r3, [pc, #168]	@ (80040a4 <HAL_RCC_OscConfig+0x4a4>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a29      	ldr	r2, [pc, #164]	@ (80040a4 <HAL_RCC_OscConfig+0x4a4>)
 8003ffe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004002:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004004:	f7ff fa42 	bl	800348c <HAL_GetTick>
 8004008:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800400c:	f7ff fa3e 	bl	800348c <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e1c2      	b.n	80043a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800401e:	4b21      	ldr	r3, [pc, #132]	@ (80040a4 <HAL_RCC_OscConfig+0x4a4>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1f0      	bne.n	800400c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0304 	and.w	r3, r3, #4
 8004032:	2b00      	cmp	r3, #0
 8004034:	f000 8086 	beq.w	8004144 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004038:	4b1b      	ldr	r3, [pc, #108]	@ (80040a8 <HAL_RCC_OscConfig+0x4a8>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a1a      	ldr	r2, [pc, #104]	@ (80040a8 <HAL_RCC_OscConfig+0x4a8>)
 800403e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004042:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004044:	f7ff fa22 	bl	800348c <HAL_GetTick>
 8004048:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800404a:	e008      	b.n	800405e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800404c:	f7ff fa1e 	bl	800348c <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b64      	cmp	r3, #100	@ 0x64
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e1a2      	b.n	80043a4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800405e:	4b12      	ldr	r3, [pc, #72]	@ (80040a8 <HAL_RCC_OscConfig+0x4a8>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004066:	2b00      	cmp	r3, #0
 8004068:	d0f0      	beq.n	800404c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d106      	bne.n	8004080 <HAL_RCC_OscConfig+0x480>
 8004072:	4b0c      	ldr	r3, [pc, #48]	@ (80040a4 <HAL_RCC_OscConfig+0x4a4>)
 8004074:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004076:	4a0b      	ldr	r2, [pc, #44]	@ (80040a4 <HAL_RCC_OscConfig+0x4a4>)
 8004078:	f043 0301 	orr.w	r3, r3, #1
 800407c:	6713      	str	r3, [r2, #112]	@ 0x70
 800407e:	e032      	b.n	80040e6 <HAL_RCC_OscConfig+0x4e6>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d111      	bne.n	80040ac <HAL_RCC_OscConfig+0x4ac>
 8004088:	4b06      	ldr	r3, [pc, #24]	@ (80040a4 <HAL_RCC_OscConfig+0x4a4>)
 800408a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800408c:	4a05      	ldr	r2, [pc, #20]	@ (80040a4 <HAL_RCC_OscConfig+0x4a4>)
 800408e:	f023 0301 	bic.w	r3, r3, #1
 8004092:	6713      	str	r3, [r2, #112]	@ 0x70
 8004094:	4b03      	ldr	r3, [pc, #12]	@ (80040a4 <HAL_RCC_OscConfig+0x4a4>)
 8004096:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004098:	4a02      	ldr	r2, [pc, #8]	@ (80040a4 <HAL_RCC_OscConfig+0x4a4>)
 800409a:	f023 0304 	bic.w	r3, r3, #4
 800409e:	6713      	str	r3, [r2, #112]	@ 0x70
 80040a0:	e021      	b.n	80040e6 <HAL_RCC_OscConfig+0x4e6>
 80040a2:	bf00      	nop
 80040a4:	58024400 	.word	0x58024400
 80040a8:	58024800 	.word	0x58024800
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	2b05      	cmp	r3, #5
 80040b2:	d10c      	bne.n	80040ce <HAL_RCC_OscConfig+0x4ce>
 80040b4:	4b83      	ldr	r3, [pc, #524]	@ (80042c4 <HAL_RCC_OscConfig+0x6c4>)
 80040b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040b8:	4a82      	ldr	r2, [pc, #520]	@ (80042c4 <HAL_RCC_OscConfig+0x6c4>)
 80040ba:	f043 0304 	orr.w	r3, r3, #4
 80040be:	6713      	str	r3, [r2, #112]	@ 0x70
 80040c0:	4b80      	ldr	r3, [pc, #512]	@ (80042c4 <HAL_RCC_OscConfig+0x6c4>)
 80040c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040c4:	4a7f      	ldr	r2, [pc, #508]	@ (80042c4 <HAL_RCC_OscConfig+0x6c4>)
 80040c6:	f043 0301 	orr.w	r3, r3, #1
 80040ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80040cc:	e00b      	b.n	80040e6 <HAL_RCC_OscConfig+0x4e6>
 80040ce:	4b7d      	ldr	r3, [pc, #500]	@ (80042c4 <HAL_RCC_OscConfig+0x6c4>)
 80040d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040d2:	4a7c      	ldr	r2, [pc, #496]	@ (80042c4 <HAL_RCC_OscConfig+0x6c4>)
 80040d4:	f023 0301 	bic.w	r3, r3, #1
 80040d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80040da:	4b7a      	ldr	r3, [pc, #488]	@ (80042c4 <HAL_RCC_OscConfig+0x6c4>)
 80040dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040de:	4a79      	ldr	r2, [pc, #484]	@ (80042c4 <HAL_RCC_OscConfig+0x6c4>)
 80040e0:	f023 0304 	bic.w	r3, r3, #4
 80040e4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d015      	beq.n	800411a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ee:	f7ff f9cd 	bl	800348c <HAL_GetTick>
 80040f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040f4:	e00a      	b.n	800410c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040f6:	f7ff f9c9 	bl	800348c <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004104:	4293      	cmp	r3, r2
 8004106:	d901      	bls.n	800410c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e14b      	b.n	80043a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800410c:	4b6d      	ldr	r3, [pc, #436]	@ (80042c4 <HAL_RCC_OscConfig+0x6c4>)
 800410e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0ee      	beq.n	80040f6 <HAL_RCC_OscConfig+0x4f6>
 8004118:	e014      	b.n	8004144 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800411a:	f7ff f9b7 	bl	800348c <HAL_GetTick>
 800411e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004120:	e00a      	b.n	8004138 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004122:	f7ff f9b3 	bl	800348c <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004130:	4293      	cmp	r3, r2
 8004132:	d901      	bls.n	8004138 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e135      	b.n	80043a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004138:	4b62      	ldr	r3, [pc, #392]	@ (80042c4 <HAL_RCC_OscConfig+0x6c4>)
 800413a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1ee      	bne.n	8004122 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004148:	2b00      	cmp	r3, #0
 800414a:	f000 812a 	beq.w	80043a2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800414e:	4b5d      	ldr	r3, [pc, #372]	@ (80042c4 <HAL_RCC_OscConfig+0x6c4>)
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004156:	2b18      	cmp	r3, #24
 8004158:	f000 80ba 	beq.w	80042d0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004160:	2b02      	cmp	r3, #2
 8004162:	f040 8095 	bne.w	8004290 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004166:	4b57      	ldr	r3, [pc, #348]	@ (80042c4 <HAL_RCC_OscConfig+0x6c4>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a56      	ldr	r2, [pc, #344]	@ (80042c4 <HAL_RCC_OscConfig+0x6c4>)
 800416c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004170:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004172:	f7ff f98b 	bl	800348c <HAL_GetTick>
 8004176:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004178:	e008      	b.n	800418c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800417a:	f7ff f987 	bl	800348c <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d901      	bls.n	800418c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e10b      	b.n	80043a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800418c:	4b4d      	ldr	r3, [pc, #308]	@ (80042c4 <HAL_RCC_OscConfig+0x6c4>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1f0      	bne.n	800417a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004198:	4b4a      	ldr	r3, [pc, #296]	@ (80042c4 <HAL_RCC_OscConfig+0x6c4>)
 800419a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800419c:	4b4a      	ldr	r3, [pc, #296]	@ (80042c8 <HAL_RCC_OscConfig+0x6c8>)
 800419e:	4013      	ands	r3, r2
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80041a8:	0112      	lsls	r2, r2, #4
 80041aa:	430a      	orrs	r2, r1
 80041ac:	4945      	ldr	r1, [pc, #276]	@ (80042c4 <HAL_RCC_OscConfig+0x6c4>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	628b      	str	r3, [r1, #40]	@ 0x28
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b6:	3b01      	subs	r3, #1
 80041b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041c0:	3b01      	subs	r3, #1
 80041c2:	025b      	lsls	r3, r3, #9
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	431a      	orrs	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041cc:	3b01      	subs	r3, #1
 80041ce:	041b      	lsls	r3, r3, #16
 80041d0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80041d4:	431a      	orrs	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041da:	3b01      	subs	r3, #1
 80041dc:	061b      	lsls	r3, r3, #24
 80041de:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80041e2:	4938      	ldr	r1, [pc, #224]	@ (80042c4 <HAL_RCC_OscConfig+0x6c4>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80041e8:	4b36      	ldr	r3, [pc, #216]	@ (80042c4 <HAL_RCC_OscConfig+0x6c4>)
 80041ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ec:	4a35      	ldr	r2, [pc, #212]	@ (80042c4 <HAL_RCC_OscConfig+0x6c4>)
 80041ee:	f023 0301 	bic.w	r3, r3, #1
 80041f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80041f4:	4b33      	ldr	r3, [pc, #204]	@ (80042c4 <HAL_RCC_OscConfig+0x6c4>)
 80041f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041f8:	4b34      	ldr	r3, [pc, #208]	@ (80042cc <HAL_RCC_OscConfig+0x6cc>)
 80041fa:	4013      	ands	r3, r2
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004200:	00d2      	lsls	r2, r2, #3
 8004202:	4930      	ldr	r1, [pc, #192]	@ (80042c4 <HAL_RCC_OscConfig+0x6c4>)
 8004204:	4313      	orrs	r3, r2
 8004206:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004208:	4b2e      	ldr	r3, [pc, #184]	@ (80042c4 <HAL_RCC_OscConfig+0x6c4>)
 800420a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800420c:	f023 020c 	bic.w	r2, r3, #12
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004214:	492b      	ldr	r1, [pc, #172]	@ (80042c4 <HAL_RCC_OscConfig+0x6c4>)
 8004216:	4313      	orrs	r3, r2
 8004218:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800421a:	4b2a      	ldr	r3, [pc, #168]	@ (80042c4 <HAL_RCC_OscConfig+0x6c4>)
 800421c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800421e:	f023 0202 	bic.w	r2, r3, #2
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004226:	4927      	ldr	r1, [pc, #156]	@ (80042c4 <HAL_RCC_OscConfig+0x6c4>)
 8004228:	4313      	orrs	r3, r2
 800422a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800422c:	4b25      	ldr	r3, [pc, #148]	@ (80042c4 <HAL_RCC_OscConfig+0x6c4>)
 800422e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004230:	4a24      	ldr	r2, [pc, #144]	@ (80042c4 <HAL_RCC_OscConfig+0x6c4>)
 8004232:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004236:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004238:	4b22      	ldr	r3, [pc, #136]	@ (80042c4 <HAL_RCC_OscConfig+0x6c4>)
 800423a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800423c:	4a21      	ldr	r2, [pc, #132]	@ (80042c4 <HAL_RCC_OscConfig+0x6c4>)
 800423e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004242:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004244:	4b1f      	ldr	r3, [pc, #124]	@ (80042c4 <HAL_RCC_OscConfig+0x6c4>)
 8004246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004248:	4a1e      	ldr	r2, [pc, #120]	@ (80042c4 <HAL_RCC_OscConfig+0x6c4>)
 800424a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800424e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004250:	4b1c      	ldr	r3, [pc, #112]	@ (80042c4 <HAL_RCC_OscConfig+0x6c4>)
 8004252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004254:	4a1b      	ldr	r2, [pc, #108]	@ (80042c4 <HAL_RCC_OscConfig+0x6c4>)
 8004256:	f043 0301 	orr.w	r3, r3, #1
 800425a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800425c:	4b19      	ldr	r3, [pc, #100]	@ (80042c4 <HAL_RCC_OscConfig+0x6c4>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a18      	ldr	r2, [pc, #96]	@ (80042c4 <HAL_RCC_OscConfig+0x6c4>)
 8004262:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004266:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004268:	f7ff f910 	bl	800348c <HAL_GetTick>
 800426c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004270:	f7ff f90c 	bl	800348c <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e090      	b.n	80043a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004282:	4b10      	ldr	r3, [pc, #64]	@ (80042c4 <HAL_RCC_OscConfig+0x6c4>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d0f0      	beq.n	8004270 <HAL_RCC_OscConfig+0x670>
 800428e:	e088      	b.n	80043a2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004290:	4b0c      	ldr	r3, [pc, #48]	@ (80042c4 <HAL_RCC_OscConfig+0x6c4>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a0b      	ldr	r2, [pc, #44]	@ (80042c4 <HAL_RCC_OscConfig+0x6c4>)
 8004296:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800429a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800429c:	f7ff f8f6 	bl	800348c <HAL_GetTick>
 80042a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042a4:	f7ff f8f2 	bl	800348c <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e076      	b.n	80043a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80042b6:	4b03      	ldr	r3, [pc, #12]	@ (80042c4 <HAL_RCC_OscConfig+0x6c4>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1f0      	bne.n	80042a4 <HAL_RCC_OscConfig+0x6a4>
 80042c2:	e06e      	b.n	80043a2 <HAL_RCC_OscConfig+0x7a2>
 80042c4:	58024400 	.word	0x58024400
 80042c8:	fffffc0c 	.word	0xfffffc0c
 80042cc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80042d0:	4b36      	ldr	r3, [pc, #216]	@ (80043ac <HAL_RCC_OscConfig+0x7ac>)
 80042d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80042d6:	4b35      	ldr	r3, [pc, #212]	@ (80043ac <HAL_RCC_OscConfig+0x7ac>)
 80042d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042da:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d031      	beq.n	8004348 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	f003 0203 	and.w	r2, r3, #3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d12a      	bne.n	8004348 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	091b      	lsrs	r3, r3, #4
 80042f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042fe:	429a      	cmp	r2, r3
 8004300:	d122      	bne.n	8004348 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800430c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800430e:	429a      	cmp	r2, r3
 8004310:	d11a      	bne.n	8004348 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	0a5b      	lsrs	r3, r3, #9
 8004316:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800431e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004320:	429a      	cmp	r2, r3
 8004322:	d111      	bne.n	8004348 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	0c1b      	lsrs	r3, r3, #16
 8004328:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004330:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004332:	429a      	cmp	r2, r3
 8004334:	d108      	bne.n	8004348 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	0e1b      	lsrs	r3, r3, #24
 800433a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004342:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004344:	429a      	cmp	r2, r3
 8004346:	d001      	beq.n	800434c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e02b      	b.n	80043a4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800434c:	4b17      	ldr	r3, [pc, #92]	@ (80043ac <HAL_RCC_OscConfig+0x7ac>)
 800434e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004350:	08db      	lsrs	r3, r3, #3
 8004352:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004356:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	429a      	cmp	r2, r3
 8004360:	d01f      	beq.n	80043a2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004362:	4b12      	ldr	r3, [pc, #72]	@ (80043ac <HAL_RCC_OscConfig+0x7ac>)
 8004364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004366:	4a11      	ldr	r2, [pc, #68]	@ (80043ac <HAL_RCC_OscConfig+0x7ac>)
 8004368:	f023 0301 	bic.w	r3, r3, #1
 800436c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800436e:	f7ff f88d 	bl	800348c <HAL_GetTick>
 8004372:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004374:	bf00      	nop
 8004376:	f7ff f889 	bl	800348c <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437e:	4293      	cmp	r3, r2
 8004380:	d0f9      	beq.n	8004376 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004382:	4b0a      	ldr	r3, [pc, #40]	@ (80043ac <HAL_RCC_OscConfig+0x7ac>)
 8004384:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004386:	4b0a      	ldr	r3, [pc, #40]	@ (80043b0 <HAL_RCC_OscConfig+0x7b0>)
 8004388:	4013      	ands	r3, r2
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800438e:	00d2      	lsls	r2, r2, #3
 8004390:	4906      	ldr	r1, [pc, #24]	@ (80043ac <HAL_RCC_OscConfig+0x7ac>)
 8004392:	4313      	orrs	r3, r2
 8004394:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004396:	4b05      	ldr	r3, [pc, #20]	@ (80043ac <HAL_RCC_OscConfig+0x7ac>)
 8004398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800439a:	4a04      	ldr	r2, [pc, #16]	@ (80043ac <HAL_RCC_OscConfig+0x7ac>)
 800439c:	f043 0301 	orr.w	r3, r3, #1
 80043a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3730      	adds	r7, #48	@ 0x30
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	58024400 	.word	0x58024400
 80043b0:	ffff0007 	.word	0xffff0007

080043b4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d101      	bne.n	80043c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e19c      	b.n	8004702 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043c8:	4b8a      	ldr	r3, [pc, #552]	@ (80045f4 <HAL_RCC_ClockConfig+0x240>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 030f 	and.w	r3, r3, #15
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d910      	bls.n	80043f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043d6:	4b87      	ldr	r3, [pc, #540]	@ (80045f4 <HAL_RCC_ClockConfig+0x240>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f023 020f 	bic.w	r2, r3, #15
 80043de:	4985      	ldr	r1, [pc, #532]	@ (80045f4 <HAL_RCC_ClockConfig+0x240>)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043e6:	4b83      	ldr	r3, [pc, #524]	@ (80045f4 <HAL_RCC_ClockConfig+0x240>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 030f 	and.w	r3, r3, #15
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d001      	beq.n	80043f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e184      	b.n	8004702 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0304 	and.w	r3, r3, #4
 8004400:	2b00      	cmp	r3, #0
 8004402:	d010      	beq.n	8004426 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	691a      	ldr	r2, [r3, #16]
 8004408:	4b7b      	ldr	r3, [pc, #492]	@ (80045f8 <HAL_RCC_ClockConfig+0x244>)
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004410:	429a      	cmp	r2, r3
 8004412:	d908      	bls.n	8004426 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004414:	4b78      	ldr	r3, [pc, #480]	@ (80045f8 <HAL_RCC_ClockConfig+0x244>)
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	4975      	ldr	r1, [pc, #468]	@ (80045f8 <HAL_RCC_ClockConfig+0x244>)
 8004422:	4313      	orrs	r3, r2
 8004424:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0308 	and.w	r3, r3, #8
 800442e:	2b00      	cmp	r3, #0
 8004430:	d010      	beq.n	8004454 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	695a      	ldr	r2, [r3, #20]
 8004436:	4b70      	ldr	r3, [pc, #448]	@ (80045f8 <HAL_RCC_ClockConfig+0x244>)
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800443e:	429a      	cmp	r2, r3
 8004440:	d908      	bls.n	8004454 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004442:	4b6d      	ldr	r3, [pc, #436]	@ (80045f8 <HAL_RCC_ClockConfig+0x244>)
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	496a      	ldr	r1, [pc, #424]	@ (80045f8 <HAL_RCC_ClockConfig+0x244>)
 8004450:	4313      	orrs	r3, r2
 8004452:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0310 	and.w	r3, r3, #16
 800445c:	2b00      	cmp	r3, #0
 800445e:	d010      	beq.n	8004482 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	699a      	ldr	r2, [r3, #24]
 8004464:	4b64      	ldr	r3, [pc, #400]	@ (80045f8 <HAL_RCC_ClockConfig+0x244>)
 8004466:	69db      	ldr	r3, [r3, #28]
 8004468:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800446c:	429a      	cmp	r2, r3
 800446e:	d908      	bls.n	8004482 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004470:	4b61      	ldr	r3, [pc, #388]	@ (80045f8 <HAL_RCC_ClockConfig+0x244>)
 8004472:	69db      	ldr	r3, [r3, #28]
 8004474:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	495e      	ldr	r1, [pc, #376]	@ (80045f8 <HAL_RCC_ClockConfig+0x244>)
 800447e:	4313      	orrs	r3, r2
 8004480:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0320 	and.w	r3, r3, #32
 800448a:	2b00      	cmp	r3, #0
 800448c:	d010      	beq.n	80044b0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	69da      	ldr	r2, [r3, #28]
 8004492:	4b59      	ldr	r3, [pc, #356]	@ (80045f8 <HAL_RCC_ClockConfig+0x244>)
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800449a:	429a      	cmp	r2, r3
 800449c:	d908      	bls.n	80044b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800449e:	4b56      	ldr	r3, [pc, #344]	@ (80045f8 <HAL_RCC_ClockConfig+0x244>)
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	69db      	ldr	r3, [r3, #28]
 80044aa:	4953      	ldr	r1, [pc, #332]	@ (80045f8 <HAL_RCC_ClockConfig+0x244>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d010      	beq.n	80044de <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68da      	ldr	r2, [r3, #12]
 80044c0:	4b4d      	ldr	r3, [pc, #308]	@ (80045f8 <HAL_RCC_ClockConfig+0x244>)
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	f003 030f 	and.w	r3, r3, #15
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d908      	bls.n	80044de <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044cc:	4b4a      	ldr	r3, [pc, #296]	@ (80045f8 <HAL_RCC_ClockConfig+0x244>)
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	f023 020f 	bic.w	r2, r3, #15
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	4947      	ldr	r1, [pc, #284]	@ (80045f8 <HAL_RCC_ClockConfig+0x244>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d055      	beq.n	8004596 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80044ea:	4b43      	ldr	r3, [pc, #268]	@ (80045f8 <HAL_RCC_ClockConfig+0x244>)
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	4940      	ldr	r1, [pc, #256]	@ (80045f8 <HAL_RCC_ClockConfig+0x244>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	2b02      	cmp	r3, #2
 8004502:	d107      	bne.n	8004514 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004504:	4b3c      	ldr	r3, [pc, #240]	@ (80045f8 <HAL_RCC_ClockConfig+0x244>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d121      	bne.n	8004554 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e0f6      	b.n	8004702 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	2b03      	cmp	r3, #3
 800451a:	d107      	bne.n	800452c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800451c:	4b36      	ldr	r3, [pc, #216]	@ (80045f8 <HAL_RCC_ClockConfig+0x244>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d115      	bne.n	8004554 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e0ea      	b.n	8004702 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d107      	bne.n	8004544 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004534:	4b30      	ldr	r3, [pc, #192]	@ (80045f8 <HAL_RCC_ClockConfig+0x244>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800453c:	2b00      	cmp	r3, #0
 800453e:	d109      	bne.n	8004554 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e0de      	b.n	8004702 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004544:	4b2c      	ldr	r3, [pc, #176]	@ (80045f8 <HAL_RCC_ClockConfig+0x244>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0304 	and.w	r3, r3, #4
 800454c:	2b00      	cmp	r3, #0
 800454e:	d101      	bne.n	8004554 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e0d6      	b.n	8004702 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004554:	4b28      	ldr	r3, [pc, #160]	@ (80045f8 <HAL_RCC_ClockConfig+0x244>)
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	f023 0207 	bic.w	r2, r3, #7
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	4925      	ldr	r1, [pc, #148]	@ (80045f8 <HAL_RCC_ClockConfig+0x244>)
 8004562:	4313      	orrs	r3, r2
 8004564:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004566:	f7fe ff91 	bl	800348c <HAL_GetTick>
 800456a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800456c:	e00a      	b.n	8004584 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800456e:	f7fe ff8d 	bl	800348c <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	f241 3288 	movw	r2, #5000	@ 0x1388
 800457c:	4293      	cmp	r3, r2
 800457e:	d901      	bls.n	8004584 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e0be      	b.n	8004702 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004584:	4b1c      	ldr	r3, [pc, #112]	@ (80045f8 <HAL_RCC_ClockConfig+0x244>)
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	00db      	lsls	r3, r3, #3
 8004592:	429a      	cmp	r2, r3
 8004594:	d1eb      	bne.n	800456e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d010      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68da      	ldr	r2, [r3, #12]
 80045a6:	4b14      	ldr	r3, [pc, #80]	@ (80045f8 <HAL_RCC_ClockConfig+0x244>)
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	f003 030f 	and.w	r3, r3, #15
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d208      	bcs.n	80045c4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045b2:	4b11      	ldr	r3, [pc, #68]	@ (80045f8 <HAL_RCC_ClockConfig+0x244>)
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	f023 020f 	bic.w	r2, r3, #15
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	490e      	ldr	r1, [pc, #56]	@ (80045f8 <HAL_RCC_ClockConfig+0x244>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045c4:	4b0b      	ldr	r3, [pc, #44]	@ (80045f4 <HAL_RCC_ClockConfig+0x240>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 030f 	and.w	r3, r3, #15
 80045cc:	683a      	ldr	r2, [r7, #0]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d214      	bcs.n	80045fc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045d2:	4b08      	ldr	r3, [pc, #32]	@ (80045f4 <HAL_RCC_ClockConfig+0x240>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f023 020f 	bic.w	r2, r3, #15
 80045da:	4906      	ldr	r1, [pc, #24]	@ (80045f4 <HAL_RCC_ClockConfig+0x240>)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	4313      	orrs	r3, r2
 80045e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045e2:	4b04      	ldr	r3, [pc, #16]	@ (80045f4 <HAL_RCC_ClockConfig+0x240>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 030f 	and.w	r3, r3, #15
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d005      	beq.n	80045fc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e086      	b.n	8004702 <HAL_RCC_ClockConfig+0x34e>
 80045f4:	52002000 	.word	0x52002000
 80045f8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	2b00      	cmp	r3, #0
 8004606:	d010      	beq.n	800462a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	691a      	ldr	r2, [r3, #16]
 800460c:	4b3f      	ldr	r3, [pc, #252]	@ (800470c <HAL_RCC_ClockConfig+0x358>)
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004614:	429a      	cmp	r2, r3
 8004616:	d208      	bcs.n	800462a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004618:	4b3c      	ldr	r3, [pc, #240]	@ (800470c <HAL_RCC_ClockConfig+0x358>)
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	4939      	ldr	r1, [pc, #228]	@ (800470c <HAL_RCC_ClockConfig+0x358>)
 8004626:	4313      	orrs	r3, r2
 8004628:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0308 	and.w	r3, r3, #8
 8004632:	2b00      	cmp	r3, #0
 8004634:	d010      	beq.n	8004658 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	695a      	ldr	r2, [r3, #20]
 800463a:	4b34      	ldr	r3, [pc, #208]	@ (800470c <HAL_RCC_ClockConfig+0x358>)
 800463c:	69db      	ldr	r3, [r3, #28]
 800463e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004642:	429a      	cmp	r2, r3
 8004644:	d208      	bcs.n	8004658 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004646:	4b31      	ldr	r3, [pc, #196]	@ (800470c <HAL_RCC_ClockConfig+0x358>)
 8004648:	69db      	ldr	r3, [r3, #28]
 800464a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	492e      	ldr	r1, [pc, #184]	@ (800470c <HAL_RCC_ClockConfig+0x358>)
 8004654:	4313      	orrs	r3, r2
 8004656:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0310 	and.w	r3, r3, #16
 8004660:	2b00      	cmp	r3, #0
 8004662:	d010      	beq.n	8004686 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	699a      	ldr	r2, [r3, #24]
 8004668:	4b28      	ldr	r3, [pc, #160]	@ (800470c <HAL_RCC_ClockConfig+0x358>)
 800466a:	69db      	ldr	r3, [r3, #28]
 800466c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004670:	429a      	cmp	r2, r3
 8004672:	d208      	bcs.n	8004686 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004674:	4b25      	ldr	r3, [pc, #148]	@ (800470c <HAL_RCC_ClockConfig+0x358>)
 8004676:	69db      	ldr	r3, [r3, #28]
 8004678:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	4922      	ldr	r1, [pc, #136]	@ (800470c <HAL_RCC_ClockConfig+0x358>)
 8004682:	4313      	orrs	r3, r2
 8004684:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0320 	and.w	r3, r3, #32
 800468e:	2b00      	cmp	r3, #0
 8004690:	d010      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	69da      	ldr	r2, [r3, #28]
 8004696:	4b1d      	ldr	r3, [pc, #116]	@ (800470c <HAL_RCC_ClockConfig+0x358>)
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800469e:	429a      	cmp	r2, r3
 80046a0:	d208      	bcs.n	80046b4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80046a2:	4b1a      	ldr	r3, [pc, #104]	@ (800470c <HAL_RCC_ClockConfig+0x358>)
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	4917      	ldr	r1, [pc, #92]	@ (800470c <HAL_RCC_ClockConfig+0x358>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80046b4:	f000 f834 	bl	8004720 <HAL_RCC_GetSysClockFreq>
 80046b8:	4602      	mov	r2, r0
 80046ba:	4b14      	ldr	r3, [pc, #80]	@ (800470c <HAL_RCC_ClockConfig+0x358>)
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	0a1b      	lsrs	r3, r3, #8
 80046c0:	f003 030f 	and.w	r3, r3, #15
 80046c4:	4912      	ldr	r1, [pc, #72]	@ (8004710 <HAL_RCC_ClockConfig+0x35c>)
 80046c6:	5ccb      	ldrb	r3, [r1, r3]
 80046c8:	f003 031f 	and.w	r3, r3, #31
 80046cc:	fa22 f303 	lsr.w	r3, r2, r3
 80046d0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80046d2:	4b0e      	ldr	r3, [pc, #56]	@ (800470c <HAL_RCC_ClockConfig+0x358>)
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	f003 030f 	and.w	r3, r3, #15
 80046da:	4a0d      	ldr	r2, [pc, #52]	@ (8004710 <HAL_RCC_ClockConfig+0x35c>)
 80046dc:	5cd3      	ldrb	r3, [r2, r3]
 80046de:	f003 031f 	and.w	r3, r3, #31
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	fa22 f303 	lsr.w	r3, r2, r3
 80046e8:	4a0a      	ldr	r2, [pc, #40]	@ (8004714 <HAL_RCC_ClockConfig+0x360>)
 80046ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80046ec:	4a0a      	ldr	r2, [pc, #40]	@ (8004718 <HAL_RCC_ClockConfig+0x364>)
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80046f2:	4b0a      	ldr	r3, [pc, #40]	@ (800471c <HAL_RCC_ClockConfig+0x368>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7fe fe7e 	bl	80033f8 <HAL_InitTick>
 80046fc:	4603      	mov	r3, r0
 80046fe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004700:	7bfb      	ldrb	r3, [r7, #15]
}
 8004702:	4618      	mov	r0, r3
 8004704:	3718      	adds	r7, #24
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	58024400 	.word	0x58024400
 8004710:	0801503c 	.word	0x0801503c
 8004714:	24000034 	.word	0x24000034
 8004718:	24000030 	.word	0x24000030
 800471c:	24000038 	.word	0x24000038

08004720 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004720:	b480      	push	{r7}
 8004722:	b089      	sub	sp, #36	@ 0x24
 8004724:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004726:	4bb3      	ldr	r3, [pc, #716]	@ (80049f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800472e:	2b18      	cmp	r3, #24
 8004730:	f200 8155 	bhi.w	80049de <HAL_RCC_GetSysClockFreq+0x2be>
 8004734:	a201      	add	r2, pc, #4	@ (adr r2, 800473c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800473a:	bf00      	nop
 800473c:	080047a1 	.word	0x080047a1
 8004740:	080049df 	.word	0x080049df
 8004744:	080049df 	.word	0x080049df
 8004748:	080049df 	.word	0x080049df
 800474c:	080049df 	.word	0x080049df
 8004750:	080049df 	.word	0x080049df
 8004754:	080049df 	.word	0x080049df
 8004758:	080049df 	.word	0x080049df
 800475c:	080047c7 	.word	0x080047c7
 8004760:	080049df 	.word	0x080049df
 8004764:	080049df 	.word	0x080049df
 8004768:	080049df 	.word	0x080049df
 800476c:	080049df 	.word	0x080049df
 8004770:	080049df 	.word	0x080049df
 8004774:	080049df 	.word	0x080049df
 8004778:	080049df 	.word	0x080049df
 800477c:	080047cd 	.word	0x080047cd
 8004780:	080049df 	.word	0x080049df
 8004784:	080049df 	.word	0x080049df
 8004788:	080049df 	.word	0x080049df
 800478c:	080049df 	.word	0x080049df
 8004790:	080049df 	.word	0x080049df
 8004794:	080049df 	.word	0x080049df
 8004798:	080049df 	.word	0x080049df
 800479c:	080047d3 	.word	0x080047d3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047a0:	4b94      	ldr	r3, [pc, #592]	@ (80049f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0320 	and.w	r3, r3, #32
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d009      	beq.n	80047c0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047ac:	4b91      	ldr	r3, [pc, #580]	@ (80049f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	08db      	lsrs	r3, r3, #3
 80047b2:	f003 0303 	and.w	r3, r3, #3
 80047b6:	4a90      	ldr	r2, [pc, #576]	@ (80049f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80047b8:	fa22 f303 	lsr.w	r3, r2, r3
 80047bc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80047be:	e111      	b.n	80049e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80047c0:	4b8d      	ldr	r3, [pc, #564]	@ (80049f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80047c2:	61bb      	str	r3, [r7, #24]
      break;
 80047c4:	e10e      	b.n	80049e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80047c6:	4b8d      	ldr	r3, [pc, #564]	@ (80049fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80047c8:	61bb      	str	r3, [r7, #24]
      break;
 80047ca:	e10b      	b.n	80049e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80047cc:	4b8c      	ldr	r3, [pc, #560]	@ (8004a00 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80047ce:	61bb      	str	r3, [r7, #24]
      break;
 80047d0:	e108      	b.n	80049e4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047d2:	4b88      	ldr	r3, [pc, #544]	@ (80049f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d6:	f003 0303 	and.w	r3, r3, #3
 80047da:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80047dc:	4b85      	ldr	r3, [pc, #532]	@ (80049f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e0:	091b      	lsrs	r3, r3, #4
 80047e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047e6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80047e8:	4b82      	ldr	r3, [pc, #520]	@ (80049f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80047f2:	4b80      	ldr	r3, [pc, #512]	@ (80049f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047f6:	08db      	lsrs	r3, r3, #3
 80047f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	fb02 f303 	mul.w	r3, r2, r3
 8004802:	ee07 3a90 	vmov	s15, r3
 8004806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800480a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 80e1 	beq.w	80049d8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	2b02      	cmp	r3, #2
 800481a:	f000 8083 	beq.w	8004924 <HAL_RCC_GetSysClockFreq+0x204>
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	2b02      	cmp	r3, #2
 8004822:	f200 80a1 	bhi.w	8004968 <HAL_RCC_GetSysClockFreq+0x248>
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d003      	beq.n	8004834 <HAL_RCC_GetSysClockFreq+0x114>
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d056      	beq.n	80048e0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004832:	e099      	b.n	8004968 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004834:	4b6f      	ldr	r3, [pc, #444]	@ (80049f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0320 	and.w	r3, r3, #32
 800483c:	2b00      	cmp	r3, #0
 800483e:	d02d      	beq.n	800489c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004840:	4b6c      	ldr	r3, [pc, #432]	@ (80049f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	08db      	lsrs	r3, r3, #3
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	4a6b      	ldr	r2, [pc, #428]	@ (80049f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800484c:	fa22 f303 	lsr.w	r3, r2, r3
 8004850:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	ee07 3a90 	vmov	s15, r3
 8004858:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	ee07 3a90 	vmov	s15, r3
 8004862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800486a:	4b62      	ldr	r3, [pc, #392]	@ (80049f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800486c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800486e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004872:	ee07 3a90 	vmov	s15, r3
 8004876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800487a:	ed97 6a02 	vldr	s12, [r7, #8]
 800487e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004a04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800488a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800488e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004896:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800489a:	e087      	b.n	80049ac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	ee07 3a90 	vmov	s15, r3
 80048a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048a6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004a08 <HAL_RCC_GetSysClockFreq+0x2e8>
 80048aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048ae:	4b51      	ldr	r3, [pc, #324]	@ (80049f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048b6:	ee07 3a90 	vmov	s15, r3
 80048ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048be:	ed97 6a02 	vldr	s12, [r7, #8]
 80048c2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004a04 <HAL_RCC_GetSysClockFreq+0x2e4>
 80048c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80048de:	e065      	b.n	80049ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	ee07 3a90 	vmov	s15, r3
 80048e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ea:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004a0c <HAL_RCC_GetSysClockFreq+0x2ec>
 80048ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048f2:	4b40      	ldr	r3, [pc, #256]	@ (80049f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048fa:	ee07 3a90 	vmov	s15, r3
 80048fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004902:	ed97 6a02 	vldr	s12, [r7, #8]
 8004906:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004a04 <HAL_RCC_GetSysClockFreq+0x2e4>
 800490a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800490e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004912:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800491a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800491e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004922:	e043      	b.n	80049ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	ee07 3a90 	vmov	s15, r3
 800492a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800492e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004a10 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004936:	4b2f      	ldr	r3, [pc, #188]	@ (80049f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800493a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800493e:	ee07 3a90 	vmov	s15, r3
 8004942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004946:	ed97 6a02 	vldr	s12, [r7, #8]
 800494a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004a04 <HAL_RCC_GetSysClockFreq+0x2e4>
 800494e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004956:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800495a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800495e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004962:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004966:	e021      	b.n	80049ac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	ee07 3a90 	vmov	s15, r3
 800496e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004972:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004a0c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800497a:	4b1e      	ldr	r3, [pc, #120]	@ (80049f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800497c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800497e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004982:	ee07 3a90 	vmov	s15, r3
 8004986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800498a:	ed97 6a02 	vldr	s12, [r7, #8]
 800498e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004a04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004992:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004996:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800499a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800499e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80049aa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80049ac:	4b11      	ldr	r3, [pc, #68]	@ (80049f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049b0:	0a5b      	lsrs	r3, r3, #9
 80049b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049b6:	3301      	adds	r3, #1
 80049b8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	ee07 3a90 	vmov	s15, r3
 80049c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80049c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80049c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049d0:	ee17 3a90 	vmov	r3, s15
 80049d4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80049d6:	e005      	b.n	80049e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80049d8:	2300      	movs	r3, #0
 80049da:	61bb      	str	r3, [r7, #24]
      break;
 80049dc:	e002      	b.n	80049e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80049de:	4b07      	ldr	r3, [pc, #28]	@ (80049fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80049e0:	61bb      	str	r3, [r7, #24]
      break;
 80049e2:	bf00      	nop
  }

  return sysclockfreq;
 80049e4:	69bb      	ldr	r3, [r7, #24]
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3724      	adds	r7, #36	@ 0x24
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	58024400 	.word	0x58024400
 80049f8:	03d09000 	.word	0x03d09000
 80049fc:	003d0900 	.word	0x003d0900
 8004a00:	017d7840 	.word	0x017d7840
 8004a04:	46000000 	.word	0x46000000
 8004a08:	4c742400 	.word	0x4c742400
 8004a0c:	4a742400 	.word	0x4a742400
 8004a10:	4bbebc20 	.word	0x4bbebc20

08004a14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004a1a:	f7ff fe81 	bl	8004720 <HAL_RCC_GetSysClockFreq>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	4b10      	ldr	r3, [pc, #64]	@ (8004a64 <HAL_RCC_GetHCLKFreq+0x50>)
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	0a1b      	lsrs	r3, r3, #8
 8004a26:	f003 030f 	and.w	r3, r3, #15
 8004a2a:	490f      	ldr	r1, [pc, #60]	@ (8004a68 <HAL_RCC_GetHCLKFreq+0x54>)
 8004a2c:	5ccb      	ldrb	r3, [r1, r3]
 8004a2e:	f003 031f 	and.w	r3, r3, #31
 8004a32:	fa22 f303 	lsr.w	r3, r2, r3
 8004a36:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a38:	4b0a      	ldr	r3, [pc, #40]	@ (8004a64 <HAL_RCC_GetHCLKFreq+0x50>)
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	f003 030f 	and.w	r3, r3, #15
 8004a40:	4a09      	ldr	r2, [pc, #36]	@ (8004a68 <HAL_RCC_GetHCLKFreq+0x54>)
 8004a42:	5cd3      	ldrb	r3, [r2, r3]
 8004a44:	f003 031f 	and.w	r3, r3, #31
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a4e:	4a07      	ldr	r2, [pc, #28]	@ (8004a6c <HAL_RCC_GetHCLKFreq+0x58>)
 8004a50:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a52:	4a07      	ldr	r2, [pc, #28]	@ (8004a70 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004a58:	4b04      	ldr	r3, [pc, #16]	@ (8004a6c <HAL_RCC_GetHCLKFreq+0x58>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3708      	adds	r7, #8
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	58024400 	.word	0x58024400
 8004a68:	0801503c 	.word	0x0801503c
 8004a6c:	24000034 	.word	0x24000034
 8004a70:	24000030 	.word	0x24000030

08004a74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004a78:	f7ff ffcc 	bl	8004a14 <HAL_RCC_GetHCLKFreq>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	4b06      	ldr	r3, [pc, #24]	@ (8004a98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a80:	69db      	ldr	r3, [r3, #28]
 8004a82:	091b      	lsrs	r3, r3, #4
 8004a84:	f003 0307 	and.w	r3, r3, #7
 8004a88:	4904      	ldr	r1, [pc, #16]	@ (8004a9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a8a:	5ccb      	ldrb	r3, [r1, r3]
 8004a8c:	f003 031f 	and.w	r3, r3, #31
 8004a90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	58024400 	.word	0x58024400
 8004a9c:	0801503c 	.word	0x0801503c

08004aa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004aa4:	f7ff ffb6 	bl	8004a14 <HAL_RCC_GetHCLKFreq>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	4b06      	ldr	r3, [pc, #24]	@ (8004ac4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004aac:	69db      	ldr	r3, [r3, #28]
 8004aae:	0a1b      	lsrs	r3, r3, #8
 8004ab0:	f003 0307 	and.w	r3, r3, #7
 8004ab4:	4904      	ldr	r1, [pc, #16]	@ (8004ac8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ab6:	5ccb      	ldrb	r3, [r1, r3]
 8004ab8:	f003 031f 	and.w	r3, r3, #31
 8004abc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	58024400 	.word	0x58024400
 8004ac8:	0801503c 	.word	0x0801503c

08004acc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004acc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ad0:	b0c6      	sub	sp, #280	@ 0x118
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ad8:	2300      	movs	r3, #0
 8004ada:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ade:	2300      	movs	r3, #0
 8004ae0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aec:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004af0:	2500      	movs	r5, #0
 8004af2:	ea54 0305 	orrs.w	r3, r4, r5
 8004af6:	d049      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004afc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004afe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004b02:	d02f      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004b04:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004b08:	d828      	bhi.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004b0a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b0e:	d01a      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004b10:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b14:	d822      	bhi.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004b1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b1e:	d007      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004b20:	e01c      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b22:	4bab      	ldr	r3, [pc, #684]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b26:	4aaa      	ldr	r2, [pc, #680]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004b2e:	e01a      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b34:	3308      	adds	r3, #8
 8004b36:	2102      	movs	r1, #2
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f001 fc25 	bl	8006388 <RCCEx_PLL2_Config>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004b44:	e00f      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b4a:	3328      	adds	r3, #40	@ 0x28
 8004b4c:	2102      	movs	r1, #2
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f001 fccc 	bl	80064ec <RCCEx_PLL3_Config>
 8004b54:	4603      	mov	r3, r0
 8004b56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004b5a:	e004      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004b62:	e000      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004b64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b66:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10a      	bne.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004b6e:	4b98      	ldr	r3, [pc, #608]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b72:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b7c:	4a94      	ldr	r2, [pc, #592]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b7e:	430b      	orrs	r3, r1
 8004b80:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b82:	e003      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b94:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004b98:	f04f 0900 	mov.w	r9, #0
 8004b9c:	ea58 0309 	orrs.w	r3, r8, r9
 8004ba0:	d047      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ba8:	2b04      	cmp	r3, #4
 8004baa:	d82a      	bhi.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004bac:	a201      	add	r2, pc, #4	@ (adr r2, 8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb2:	bf00      	nop
 8004bb4:	08004bc9 	.word	0x08004bc9
 8004bb8:	08004bd7 	.word	0x08004bd7
 8004bbc:	08004bed 	.word	0x08004bed
 8004bc0:	08004c0b 	.word	0x08004c0b
 8004bc4:	08004c0b 	.word	0x08004c0b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bc8:	4b81      	ldr	r3, [pc, #516]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bcc:	4a80      	ldr	r2, [pc, #512]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004bce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004bd4:	e01a      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bda:	3308      	adds	r3, #8
 8004bdc:	2100      	movs	r1, #0
 8004bde:	4618      	mov	r0, r3
 8004be0:	f001 fbd2 	bl	8006388 <RCCEx_PLL2_Config>
 8004be4:	4603      	mov	r3, r0
 8004be6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004bea:	e00f      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bf0:	3328      	adds	r3, #40	@ 0x28
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f001 fc79 	bl	80064ec <RCCEx_PLL3_Config>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c00:	e004      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004c08:	e000      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004c0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10a      	bne.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c14:	4b6e      	ldr	r3, [pc, #440]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004c16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c18:	f023 0107 	bic.w	r1, r3, #7
 8004c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c22:	4a6b      	ldr	r2, [pc, #428]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004c24:	430b      	orrs	r3, r1
 8004c26:	6513      	str	r3, [r2, #80]	@ 0x50
 8004c28:	e003      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c2e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8004c3e:	f04f 0b00 	mov.w	fp, #0
 8004c42:	ea5a 030b 	orrs.w	r3, sl, fp
 8004c46:	d05b      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c4c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004c50:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004c54:	d03b      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004c56:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004c5a:	d834      	bhi.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004c5c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004c60:	d037      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004c62:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004c66:	d82e      	bhi.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004c68:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004c6c:	d033      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004c6e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004c72:	d828      	bhi.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004c74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c78:	d01a      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004c7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c7e:	d822      	bhi.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d003      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8004c84:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c88:	d007      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004c8a:	e01c      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c8c:	4b50      	ldr	r3, [pc, #320]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c90:	4a4f      	ldr	r2, [pc, #316]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004c92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c98:	e01e      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c9e:	3308      	adds	r3, #8
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f001 fb70 	bl	8006388 <RCCEx_PLL2_Config>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004cae:	e013      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cb4:	3328      	adds	r3, #40	@ 0x28
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f001 fc17 	bl	80064ec <RCCEx_PLL3_Config>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004cc4:	e008      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004ccc:	e004      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004cce:	bf00      	nop
 8004cd0:	e002      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004cd2:	bf00      	nop
 8004cd4:	e000      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004cd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d10b      	bne.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004ce0:	4b3b      	ldr	r3, [pc, #236]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ce2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ce4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004cf0:	4a37      	ldr	r2, [pc, #220]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004cf2:	430b      	orrs	r3, r1
 8004cf4:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cf6:	e003      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cf8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004cfc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d08:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004d0c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004d10:	2300      	movs	r3, #0
 8004d12:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004d16:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	d05d      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d24:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004d28:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004d2c:	d03b      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004d2e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004d32:	d834      	bhi.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004d34:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d38:	d037      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8004d3a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d3e:	d82e      	bhi.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004d40:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004d44:	d033      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8004d46:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004d4a:	d828      	bhi.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004d4c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d50:	d01a      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8004d52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d56:	d822      	bhi.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d003      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004d5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d60:	d007      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004d62:	e01c      	b.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d64:	4b1a      	ldr	r3, [pc, #104]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d68:	4a19      	ldr	r2, [pc, #100]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004d6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004d70:	e01e      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d76:	3308      	adds	r3, #8
 8004d78:	2100      	movs	r1, #0
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f001 fb04 	bl	8006388 <RCCEx_PLL2_Config>
 8004d80:	4603      	mov	r3, r0
 8004d82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004d86:	e013      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d8c:	3328      	adds	r3, #40	@ 0x28
 8004d8e:	2100      	movs	r1, #0
 8004d90:	4618      	mov	r0, r3
 8004d92:	f001 fbab 	bl	80064ec <RCCEx_PLL3_Config>
 8004d96:	4603      	mov	r3, r0
 8004d98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004d9c:	e008      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004da4:	e004      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004da6:	bf00      	nop
 8004da8:	e002      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004daa:	bf00      	nop
 8004dac:	e000      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004dae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004db0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d10d      	bne.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004db8:	4b05      	ldr	r3, [pc, #20]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dbc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dc4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004dc8:	4a01      	ldr	r2, [pc, #4]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004dca:	430b      	orrs	r3, r1
 8004dcc:	6593      	str	r3, [r2, #88]	@ 0x58
 8004dce:	e005      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004dd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004dd8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004de8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004dec:	2300      	movs	r3, #0
 8004dee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004df2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004df6:	460b      	mov	r3, r1
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	d03a      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e02:	2b30      	cmp	r3, #48	@ 0x30
 8004e04:	d01f      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8004e06:	2b30      	cmp	r3, #48	@ 0x30
 8004e08:	d819      	bhi.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004e0a:	2b20      	cmp	r3, #32
 8004e0c:	d00c      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004e0e:	2b20      	cmp	r3, #32
 8004e10:	d815      	bhi.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d019      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004e16:	2b10      	cmp	r3, #16
 8004e18:	d111      	bne.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e1a:	4baa      	ldr	r3, [pc, #680]	@ (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e1e:	4aa9      	ldr	r2, [pc, #676]	@ (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004e26:	e011      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e2c:	3308      	adds	r3, #8
 8004e2e:	2102      	movs	r1, #2
 8004e30:	4618      	mov	r0, r3
 8004e32:	f001 faa9 	bl	8006388 <RCCEx_PLL2_Config>
 8004e36:	4603      	mov	r3, r0
 8004e38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004e3c:	e006      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004e44:	e002      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004e46:	bf00      	nop
 8004e48:	e000      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004e4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10a      	bne.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004e54:	4b9b      	ldr	r3, [pc, #620]	@ (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e58:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e62:	4a98      	ldr	r2, [pc, #608]	@ (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e64:	430b      	orrs	r3, r1
 8004e66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004e68:	e003      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e6e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004e7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004e82:	2300      	movs	r3, #0
 8004e84:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004e88:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	d051      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e9c:	d035      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8004e9e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ea2:	d82e      	bhi.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004ea4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004ea8:	d031      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x442>
 8004eaa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004eae:	d828      	bhi.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004eb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004eb4:	d01a      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004eb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004eba:	d822      	bhi.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d003      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004ec0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ec4:	d007      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8004ec6:	e01c      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ec8:	4b7e      	ldr	r3, [pc, #504]	@ (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ecc:	4a7d      	ldr	r2, [pc, #500]	@ (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ece:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ed2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004ed4:	e01c      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eda:	3308      	adds	r3, #8
 8004edc:	2100      	movs	r1, #0
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f001 fa52 	bl	8006388 <RCCEx_PLL2_Config>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004eea:	e011      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ef0:	3328      	adds	r3, #40	@ 0x28
 8004ef2:	2100      	movs	r1, #0
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f001 faf9 	bl	80064ec <RCCEx_PLL3_Config>
 8004efa:	4603      	mov	r3, r0
 8004efc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004f00:	e006      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004f08:	e002      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004f0a:	bf00      	nop
 8004f0c:	e000      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004f0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10a      	bne.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004f18:	4b6a      	ldr	r3, [pc, #424]	@ (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004f1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f1c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f26:	4a67      	ldr	r2, [pc, #412]	@ (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004f28:	430b      	orrs	r3, r1
 8004f2a:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f2c:	e003      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f2e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f32:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004f42:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004f46:	2300      	movs	r3, #0
 8004f48:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004f4c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004f50:	460b      	mov	r3, r1
 8004f52:	4313      	orrs	r3, r2
 8004f54:	d053      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f60:	d033      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8004f62:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f66:	d82c      	bhi.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004f68:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004f6c:	d02f      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x502>
 8004f6e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004f72:	d826      	bhi.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004f74:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004f78:	d02b      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004f7a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004f7e:	d820      	bhi.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004f80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f84:	d012      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8004f86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f8a:	d81a      	bhi.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d022      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8004f90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f94:	d115      	bne.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f9a:	3308      	adds	r3, #8
 8004f9c:	2101      	movs	r1, #1
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f001 f9f2 	bl	8006388 <RCCEx_PLL2_Config>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004faa:	e015      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fb0:	3328      	adds	r3, #40	@ 0x28
 8004fb2:	2101      	movs	r1, #1
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f001 fa99 	bl	80064ec <RCCEx_PLL3_Config>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004fc0:	e00a      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004fc8:	e006      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004fca:	bf00      	nop
 8004fcc:	e004      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004fce:	bf00      	nop
 8004fd0:	e002      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004fd2:	bf00      	nop
 8004fd4:	e000      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004fd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10a      	bne.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004fe0:	4b38      	ldr	r3, [pc, #224]	@ (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004fe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fe4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fee:	4a35      	ldr	r2, [pc, #212]	@ (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ff0:	430b      	orrs	r3, r1
 8004ff2:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ff4:	e003      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ffa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005006:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800500a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800500e:	2300      	movs	r3, #0
 8005010:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005014:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005018:	460b      	mov	r3, r1
 800501a:	4313      	orrs	r3, r2
 800501c:	d058      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800501e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005022:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005026:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800502a:	d033      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800502c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005030:	d82c      	bhi.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005032:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005036:	d02f      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005038:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800503c:	d826      	bhi.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800503e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005042:	d02b      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005044:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005048:	d820      	bhi.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800504a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800504e:	d012      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8005050:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005054:	d81a      	bhi.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005056:	2b00      	cmp	r3, #0
 8005058:	d022      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800505a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800505e:	d115      	bne.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005060:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005064:	3308      	adds	r3, #8
 8005066:	2101      	movs	r1, #1
 8005068:	4618      	mov	r0, r3
 800506a:	f001 f98d 	bl	8006388 <RCCEx_PLL2_Config>
 800506e:	4603      	mov	r3, r0
 8005070:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005074:	e015      	b.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005076:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800507a:	3328      	adds	r3, #40	@ 0x28
 800507c:	2101      	movs	r1, #1
 800507e:	4618      	mov	r0, r3
 8005080:	f001 fa34 	bl	80064ec <RCCEx_PLL3_Config>
 8005084:	4603      	mov	r3, r0
 8005086:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800508a:	e00a      	b.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005092:	e006      	b.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005094:	bf00      	nop
 8005096:	e004      	b.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005098:	bf00      	nop
 800509a:	e002      	b.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800509c:	bf00      	nop
 800509e:	e000      	b.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80050a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10e      	bne.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80050aa:	4b06      	ldr	r3, [pc, #24]	@ (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80050ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050ae:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80050b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80050ba:	4a02      	ldr	r2, [pc, #8]	@ (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80050bc:	430b      	orrs	r3, r1
 80050be:	6593      	str	r3, [r2, #88]	@ 0x58
 80050c0:	e006      	b.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80050c2:	bf00      	nop
 80050c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80050d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80050dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80050e0:	2300      	movs	r3, #0
 80050e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80050e6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80050ea:	460b      	mov	r3, r1
 80050ec:	4313      	orrs	r3, r2
 80050ee:	d037      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80050f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80050fa:	d00e      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80050fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005100:	d816      	bhi.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005102:	2b00      	cmp	r3, #0
 8005104:	d018      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005106:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800510a:	d111      	bne.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800510c:	4bc4      	ldr	r3, [pc, #784]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800510e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005110:	4ac3      	ldr	r2, [pc, #780]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005112:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005116:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005118:	e00f      	b.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800511a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800511e:	3308      	adds	r3, #8
 8005120:	2101      	movs	r1, #1
 8005122:	4618      	mov	r0, r3
 8005124:	f001 f930 	bl	8006388 <RCCEx_PLL2_Config>
 8005128:	4603      	mov	r3, r0
 800512a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800512e:	e004      	b.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005136:	e000      	b.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005138:	bf00      	nop
    }

    if (ret == HAL_OK)
 800513a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10a      	bne.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005142:	4bb7      	ldr	r3, [pc, #732]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005144:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005146:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800514a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800514e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005150:	4ab3      	ldr	r2, [pc, #716]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005152:	430b      	orrs	r3, r1
 8005154:	6513      	str	r3, [r2, #80]	@ 0x50
 8005156:	e003      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005158:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800515c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005160:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005168:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800516c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005170:	2300      	movs	r3, #0
 8005172:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005176:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800517a:	460b      	mov	r3, r1
 800517c:	4313      	orrs	r3, r2
 800517e:	d039      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005180:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005184:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005186:	2b03      	cmp	r3, #3
 8005188:	d81c      	bhi.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800518a:	a201      	add	r2, pc, #4	@ (adr r2, 8005190 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800518c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005190:	080051cd 	.word	0x080051cd
 8005194:	080051a1 	.word	0x080051a1
 8005198:	080051af 	.word	0x080051af
 800519c:	080051cd 	.word	0x080051cd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051a0:	4b9f      	ldr	r3, [pc, #636]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80051a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a4:	4a9e      	ldr	r2, [pc, #632]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80051a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80051ac:	e00f      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80051ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051b2:	3308      	adds	r3, #8
 80051b4:	2102      	movs	r1, #2
 80051b6:	4618      	mov	r0, r3
 80051b8:	f001 f8e6 	bl	8006388 <RCCEx_PLL2_Config>
 80051bc:	4603      	mov	r3, r0
 80051be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80051c2:	e004      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80051ca:	e000      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80051cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10a      	bne.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80051d6:	4b92      	ldr	r3, [pc, #584]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80051d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051da:	f023 0103 	bic.w	r1, r3, #3
 80051de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051e4:	4a8e      	ldr	r2, [pc, #568]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80051e6:	430b      	orrs	r3, r1
 80051e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80051ea:	e003      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80051f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005200:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005204:	2300      	movs	r3, #0
 8005206:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800520a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800520e:	460b      	mov	r3, r1
 8005210:	4313      	orrs	r3, r2
 8005212:	f000 8099 	beq.w	8005348 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005216:	4b83      	ldr	r3, [pc, #524]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a82      	ldr	r2, [pc, #520]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800521c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005220:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005222:	f7fe f933 	bl	800348c <HAL_GetTick>
 8005226:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800522a:	e00b      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800522c:	f7fe f92e 	bl	800348c <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	2b64      	cmp	r3, #100	@ 0x64
 800523a:	d903      	bls.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005242:	e005      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005244:	4b77      	ldr	r3, [pc, #476]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800524c:	2b00      	cmp	r3, #0
 800524e:	d0ed      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005250:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005254:	2b00      	cmp	r3, #0
 8005256:	d173      	bne.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005258:	4b71      	ldr	r3, [pc, #452]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800525a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800525c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005260:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005264:	4053      	eors	r3, r2
 8005266:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800526a:	2b00      	cmp	r3, #0
 800526c:	d015      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800526e:	4b6c      	ldr	r3, [pc, #432]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005270:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005272:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005276:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800527a:	4b69      	ldr	r3, [pc, #420]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800527c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800527e:	4a68      	ldr	r2, [pc, #416]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005280:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005284:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005286:	4b66      	ldr	r3, [pc, #408]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800528a:	4a65      	ldr	r2, [pc, #404]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800528c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005290:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005292:	4a63      	ldr	r2, [pc, #396]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005294:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005298:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800529a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800529e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80052a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052a6:	d118      	bne.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a8:	f7fe f8f0 	bl	800348c <HAL_GetTick>
 80052ac:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052b0:	e00d      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052b2:	f7fe f8eb 	bl	800348c <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80052bc:	1ad2      	subs	r2, r2, r3
 80052be:	f241 3388 	movw	r3, #5000	@ 0x1388
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d903      	bls.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80052cc:	e005      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052ce:	4b54      	ldr	r3, [pc, #336]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80052d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052d2:	f003 0302 	and.w	r3, r3, #2
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d0eb      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80052da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d129      	bne.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80052ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052f2:	d10e      	bne.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80052f4:	4b4a      	ldr	r3, [pc, #296]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80052fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005300:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005304:	091a      	lsrs	r2, r3, #4
 8005306:	4b48      	ldr	r3, [pc, #288]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005308:	4013      	ands	r3, r2
 800530a:	4a45      	ldr	r2, [pc, #276]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800530c:	430b      	orrs	r3, r1
 800530e:	6113      	str	r3, [r2, #16]
 8005310:	e005      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005312:	4b43      	ldr	r3, [pc, #268]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	4a42      	ldr	r2, [pc, #264]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005318:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800531c:	6113      	str	r3, [r2, #16]
 800531e:	4b40      	ldr	r3, [pc, #256]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005320:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005322:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005326:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800532a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800532e:	4a3c      	ldr	r2, [pc, #240]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005330:	430b      	orrs	r3, r1
 8005332:	6713      	str	r3, [r2, #112]	@ 0x70
 8005334:	e008      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005336:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800533a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800533e:	e003      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005340:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005344:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800534c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005350:	f002 0301 	and.w	r3, r2, #1
 8005354:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005358:	2300      	movs	r3, #0
 800535a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800535e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005362:	460b      	mov	r3, r1
 8005364:	4313      	orrs	r3, r2
 8005366:	f000 808f 	beq.w	8005488 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800536a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800536e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005370:	2b28      	cmp	r3, #40	@ 0x28
 8005372:	d871      	bhi.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005374:	a201      	add	r2, pc, #4	@ (adr r2, 800537c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537a:	bf00      	nop
 800537c:	08005461 	.word	0x08005461
 8005380:	08005459 	.word	0x08005459
 8005384:	08005459 	.word	0x08005459
 8005388:	08005459 	.word	0x08005459
 800538c:	08005459 	.word	0x08005459
 8005390:	08005459 	.word	0x08005459
 8005394:	08005459 	.word	0x08005459
 8005398:	08005459 	.word	0x08005459
 800539c:	0800542d 	.word	0x0800542d
 80053a0:	08005459 	.word	0x08005459
 80053a4:	08005459 	.word	0x08005459
 80053a8:	08005459 	.word	0x08005459
 80053ac:	08005459 	.word	0x08005459
 80053b0:	08005459 	.word	0x08005459
 80053b4:	08005459 	.word	0x08005459
 80053b8:	08005459 	.word	0x08005459
 80053bc:	08005443 	.word	0x08005443
 80053c0:	08005459 	.word	0x08005459
 80053c4:	08005459 	.word	0x08005459
 80053c8:	08005459 	.word	0x08005459
 80053cc:	08005459 	.word	0x08005459
 80053d0:	08005459 	.word	0x08005459
 80053d4:	08005459 	.word	0x08005459
 80053d8:	08005459 	.word	0x08005459
 80053dc:	08005461 	.word	0x08005461
 80053e0:	08005459 	.word	0x08005459
 80053e4:	08005459 	.word	0x08005459
 80053e8:	08005459 	.word	0x08005459
 80053ec:	08005459 	.word	0x08005459
 80053f0:	08005459 	.word	0x08005459
 80053f4:	08005459 	.word	0x08005459
 80053f8:	08005459 	.word	0x08005459
 80053fc:	08005461 	.word	0x08005461
 8005400:	08005459 	.word	0x08005459
 8005404:	08005459 	.word	0x08005459
 8005408:	08005459 	.word	0x08005459
 800540c:	08005459 	.word	0x08005459
 8005410:	08005459 	.word	0x08005459
 8005414:	08005459 	.word	0x08005459
 8005418:	08005459 	.word	0x08005459
 800541c:	08005461 	.word	0x08005461
 8005420:	58024400 	.word	0x58024400
 8005424:	58024800 	.word	0x58024800
 8005428:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800542c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005430:	3308      	adds	r3, #8
 8005432:	2101      	movs	r1, #1
 8005434:	4618      	mov	r0, r3
 8005436:	f000 ffa7 	bl	8006388 <RCCEx_PLL2_Config>
 800543a:	4603      	mov	r3, r0
 800543c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005440:	e00f      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005442:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005446:	3328      	adds	r3, #40	@ 0x28
 8005448:	2101      	movs	r1, #1
 800544a:	4618      	mov	r0, r3
 800544c:	f001 f84e 	bl	80064ec <RCCEx_PLL3_Config>
 8005450:	4603      	mov	r3, r0
 8005452:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005456:	e004      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800545e:	e000      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005460:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005462:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10a      	bne.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800546a:	4bbf      	ldr	r3, [pc, #764]	@ (8005768 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800546c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800546e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005472:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005476:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005478:	4abb      	ldr	r2, [pc, #748]	@ (8005768 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800547a:	430b      	orrs	r3, r1
 800547c:	6553      	str	r3, [r2, #84]	@ 0x54
 800547e:	e003      	b.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005480:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005484:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005488:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800548c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005490:	f002 0302 	and.w	r3, r2, #2
 8005494:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005498:	2300      	movs	r3, #0
 800549a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800549e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80054a2:	460b      	mov	r3, r1
 80054a4:	4313      	orrs	r3, r2
 80054a6:	d041      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80054a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054ae:	2b05      	cmp	r3, #5
 80054b0:	d824      	bhi.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80054b2:	a201      	add	r2, pc, #4	@ (adr r2, 80054b8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80054b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b8:	08005505 	.word	0x08005505
 80054bc:	080054d1 	.word	0x080054d1
 80054c0:	080054e7 	.word	0x080054e7
 80054c4:	08005505 	.word	0x08005505
 80054c8:	08005505 	.word	0x08005505
 80054cc:	08005505 	.word	0x08005505
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80054d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054d4:	3308      	adds	r3, #8
 80054d6:	2101      	movs	r1, #1
 80054d8:	4618      	mov	r0, r3
 80054da:	f000 ff55 	bl	8006388 <RCCEx_PLL2_Config>
 80054de:	4603      	mov	r3, r0
 80054e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80054e4:	e00f      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80054e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054ea:	3328      	adds	r3, #40	@ 0x28
 80054ec:	2101      	movs	r1, #1
 80054ee:	4618      	mov	r0, r3
 80054f0:	f000 fffc 	bl	80064ec <RCCEx_PLL3_Config>
 80054f4:	4603      	mov	r3, r0
 80054f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80054fa:	e004      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005502:	e000      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8005504:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005506:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10a      	bne.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800550e:	4b96      	ldr	r3, [pc, #600]	@ (8005768 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005512:	f023 0107 	bic.w	r1, r3, #7
 8005516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800551a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800551c:	4a92      	ldr	r2, [pc, #584]	@ (8005768 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800551e:	430b      	orrs	r3, r1
 8005520:	6553      	str	r3, [r2, #84]	@ 0x54
 8005522:	e003      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005524:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005528:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800552c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005534:	f002 0304 	and.w	r3, r2, #4
 8005538:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800553c:	2300      	movs	r3, #0
 800553e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005542:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005546:	460b      	mov	r3, r1
 8005548:	4313      	orrs	r3, r2
 800554a:	d044      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800554c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005550:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005554:	2b05      	cmp	r3, #5
 8005556:	d825      	bhi.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8005558:	a201      	add	r2, pc, #4	@ (adr r2, 8005560 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800555a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555e:	bf00      	nop
 8005560:	080055ad 	.word	0x080055ad
 8005564:	08005579 	.word	0x08005579
 8005568:	0800558f 	.word	0x0800558f
 800556c:	080055ad 	.word	0x080055ad
 8005570:	080055ad 	.word	0x080055ad
 8005574:	080055ad 	.word	0x080055ad
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005578:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800557c:	3308      	adds	r3, #8
 800557e:	2101      	movs	r1, #1
 8005580:	4618      	mov	r0, r3
 8005582:	f000 ff01 	bl	8006388 <RCCEx_PLL2_Config>
 8005586:	4603      	mov	r3, r0
 8005588:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800558c:	e00f      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800558e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005592:	3328      	adds	r3, #40	@ 0x28
 8005594:	2101      	movs	r1, #1
 8005596:	4618      	mov	r0, r3
 8005598:	f000 ffa8 	bl	80064ec <RCCEx_PLL3_Config>
 800559c:	4603      	mov	r3, r0
 800559e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80055a2:	e004      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80055aa:	e000      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80055ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d10b      	bne.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055b6:	4b6c      	ldr	r3, [pc, #432]	@ (8005768 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80055b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055ba:	f023 0107 	bic.w	r1, r3, #7
 80055be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055c6:	4a68      	ldr	r2, [pc, #416]	@ (8005768 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80055c8:	430b      	orrs	r3, r1
 80055ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80055cc:	e003      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055d2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80055d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055de:	f002 0320 	and.w	r3, r2, #32
 80055e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80055e6:	2300      	movs	r3, #0
 80055e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80055ec:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80055f0:	460b      	mov	r3, r1
 80055f2:	4313      	orrs	r3, r2
 80055f4:	d055      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80055f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005602:	d033      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8005604:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005608:	d82c      	bhi.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800560a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800560e:	d02f      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005610:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005614:	d826      	bhi.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005616:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800561a:	d02b      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800561c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005620:	d820      	bhi.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005622:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005626:	d012      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8005628:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800562c:	d81a      	bhi.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800562e:	2b00      	cmp	r3, #0
 8005630:	d022      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005632:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005636:	d115      	bne.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005638:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800563c:	3308      	adds	r3, #8
 800563e:	2100      	movs	r1, #0
 8005640:	4618      	mov	r0, r3
 8005642:	f000 fea1 	bl	8006388 <RCCEx_PLL2_Config>
 8005646:	4603      	mov	r3, r0
 8005648:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800564c:	e015      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800564e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005652:	3328      	adds	r3, #40	@ 0x28
 8005654:	2102      	movs	r1, #2
 8005656:	4618      	mov	r0, r3
 8005658:	f000 ff48 	bl	80064ec <RCCEx_PLL3_Config>
 800565c:	4603      	mov	r3, r0
 800565e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005662:	e00a      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800566a:	e006      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800566c:	bf00      	nop
 800566e:	e004      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005670:	bf00      	nop
 8005672:	e002      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005674:	bf00      	nop
 8005676:	e000      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005678:	bf00      	nop
    }

    if (ret == HAL_OK)
 800567a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10b      	bne.n	800569a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005682:	4b39      	ldr	r3, [pc, #228]	@ (8005768 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005686:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800568a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800568e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005692:	4a35      	ldr	r2, [pc, #212]	@ (8005768 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005694:	430b      	orrs	r3, r1
 8005696:	6553      	str	r3, [r2, #84]	@ 0x54
 8005698:	e003      	b.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800569a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800569e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80056a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056aa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80056ae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80056b2:	2300      	movs	r3, #0
 80056b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80056b8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80056bc:	460b      	mov	r3, r1
 80056be:	4313      	orrs	r3, r2
 80056c0:	d058      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80056c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056ca:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80056ce:	d033      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80056d0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80056d4:	d82c      	bhi.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80056d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056da:	d02f      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80056dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056e0:	d826      	bhi.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80056e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80056e6:	d02b      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80056e8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80056ec:	d820      	bhi.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80056ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056f2:	d012      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80056f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056f8:	d81a      	bhi.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d022      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80056fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005702:	d115      	bne.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005704:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005708:	3308      	adds	r3, #8
 800570a:	2100      	movs	r1, #0
 800570c:	4618      	mov	r0, r3
 800570e:	f000 fe3b 	bl	8006388 <RCCEx_PLL2_Config>
 8005712:	4603      	mov	r3, r0
 8005714:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005718:	e015      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800571a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800571e:	3328      	adds	r3, #40	@ 0x28
 8005720:	2102      	movs	r1, #2
 8005722:	4618      	mov	r0, r3
 8005724:	f000 fee2 	bl	80064ec <RCCEx_PLL3_Config>
 8005728:	4603      	mov	r3, r0
 800572a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800572e:	e00a      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005736:	e006      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005738:	bf00      	nop
 800573a:	e004      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800573c:	bf00      	nop
 800573e:	e002      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005740:	bf00      	nop
 8005742:	e000      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005744:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005746:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800574a:	2b00      	cmp	r3, #0
 800574c:	d10e      	bne.n	800576c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800574e:	4b06      	ldr	r3, [pc, #24]	@ (8005768 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005752:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005756:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800575a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800575e:	4a02      	ldr	r2, [pc, #8]	@ (8005768 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005760:	430b      	orrs	r3, r1
 8005762:	6593      	str	r3, [r2, #88]	@ 0x58
 8005764:	e006      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8005766:	bf00      	nop
 8005768:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800576c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005770:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005774:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005780:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005784:	2300      	movs	r3, #0
 8005786:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800578a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800578e:	460b      	mov	r3, r1
 8005790:	4313      	orrs	r3, r2
 8005792:	d055      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005798:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800579c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80057a0:	d033      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80057a2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80057a6:	d82c      	bhi.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80057a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057ac:	d02f      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80057ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057b2:	d826      	bhi.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80057b4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80057b8:	d02b      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80057ba:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80057be:	d820      	bhi.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80057c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80057c4:	d012      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80057c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80057ca:	d81a      	bhi.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d022      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80057d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057d4:	d115      	bne.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057da:	3308      	adds	r3, #8
 80057dc:	2100      	movs	r1, #0
 80057de:	4618      	mov	r0, r3
 80057e0:	f000 fdd2 	bl	8006388 <RCCEx_PLL2_Config>
 80057e4:	4603      	mov	r3, r0
 80057e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80057ea:	e015      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80057ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057f0:	3328      	adds	r3, #40	@ 0x28
 80057f2:	2102      	movs	r1, #2
 80057f4:	4618      	mov	r0, r3
 80057f6:	f000 fe79 	bl	80064ec <RCCEx_PLL3_Config>
 80057fa:	4603      	mov	r3, r0
 80057fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005800:	e00a      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005808:	e006      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800580a:	bf00      	nop
 800580c:	e004      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800580e:	bf00      	nop
 8005810:	e002      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005812:	bf00      	nop
 8005814:	e000      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005816:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005818:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10b      	bne.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005820:	4ba0      	ldr	r3, [pc, #640]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005824:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005828:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800582c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005830:	4a9c      	ldr	r2, [pc, #624]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005832:	430b      	orrs	r3, r1
 8005834:	6593      	str	r3, [r2, #88]	@ 0x58
 8005836:	e003      	b.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005838:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800583c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005840:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005848:	f002 0308 	and.w	r3, r2, #8
 800584c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005850:	2300      	movs	r3, #0
 8005852:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005856:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800585a:	460b      	mov	r3, r1
 800585c:	4313      	orrs	r3, r2
 800585e:	d01e      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8005860:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005864:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005868:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800586c:	d10c      	bne.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800586e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005872:	3328      	adds	r3, #40	@ 0x28
 8005874:	2102      	movs	r1, #2
 8005876:	4618      	mov	r0, r3
 8005878:	f000 fe38 	bl	80064ec <RCCEx_PLL3_Config>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d002      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005888:	4b86      	ldr	r3, [pc, #536]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800588a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800588c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005890:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005894:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005898:	4a82      	ldr	r2, [pc, #520]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800589a:	430b      	orrs	r3, r1
 800589c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800589e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a6:	f002 0310 	and.w	r3, r2, #16
 80058aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80058ae:	2300      	movs	r3, #0
 80058b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80058b4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80058b8:	460b      	mov	r3, r1
 80058ba:	4313      	orrs	r3, r2
 80058bc:	d01e      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80058be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058ca:	d10c      	bne.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80058cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058d0:	3328      	adds	r3, #40	@ 0x28
 80058d2:	2102      	movs	r1, #2
 80058d4:	4618      	mov	r0, r3
 80058d6:	f000 fe09 	bl	80064ec <RCCEx_PLL3_Config>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d002      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80058e6:	4b6f      	ldr	r3, [pc, #444]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80058e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058ea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80058ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058f6:	4a6b      	ldr	r2, [pc, #428]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80058f8:	430b      	orrs	r3, r1
 80058fa:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80058fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005904:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005908:	67bb      	str	r3, [r7, #120]	@ 0x78
 800590a:	2300      	movs	r3, #0
 800590c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800590e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005912:	460b      	mov	r3, r1
 8005914:	4313      	orrs	r3, r2
 8005916:	d03e      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005918:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800591c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005920:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005924:	d022      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005926:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800592a:	d81b      	bhi.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800592c:	2b00      	cmp	r3, #0
 800592e:	d003      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8005930:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005934:	d00b      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8005936:	e015      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005938:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800593c:	3308      	adds	r3, #8
 800593e:	2100      	movs	r1, #0
 8005940:	4618      	mov	r0, r3
 8005942:	f000 fd21 	bl	8006388 <RCCEx_PLL2_Config>
 8005946:	4603      	mov	r3, r0
 8005948:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800594c:	e00f      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800594e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005952:	3328      	adds	r3, #40	@ 0x28
 8005954:	2102      	movs	r1, #2
 8005956:	4618      	mov	r0, r3
 8005958:	f000 fdc8 	bl	80064ec <RCCEx_PLL3_Config>
 800595c:	4603      	mov	r3, r0
 800595e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005962:	e004      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800596a:	e000      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800596c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800596e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005972:	2b00      	cmp	r3, #0
 8005974:	d10b      	bne.n	800598e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005976:	4b4b      	ldr	r3, [pc, #300]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800597a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800597e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005982:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005986:	4a47      	ldr	r2, [pc, #284]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005988:	430b      	orrs	r3, r1
 800598a:	6593      	str	r3, [r2, #88]	@ 0x58
 800598c:	e003      	b.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800598e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005992:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005996:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800599a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800599e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80059a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80059a4:	2300      	movs	r3, #0
 80059a6:	677b      	str	r3, [r7, #116]	@ 0x74
 80059a8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80059ac:	460b      	mov	r3, r1
 80059ae:	4313      	orrs	r3, r2
 80059b0:	d03b      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80059b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80059be:	d01f      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80059c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80059c4:	d818      	bhi.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80059c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059ca:	d003      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80059cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80059d0:	d007      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80059d2:	e011      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059d4:	4b33      	ldr	r3, [pc, #204]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80059d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059d8:	4a32      	ldr	r2, [pc, #200]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80059da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80059e0:	e00f      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059e6:	3328      	adds	r3, #40	@ 0x28
 80059e8:	2101      	movs	r1, #1
 80059ea:	4618      	mov	r0, r3
 80059ec:	f000 fd7e 	bl	80064ec <RCCEx_PLL3_Config>
 80059f0:	4603      	mov	r3, r0
 80059f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80059f6:	e004      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80059fe:	e000      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8005a00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d10b      	bne.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a0a:	4b26      	ldr	r3, [pc, #152]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a0e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a1a:	4a22      	ldr	r2, [pc, #136]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005a1c:	430b      	orrs	r3, r1
 8005a1e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005a20:	e003      	b.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a26:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a32:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005a36:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a38:	2300      	movs	r3, #0
 8005a3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005a3c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005a40:	460b      	mov	r3, r1
 8005a42:	4313      	orrs	r3, r2
 8005a44:	d034      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d003      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8005a50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a54:	d007      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8005a56:	e011      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a58:	4b12      	ldr	r3, [pc, #72]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a5c:	4a11      	ldr	r2, [pc, #68]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005a5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005a64:	e00e      	b.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a6a:	3308      	adds	r3, #8
 8005a6c:	2102      	movs	r1, #2
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f000 fc8a 	bl	8006388 <RCCEx_PLL2_Config>
 8005a74:	4603      	mov	r3, r0
 8005a76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005a7a:	e003      	b.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005a82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d10d      	bne.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005a8c:	4b05      	ldr	r3, [pc, #20]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005a8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a90:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a9a:	4a02      	ldr	r2, [pc, #8]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005a9c:	430b      	orrs	r3, r1
 8005a9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005aa0:	e006      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8005aa2:	bf00      	nop
 8005aa4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005aac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005abc:	663b      	str	r3, [r7, #96]	@ 0x60
 8005abe:	2300      	movs	r3, #0
 8005ac0:	667b      	str	r3, [r7, #100]	@ 0x64
 8005ac2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	d00c      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ad0:	3328      	adds	r3, #40	@ 0x28
 8005ad2:	2102      	movs	r1, #2
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f000 fd09 	bl	80064ec <RCCEx_PLL3_Config>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d002      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aee:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005af2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005af4:	2300      	movs	r3, #0
 8005af6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005af8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005afc:	460b      	mov	r3, r1
 8005afe:	4313      	orrs	r3, r2
 8005b00:	d036      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b0c:	d018      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8005b0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b12:	d811      	bhi.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005b14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b18:	d014      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8005b1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b1e:	d80b      	bhi.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d011      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005b24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b28:	d106      	bne.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b2a:	4bb7      	ldr	r3, [pc, #732]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b2e:	4ab6      	ldr	r2, [pc, #728]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005b30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005b36:	e008      	b.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005b3e:	e004      	b.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005b40:	bf00      	nop
 8005b42:	e002      	b.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005b44:	bf00      	nop
 8005b46:	e000      	b.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005b48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d10a      	bne.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b52:	4bad      	ldr	r3, [pc, #692]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b56:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005b5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b60:	4aa9      	ldr	r2, [pc, #676]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005b62:	430b      	orrs	r3, r1
 8005b64:	6553      	str	r3, [r2, #84]	@ 0x54
 8005b66:	e003      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b78:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005b7c:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b7e:	2300      	movs	r3, #0
 8005b80:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b82:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005b86:	460b      	mov	r3, r1
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	d009      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005b8c:	4b9e      	ldr	r3, [pc, #632]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005b8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b90:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005b94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b9a:	4a9b      	ldr	r2, [pc, #620]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005b9c:	430b      	orrs	r3, r1
 8005b9e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005bac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bae:	2300      	movs	r3, #0
 8005bb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bb2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	d009      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005bbc:	4b92      	ldr	r3, [pc, #584]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005bbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bc0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bc8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005bca:	4a8f      	ldr	r2, [pc, #572]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005bcc:	430b      	orrs	r3, r1
 8005bce:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005bdc:	643b      	str	r3, [r7, #64]	@ 0x40
 8005bde:	2300      	movs	r3, #0
 8005be0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005be2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005be6:	460b      	mov	r3, r1
 8005be8:	4313      	orrs	r3, r2
 8005bea:	d00e      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005bec:	4b86      	ldr	r3, [pc, #536]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	4a85      	ldr	r2, [pc, #532]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005bf2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005bf6:	6113      	str	r3, [r2, #16]
 8005bf8:	4b83      	ldr	r3, [pc, #524]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005bfa:	6919      	ldr	r1, [r3, #16]
 8005bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005c04:	4a80      	ldr	r2, [pc, #512]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005c06:	430b      	orrs	r3, r1
 8005c08:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c12:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005c16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005c18:	2300      	movs	r3, #0
 8005c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c1c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005c20:	460b      	mov	r3, r1
 8005c22:	4313      	orrs	r3, r2
 8005c24:	d009      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005c26:	4b78      	ldr	r3, [pc, #480]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c2a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c34:	4a74      	ldr	r2, [pc, #464]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005c36:	430b      	orrs	r3, r1
 8005c38:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c42:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005c46:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c48:	2300      	movs	r3, #0
 8005c4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c4c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005c50:	460b      	mov	r3, r1
 8005c52:	4313      	orrs	r3, r2
 8005c54:	d00a      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005c56:	4b6c      	ldr	r3, [pc, #432]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c5a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c66:	4a68      	ldr	r2, [pc, #416]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005c68:	430b      	orrs	r3, r1
 8005c6a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c74:	2100      	movs	r1, #0
 8005c76:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005c78:	f003 0301 	and.w	r3, r3, #1
 8005c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c7e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005c82:	460b      	mov	r3, r1
 8005c84:	4313      	orrs	r3, r2
 8005c86:	d011      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c8c:	3308      	adds	r3, #8
 8005c8e:	2100      	movs	r1, #0
 8005c90:	4618      	mov	r0, r3
 8005c92:	f000 fb79 	bl	8006388 <RCCEx_PLL2_Config>
 8005c96:	4603      	mov	r3, r0
 8005c98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005c9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d003      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ca4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ca8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	6239      	str	r1, [r7, #32]
 8005cb8:	f003 0302 	and.w	r3, r3, #2
 8005cbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cbe:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005cc2:	460b      	mov	r3, r1
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	d011      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ccc:	3308      	adds	r3, #8
 8005cce:	2101      	movs	r1, #1
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f000 fb59 	bl	8006388 <RCCEx_PLL2_Config>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005cdc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d003      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ce4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ce8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	61b9      	str	r1, [r7, #24]
 8005cf8:	f003 0304 	and.w	r3, r3, #4
 8005cfc:	61fb      	str	r3, [r7, #28]
 8005cfe:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005d02:	460b      	mov	r3, r1
 8005d04:	4313      	orrs	r3, r2
 8005d06:	d011      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d0c:	3308      	adds	r3, #8
 8005d0e:	2102      	movs	r1, #2
 8005d10:	4618      	mov	r0, r3
 8005d12:	f000 fb39 	bl	8006388 <RCCEx_PLL2_Config>
 8005d16:	4603      	mov	r3, r0
 8005d18:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005d1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d003      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d28:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d34:	2100      	movs	r1, #0
 8005d36:	6139      	str	r1, [r7, #16]
 8005d38:	f003 0308 	and.w	r3, r3, #8
 8005d3c:	617b      	str	r3, [r7, #20]
 8005d3e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005d42:	460b      	mov	r3, r1
 8005d44:	4313      	orrs	r3, r2
 8005d46:	d011      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d4c:	3328      	adds	r3, #40	@ 0x28
 8005d4e:	2100      	movs	r1, #0
 8005d50:	4618      	mov	r0, r3
 8005d52:	f000 fbcb 	bl	80064ec <RCCEx_PLL3_Config>
 8005d56:	4603      	mov	r3, r0
 8005d58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8005d5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d003      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005d6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d74:	2100      	movs	r1, #0
 8005d76:	60b9      	str	r1, [r7, #8]
 8005d78:	f003 0310 	and.w	r3, r3, #16
 8005d7c:	60fb      	str	r3, [r7, #12]
 8005d7e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005d82:	460b      	mov	r3, r1
 8005d84:	4313      	orrs	r3, r2
 8005d86:	d011      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d8c:	3328      	adds	r3, #40	@ 0x28
 8005d8e:	2101      	movs	r1, #1
 8005d90:	4618      	mov	r0, r3
 8005d92:	f000 fbab 	bl	80064ec <RCCEx_PLL3_Config>
 8005d96:	4603      	mov	r3, r0
 8005d98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005d9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d003      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005da4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005da8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db4:	2100      	movs	r1, #0
 8005db6:	6039      	str	r1, [r7, #0]
 8005db8:	f003 0320 	and.w	r3, r3, #32
 8005dbc:	607b      	str	r3, [r7, #4]
 8005dbe:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	d011      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dcc:	3328      	adds	r3, #40	@ 0x28
 8005dce:	2102      	movs	r1, #2
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f000 fb8b 	bl	80064ec <RCCEx_PLL3_Config>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005ddc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d003      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005de4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005de8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8005dec:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d101      	bne.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8005df4:	2300      	movs	r3, #0
 8005df6:	e000      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8005e00:	46bd      	mov	sp, r7
 8005e02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e06:	bf00      	nop
 8005e08:	58024400 	.word	0x58024400

08005e0c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005e10:	f7fe fe00 	bl	8004a14 <HAL_RCC_GetHCLKFreq>
 8005e14:	4602      	mov	r2, r0
 8005e16:	4b06      	ldr	r3, [pc, #24]	@ (8005e30 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005e18:	6a1b      	ldr	r3, [r3, #32]
 8005e1a:	091b      	lsrs	r3, r3, #4
 8005e1c:	f003 0307 	and.w	r3, r3, #7
 8005e20:	4904      	ldr	r1, [pc, #16]	@ (8005e34 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005e22:	5ccb      	ldrb	r3, [r1, r3]
 8005e24:	f003 031f 	and.w	r3, r3, #31
 8005e28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	58024400 	.word	0x58024400
 8005e34:	0801503c 	.word	0x0801503c

08005e38 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b089      	sub	sp, #36	@ 0x24
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e40:	4ba1      	ldr	r3, [pc, #644]	@ (80060c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e44:	f003 0303 	and.w	r3, r3, #3
 8005e48:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005e4a:	4b9f      	ldr	r3, [pc, #636]	@ (80060c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e4e:	0b1b      	lsrs	r3, r3, #12
 8005e50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e54:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005e56:	4b9c      	ldr	r3, [pc, #624]	@ (80060c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e5a:	091b      	lsrs	r3, r3, #4
 8005e5c:	f003 0301 	and.w	r3, r3, #1
 8005e60:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005e62:	4b99      	ldr	r3, [pc, #612]	@ (80060c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e66:	08db      	lsrs	r3, r3, #3
 8005e68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	fb02 f303 	mul.w	r3, r2, r3
 8005e72:	ee07 3a90 	vmov	s15, r3
 8005e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	f000 8111 	beq.w	80060a8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	f000 8083 	beq.w	8005f94 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	f200 80a1 	bhi.w	8005fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d003      	beq.n	8005ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d056      	beq.n	8005f50 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005ea2:	e099      	b.n	8005fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ea4:	4b88      	ldr	r3, [pc, #544]	@ (80060c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0320 	and.w	r3, r3, #32
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d02d      	beq.n	8005f0c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005eb0:	4b85      	ldr	r3, [pc, #532]	@ (80060c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	08db      	lsrs	r3, r3, #3
 8005eb6:	f003 0303 	and.w	r3, r3, #3
 8005eba:	4a84      	ldr	r2, [pc, #528]	@ (80060cc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ec0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	ee07 3a90 	vmov	s15, r3
 8005ec8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	ee07 3a90 	vmov	s15, r3
 8005ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eda:	4b7b      	ldr	r3, [pc, #492]	@ (80060c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ee2:	ee07 3a90 	vmov	s15, r3
 8005ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eea:	ed97 6a03 	vldr	s12, [r7, #12]
 8005eee:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80060d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005efa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f06:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005f0a:	e087      	b.n	800601c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	ee07 3a90 	vmov	s15, r3
 8005f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f16:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80060d4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f1e:	4b6a      	ldr	r3, [pc, #424]	@ (80060c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f26:	ee07 3a90 	vmov	s15, r3
 8005f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f32:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80060d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f4e:	e065      	b.n	800601c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	ee07 3a90 	vmov	s15, r3
 8005f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f5a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80060d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f62:	4b59      	ldr	r3, [pc, #356]	@ (80060c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f6a:	ee07 3a90 	vmov	s15, r3
 8005f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f72:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f76:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80060d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f92:	e043      	b.n	800601c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	ee07 3a90 	vmov	s15, r3
 8005f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f9e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80060dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005fa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fa6:	4b48      	ldr	r3, [pc, #288]	@ (80060c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fae:	ee07 3a90 	vmov	s15, r3
 8005fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fba:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80060d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005fbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fd6:	e021      	b.n	800601c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	ee07 3a90 	vmov	s15, r3
 8005fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fe2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80060d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005fe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fea:	4b37      	ldr	r3, [pc, #220]	@ (80060c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ff2:	ee07 3a90 	vmov	s15, r3
 8005ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ffa:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ffe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80060d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800600a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800600e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006016:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800601a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800601c:	4b2a      	ldr	r3, [pc, #168]	@ (80060c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800601e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006020:	0a5b      	lsrs	r3, r3, #9
 8006022:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006026:	ee07 3a90 	vmov	s15, r3
 800602a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800602e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006032:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006036:	edd7 6a07 	vldr	s13, [r7, #28]
 800603a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800603e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006042:	ee17 2a90 	vmov	r2, s15
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800604a:	4b1f      	ldr	r3, [pc, #124]	@ (80060c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800604c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800604e:	0c1b      	lsrs	r3, r3, #16
 8006050:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006054:	ee07 3a90 	vmov	s15, r3
 8006058:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800605c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006060:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006064:	edd7 6a07 	vldr	s13, [r7, #28]
 8006068:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800606c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006070:	ee17 2a90 	vmov	r2, s15
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006078:	4b13      	ldr	r3, [pc, #76]	@ (80060c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800607a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800607c:	0e1b      	lsrs	r3, r3, #24
 800607e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006082:	ee07 3a90 	vmov	s15, r3
 8006086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800608a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800608e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006092:	edd7 6a07 	vldr	s13, [r7, #28]
 8006096:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800609a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800609e:	ee17 2a90 	vmov	r2, s15
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80060a6:	e008      	b.n	80060ba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	609a      	str	r2, [r3, #8]
}
 80060ba:	bf00      	nop
 80060bc:	3724      	adds	r7, #36	@ 0x24
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	58024400 	.word	0x58024400
 80060cc:	03d09000 	.word	0x03d09000
 80060d0:	46000000 	.word	0x46000000
 80060d4:	4c742400 	.word	0x4c742400
 80060d8:	4a742400 	.word	0x4a742400
 80060dc:	4bbebc20 	.word	0x4bbebc20

080060e0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b089      	sub	sp, #36	@ 0x24
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80060e8:	4ba1      	ldr	r3, [pc, #644]	@ (8006370 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ec:	f003 0303 	and.w	r3, r3, #3
 80060f0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80060f2:	4b9f      	ldr	r3, [pc, #636]	@ (8006370 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060f6:	0d1b      	lsrs	r3, r3, #20
 80060f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80060fc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80060fe:	4b9c      	ldr	r3, [pc, #624]	@ (8006370 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006102:	0a1b      	lsrs	r3, r3, #8
 8006104:	f003 0301 	and.w	r3, r3, #1
 8006108:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800610a:	4b99      	ldr	r3, [pc, #612]	@ (8006370 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800610c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800610e:	08db      	lsrs	r3, r3, #3
 8006110:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	fb02 f303 	mul.w	r3, r2, r3
 800611a:	ee07 3a90 	vmov	s15, r3
 800611e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006122:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	2b00      	cmp	r3, #0
 800612a:	f000 8111 	beq.w	8006350 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	2b02      	cmp	r3, #2
 8006132:	f000 8083 	beq.w	800623c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	2b02      	cmp	r3, #2
 800613a:	f200 80a1 	bhi.w	8006280 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d003      	beq.n	800614c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	2b01      	cmp	r3, #1
 8006148:	d056      	beq.n	80061f8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800614a:	e099      	b.n	8006280 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800614c:	4b88      	ldr	r3, [pc, #544]	@ (8006370 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0320 	and.w	r3, r3, #32
 8006154:	2b00      	cmp	r3, #0
 8006156:	d02d      	beq.n	80061b4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006158:	4b85      	ldr	r3, [pc, #532]	@ (8006370 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	08db      	lsrs	r3, r3, #3
 800615e:	f003 0303 	and.w	r3, r3, #3
 8006162:	4a84      	ldr	r2, [pc, #528]	@ (8006374 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006164:	fa22 f303 	lsr.w	r3, r2, r3
 8006168:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	ee07 3a90 	vmov	s15, r3
 8006170:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	ee07 3a90 	vmov	s15, r3
 800617a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800617e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006182:	4b7b      	ldr	r3, [pc, #492]	@ (8006370 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800618a:	ee07 3a90 	vmov	s15, r3
 800618e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006192:	ed97 6a03 	vldr	s12, [r7, #12]
 8006196:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006378 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800619a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800619e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80061b2:	e087      	b.n	80062c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	ee07 3a90 	vmov	s15, r3
 80061ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061be:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800637c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80061c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061c6:	4b6a      	ldr	r3, [pc, #424]	@ (8006370 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ce:	ee07 3a90 	vmov	s15, r3
 80061d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80061da:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006378 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80061de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061f6:	e065      	b.n	80062c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	ee07 3a90 	vmov	s15, r3
 80061fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006202:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006380 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800620a:	4b59      	ldr	r3, [pc, #356]	@ (8006370 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800620c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800620e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006212:	ee07 3a90 	vmov	s15, r3
 8006216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800621a:	ed97 6a03 	vldr	s12, [r7, #12]
 800621e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006378 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800622a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800622e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006236:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800623a:	e043      	b.n	80062c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	ee07 3a90 	vmov	s15, r3
 8006242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006246:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006384 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800624a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800624e:	4b48      	ldr	r3, [pc, #288]	@ (8006370 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006256:	ee07 3a90 	vmov	s15, r3
 800625a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800625e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006262:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006378 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800626a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800626e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800627a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800627e:	e021      	b.n	80062c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	ee07 3a90 	vmov	s15, r3
 8006286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800628a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006380 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800628e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006292:	4b37      	ldr	r3, [pc, #220]	@ (8006370 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800629a:	ee07 3a90 	vmov	s15, r3
 800629e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80062a6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006378 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80062aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062c2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80062c4:	4b2a      	ldr	r3, [pc, #168]	@ (8006370 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062c8:	0a5b      	lsrs	r3, r3, #9
 80062ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062ce:	ee07 3a90 	vmov	s15, r3
 80062d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80062da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062de:	edd7 6a07 	vldr	s13, [r7, #28]
 80062e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062ea:	ee17 2a90 	vmov	r2, s15
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80062f2:	4b1f      	ldr	r3, [pc, #124]	@ (8006370 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062f6:	0c1b      	lsrs	r3, r3, #16
 80062f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062fc:	ee07 3a90 	vmov	s15, r3
 8006300:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006304:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006308:	ee37 7a87 	vadd.f32	s14, s15, s14
 800630c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006310:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006314:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006318:	ee17 2a90 	vmov	r2, s15
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006320:	4b13      	ldr	r3, [pc, #76]	@ (8006370 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006324:	0e1b      	lsrs	r3, r3, #24
 8006326:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800632a:	ee07 3a90 	vmov	s15, r3
 800632e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006332:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006336:	ee37 7a87 	vadd.f32	s14, s15, s14
 800633a:	edd7 6a07 	vldr	s13, [r7, #28]
 800633e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006342:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006346:	ee17 2a90 	vmov	r2, s15
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800634e:	e008      	b.n	8006362 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	609a      	str	r2, [r3, #8]
}
 8006362:	bf00      	nop
 8006364:	3724      	adds	r7, #36	@ 0x24
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop
 8006370:	58024400 	.word	0x58024400
 8006374:	03d09000 	.word	0x03d09000
 8006378:	46000000 	.word	0x46000000
 800637c:	4c742400 	.word	0x4c742400
 8006380:	4a742400 	.word	0x4a742400
 8006384:	4bbebc20 	.word	0x4bbebc20

08006388 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006392:	2300      	movs	r3, #0
 8006394:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006396:	4b53      	ldr	r3, [pc, #332]	@ (80064e4 <RCCEx_PLL2_Config+0x15c>)
 8006398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800639a:	f003 0303 	and.w	r3, r3, #3
 800639e:	2b03      	cmp	r3, #3
 80063a0:	d101      	bne.n	80063a6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e099      	b.n	80064da <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80063a6:	4b4f      	ldr	r3, [pc, #316]	@ (80064e4 <RCCEx_PLL2_Config+0x15c>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a4e      	ldr	r2, [pc, #312]	@ (80064e4 <RCCEx_PLL2_Config+0x15c>)
 80063ac:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80063b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063b2:	f7fd f86b 	bl	800348c <HAL_GetTick>
 80063b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80063b8:	e008      	b.n	80063cc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80063ba:	f7fd f867 	bl	800348c <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d901      	bls.n	80063cc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e086      	b.n	80064da <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80063cc:	4b45      	ldr	r3, [pc, #276]	@ (80064e4 <RCCEx_PLL2_Config+0x15c>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1f0      	bne.n	80063ba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80063d8:	4b42      	ldr	r3, [pc, #264]	@ (80064e4 <RCCEx_PLL2_Config+0x15c>)
 80063da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063dc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	031b      	lsls	r3, r3, #12
 80063e6:	493f      	ldr	r1, [pc, #252]	@ (80064e4 <RCCEx_PLL2_Config+0x15c>)
 80063e8:	4313      	orrs	r3, r2
 80063ea:	628b      	str	r3, [r1, #40]	@ 0x28
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	3b01      	subs	r3, #1
 80063f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	3b01      	subs	r3, #1
 80063fc:	025b      	lsls	r3, r3, #9
 80063fe:	b29b      	uxth	r3, r3
 8006400:	431a      	orrs	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	3b01      	subs	r3, #1
 8006408:	041b      	lsls	r3, r3, #16
 800640a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800640e:	431a      	orrs	r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	3b01      	subs	r3, #1
 8006416:	061b      	lsls	r3, r3, #24
 8006418:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800641c:	4931      	ldr	r1, [pc, #196]	@ (80064e4 <RCCEx_PLL2_Config+0x15c>)
 800641e:	4313      	orrs	r3, r2
 8006420:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006422:	4b30      	ldr	r3, [pc, #192]	@ (80064e4 <RCCEx_PLL2_Config+0x15c>)
 8006424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006426:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	492d      	ldr	r1, [pc, #180]	@ (80064e4 <RCCEx_PLL2_Config+0x15c>)
 8006430:	4313      	orrs	r3, r2
 8006432:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006434:	4b2b      	ldr	r3, [pc, #172]	@ (80064e4 <RCCEx_PLL2_Config+0x15c>)
 8006436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006438:	f023 0220 	bic.w	r2, r3, #32
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	699b      	ldr	r3, [r3, #24]
 8006440:	4928      	ldr	r1, [pc, #160]	@ (80064e4 <RCCEx_PLL2_Config+0x15c>)
 8006442:	4313      	orrs	r3, r2
 8006444:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006446:	4b27      	ldr	r3, [pc, #156]	@ (80064e4 <RCCEx_PLL2_Config+0x15c>)
 8006448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800644a:	4a26      	ldr	r2, [pc, #152]	@ (80064e4 <RCCEx_PLL2_Config+0x15c>)
 800644c:	f023 0310 	bic.w	r3, r3, #16
 8006450:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006452:	4b24      	ldr	r3, [pc, #144]	@ (80064e4 <RCCEx_PLL2_Config+0x15c>)
 8006454:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006456:	4b24      	ldr	r3, [pc, #144]	@ (80064e8 <RCCEx_PLL2_Config+0x160>)
 8006458:	4013      	ands	r3, r2
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	69d2      	ldr	r2, [r2, #28]
 800645e:	00d2      	lsls	r2, r2, #3
 8006460:	4920      	ldr	r1, [pc, #128]	@ (80064e4 <RCCEx_PLL2_Config+0x15c>)
 8006462:	4313      	orrs	r3, r2
 8006464:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006466:	4b1f      	ldr	r3, [pc, #124]	@ (80064e4 <RCCEx_PLL2_Config+0x15c>)
 8006468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800646a:	4a1e      	ldr	r2, [pc, #120]	@ (80064e4 <RCCEx_PLL2_Config+0x15c>)
 800646c:	f043 0310 	orr.w	r3, r3, #16
 8006470:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d106      	bne.n	8006486 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006478:	4b1a      	ldr	r3, [pc, #104]	@ (80064e4 <RCCEx_PLL2_Config+0x15c>)
 800647a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800647c:	4a19      	ldr	r2, [pc, #100]	@ (80064e4 <RCCEx_PLL2_Config+0x15c>)
 800647e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006482:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006484:	e00f      	b.n	80064a6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d106      	bne.n	800649a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800648c:	4b15      	ldr	r3, [pc, #84]	@ (80064e4 <RCCEx_PLL2_Config+0x15c>)
 800648e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006490:	4a14      	ldr	r2, [pc, #80]	@ (80064e4 <RCCEx_PLL2_Config+0x15c>)
 8006492:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006496:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006498:	e005      	b.n	80064a6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800649a:	4b12      	ldr	r3, [pc, #72]	@ (80064e4 <RCCEx_PLL2_Config+0x15c>)
 800649c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800649e:	4a11      	ldr	r2, [pc, #68]	@ (80064e4 <RCCEx_PLL2_Config+0x15c>)
 80064a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80064a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80064a6:	4b0f      	ldr	r3, [pc, #60]	@ (80064e4 <RCCEx_PLL2_Config+0x15c>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a0e      	ldr	r2, [pc, #56]	@ (80064e4 <RCCEx_PLL2_Config+0x15c>)
 80064ac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80064b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064b2:	f7fc ffeb 	bl	800348c <HAL_GetTick>
 80064b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80064b8:	e008      	b.n	80064cc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80064ba:	f7fc ffe7 	bl	800348c <HAL_GetTick>
 80064be:	4602      	mov	r2, r0
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d901      	bls.n	80064cc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e006      	b.n	80064da <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80064cc:	4b05      	ldr	r3, [pc, #20]	@ (80064e4 <RCCEx_PLL2_Config+0x15c>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d0f0      	beq.n	80064ba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80064d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3710      	adds	r7, #16
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	58024400 	.word	0x58024400
 80064e8:	ffff0007 	.word	0xffff0007

080064ec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064f6:	2300      	movs	r3, #0
 80064f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80064fa:	4b53      	ldr	r3, [pc, #332]	@ (8006648 <RCCEx_PLL3_Config+0x15c>)
 80064fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064fe:	f003 0303 	and.w	r3, r3, #3
 8006502:	2b03      	cmp	r3, #3
 8006504:	d101      	bne.n	800650a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e099      	b.n	800663e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800650a:	4b4f      	ldr	r3, [pc, #316]	@ (8006648 <RCCEx_PLL3_Config+0x15c>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a4e      	ldr	r2, [pc, #312]	@ (8006648 <RCCEx_PLL3_Config+0x15c>)
 8006510:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006514:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006516:	f7fc ffb9 	bl	800348c <HAL_GetTick>
 800651a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800651c:	e008      	b.n	8006530 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800651e:	f7fc ffb5 	bl	800348c <HAL_GetTick>
 8006522:	4602      	mov	r2, r0
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	2b02      	cmp	r3, #2
 800652a:	d901      	bls.n	8006530 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e086      	b.n	800663e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006530:	4b45      	ldr	r3, [pc, #276]	@ (8006648 <RCCEx_PLL3_Config+0x15c>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1f0      	bne.n	800651e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800653c:	4b42      	ldr	r3, [pc, #264]	@ (8006648 <RCCEx_PLL3_Config+0x15c>)
 800653e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006540:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	051b      	lsls	r3, r3, #20
 800654a:	493f      	ldr	r1, [pc, #252]	@ (8006648 <RCCEx_PLL3_Config+0x15c>)
 800654c:	4313      	orrs	r3, r2
 800654e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	3b01      	subs	r3, #1
 8006556:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	3b01      	subs	r3, #1
 8006560:	025b      	lsls	r3, r3, #9
 8006562:	b29b      	uxth	r3, r3
 8006564:	431a      	orrs	r2, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	3b01      	subs	r3, #1
 800656c:	041b      	lsls	r3, r3, #16
 800656e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006572:	431a      	orrs	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	3b01      	subs	r3, #1
 800657a:	061b      	lsls	r3, r3, #24
 800657c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006580:	4931      	ldr	r1, [pc, #196]	@ (8006648 <RCCEx_PLL3_Config+0x15c>)
 8006582:	4313      	orrs	r3, r2
 8006584:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006586:	4b30      	ldr	r3, [pc, #192]	@ (8006648 <RCCEx_PLL3_Config+0x15c>)
 8006588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800658a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	492d      	ldr	r1, [pc, #180]	@ (8006648 <RCCEx_PLL3_Config+0x15c>)
 8006594:	4313      	orrs	r3, r2
 8006596:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006598:	4b2b      	ldr	r3, [pc, #172]	@ (8006648 <RCCEx_PLL3_Config+0x15c>)
 800659a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800659c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	699b      	ldr	r3, [r3, #24]
 80065a4:	4928      	ldr	r1, [pc, #160]	@ (8006648 <RCCEx_PLL3_Config+0x15c>)
 80065a6:	4313      	orrs	r3, r2
 80065a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80065aa:	4b27      	ldr	r3, [pc, #156]	@ (8006648 <RCCEx_PLL3_Config+0x15c>)
 80065ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ae:	4a26      	ldr	r2, [pc, #152]	@ (8006648 <RCCEx_PLL3_Config+0x15c>)
 80065b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80065b6:	4b24      	ldr	r3, [pc, #144]	@ (8006648 <RCCEx_PLL3_Config+0x15c>)
 80065b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065ba:	4b24      	ldr	r3, [pc, #144]	@ (800664c <RCCEx_PLL3_Config+0x160>)
 80065bc:	4013      	ands	r3, r2
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	69d2      	ldr	r2, [r2, #28]
 80065c2:	00d2      	lsls	r2, r2, #3
 80065c4:	4920      	ldr	r1, [pc, #128]	@ (8006648 <RCCEx_PLL3_Config+0x15c>)
 80065c6:	4313      	orrs	r3, r2
 80065c8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80065ca:	4b1f      	ldr	r3, [pc, #124]	@ (8006648 <RCCEx_PLL3_Config+0x15c>)
 80065cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ce:	4a1e      	ldr	r2, [pc, #120]	@ (8006648 <RCCEx_PLL3_Config+0x15c>)
 80065d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d106      	bne.n	80065ea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80065dc:	4b1a      	ldr	r3, [pc, #104]	@ (8006648 <RCCEx_PLL3_Config+0x15c>)
 80065de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e0:	4a19      	ldr	r2, [pc, #100]	@ (8006648 <RCCEx_PLL3_Config+0x15c>)
 80065e2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80065e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80065e8:	e00f      	b.n	800660a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d106      	bne.n	80065fe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80065f0:	4b15      	ldr	r3, [pc, #84]	@ (8006648 <RCCEx_PLL3_Config+0x15c>)
 80065f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f4:	4a14      	ldr	r2, [pc, #80]	@ (8006648 <RCCEx_PLL3_Config+0x15c>)
 80065f6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80065fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80065fc:	e005      	b.n	800660a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80065fe:	4b12      	ldr	r3, [pc, #72]	@ (8006648 <RCCEx_PLL3_Config+0x15c>)
 8006600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006602:	4a11      	ldr	r2, [pc, #68]	@ (8006648 <RCCEx_PLL3_Config+0x15c>)
 8006604:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006608:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800660a:	4b0f      	ldr	r3, [pc, #60]	@ (8006648 <RCCEx_PLL3_Config+0x15c>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a0e      	ldr	r2, [pc, #56]	@ (8006648 <RCCEx_PLL3_Config+0x15c>)
 8006610:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006614:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006616:	f7fc ff39 	bl	800348c <HAL_GetTick>
 800661a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800661c:	e008      	b.n	8006630 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800661e:	f7fc ff35 	bl	800348c <HAL_GetTick>
 8006622:	4602      	mov	r2, r0
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	2b02      	cmp	r3, #2
 800662a:	d901      	bls.n	8006630 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	e006      	b.n	800663e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006630:	4b05      	ldr	r3, [pc, #20]	@ (8006648 <RCCEx_PLL3_Config+0x15c>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d0f0      	beq.n	800661e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800663c:	7bfb      	ldrb	r3, [r7, #15]
}
 800663e:	4618      	mov	r0, r3
 8006640:	3710      	adds	r7, #16
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	58024400 	.word	0x58024400
 800664c:	ffff0007 	.word	0xffff0007

08006650 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d101      	bne.n	8006662 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e10f      	b.n	8006882 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a87      	ldr	r2, [pc, #540]	@ (800688c <HAL_SPI_Init+0x23c>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d00f      	beq.n	8006692 <HAL_SPI_Init+0x42>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a86      	ldr	r2, [pc, #536]	@ (8006890 <HAL_SPI_Init+0x240>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d00a      	beq.n	8006692 <HAL_SPI_Init+0x42>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a84      	ldr	r2, [pc, #528]	@ (8006894 <HAL_SPI_Init+0x244>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d005      	beq.n	8006692 <HAL_SPI_Init+0x42>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	2b0f      	cmp	r3, #15
 800668c:	d901      	bls.n	8006692 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e0f7      	b.n	8006882 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 fbbc 	bl	8006e10 <SPI_GetPacketSize>
 8006698:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a7b      	ldr	r2, [pc, #492]	@ (800688c <HAL_SPI_Init+0x23c>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d00c      	beq.n	80066be <HAL_SPI_Init+0x6e>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a79      	ldr	r2, [pc, #484]	@ (8006890 <HAL_SPI_Init+0x240>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d007      	beq.n	80066be <HAL_SPI_Init+0x6e>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a78      	ldr	r2, [pc, #480]	@ (8006894 <HAL_SPI_Init+0x244>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d002      	beq.n	80066be <HAL_SPI_Init+0x6e>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2b08      	cmp	r3, #8
 80066bc:	d811      	bhi.n	80066e2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80066c2:	4a72      	ldr	r2, [pc, #456]	@ (800688c <HAL_SPI_Init+0x23c>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d009      	beq.n	80066dc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a70      	ldr	r2, [pc, #448]	@ (8006890 <HAL_SPI_Init+0x240>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d004      	beq.n	80066dc <HAL_SPI_Init+0x8c>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a6f      	ldr	r2, [pc, #444]	@ (8006894 <HAL_SPI_Init+0x244>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d104      	bne.n	80066e6 <HAL_SPI_Init+0x96>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2b10      	cmp	r3, #16
 80066e0:	d901      	bls.n	80066e6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e0cd      	b.n	8006882 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d106      	bne.n	8006700 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f7fc fbb4 	bl	8002e68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2202      	movs	r2, #2
 8006704:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f022 0201 	bic.w	r2, r2, #1
 8006716:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8006722:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800672c:	d119      	bne.n	8006762 <HAL_SPI_Init+0x112>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006736:	d103      	bne.n	8006740 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800673c:	2b00      	cmp	r3, #0
 800673e:	d008      	beq.n	8006752 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006744:	2b00      	cmp	r3, #0
 8006746:	d10c      	bne.n	8006762 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800674c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006750:	d107      	bne.n	8006762 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006760:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00f      	beq.n	800678e <HAL_SPI_Init+0x13e>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	2b06      	cmp	r3, #6
 8006774:	d90b      	bls.n	800678e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	430a      	orrs	r2, r1
 800678a:	601a      	str	r2, [r3, #0]
 800678c:	e007      	b.n	800679e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800679c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	69da      	ldr	r2, [r3, #28]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067a6:	431a      	orrs	r2, r3
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	431a      	orrs	r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067b0:	ea42 0103 	orr.w	r1, r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	68da      	ldr	r2, [r3, #12]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	430a      	orrs	r2, r1
 80067be:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c8:	431a      	orrs	r2, r3
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ce:	431a      	orrs	r2, r3
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	699b      	ldr	r3, [r3, #24]
 80067d4:	431a      	orrs	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	431a      	orrs	r2, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	695b      	ldr	r3, [r3, #20]
 80067e0:	431a      	orrs	r2, r3
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a1b      	ldr	r3, [r3, #32]
 80067e6:	431a      	orrs	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	431a      	orrs	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067f2:	431a      	orrs	r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	431a      	orrs	r2, r3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067fe:	ea42 0103 	orr.w	r1, r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	430a      	orrs	r2, r1
 800680c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d113      	bne.n	800683e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006828:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800683c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f022 0201 	bic.w	r2, r2, #1
 800684c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00a      	beq.n	8006870 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	430a      	orrs	r2, r1
 800686e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	40013000 	.word	0x40013000
 8006890:	40003800 	.word	0x40003800
 8006894:	40003c00 	.word	0x40003c00

08006898 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b088      	sub	sp, #32
 800689c:	af02      	add	r7, sp, #8
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	603b      	str	r3, [r7, #0]
 80068a4:	4613      	mov	r3, r2
 80068a6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	3320      	adds	r3, #32
 80068ae:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068b0:	f7fc fdec 	bl	800348c <HAL_GetTick>
 80068b4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d001      	beq.n	80068c6 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80068c2:	2302      	movs	r3, #2
 80068c4:	e1d1      	b.n	8006c6a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d002      	beq.n	80068d2 <HAL_SPI_Transmit+0x3a>
 80068cc:	88fb      	ldrh	r3, [r7, #6]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d101      	bne.n	80068d6 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e1c9      	b.n	8006c6a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d101      	bne.n	80068e4 <HAL_SPI_Transmit+0x4c>
 80068e0:	2302      	movs	r3, #2
 80068e2:	e1c2      	b.n	8006c6a <HAL_SPI_Transmit+0x3d2>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2203      	movs	r2, #3
 80068f0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	68ba      	ldr	r2, [r7, #8]
 8006900:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	88fa      	ldrh	r2, [r7, #6]
 8006906:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	88fa      	ldrh	r2, [r7, #6]
 800690e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2200      	movs	r2, #0
 8006924:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2200      	movs	r2, #0
 800692c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800693c:	d108      	bne.n	8006950 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800694c:	601a      	str	r2, [r3, #0]
 800694e:	e009      	b.n	8006964 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006962:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	685a      	ldr	r2, [r3, #4]
 800696a:	4b96      	ldr	r3, [pc, #600]	@ (8006bc4 <HAL_SPI_Transmit+0x32c>)
 800696c:	4013      	ands	r3, r2
 800696e:	88f9      	ldrh	r1, [r7, #6]
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	6812      	ldr	r2, [r2, #0]
 8006974:	430b      	orrs	r3, r1
 8006976:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f042 0201 	orr.w	r2, r2, #1
 8006986:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006990:	d107      	bne.n	80069a2 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80069a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	2b0f      	cmp	r3, #15
 80069a8:	d947      	bls.n	8006a3a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80069aa:	e03f      	b.n	8006a2c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	695b      	ldr	r3, [r3, #20]
 80069b2:	f003 0302 	and.w	r3, r3, #2
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d114      	bne.n	80069e4 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	6812      	ldr	r2, [r2, #0]
 80069c4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069ca:	1d1a      	adds	r2, r3, #4
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	3b01      	subs	r3, #1
 80069da:	b29a      	uxth	r2, r3
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80069e2:	e023      	b.n	8006a2c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069e4:	f7fc fd52 	bl	800348c <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d803      	bhi.n	80069fc <HAL_SPI_Transmit+0x164>
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069fa:	d102      	bne.n	8006a02 <HAL_SPI_Transmit+0x16a>
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d114      	bne.n	8006a2c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f000 f936 	bl	8006c74 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a0e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	e11e      	b.n	8006c6a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1b9      	bne.n	80069ac <HAL_SPI_Transmit+0x114>
 8006a38:	e0f1      	b.n	8006c1e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	2b07      	cmp	r3, #7
 8006a40:	f240 80e6 	bls.w	8006c10 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006a44:	e05d      	b.n	8006b02 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	695b      	ldr	r3, [r3, #20]
 8006a4c:	f003 0302 	and.w	r3, r3, #2
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d132      	bne.n	8006aba <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d918      	bls.n	8006a92 <HAL_SPI_Transmit+0x1fa>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d014      	beq.n	8006a92 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	6812      	ldr	r2, [r2, #0]
 8006a72:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a78:	1d1a      	adds	r2, r3, #4
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	3b02      	subs	r3, #2
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006a90:	e037      	b.n	8006b02 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a96:	881a      	ldrh	r2, [r3, #0]
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006aa0:	1c9a      	adds	r2, r3, #2
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	b29a      	uxth	r2, r3
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006ab8:	e023      	b.n	8006b02 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006aba:	f7fc fce7 	bl	800348c <HAL_GetTick>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	683a      	ldr	r2, [r7, #0]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d803      	bhi.n	8006ad2 <HAL_SPI_Transmit+0x23a>
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad0:	d102      	bne.n	8006ad8 <HAL_SPI_Transmit+0x240>
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d114      	bne.n	8006b02 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f000 f8cb 	bl	8006c74 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ae4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2201      	movs	r2, #1
 8006af2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006afe:	2303      	movs	r3, #3
 8006b00:	e0b3      	b.n	8006c6a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d19b      	bne.n	8006a46 <HAL_SPI_Transmit+0x1ae>
 8006b0e:	e086      	b.n	8006c1e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	695b      	ldr	r3, [r3, #20]
 8006b16:	f003 0302 	and.w	r3, r3, #2
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d154      	bne.n	8006bc8 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	2b03      	cmp	r3, #3
 8006b28:	d918      	bls.n	8006b5c <HAL_SPI_Transmit+0x2c4>
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b2e:	2b40      	cmp	r3, #64	@ 0x40
 8006b30:	d914      	bls.n	8006b5c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	6812      	ldr	r2, [r2, #0]
 8006b3c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b42:	1d1a      	adds	r2, r3, #4
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	3b04      	subs	r3, #4
 8006b52:	b29a      	uxth	r2, r3
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006b5a:	e059      	b.n	8006c10 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d917      	bls.n	8006b98 <HAL_SPI_Transmit+0x300>
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d013      	beq.n	8006b98 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b74:	881a      	ldrh	r2, [r3, #0]
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b7e:	1c9a      	adds	r2, r3, #2
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	3b02      	subs	r3, #2
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006b96:	e03b      	b.n	8006c10 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	3320      	adds	r3, #32
 8006ba2:	7812      	ldrb	r2, [r2, #0]
 8006ba4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006baa:	1c5a      	adds	r2, r3, #1
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006bc2:	e025      	b.n	8006c10 <HAL_SPI_Transmit+0x378>
 8006bc4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bc8:	f7fc fc60 	bl	800348c <HAL_GetTick>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	683a      	ldr	r2, [r7, #0]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d803      	bhi.n	8006be0 <HAL_SPI_Transmit+0x348>
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bde:	d102      	bne.n	8006be6 <HAL_SPI_Transmit+0x34e>
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d114      	bne.n	8006c10 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	f000 f844 	bl	8006c74 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bf2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e02c      	b.n	8006c6a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f47f af79 	bne.w	8006b10 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	9300      	str	r3, [sp, #0]
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	2200      	movs	r2, #0
 8006c26:	2108      	movs	r1, #8
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f000 f8c3 	bl	8006db4 <SPI_WaitOnFlagUntilTimeout>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d007      	beq.n	8006c44 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c3a:	f043 0220 	orr.w	r2, r3, #32
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006c44:	68f8      	ldr	r0, [r7, #12]
 8006c46:	f000 f815 	bl	8006c74 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d001      	beq.n	8006c68 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e000      	b.n	8006c6a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8006c68:	2300      	movs	r3, #0
  }
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3718      	adds	r7, #24
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop

08006c74 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b085      	sub	sp, #20
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	695b      	ldr	r3, [r3, #20]
 8006c82:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	699a      	ldr	r2, [r3, #24]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f042 0208 	orr.w	r2, r2, #8
 8006c92:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	699a      	ldr	r2, [r3, #24]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f042 0210 	orr.w	r2, r2, #16
 8006ca2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f022 0201 	bic.w	r2, r2, #1
 8006cb2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	6919      	ldr	r1, [r3, #16]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	4b3c      	ldr	r3, [pc, #240]	@ (8006db0 <SPI_CloseTransfer+0x13c>)
 8006cc0:	400b      	ands	r3, r1
 8006cc2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	689a      	ldr	r2, [r3, #8]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006cd2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	2b04      	cmp	r3, #4
 8006cde:	d014      	beq.n	8006d0a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f003 0320 	and.w	r3, r3, #32
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00f      	beq.n	8006d0a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006cf0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	699a      	ldr	r2, [r3, #24]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f042 0220 	orr.w	r2, r2, #32
 8006d08:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	2b03      	cmp	r3, #3
 8006d14:	d014      	beq.n	8006d40 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00f      	beq.n	8006d40 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d26:	f043 0204 	orr.w	r2, r3, #4
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	699a      	ldr	r2, [r3, #24]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d3e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00f      	beq.n	8006d6a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d50:	f043 0201 	orr.w	r2, r3, #1
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	699a      	ldr	r2, [r3, #24]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d68:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00f      	beq.n	8006d94 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d7a:	f043 0208 	orr.w	r2, r3, #8
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	699a      	ldr	r2, [r3, #24]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d92:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8006da4:	bf00      	nop
 8006da6:	3714      	adds	r7, #20
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr
 8006db0:	fffffc90 	.word	0xfffffc90

08006db4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	603b      	str	r3, [r7, #0]
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006dc4:	e010      	b.n	8006de8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dc6:	f7fc fb61 	bl	800348c <HAL_GetTick>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	1ad3      	subs	r3, r2, r3
 8006dd0:	683a      	ldr	r2, [r7, #0]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d803      	bhi.n	8006dde <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ddc:	d102      	bne.n	8006de4 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d101      	bne.n	8006de8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006de4:	2303      	movs	r3, #3
 8006de6:	e00f      	b.n	8006e08 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	695a      	ldr	r2, [r3, #20]
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	4013      	ands	r3, r2
 8006df2:	68ba      	ldr	r2, [r7, #8]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	bf0c      	ite	eq
 8006df8:	2301      	moveq	r3, #1
 8006dfa:	2300      	movne	r3, #0
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	461a      	mov	r2, r3
 8006e00:	79fb      	ldrb	r3, [r7, #7]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d0df      	beq.n	8006dc6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3710      	adds	r7, #16
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b085      	sub	sp, #20
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e1c:	095b      	lsrs	r3, r3, #5
 8006e1e:	3301      	adds	r3, #1
 8006e20:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	3301      	adds	r3, #1
 8006e28:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	3307      	adds	r3, #7
 8006e2e:	08db      	lsrs	r3, r3, #3
 8006e30:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	68fa      	ldr	r2, [r7, #12]
 8006e36:	fb02 f303 	mul.w	r3, r2, r3
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3714      	adds	r7, #20
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr

08006e46 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b082      	sub	sp, #8
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d101      	bne.n	8006e58 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	e049      	b.n	8006eec <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d106      	bne.n	8006e72 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f7fc f889 	bl	8002f84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2202      	movs	r2, #2
 8006e76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	3304      	adds	r3, #4
 8006e82:	4619      	mov	r1, r3
 8006e84:	4610      	mov	r0, r2
 8006e86:	f000 f975 	bl	8007174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2201      	movs	r2, #1
 8006e96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2201      	movs	r2, #1
 8006eae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006eea:	2300      	movs	r3, #0
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3708      	adds	r7, #8
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d101      	bne.n	8006f06 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e049      	b.n	8006f9a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d106      	bne.n	8006f20 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 f841 	bl	8006fa2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2202      	movs	r2, #2
 8006f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	3304      	adds	r3, #4
 8006f30:	4619      	mov	r1, r3
 8006f32:	4610      	mov	r0, r2
 8006f34:	f000 f91e 	bl	8007174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3708      	adds	r7, #8
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006fa2:	b480      	push	{r7}
 8006fa4:	b083      	sub	sp, #12
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006faa:	bf00      	nop
 8006fac:	370c      	adds	r7, #12
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr

08006fb6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b086      	sub	sp, #24
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	60f8      	str	r0, [r7, #12]
 8006fbe:	60b9      	str	r1, [r7, #8]
 8006fc0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d101      	bne.n	8006fd4 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006fd0:	2302      	movs	r3, #2
 8006fd2:	e088      	b.n	80070e6 <HAL_TIM_IC_ConfigChannel+0x130>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d11b      	bne.n	800701a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006ff2:	f000 fa55 	bl	80074a0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	699a      	ldr	r2, [r3, #24]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f022 020c 	bic.w	r2, r2, #12
 8007004:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	6999      	ldr	r1, [r3, #24]
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	689a      	ldr	r2, [r3, #8]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	430a      	orrs	r2, r1
 8007016:	619a      	str	r2, [r3, #24]
 8007018:	e060      	b.n	80070dc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2b04      	cmp	r3, #4
 800701e:	d11c      	bne.n	800705a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8007030:	f000 fae5 	bl	80075fe <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	699a      	ldr	r2, [r3, #24]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007042:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	6999      	ldr	r1, [r3, #24]
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	021a      	lsls	r2, r3, #8
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	430a      	orrs	r2, r1
 8007056:	619a      	str	r2, [r3, #24]
 8007058:	e040      	b.n	80070dc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2b08      	cmp	r3, #8
 800705e:	d11b      	bne.n	8007098 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8007070:	f000 fb32 	bl	80076d8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	69da      	ldr	r2, [r3, #28]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f022 020c 	bic.w	r2, r2, #12
 8007082:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	69d9      	ldr	r1, [r3, #28]
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	689a      	ldr	r2, [r3, #8]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	430a      	orrs	r2, r1
 8007094:	61da      	str	r2, [r3, #28]
 8007096:	e021      	b.n	80070dc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2b0c      	cmp	r3, #12
 800709c:	d11c      	bne.n	80070d8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80070ae:	f000 fb4f 	bl	8007750 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	69da      	ldr	r2, [r3, #28]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80070c0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	69d9      	ldr	r1, [r3, #28]
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	021a      	lsls	r2, r3, #8
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	430a      	orrs	r2, r1
 80070d4:	61da      	str	r2, [r3, #28]
 80070d6:	e001      	b.n	80070dc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80070e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3718      	adds	r7, #24
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b082      	sub	sp, #8
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d101      	bne.n	8007106 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007102:	2302      	movs	r3, #2
 8007104:	e031      	b.n	800716a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2201      	movs	r2, #1
 800710a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2202      	movs	r2, #2
 8007112:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007116:	6839      	ldr	r1, [r7, #0]
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 f8d7 	bl	80072cc <TIM_SlaveTimer_SetConfig>
 800711e:	4603      	mov	r3, r0
 8007120:	2b00      	cmp	r3, #0
 8007122:	d009      	beq.n	8007138 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e018      	b.n	800716a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68da      	ldr	r2, [r3, #12]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007146:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	68da      	ldr	r2, [r3, #12]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007156:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3708      	adds	r7, #8
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
	...

08007174 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007174:	b480      	push	{r7}
 8007176:	b085      	sub	sp, #20
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a47      	ldr	r2, [pc, #284]	@ (80072a4 <TIM_Base_SetConfig+0x130>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d013      	beq.n	80071b4 <TIM_Base_SetConfig+0x40>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007192:	d00f      	beq.n	80071b4 <TIM_Base_SetConfig+0x40>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a44      	ldr	r2, [pc, #272]	@ (80072a8 <TIM_Base_SetConfig+0x134>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d00b      	beq.n	80071b4 <TIM_Base_SetConfig+0x40>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a43      	ldr	r2, [pc, #268]	@ (80072ac <TIM_Base_SetConfig+0x138>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d007      	beq.n	80071b4 <TIM_Base_SetConfig+0x40>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a42      	ldr	r2, [pc, #264]	@ (80072b0 <TIM_Base_SetConfig+0x13c>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d003      	beq.n	80071b4 <TIM_Base_SetConfig+0x40>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a41      	ldr	r2, [pc, #260]	@ (80072b4 <TIM_Base_SetConfig+0x140>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d108      	bne.n	80071c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a36      	ldr	r2, [pc, #216]	@ (80072a4 <TIM_Base_SetConfig+0x130>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d027      	beq.n	800721e <TIM_Base_SetConfig+0xaa>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071d4:	d023      	beq.n	800721e <TIM_Base_SetConfig+0xaa>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	4a33      	ldr	r2, [pc, #204]	@ (80072a8 <TIM_Base_SetConfig+0x134>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d01f      	beq.n	800721e <TIM_Base_SetConfig+0xaa>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4a32      	ldr	r2, [pc, #200]	@ (80072ac <TIM_Base_SetConfig+0x138>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d01b      	beq.n	800721e <TIM_Base_SetConfig+0xaa>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	4a31      	ldr	r2, [pc, #196]	@ (80072b0 <TIM_Base_SetConfig+0x13c>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d017      	beq.n	800721e <TIM_Base_SetConfig+0xaa>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a30      	ldr	r2, [pc, #192]	@ (80072b4 <TIM_Base_SetConfig+0x140>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d013      	beq.n	800721e <TIM_Base_SetConfig+0xaa>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4a2f      	ldr	r2, [pc, #188]	@ (80072b8 <TIM_Base_SetConfig+0x144>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d00f      	beq.n	800721e <TIM_Base_SetConfig+0xaa>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a2e      	ldr	r2, [pc, #184]	@ (80072bc <TIM_Base_SetConfig+0x148>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d00b      	beq.n	800721e <TIM_Base_SetConfig+0xaa>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4a2d      	ldr	r2, [pc, #180]	@ (80072c0 <TIM_Base_SetConfig+0x14c>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d007      	beq.n	800721e <TIM_Base_SetConfig+0xaa>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a2c      	ldr	r2, [pc, #176]	@ (80072c4 <TIM_Base_SetConfig+0x150>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d003      	beq.n	800721e <TIM_Base_SetConfig+0xaa>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a2b      	ldr	r2, [pc, #172]	@ (80072c8 <TIM_Base_SetConfig+0x154>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d108      	bne.n	8007230 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007224:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	68fa      	ldr	r2, [r7, #12]
 800722c:	4313      	orrs	r3, r2
 800722e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	695b      	ldr	r3, [r3, #20]
 800723a:	4313      	orrs	r3, r2
 800723c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	689a      	ldr	r2, [r3, #8]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4a14      	ldr	r2, [pc, #80]	@ (80072a4 <TIM_Base_SetConfig+0x130>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d00f      	beq.n	8007276 <TIM_Base_SetConfig+0x102>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	4a16      	ldr	r2, [pc, #88]	@ (80072b4 <TIM_Base_SetConfig+0x140>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d00b      	beq.n	8007276 <TIM_Base_SetConfig+0x102>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	4a15      	ldr	r2, [pc, #84]	@ (80072b8 <TIM_Base_SetConfig+0x144>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d007      	beq.n	8007276 <TIM_Base_SetConfig+0x102>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	4a14      	ldr	r2, [pc, #80]	@ (80072bc <TIM_Base_SetConfig+0x148>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d003      	beq.n	8007276 <TIM_Base_SetConfig+0x102>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	4a13      	ldr	r2, [pc, #76]	@ (80072c0 <TIM_Base_SetConfig+0x14c>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d103      	bne.n	800727e <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	691a      	ldr	r2, [r3, #16]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f043 0204 	orr.w	r2, r3, #4
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2201      	movs	r2, #1
 800728e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	601a      	str	r2, [r3, #0]
}
 8007296:	bf00      	nop
 8007298:	3714      	adds	r7, #20
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	40010000 	.word	0x40010000
 80072a8:	40000400 	.word	0x40000400
 80072ac:	40000800 	.word	0x40000800
 80072b0:	40000c00 	.word	0x40000c00
 80072b4:	40010400 	.word	0x40010400
 80072b8:	40014000 	.word	0x40014000
 80072bc:	40014400 	.word	0x40014400
 80072c0:	40014800 	.word	0x40014800
 80072c4:	4000e000 	.word	0x4000e000
 80072c8:	4000e400 	.word	0x4000e400

080072cc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b086      	sub	sp, #24
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072d6:	2300      	movs	r3, #0
 80072d8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072e2:	693a      	ldr	r2, [r7, #16]
 80072e4:	4b65      	ldr	r3, [pc, #404]	@ (800747c <TIM_SlaveTimer_SetConfig+0x1b0>)
 80072e6:	4013      	ands	r3, r2
 80072e8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	693a      	ldr	r2, [r7, #16]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80072f4:	693a      	ldr	r2, [r7, #16]
 80072f6:	4b62      	ldr	r3, [pc, #392]	@ (8007480 <TIM_SlaveTimer_SetConfig+0x1b4>)
 80072f8:	4013      	ands	r3, r2
 80072fa:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	693a      	ldr	r2, [r7, #16]
 8007302:	4313      	orrs	r3, r2
 8007304:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	693a      	ldr	r2, [r7, #16]
 800730c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	4a5c      	ldr	r2, [pc, #368]	@ (8007484 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8007314:	4293      	cmp	r3, r2
 8007316:	f000 80ab 	beq.w	8007470 <TIM_SlaveTimer_SetConfig+0x1a4>
 800731a:	4a5a      	ldr	r2, [pc, #360]	@ (8007484 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800731c:	4293      	cmp	r3, r2
 800731e:	f200 80a4 	bhi.w	800746a <TIM_SlaveTimer_SetConfig+0x19e>
 8007322:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007326:	f000 80a3 	beq.w	8007470 <TIM_SlaveTimer_SetConfig+0x1a4>
 800732a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800732e:	f200 809c 	bhi.w	800746a <TIM_SlaveTimer_SetConfig+0x19e>
 8007332:	4a55      	ldr	r2, [pc, #340]	@ (8007488 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8007334:	4293      	cmp	r3, r2
 8007336:	f000 809b 	beq.w	8007470 <TIM_SlaveTimer_SetConfig+0x1a4>
 800733a:	4a53      	ldr	r2, [pc, #332]	@ (8007488 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800733c:	4293      	cmp	r3, r2
 800733e:	f200 8094 	bhi.w	800746a <TIM_SlaveTimer_SetConfig+0x19e>
 8007342:	4a52      	ldr	r2, [pc, #328]	@ (800748c <TIM_SlaveTimer_SetConfig+0x1c0>)
 8007344:	4293      	cmp	r3, r2
 8007346:	f000 8093 	beq.w	8007470 <TIM_SlaveTimer_SetConfig+0x1a4>
 800734a:	4a50      	ldr	r2, [pc, #320]	@ (800748c <TIM_SlaveTimer_SetConfig+0x1c0>)
 800734c:	4293      	cmp	r3, r2
 800734e:	f200 808c 	bhi.w	800746a <TIM_SlaveTimer_SetConfig+0x19e>
 8007352:	4a4f      	ldr	r2, [pc, #316]	@ (8007490 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8007354:	4293      	cmp	r3, r2
 8007356:	f000 808b 	beq.w	8007470 <TIM_SlaveTimer_SetConfig+0x1a4>
 800735a:	4a4d      	ldr	r2, [pc, #308]	@ (8007490 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800735c:	4293      	cmp	r3, r2
 800735e:	f200 8084 	bhi.w	800746a <TIM_SlaveTimer_SetConfig+0x19e>
 8007362:	4a4c      	ldr	r2, [pc, #304]	@ (8007494 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8007364:	4293      	cmp	r3, r2
 8007366:	f000 8083 	beq.w	8007470 <TIM_SlaveTimer_SetConfig+0x1a4>
 800736a:	4a4a      	ldr	r2, [pc, #296]	@ (8007494 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d87c      	bhi.n	800746a <TIM_SlaveTimer_SetConfig+0x19e>
 8007370:	4a49      	ldr	r2, [pc, #292]	@ (8007498 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d07c      	beq.n	8007470 <TIM_SlaveTimer_SetConfig+0x1a4>
 8007376:	4a48      	ldr	r2, [pc, #288]	@ (8007498 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d876      	bhi.n	800746a <TIM_SlaveTimer_SetConfig+0x19e>
 800737c:	4a47      	ldr	r2, [pc, #284]	@ (800749c <TIM_SlaveTimer_SetConfig+0x1d0>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d076      	beq.n	8007470 <TIM_SlaveTimer_SetConfig+0x1a4>
 8007382:	4a46      	ldr	r2, [pc, #280]	@ (800749c <TIM_SlaveTimer_SetConfig+0x1d0>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d870      	bhi.n	800746a <TIM_SlaveTimer_SetConfig+0x19e>
 8007388:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800738c:	d070      	beq.n	8007470 <TIM_SlaveTimer_SetConfig+0x1a4>
 800738e:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007392:	d86a      	bhi.n	800746a <TIM_SlaveTimer_SetConfig+0x19e>
 8007394:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007398:	d06a      	beq.n	8007470 <TIM_SlaveTimer_SetConfig+0x1a4>
 800739a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800739e:	d864      	bhi.n	800746a <TIM_SlaveTimer_SetConfig+0x19e>
 80073a0:	2b70      	cmp	r3, #112	@ 0x70
 80073a2:	d01a      	beq.n	80073da <TIM_SlaveTimer_SetConfig+0x10e>
 80073a4:	2b70      	cmp	r3, #112	@ 0x70
 80073a6:	d860      	bhi.n	800746a <TIM_SlaveTimer_SetConfig+0x19e>
 80073a8:	2b60      	cmp	r3, #96	@ 0x60
 80073aa:	d054      	beq.n	8007456 <TIM_SlaveTimer_SetConfig+0x18a>
 80073ac:	2b60      	cmp	r3, #96	@ 0x60
 80073ae:	d85c      	bhi.n	800746a <TIM_SlaveTimer_SetConfig+0x19e>
 80073b0:	2b50      	cmp	r3, #80	@ 0x50
 80073b2:	d046      	beq.n	8007442 <TIM_SlaveTimer_SetConfig+0x176>
 80073b4:	2b50      	cmp	r3, #80	@ 0x50
 80073b6:	d858      	bhi.n	800746a <TIM_SlaveTimer_SetConfig+0x19e>
 80073b8:	2b40      	cmp	r3, #64	@ 0x40
 80073ba:	d019      	beq.n	80073f0 <TIM_SlaveTimer_SetConfig+0x124>
 80073bc:	2b40      	cmp	r3, #64	@ 0x40
 80073be:	d854      	bhi.n	800746a <TIM_SlaveTimer_SetConfig+0x19e>
 80073c0:	2b30      	cmp	r3, #48	@ 0x30
 80073c2:	d055      	beq.n	8007470 <TIM_SlaveTimer_SetConfig+0x1a4>
 80073c4:	2b30      	cmp	r3, #48	@ 0x30
 80073c6:	d850      	bhi.n	800746a <TIM_SlaveTimer_SetConfig+0x19e>
 80073c8:	2b20      	cmp	r3, #32
 80073ca:	d051      	beq.n	8007470 <TIM_SlaveTimer_SetConfig+0x1a4>
 80073cc:	2b20      	cmp	r3, #32
 80073ce:	d84c      	bhi.n	800746a <TIM_SlaveTimer_SetConfig+0x19e>
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d04d      	beq.n	8007470 <TIM_SlaveTimer_SetConfig+0x1a4>
 80073d4:	2b10      	cmp	r3, #16
 80073d6:	d04b      	beq.n	8007470 <TIM_SlaveTimer_SetConfig+0x1a4>
 80073d8:	e047      	b.n	800746a <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80073ea:	f000 f9ee 	bl	80077ca <TIM_ETR_SetConfig>
      break;
 80073ee:	e040      	b.n	8007472 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2b05      	cmp	r3, #5
 80073f6:	d101      	bne.n	80073fc <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	e03b      	b.n	8007474 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	6a1b      	ldr	r3, [r3, #32]
 8007402:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	6a1a      	ldr	r2, [r3, #32]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f022 0201 	bic.w	r2, r2, #1
 8007412:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	699b      	ldr	r3, [r3, #24]
 800741a:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007422:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	011b      	lsls	r3, r3, #4
 800742a:	68ba      	ldr	r2, [r7, #8]
 800742c:	4313      	orrs	r3, r2
 800742e:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	68ba      	ldr	r2, [r7, #8]
 8007436:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	621a      	str	r2, [r3, #32]
      break;
 8007440:	e017      	b.n	8007472 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800744e:	461a      	mov	r2, r3
 8007450:	f000 f8a6 	bl	80075a0 <TIM_TI1_ConfigInputStage>
      break;
 8007454:	e00d      	b.n	8007472 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007462:	461a      	mov	r2, r3
 8007464:	f000 f908 	bl	8007678 <TIM_TI2_ConfigInputStage>
      break;
 8007468:	e003      	b.n	8007472 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	75fb      	strb	r3, [r7, #23]
      break;
 800746e:	e000      	b.n	8007472 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 8007470:	bf00      	nop
  }

  return status;
 8007472:	7dfb      	ldrb	r3, [r7, #23]
}
 8007474:	4618      	mov	r0, r3
 8007476:	3718      	adds	r7, #24
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}
 800747c:	ffcfff8f 	.word	0xffcfff8f
 8007480:	fffefff8 	.word	0xfffefff8
 8007484:	00200010 	.word	0x00200010
 8007488:	00100070 	.word	0x00100070
 800748c:	00100060 	.word	0x00100060
 8007490:	00100050 	.word	0x00100050
 8007494:	00100040 	.word	0x00100040
 8007498:	00100030 	.word	0x00100030
 800749c:	00100020 	.word	0x00100020

080074a0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b087      	sub	sp, #28
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	607a      	str	r2, [r7, #4]
 80074ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	6a1b      	ldr	r3, [r3, #32]
 80074b2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6a1b      	ldr	r3, [r3, #32]
 80074b8:	f023 0201 	bic.w	r2, r3, #1
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	699b      	ldr	r3, [r3, #24]
 80074c4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	4a2c      	ldr	r2, [pc, #176]	@ (800757c <TIM_TI1_SetConfig+0xdc>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d023      	beq.n	8007516 <TIM_TI1_SetConfig+0x76>
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074d4:	d01f      	beq.n	8007516 <TIM_TI1_SetConfig+0x76>
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	4a29      	ldr	r2, [pc, #164]	@ (8007580 <TIM_TI1_SetConfig+0xe0>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d01b      	beq.n	8007516 <TIM_TI1_SetConfig+0x76>
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	4a28      	ldr	r2, [pc, #160]	@ (8007584 <TIM_TI1_SetConfig+0xe4>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d017      	beq.n	8007516 <TIM_TI1_SetConfig+0x76>
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	4a27      	ldr	r2, [pc, #156]	@ (8007588 <TIM_TI1_SetConfig+0xe8>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d013      	beq.n	8007516 <TIM_TI1_SetConfig+0x76>
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	4a26      	ldr	r2, [pc, #152]	@ (800758c <TIM_TI1_SetConfig+0xec>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d00f      	beq.n	8007516 <TIM_TI1_SetConfig+0x76>
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	4a25      	ldr	r2, [pc, #148]	@ (8007590 <TIM_TI1_SetConfig+0xf0>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d00b      	beq.n	8007516 <TIM_TI1_SetConfig+0x76>
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	4a24      	ldr	r2, [pc, #144]	@ (8007594 <TIM_TI1_SetConfig+0xf4>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d007      	beq.n	8007516 <TIM_TI1_SetConfig+0x76>
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	4a23      	ldr	r2, [pc, #140]	@ (8007598 <TIM_TI1_SetConfig+0xf8>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d003      	beq.n	8007516 <TIM_TI1_SetConfig+0x76>
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	4a22      	ldr	r2, [pc, #136]	@ (800759c <TIM_TI1_SetConfig+0xfc>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d101      	bne.n	800751a <TIM_TI1_SetConfig+0x7a>
 8007516:	2301      	movs	r3, #1
 8007518:	e000      	b.n	800751c <TIM_TI1_SetConfig+0x7c>
 800751a:	2300      	movs	r3, #0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d008      	beq.n	8007532 <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	f023 0303 	bic.w	r3, r3, #3
 8007526:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007528:	697a      	ldr	r2, [r7, #20]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4313      	orrs	r3, r2
 800752e:	617b      	str	r3, [r7, #20]
 8007530:	e003      	b.n	800753a <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	f043 0301 	orr.w	r3, r3, #1
 8007538:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007540:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	011b      	lsls	r3, r3, #4
 8007546:	b2db      	uxtb	r3, r3
 8007548:	697a      	ldr	r2, [r7, #20]
 800754a:	4313      	orrs	r3, r2
 800754c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	f023 030a 	bic.w	r3, r3, #10
 8007554:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	f003 030a 	and.w	r3, r3, #10
 800755c:	693a      	ldr	r2, [r7, #16]
 800755e:	4313      	orrs	r3, r2
 8007560:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	697a      	ldr	r2, [r7, #20]
 8007566:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	693a      	ldr	r2, [r7, #16]
 800756c:	621a      	str	r2, [r3, #32]
}
 800756e:	bf00      	nop
 8007570:	371c      	adds	r7, #28
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop
 800757c:	40010000 	.word	0x40010000
 8007580:	40000400 	.word	0x40000400
 8007584:	40000800 	.word	0x40000800
 8007588:	40000c00 	.word	0x40000c00
 800758c:	40010400 	.word	0x40010400
 8007590:	40001800 	.word	0x40001800
 8007594:	40014000 	.word	0x40014000
 8007598:	4000e000 	.word	0x4000e000
 800759c:	4000e400 	.word	0x4000e400

080075a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b087      	sub	sp, #28
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6a1b      	ldr	r3, [r3, #32]
 80075b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6a1b      	ldr	r3, [r3, #32]
 80075b6:	f023 0201 	bic.w	r2, r3, #1
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	699b      	ldr	r3, [r3, #24]
 80075c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80075ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	011b      	lsls	r3, r3, #4
 80075d0:	693a      	ldr	r2, [r7, #16]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	f023 030a 	bic.w	r3, r3, #10
 80075dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80075de:	697a      	ldr	r2, [r7, #20]
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	4313      	orrs	r3, r2
 80075e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	693a      	ldr	r2, [r7, #16]
 80075ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	697a      	ldr	r2, [r7, #20]
 80075f0:	621a      	str	r2, [r3, #32]
}
 80075f2:	bf00      	nop
 80075f4:	371c      	adds	r7, #28
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr

080075fe <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80075fe:	b480      	push	{r7}
 8007600:	b087      	sub	sp, #28
 8007602:	af00      	add	r7, sp, #0
 8007604:	60f8      	str	r0, [r7, #12]
 8007606:	60b9      	str	r1, [r7, #8]
 8007608:	607a      	str	r2, [r7, #4]
 800760a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6a1b      	ldr	r3, [r3, #32]
 8007610:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	6a1b      	ldr	r3, [r3, #32]
 8007616:	f023 0210 	bic.w	r2, r3, #16
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	699b      	ldr	r3, [r3, #24]
 8007622:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800762a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	021b      	lsls	r3, r3, #8
 8007630:	693a      	ldr	r2, [r7, #16]
 8007632:	4313      	orrs	r3, r2
 8007634:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800763c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	031b      	lsls	r3, r3, #12
 8007642:	b29b      	uxth	r3, r3
 8007644:	693a      	ldr	r2, [r7, #16]
 8007646:	4313      	orrs	r3, r2
 8007648:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007650:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	011b      	lsls	r3, r3, #4
 8007656:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800765a:	697a      	ldr	r2, [r7, #20]
 800765c:	4313      	orrs	r3, r2
 800765e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	693a      	ldr	r2, [r7, #16]
 8007664:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	697a      	ldr	r2, [r7, #20]
 800766a:	621a      	str	r2, [r3, #32]
}
 800766c:	bf00      	nop
 800766e:	371c      	adds	r7, #28
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007678:	b480      	push	{r7}
 800767a:	b087      	sub	sp, #28
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6a1b      	ldr	r3, [r3, #32]
 8007688:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	6a1b      	ldr	r3, [r3, #32]
 800768e:	f023 0210 	bic.w	r2, r3, #16
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	699b      	ldr	r3, [r3, #24]
 800769a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80076a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	031b      	lsls	r3, r3, #12
 80076a8:	693a      	ldr	r2, [r7, #16]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80076b4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	011b      	lsls	r3, r3, #4
 80076ba:	697a      	ldr	r2, [r7, #20]
 80076bc:	4313      	orrs	r3, r2
 80076be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	693a      	ldr	r2, [r7, #16]
 80076c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	697a      	ldr	r2, [r7, #20]
 80076ca:	621a      	str	r2, [r3, #32]
}
 80076cc:	bf00      	nop
 80076ce:	371c      	adds	r7, #28
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80076d8:	b480      	push	{r7}
 80076da:	b087      	sub	sp, #28
 80076dc:	af00      	add	r7, sp, #0
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	607a      	str	r2, [r7, #4]
 80076e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6a1b      	ldr	r3, [r3, #32]
 80076ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6a1b      	ldr	r3, [r3, #32]
 80076f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	69db      	ldr	r3, [r3, #28]
 80076fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	f023 0303 	bic.w	r3, r3, #3
 8007704:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8007706:	693a      	ldr	r2, [r7, #16]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4313      	orrs	r3, r2
 800770c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007714:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	011b      	lsls	r3, r3, #4
 800771a:	b2db      	uxtb	r3, r3
 800771c:	693a      	ldr	r2, [r7, #16]
 800771e:	4313      	orrs	r3, r2
 8007720:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8007728:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	021b      	lsls	r3, r3, #8
 800772e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8007732:	697a      	ldr	r2, [r7, #20]
 8007734:	4313      	orrs	r3, r2
 8007736:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	693a      	ldr	r2, [r7, #16]
 800773c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	697a      	ldr	r2, [r7, #20]
 8007742:	621a      	str	r2, [r3, #32]
}
 8007744:	bf00      	nop
 8007746:	371c      	adds	r7, #28
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007750:	b480      	push	{r7}
 8007752:	b087      	sub	sp, #28
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	607a      	str	r2, [r7, #4]
 800775c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6a1b      	ldr	r3, [r3, #32]
 8007762:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6a1b      	ldr	r3, [r3, #32]
 8007768:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	69db      	ldr	r3, [r3, #28]
 8007774:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800777c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	021b      	lsls	r3, r3, #8
 8007782:	693a      	ldr	r2, [r7, #16]
 8007784:	4313      	orrs	r3, r2
 8007786:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800778e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	031b      	lsls	r3, r3, #12
 8007794:	b29b      	uxth	r3, r3
 8007796:	693a      	ldr	r2, [r7, #16]
 8007798:	4313      	orrs	r3, r2
 800779a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80077a2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	031b      	lsls	r3, r3, #12
 80077a8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80077ac:	697a      	ldr	r2, [r7, #20]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	693a      	ldr	r2, [r7, #16]
 80077b6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	697a      	ldr	r2, [r7, #20]
 80077bc:	621a      	str	r2, [r3, #32]
}
 80077be:	bf00      	nop
 80077c0:	371c      	adds	r7, #28
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr

080077ca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80077ca:	b480      	push	{r7}
 80077cc:	b087      	sub	sp, #28
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	60f8      	str	r0, [r7, #12]
 80077d2:	60b9      	str	r1, [r7, #8]
 80077d4:	607a      	str	r2, [r7, #4]
 80077d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80077e4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	021a      	lsls	r2, r3, #8
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	431a      	orrs	r2, r3
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	697a      	ldr	r2, [r7, #20]
 80077f4:	4313      	orrs	r3, r2
 80077f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	697a      	ldr	r2, [r7, #20]
 80077fc:	609a      	str	r2, [r3, #8]
}
 80077fe:	bf00      	nop
 8007800:	371c      	adds	r7, #28
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr
	...

0800780c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800781c:	2b01      	cmp	r3, #1
 800781e:	d101      	bne.n	8007824 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007820:	2302      	movs	r3, #2
 8007822:	e077      	b.n	8007914 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2202      	movs	r2, #2
 8007830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a35      	ldr	r2, [pc, #212]	@ (8007920 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d004      	beq.n	8007858 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a34      	ldr	r2, [pc, #208]	@ (8007924 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d108      	bne.n	800786a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800785e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	68fa      	ldr	r2, [r7, #12]
 8007866:	4313      	orrs	r3, r2
 8007868:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007870:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	68fa      	ldr	r2, [r7, #12]
 8007878:	4313      	orrs	r3, r2
 800787a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a25      	ldr	r2, [pc, #148]	@ (8007920 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d02c      	beq.n	80078e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007896:	d027      	beq.n	80078e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a22      	ldr	r2, [pc, #136]	@ (8007928 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d022      	beq.n	80078e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a21      	ldr	r2, [pc, #132]	@ (800792c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d01d      	beq.n	80078e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a1f      	ldr	r2, [pc, #124]	@ (8007930 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d018      	beq.n	80078e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a1a      	ldr	r2, [pc, #104]	@ (8007924 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d013      	beq.n	80078e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a1b      	ldr	r2, [pc, #108]	@ (8007934 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d00e      	beq.n	80078e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a1a      	ldr	r2, [pc, #104]	@ (8007938 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d009      	beq.n	80078e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a18      	ldr	r2, [pc, #96]	@ (800793c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d004      	beq.n	80078e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a17      	ldr	r2, [pc, #92]	@ (8007940 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d10c      	bne.n	8007902 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	68ba      	ldr	r2, [r7, #8]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	68ba      	ldr	r2, [r7, #8]
 8007900:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2201      	movs	r2, #1
 8007906:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007912:	2300      	movs	r3, #0
}
 8007914:	4618      	mov	r0, r3
 8007916:	3714      	adds	r7, #20
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr
 8007920:	40010000 	.word	0x40010000
 8007924:	40010400 	.word	0x40010400
 8007928:	40000400 	.word	0x40000400
 800792c:	40000800 	.word	0x40000800
 8007930:	40000c00 	.word	0x40000c00
 8007934:	40001800 	.word	0x40001800
 8007938:	40014000 	.word	0x40014000
 800793c:	4000e000 	.word	0x4000e000
 8007940:	4000e400 	.word	0x4000e400

08007944 <HAL_TIMEx_TISelection>:
  *
  *         (*)  Value not defined in all devices. \n
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_TIMEx_TISelection(TIM_HandleTypeDef *htim, uint32_t TISelection, uint32_t Channel)
{
 8007944:	b480      	push	{r7}
 8007946:	b087      	sub	sp, #28
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007950:	2300      	movs	r3, #0
 8007952:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_TIM_TISEL_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TISEL(TISelection));

  __HAL_LOCK(htim);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800795a:	2b01      	cmp	r3, #1
 800795c:	d101      	bne.n	8007962 <HAL_TIMEx_TISelection+0x1e>
 800795e:	2302      	movs	r3, #2
 8007960:	e058      	b.n	8007a14 <HAL_TIMEx_TISelection+0xd0>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2201      	movs	r2, #1
 8007966:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2b0c      	cmp	r3, #12
 800796e:	d849      	bhi.n	8007a04 <HAL_TIMEx_TISelection+0xc0>
 8007970:	a201      	add	r2, pc, #4	@ (adr r2, 8007978 <HAL_TIMEx_TISelection+0x34>)
 8007972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007976:	bf00      	nop
 8007978:	080079ad 	.word	0x080079ad
 800797c:	08007a05 	.word	0x08007a05
 8007980:	08007a05 	.word	0x08007a05
 8007984:	08007a05 	.word	0x08007a05
 8007988:	080079c3 	.word	0x080079c3
 800798c:	08007a05 	.word	0x08007a05
 8007990:	08007a05 	.word	0x08007a05
 8007994:	08007a05 	.word	0x08007a05
 8007998:	080079d9 	.word	0x080079d9
 800799c:	08007a05 	.word	0x08007a05
 80079a0:	08007a05 	.word	0x08007a05
 80079a4:	08007a05 	.word	0x08007a05
 80079a8:	080079ef 	.word	0x080079ef
  {
    case TIM_CHANNEL_1:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI1SEL, TISelection);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80079b2:	f023 010f 	bic.w	r1, r3, #15
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	68ba      	ldr	r2, [r7, #8]
 80079bc:	430a      	orrs	r2, r1
 80079be:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 80079c0:	e023      	b.n	8007a0a <HAL_TIMEx_TISelection+0xc6>
    case TIM_CHANNEL_2:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI2SEL, TISelection);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80079c8:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	68ba      	ldr	r2, [r7, #8]
 80079d2:	430a      	orrs	r2, r1
 80079d4:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 80079d6:	e018      	b.n	8007a0a <HAL_TIMEx_TISelection+0xc6>
    case TIM_CHANNEL_3:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI3SEL, TISelection);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80079de:	f423 2170 	bic.w	r1, r3, #983040	@ 0xf0000
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	68ba      	ldr	r2, [r7, #8]
 80079e8:	430a      	orrs	r2, r1
 80079ea:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 80079ec:	e00d      	b.n	8007a0a <HAL_TIMEx_TISelection+0xc6>
    case TIM_CHANNEL_4:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI4SEL, TISelection);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80079f4:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	68ba      	ldr	r2, [r7, #8]
 80079fe:	430a      	orrs	r2, r1
 8007a00:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8007a02:	e002      	b.n	8007a0a <HAL_TIMEx_TISelection+0xc6>
    default:
      status = HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	75fb      	strb	r3, [r7, #23]
      break;
 8007a08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	371c      	adds	r7, #28
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d101      	bne.n	8007a32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e042      	b.n	8007ab8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d106      	bne.n	8007a4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f7fb fabf 	bl	8002fc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2224      	movs	r2, #36	@ 0x24
 8007a4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f022 0201 	bic.w	r2, r2, #1
 8007a60:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d002      	beq.n	8007a70 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 ff22 	bl	80088b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 f8b3 	bl	8007bdc <UART_SetConfig>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d101      	bne.n	8007a80 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e01b      	b.n	8007ab8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	685a      	ldr	r2, [r3, #4]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007a8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	689a      	ldr	r2, [r3, #8]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007a9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f042 0201 	orr.w	r2, r2, #1
 8007aae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 ffa1 	bl	80089f8 <UART_CheckIdleState>
 8007ab6:	4603      	mov	r3, r0
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3708      	adds	r7, #8
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b08a      	sub	sp, #40	@ 0x28
 8007ac4:	af02      	add	r7, sp, #8
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	603b      	str	r3, [r7, #0]
 8007acc:	4613      	mov	r3, r2
 8007ace:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ad6:	2b20      	cmp	r3, #32
 8007ad8:	d17b      	bne.n	8007bd2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d002      	beq.n	8007ae6 <HAL_UART_Transmit+0x26>
 8007ae0:	88fb      	ldrh	r3, [r7, #6]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d101      	bne.n	8007aea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e074      	b.n	8007bd4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2221      	movs	r2, #33	@ 0x21
 8007af6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007afa:	f7fb fcc7 	bl	800348c <HAL_GetTick>
 8007afe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	88fa      	ldrh	r2, [r7, #6]
 8007b04:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	88fa      	ldrh	r2, [r7, #6]
 8007b0c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b18:	d108      	bne.n	8007b2c <HAL_UART_Transmit+0x6c>
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	691b      	ldr	r3, [r3, #16]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d104      	bne.n	8007b2c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007b22:	2300      	movs	r3, #0
 8007b24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	61bb      	str	r3, [r7, #24]
 8007b2a:	e003      	b.n	8007b34 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b30:	2300      	movs	r3, #0
 8007b32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007b34:	e030      	b.n	8007b98 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	9300      	str	r3, [sp, #0]
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	2180      	movs	r1, #128	@ 0x80
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f001 f803 	bl	8008b4c <UART_WaitOnFlagUntilTimeout>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d005      	beq.n	8007b58 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2220      	movs	r2, #32
 8007b50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007b54:	2303      	movs	r3, #3
 8007b56:	e03d      	b.n	8007bd4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d10b      	bne.n	8007b76 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	881b      	ldrh	r3, [r3, #0]
 8007b62:	461a      	mov	r2, r3
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b6c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	3302      	adds	r3, #2
 8007b72:	61bb      	str	r3, [r7, #24]
 8007b74:	e007      	b.n	8007b86 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b76:	69fb      	ldr	r3, [r7, #28]
 8007b78:	781a      	ldrb	r2, [r3, #0]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	3301      	adds	r3, #1
 8007b84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	3b01      	subs	r3, #1
 8007b90:	b29a      	uxth	r2, r3
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d1c8      	bne.n	8007b36 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	9300      	str	r3, [sp, #0]
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	2200      	movs	r2, #0
 8007bac:	2140      	movs	r1, #64	@ 0x40
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	f000 ffcc 	bl	8008b4c <UART_WaitOnFlagUntilTimeout>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d005      	beq.n	8007bc6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2220      	movs	r2, #32
 8007bbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007bc2:	2303      	movs	r3, #3
 8007bc4:	e006      	b.n	8007bd4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2220      	movs	r2, #32
 8007bca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	e000      	b.n	8007bd4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007bd2:	2302      	movs	r3, #2
  }
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3720      	adds	r7, #32
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007be0:	b092      	sub	sp, #72	@ 0x48
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007be6:	2300      	movs	r3, #0
 8007be8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	689a      	ldr	r2, [r3, #8]
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	691b      	ldr	r3, [r3, #16]
 8007bf4:	431a      	orrs	r2, r3
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	695b      	ldr	r3, [r3, #20]
 8007bfa:	431a      	orrs	r2, r3
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	69db      	ldr	r3, [r3, #28]
 8007c00:	4313      	orrs	r3, r2
 8007c02:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	4bbe      	ldr	r3, [pc, #760]	@ (8007f04 <UART_SetConfig+0x328>)
 8007c0c:	4013      	ands	r3, r2
 8007c0e:	697a      	ldr	r2, [r7, #20]
 8007c10:	6812      	ldr	r2, [r2, #0]
 8007c12:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007c14:	430b      	orrs	r3, r1
 8007c16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	68da      	ldr	r2, [r3, #12]
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	430a      	orrs	r2, r1
 8007c2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	699b      	ldr	r3, [r3, #24]
 8007c32:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4ab3      	ldr	r2, [pc, #716]	@ (8007f08 <UART_SetConfig+0x32c>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d004      	beq.n	8007c48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	6a1b      	ldr	r3, [r3, #32]
 8007c42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c44:	4313      	orrs	r3, r2
 8007c46:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	689a      	ldr	r2, [r3, #8]
 8007c4e:	4baf      	ldr	r3, [pc, #700]	@ (8007f0c <UART_SetConfig+0x330>)
 8007c50:	4013      	ands	r3, r2
 8007c52:	697a      	ldr	r2, [r7, #20]
 8007c54:	6812      	ldr	r2, [r2, #0]
 8007c56:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007c58:	430b      	orrs	r3, r1
 8007c5a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c62:	f023 010f 	bic.w	r1, r3, #15
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	430a      	orrs	r2, r1
 8007c70:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4aa6      	ldr	r2, [pc, #664]	@ (8007f10 <UART_SetConfig+0x334>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d177      	bne.n	8007d6c <UART_SetConfig+0x190>
 8007c7c:	4ba5      	ldr	r3, [pc, #660]	@ (8007f14 <UART_SetConfig+0x338>)
 8007c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007c84:	2b28      	cmp	r3, #40	@ 0x28
 8007c86:	d86d      	bhi.n	8007d64 <UART_SetConfig+0x188>
 8007c88:	a201      	add	r2, pc, #4	@ (adr r2, 8007c90 <UART_SetConfig+0xb4>)
 8007c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c8e:	bf00      	nop
 8007c90:	08007d35 	.word	0x08007d35
 8007c94:	08007d65 	.word	0x08007d65
 8007c98:	08007d65 	.word	0x08007d65
 8007c9c:	08007d65 	.word	0x08007d65
 8007ca0:	08007d65 	.word	0x08007d65
 8007ca4:	08007d65 	.word	0x08007d65
 8007ca8:	08007d65 	.word	0x08007d65
 8007cac:	08007d65 	.word	0x08007d65
 8007cb0:	08007d3d 	.word	0x08007d3d
 8007cb4:	08007d65 	.word	0x08007d65
 8007cb8:	08007d65 	.word	0x08007d65
 8007cbc:	08007d65 	.word	0x08007d65
 8007cc0:	08007d65 	.word	0x08007d65
 8007cc4:	08007d65 	.word	0x08007d65
 8007cc8:	08007d65 	.word	0x08007d65
 8007ccc:	08007d65 	.word	0x08007d65
 8007cd0:	08007d45 	.word	0x08007d45
 8007cd4:	08007d65 	.word	0x08007d65
 8007cd8:	08007d65 	.word	0x08007d65
 8007cdc:	08007d65 	.word	0x08007d65
 8007ce0:	08007d65 	.word	0x08007d65
 8007ce4:	08007d65 	.word	0x08007d65
 8007ce8:	08007d65 	.word	0x08007d65
 8007cec:	08007d65 	.word	0x08007d65
 8007cf0:	08007d4d 	.word	0x08007d4d
 8007cf4:	08007d65 	.word	0x08007d65
 8007cf8:	08007d65 	.word	0x08007d65
 8007cfc:	08007d65 	.word	0x08007d65
 8007d00:	08007d65 	.word	0x08007d65
 8007d04:	08007d65 	.word	0x08007d65
 8007d08:	08007d65 	.word	0x08007d65
 8007d0c:	08007d65 	.word	0x08007d65
 8007d10:	08007d55 	.word	0x08007d55
 8007d14:	08007d65 	.word	0x08007d65
 8007d18:	08007d65 	.word	0x08007d65
 8007d1c:	08007d65 	.word	0x08007d65
 8007d20:	08007d65 	.word	0x08007d65
 8007d24:	08007d65 	.word	0x08007d65
 8007d28:	08007d65 	.word	0x08007d65
 8007d2c:	08007d65 	.word	0x08007d65
 8007d30:	08007d5d 	.word	0x08007d5d
 8007d34:	2301      	movs	r3, #1
 8007d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d3a:	e326      	b.n	800838a <UART_SetConfig+0x7ae>
 8007d3c:	2304      	movs	r3, #4
 8007d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d42:	e322      	b.n	800838a <UART_SetConfig+0x7ae>
 8007d44:	2308      	movs	r3, #8
 8007d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d4a:	e31e      	b.n	800838a <UART_SetConfig+0x7ae>
 8007d4c:	2310      	movs	r3, #16
 8007d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d52:	e31a      	b.n	800838a <UART_SetConfig+0x7ae>
 8007d54:	2320      	movs	r3, #32
 8007d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d5a:	e316      	b.n	800838a <UART_SetConfig+0x7ae>
 8007d5c:	2340      	movs	r3, #64	@ 0x40
 8007d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d62:	e312      	b.n	800838a <UART_SetConfig+0x7ae>
 8007d64:	2380      	movs	r3, #128	@ 0x80
 8007d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d6a:	e30e      	b.n	800838a <UART_SetConfig+0x7ae>
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a69      	ldr	r2, [pc, #420]	@ (8007f18 <UART_SetConfig+0x33c>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d130      	bne.n	8007dd8 <UART_SetConfig+0x1fc>
 8007d76:	4b67      	ldr	r3, [pc, #412]	@ (8007f14 <UART_SetConfig+0x338>)
 8007d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d7a:	f003 0307 	and.w	r3, r3, #7
 8007d7e:	2b05      	cmp	r3, #5
 8007d80:	d826      	bhi.n	8007dd0 <UART_SetConfig+0x1f4>
 8007d82:	a201      	add	r2, pc, #4	@ (adr r2, 8007d88 <UART_SetConfig+0x1ac>)
 8007d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d88:	08007da1 	.word	0x08007da1
 8007d8c:	08007da9 	.word	0x08007da9
 8007d90:	08007db1 	.word	0x08007db1
 8007d94:	08007db9 	.word	0x08007db9
 8007d98:	08007dc1 	.word	0x08007dc1
 8007d9c:	08007dc9 	.word	0x08007dc9
 8007da0:	2300      	movs	r3, #0
 8007da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007da6:	e2f0      	b.n	800838a <UART_SetConfig+0x7ae>
 8007da8:	2304      	movs	r3, #4
 8007daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dae:	e2ec      	b.n	800838a <UART_SetConfig+0x7ae>
 8007db0:	2308      	movs	r3, #8
 8007db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007db6:	e2e8      	b.n	800838a <UART_SetConfig+0x7ae>
 8007db8:	2310      	movs	r3, #16
 8007dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dbe:	e2e4      	b.n	800838a <UART_SetConfig+0x7ae>
 8007dc0:	2320      	movs	r3, #32
 8007dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dc6:	e2e0      	b.n	800838a <UART_SetConfig+0x7ae>
 8007dc8:	2340      	movs	r3, #64	@ 0x40
 8007dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dce:	e2dc      	b.n	800838a <UART_SetConfig+0x7ae>
 8007dd0:	2380      	movs	r3, #128	@ 0x80
 8007dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dd6:	e2d8      	b.n	800838a <UART_SetConfig+0x7ae>
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a4f      	ldr	r2, [pc, #316]	@ (8007f1c <UART_SetConfig+0x340>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d130      	bne.n	8007e44 <UART_SetConfig+0x268>
 8007de2:	4b4c      	ldr	r3, [pc, #304]	@ (8007f14 <UART_SetConfig+0x338>)
 8007de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007de6:	f003 0307 	and.w	r3, r3, #7
 8007dea:	2b05      	cmp	r3, #5
 8007dec:	d826      	bhi.n	8007e3c <UART_SetConfig+0x260>
 8007dee:	a201      	add	r2, pc, #4	@ (adr r2, 8007df4 <UART_SetConfig+0x218>)
 8007df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df4:	08007e0d 	.word	0x08007e0d
 8007df8:	08007e15 	.word	0x08007e15
 8007dfc:	08007e1d 	.word	0x08007e1d
 8007e00:	08007e25 	.word	0x08007e25
 8007e04:	08007e2d 	.word	0x08007e2d
 8007e08:	08007e35 	.word	0x08007e35
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e12:	e2ba      	b.n	800838a <UART_SetConfig+0x7ae>
 8007e14:	2304      	movs	r3, #4
 8007e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e1a:	e2b6      	b.n	800838a <UART_SetConfig+0x7ae>
 8007e1c:	2308      	movs	r3, #8
 8007e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e22:	e2b2      	b.n	800838a <UART_SetConfig+0x7ae>
 8007e24:	2310      	movs	r3, #16
 8007e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e2a:	e2ae      	b.n	800838a <UART_SetConfig+0x7ae>
 8007e2c:	2320      	movs	r3, #32
 8007e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e32:	e2aa      	b.n	800838a <UART_SetConfig+0x7ae>
 8007e34:	2340      	movs	r3, #64	@ 0x40
 8007e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e3a:	e2a6      	b.n	800838a <UART_SetConfig+0x7ae>
 8007e3c:	2380      	movs	r3, #128	@ 0x80
 8007e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e42:	e2a2      	b.n	800838a <UART_SetConfig+0x7ae>
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a35      	ldr	r2, [pc, #212]	@ (8007f20 <UART_SetConfig+0x344>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d130      	bne.n	8007eb0 <UART_SetConfig+0x2d4>
 8007e4e:	4b31      	ldr	r3, [pc, #196]	@ (8007f14 <UART_SetConfig+0x338>)
 8007e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e52:	f003 0307 	and.w	r3, r3, #7
 8007e56:	2b05      	cmp	r3, #5
 8007e58:	d826      	bhi.n	8007ea8 <UART_SetConfig+0x2cc>
 8007e5a:	a201      	add	r2, pc, #4	@ (adr r2, 8007e60 <UART_SetConfig+0x284>)
 8007e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e60:	08007e79 	.word	0x08007e79
 8007e64:	08007e81 	.word	0x08007e81
 8007e68:	08007e89 	.word	0x08007e89
 8007e6c:	08007e91 	.word	0x08007e91
 8007e70:	08007e99 	.word	0x08007e99
 8007e74:	08007ea1 	.word	0x08007ea1
 8007e78:	2300      	movs	r3, #0
 8007e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e7e:	e284      	b.n	800838a <UART_SetConfig+0x7ae>
 8007e80:	2304      	movs	r3, #4
 8007e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e86:	e280      	b.n	800838a <UART_SetConfig+0x7ae>
 8007e88:	2308      	movs	r3, #8
 8007e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e8e:	e27c      	b.n	800838a <UART_SetConfig+0x7ae>
 8007e90:	2310      	movs	r3, #16
 8007e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e96:	e278      	b.n	800838a <UART_SetConfig+0x7ae>
 8007e98:	2320      	movs	r3, #32
 8007e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e9e:	e274      	b.n	800838a <UART_SetConfig+0x7ae>
 8007ea0:	2340      	movs	r3, #64	@ 0x40
 8007ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ea6:	e270      	b.n	800838a <UART_SetConfig+0x7ae>
 8007ea8:	2380      	movs	r3, #128	@ 0x80
 8007eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eae:	e26c      	b.n	800838a <UART_SetConfig+0x7ae>
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a1b      	ldr	r2, [pc, #108]	@ (8007f24 <UART_SetConfig+0x348>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d142      	bne.n	8007f40 <UART_SetConfig+0x364>
 8007eba:	4b16      	ldr	r3, [pc, #88]	@ (8007f14 <UART_SetConfig+0x338>)
 8007ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ebe:	f003 0307 	and.w	r3, r3, #7
 8007ec2:	2b05      	cmp	r3, #5
 8007ec4:	d838      	bhi.n	8007f38 <UART_SetConfig+0x35c>
 8007ec6:	a201      	add	r2, pc, #4	@ (adr r2, 8007ecc <UART_SetConfig+0x2f0>)
 8007ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ecc:	08007ee5 	.word	0x08007ee5
 8007ed0:	08007eed 	.word	0x08007eed
 8007ed4:	08007ef5 	.word	0x08007ef5
 8007ed8:	08007efd 	.word	0x08007efd
 8007edc:	08007f29 	.word	0x08007f29
 8007ee0:	08007f31 	.word	0x08007f31
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eea:	e24e      	b.n	800838a <UART_SetConfig+0x7ae>
 8007eec:	2304      	movs	r3, #4
 8007eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ef2:	e24a      	b.n	800838a <UART_SetConfig+0x7ae>
 8007ef4:	2308      	movs	r3, #8
 8007ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007efa:	e246      	b.n	800838a <UART_SetConfig+0x7ae>
 8007efc:	2310      	movs	r3, #16
 8007efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f02:	e242      	b.n	800838a <UART_SetConfig+0x7ae>
 8007f04:	cfff69f3 	.word	0xcfff69f3
 8007f08:	58000c00 	.word	0x58000c00
 8007f0c:	11fff4ff 	.word	0x11fff4ff
 8007f10:	40011000 	.word	0x40011000
 8007f14:	58024400 	.word	0x58024400
 8007f18:	40004400 	.word	0x40004400
 8007f1c:	40004800 	.word	0x40004800
 8007f20:	40004c00 	.word	0x40004c00
 8007f24:	40005000 	.word	0x40005000
 8007f28:	2320      	movs	r3, #32
 8007f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f2e:	e22c      	b.n	800838a <UART_SetConfig+0x7ae>
 8007f30:	2340      	movs	r3, #64	@ 0x40
 8007f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f36:	e228      	b.n	800838a <UART_SetConfig+0x7ae>
 8007f38:	2380      	movs	r3, #128	@ 0x80
 8007f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f3e:	e224      	b.n	800838a <UART_SetConfig+0x7ae>
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4ab1      	ldr	r2, [pc, #708]	@ (800820c <UART_SetConfig+0x630>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d176      	bne.n	8008038 <UART_SetConfig+0x45c>
 8007f4a:	4bb1      	ldr	r3, [pc, #708]	@ (8008210 <UART_SetConfig+0x634>)
 8007f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f52:	2b28      	cmp	r3, #40	@ 0x28
 8007f54:	d86c      	bhi.n	8008030 <UART_SetConfig+0x454>
 8007f56:	a201      	add	r2, pc, #4	@ (adr r2, 8007f5c <UART_SetConfig+0x380>)
 8007f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f5c:	08008001 	.word	0x08008001
 8007f60:	08008031 	.word	0x08008031
 8007f64:	08008031 	.word	0x08008031
 8007f68:	08008031 	.word	0x08008031
 8007f6c:	08008031 	.word	0x08008031
 8007f70:	08008031 	.word	0x08008031
 8007f74:	08008031 	.word	0x08008031
 8007f78:	08008031 	.word	0x08008031
 8007f7c:	08008009 	.word	0x08008009
 8007f80:	08008031 	.word	0x08008031
 8007f84:	08008031 	.word	0x08008031
 8007f88:	08008031 	.word	0x08008031
 8007f8c:	08008031 	.word	0x08008031
 8007f90:	08008031 	.word	0x08008031
 8007f94:	08008031 	.word	0x08008031
 8007f98:	08008031 	.word	0x08008031
 8007f9c:	08008011 	.word	0x08008011
 8007fa0:	08008031 	.word	0x08008031
 8007fa4:	08008031 	.word	0x08008031
 8007fa8:	08008031 	.word	0x08008031
 8007fac:	08008031 	.word	0x08008031
 8007fb0:	08008031 	.word	0x08008031
 8007fb4:	08008031 	.word	0x08008031
 8007fb8:	08008031 	.word	0x08008031
 8007fbc:	08008019 	.word	0x08008019
 8007fc0:	08008031 	.word	0x08008031
 8007fc4:	08008031 	.word	0x08008031
 8007fc8:	08008031 	.word	0x08008031
 8007fcc:	08008031 	.word	0x08008031
 8007fd0:	08008031 	.word	0x08008031
 8007fd4:	08008031 	.word	0x08008031
 8007fd8:	08008031 	.word	0x08008031
 8007fdc:	08008021 	.word	0x08008021
 8007fe0:	08008031 	.word	0x08008031
 8007fe4:	08008031 	.word	0x08008031
 8007fe8:	08008031 	.word	0x08008031
 8007fec:	08008031 	.word	0x08008031
 8007ff0:	08008031 	.word	0x08008031
 8007ff4:	08008031 	.word	0x08008031
 8007ff8:	08008031 	.word	0x08008031
 8007ffc:	08008029 	.word	0x08008029
 8008000:	2301      	movs	r3, #1
 8008002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008006:	e1c0      	b.n	800838a <UART_SetConfig+0x7ae>
 8008008:	2304      	movs	r3, #4
 800800a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800800e:	e1bc      	b.n	800838a <UART_SetConfig+0x7ae>
 8008010:	2308      	movs	r3, #8
 8008012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008016:	e1b8      	b.n	800838a <UART_SetConfig+0x7ae>
 8008018:	2310      	movs	r3, #16
 800801a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800801e:	e1b4      	b.n	800838a <UART_SetConfig+0x7ae>
 8008020:	2320      	movs	r3, #32
 8008022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008026:	e1b0      	b.n	800838a <UART_SetConfig+0x7ae>
 8008028:	2340      	movs	r3, #64	@ 0x40
 800802a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800802e:	e1ac      	b.n	800838a <UART_SetConfig+0x7ae>
 8008030:	2380      	movs	r3, #128	@ 0x80
 8008032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008036:	e1a8      	b.n	800838a <UART_SetConfig+0x7ae>
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a75      	ldr	r2, [pc, #468]	@ (8008214 <UART_SetConfig+0x638>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d130      	bne.n	80080a4 <UART_SetConfig+0x4c8>
 8008042:	4b73      	ldr	r3, [pc, #460]	@ (8008210 <UART_SetConfig+0x634>)
 8008044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008046:	f003 0307 	and.w	r3, r3, #7
 800804a:	2b05      	cmp	r3, #5
 800804c:	d826      	bhi.n	800809c <UART_SetConfig+0x4c0>
 800804e:	a201      	add	r2, pc, #4	@ (adr r2, 8008054 <UART_SetConfig+0x478>)
 8008050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008054:	0800806d 	.word	0x0800806d
 8008058:	08008075 	.word	0x08008075
 800805c:	0800807d 	.word	0x0800807d
 8008060:	08008085 	.word	0x08008085
 8008064:	0800808d 	.word	0x0800808d
 8008068:	08008095 	.word	0x08008095
 800806c:	2300      	movs	r3, #0
 800806e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008072:	e18a      	b.n	800838a <UART_SetConfig+0x7ae>
 8008074:	2304      	movs	r3, #4
 8008076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800807a:	e186      	b.n	800838a <UART_SetConfig+0x7ae>
 800807c:	2308      	movs	r3, #8
 800807e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008082:	e182      	b.n	800838a <UART_SetConfig+0x7ae>
 8008084:	2310      	movs	r3, #16
 8008086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800808a:	e17e      	b.n	800838a <UART_SetConfig+0x7ae>
 800808c:	2320      	movs	r3, #32
 800808e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008092:	e17a      	b.n	800838a <UART_SetConfig+0x7ae>
 8008094:	2340      	movs	r3, #64	@ 0x40
 8008096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800809a:	e176      	b.n	800838a <UART_SetConfig+0x7ae>
 800809c:	2380      	movs	r3, #128	@ 0x80
 800809e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080a2:	e172      	b.n	800838a <UART_SetConfig+0x7ae>
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a5b      	ldr	r2, [pc, #364]	@ (8008218 <UART_SetConfig+0x63c>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d130      	bne.n	8008110 <UART_SetConfig+0x534>
 80080ae:	4b58      	ldr	r3, [pc, #352]	@ (8008210 <UART_SetConfig+0x634>)
 80080b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080b2:	f003 0307 	and.w	r3, r3, #7
 80080b6:	2b05      	cmp	r3, #5
 80080b8:	d826      	bhi.n	8008108 <UART_SetConfig+0x52c>
 80080ba:	a201      	add	r2, pc, #4	@ (adr r2, 80080c0 <UART_SetConfig+0x4e4>)
 80080bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c0:	080080d9 	.word	0x080080d9
 80080c4:	080080e1 	.word	0x080080e1
 80080c8:	080080e9 	.word	0x080080e9
 80080cc:	080080f1 	.word	0x080080f1
 80080d0:	080080f9 	.word	0x080080f9
 80080d4:	08008101 	.word	0x08008101
 80080d8:	2300      	movs	r3, #0
 80080da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080de:	e154      	b.n	800838a <UART_SetConfig+0x7ae>
 80080e0:	2304      	movs	r3, #4
 80080e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080e6:	e150      	b.n	800838a <UART_SetConfig+0x7ae>
 80080e8:	2308      	movs	r3, #8
 80080ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080ee:	e14c      	b.n	800838a <UART_SetConfig+0x7ae>
 80080f0:	2310      	movs	r3, #16
 80080f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080f6:	e148      	b.n	800838a <UART_SetConfig+0x7ae>
 80080f8:	2320      	movs	r3, #32
 80080fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080fe:	e144      	b.n	800838a <UART_SetConfig+0x7ae>
 8008100:	2340      	movs	r3, #64	@ 0x40
 8008102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008106:	e140      	b.n	800838a <UART_SetConfig+0x7ae>
 8008108:	2380      	movs	r3, #128	@ 0x80
 800810a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800810e:	e13c      	b.n	800838a <UART_SetConfig+0x7ae>
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a41      	ldr	r2, [pc, #260]	@ (800821c <UART_SetConfig+0x640>)
 8008116:	4293      	cmp	r3, r2
 8008118:	f040 8082 	bne.w	8008220 <UART_SetConfig+0x644>
 800811c:	4b3c      	ldr	r3, [pc, #240]	@ (8008210 <UART_SetConfig+0x634>)
 800811e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008120:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008124:	2b28      	cmp	r3, #40	@ 0x28
 8008126:	d86d      	bhi.n	8008204 <UART_SetConfig+0x628>
 8008128:	a201      	add	r2, pc, #4	@ (adr r2, 8008130 <UART_SetConfig+0x554>)
 800812a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800812e:	bf00      	nop
 8008130:	080081d5 	.word	0x080081d5
 8008134:	08008205 	.word	0x08008205
 8008138:	08008205 	.word	0x08008205
 800813c:	08008205 	.word	0x08008205
 8008140:	08008205 	.word	0x08008205
 8008144:	08008205 	.word	0x08008205
 8008148:	08008205 	.word	0x08008205
 800814c:	08008205 	.word	0x08008205
 8008150:	080081dd 	.word	0x080081dd
 8008154:	08008205 	.word	0x08008205
 8008158:	08008205 	.word	0x08008205
 800815c:	08008205 	.word	0x08008205
 8008160:	08008205 	.word	0x08008205
 8008164:	08008205 	.word	0x08008205
 8008168:	08008205 	.word	0x08008205
 800816c:	08008205 	.word	0x08008205
 8008170:	080081e5 	.word	0x080081e5
 8008174:	08008205 	.word	0x08008205
 8008178:	08008205 	.word	0x08008205
 800817c:	08008205 	.word	0x08008205
 8008180:	08008205 	.word	0x08008205
 8008184:	08008205 	.word	0x08008205
 8008188:	08008205 	.word	0x08008205
 800818c:	08008205 	.word	0x08008205
 8008190:	080081ed 	.word	0x080081ed
 8008194:	08008205 	.word	0x08008205
 8008198:	08008205 	.word	0x08008205
 800819c:	08008205 	.word	0x08008205
 80081a0:	08008205 	.word	0x08008205
 80081a4:	08008205 	.word	0x08008205
 80081a8:	08008205 	.word	0x08008205
 80081ac:	08008205 	.word	0x08008205
 80081b0:	080081f5 	.word	0x080081f5
 80081b4:	08008205 	.word	0x08008205
 80081b8:	08008205 	.word	0x08008205
 80081bc:	08008205 	.word	0x08008205
 80081c0:	08008205 	.word	0x08008205
 80081c4:	08008205 	.word	0x08008205
 80081c8:	08008205 	.word	0x08008205
 80081cc:	08008205 	.word	0x08008205
 80081d0:	080081fd 	.word	0x080081fd
 80081d4:	2301      	movs	r3, #1
 80081d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081da:	e0d6      	b.n	800838a <UART_SetConfig+0x7ae>
 80081dc:	2304      	movs	r3, #4
 80081de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081e2:	e0d2      	b.n	800838a <UART_SetConfig+0x7ae>
 80081e4:	2308      	movs	r3, #8
 80081e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081ea:	e0ce      	b.n	800838a <UART_SetConfig+0x7ae>
 80081ec:	2310      	movs	r3, #16
 80081ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081f2:	e0ca      	b.n	800838a <UART_SetConfig+0x7ae>
 80081f4:	2320      	movs	r3, #32
 80081f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081fa:	e0c6      	b.n	800838a <UART_SetConfig+0x7ae>
 80081fc:	2340      	movs	r3, #64	@ 0x40
 80081fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008202:	e0c2      	b.n	800838a <UART_SetConfig+0x7ae>
 8008204:	2380      	movs	r3, #128	@ 0x80
 8008206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800820a:	e0be      	b.n	800838a <UART_SetConfig+0x7ae>
 800820c:	40011400 	.word	0x40011400
 8008210:	58024400 	.word	0x58024400
 8008214:	40007800 	.word	0x40007800
 8008218:	40007c00 	.word	0x40007c00
 800821c:	40011800 	.word	0x40011800
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4aad      	ldr	r2, [pc, #692]	@ (80084dc <UART_SetConfig+0x900>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d176      	bne.n	8008318 <UART_SetConfig+0x73c>
 800822a:	4bad      	ldr	r3, [pc, #692]	@ (80084e0 <UART_SetConfig+0x904>)
 800822c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800822e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008232:	2b28      	cmp	r3, #40	@ 0x28
 8008234:	d86c      	bhi.n	8008310 <UART_SetConfig+0x734>
 8008236:	a201      	add	r2, pc, #4	@ (adr r2, 800823c <UART_SetConfig+0x660>)
 8008238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800823c:	080082e1 	.word	0x080082e1
 8008240:	08008311 	.word	0x08008311
 8008244:	08008311 	.word	0x08008311
 8008248:	08008311 	.word	0x08008311
 800824c:	08008311 	.word	0x08008311
 8008250:	08008311 	.word	0x08008311
 8008254:	08008311 	.word	0x08008311
 8008258:	08008311 	.word	0x08008311
 800825c:	080082e9 	.word	0x080082e9
 8008260:	08008311 	.word	0x08008311
 8008264:	08008311 	.word	0x08008311
 8008268:	08008311 	.word	0x08008311
 800826c:	08008311 	.word	0x08008311
 8008270:	08008311 	.word	0x08008311
 8008274:	08008311 	.word	0x08008311
 8008278:	08008311 	.word	0x08008311
 800827c:	080082f1 	.word	0x080082f1
 8008280:	08008311 	.word	0x08008311
 8008284:	08008311 	.word	0x08008311
 8008288:	08008311 	.word	0x08008311
 800828c:	08008311 	.word	0x08008311
 8008290:	08008311 	.word	0x08008311
 8008294:	08008311 	.word	0x08008311
 8008298:	08008311 	.word	0x08008311
 800829c:	080082f9 	.word	0x080082f9
 80082a0:	08008311 	.word	0x08008311
 80082a4:	08008311 	.word	0x08008311
 80082a8:	08008311 	.word	0x08008311
 80082ac:	08008311 	.word	0x08008311
 80082b0:	08008311 	.word	0x08008311
 80082b4:	08008311 	.word	0x08008311
 80082b8:	08008311 	.word	0x08008311
 80082bc:	08008301 	.word	0x08008301
 80082c0:	08008311 	.word	0x08008311
 80082c4:	08008311 	.word	0x08008311
 80082c8:	08008311 	.word	0x08008311
 80082cc:	08008311 	.word	0x08008311
 80082d0:	08008311 	.word	0x08008311
 80082d4:	08008311 	.word	0x08008311
 80082d8:	08008311 	.word	0x08008311
 80082dc:	08008309 	.word	0x08008309
 80082e0:	2301      	movs	r3, #1
 80082e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082e6:	e050      	b.n	800838a <UART_SetConfig+0x7ae>
 80082e8:	2304      	movs	r3, #4
 80082ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ee:	e04c      	b.n	800838a <UART_SetConfig+0x7ae>
 80082f0:	2308      	movs	r3, #8
 80082f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082f6:	e048      	b.n	800838a <UART_SetConfig+0x7ae>
 80082f8:	2310      	movs	r3, #16
 80082fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082fe:	e044      	b.n	800838a <UART_SetConfig+0x7ae>
 8008300:	2320      	movs	r3, #32
 8008302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008306:	e040      	b.n	800838a <UART_SetConfig+0x7ae>
 8008308:	2340      	movs	r3, #64	@ 0x40
 800830a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800830e:	e03c      	b.n	800838a <UART_SetConfig+0x7ae>
 8008310:	2380      	movs	r3, #128	@ 0x80
 8008312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008316:	e038      	b.n	800838a <UART_SetConfig+0x7ae>
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a71      	ldr	r2, [pc, #452]	@ (80084e4 <UART_SetConfig+0x908>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d130      	bne.n	8008384 <UART_SetConfig+0x7a8>
 8008322:	4b6f      	ldr	r3, [pc, #444]	@ (80084e0 <UART_SetConfig+0x904>)
 8008324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008326:	f003 0307 	and.w	r3, r3, #7
 800832a:	2b05      	cmp	r3, #5
 800832c:	d826      	bhi.n	800837c <UART_SetConfig+0x7a0>
 800832e:	a201      	add	r2, pc, #4	@ (adr r2, 8008334 <UART_SetConfig+0x758>)
 8008330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008334:	0800834d 	.word	0x0800834d
 8008338:	08008355 	.word	0x08008355
 800833c:	0800835d 	.word	0x0800835d
 8008340:	08008365 	.word	0x08008365
 8008344:	0800836d 	.word	0x0800836d
 8008348:	08008375 	.word	0x08008375
 800834c:	2302      	movs	r3, #2
 800834e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008352:	e01a      	b.n	800838a <UART_SetConfig+0x7ae>
 8008354:	2304      	movs	r3, #4
 8008356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800835a:	e016      	b.n	800838a <UART_SetConfig+0x7ae>
 800835c:	2308      	movs	r3, #8
 800835e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008362:	e012      	b.n	800838a <UART_SetConfig+0x7ae>
 8008364:	2310      	movs	r3, #16
 8008366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800836a:	e00e      	b.n	800838a <UART_SetConfig+0x7ae>
 800836c:	2320      	movs	r3, #32
 800836e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008372:	e00a      	b.n	800838a <UART_SetConfig+0x7ae>
 8008374:	2340      	movs	r3, #64	@ 0x40
 8008376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800837a:	e006      	b.n	800838a <UART_SetConfig+0x7ae>
 800837c:	2380      	movs	r3, #128	@ 0x80
 800837e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008382:	e002      	b.n	800838a <UART_SetConfig+0x7ae>
 8008384:	2380      	movs	r3, #128	@ 0x80
 8008386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a55      	ldr	r2, [pc, #340]	@ (80084e4 <UART_SetConfig+0x908>)
 8008390:	4293      	cmp	r3, r2
 8008392:	f040 80f8 	bne.w	8008586 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008396:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800839a:	2b20      	cmp	r3, #32
 800839c:	dc46      	bgt.n	800842c <UART_SetConfig+0x850>
 800839e:	2b02      	cmp	r3, #2
 80083a0:	db75      	blt.n	800848e <UART_SetConfig+0x8b2>
 80083a2:	3b02      	subs	r3, #2
 80083a4:	2b1e      	cmp	r3, #30
 80083a6:	d872      	bhi.n	800848e <UART_SetConfig+0x8b2>
 80083a8:	a201      	add	r2, pc, #4	@ (adr r2, 80083b0 <UART_SetConfig+0x7d4>)
 80083aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ae:	bf00      	nop
 80083b0:	08008433 	.word	0x08008433
 80083b4:	0800848f 	.word	0x0800848f
 80083b8:	0800843b 	.word	0x0800843b
 80083bc:	0800848f 	.word	0x0800848f
 80083c0:	0800848f 	.word	0x0800848f
 80083c4:	0800848f 	.word	0x0800848f
 80083c8:	0800844b 	.word	0x0800844b
 80083cc:	0800848f 	.word	0x0800848f
 80083d0:	0800848f 	.word	0x0800848f
 80083d4:	0800848f 	.word	0x0800848f
 80083d8:	0800848f 	.word	0x0800848f
 80083dc:	0800848f 	.word	0x0800848f
 80083e0:	0800848f 	.word	0x0800848f
 80083e4:	0800848f 	.word	0x0800848f
 80083e8:	0800845b 	.word	0x0800845b
 80083ec:	0800848f 	.word	0x0800848f
 80083f0:	0800848f 	.word	0x0800848f
 80083f4:	0800848f 	.word	0x0800848f
 80083f8:	0800848f 	.word	0x0800848f
 80083fc:	0800848f 	.word	0x0800848f
 8008400:	0800848f 	.word	0x0800848f
 8008404:	0800848f 	.word	0x0800848f
 8008408:	0800848f 	.word	0x0800848f
 800840c:	0800848f 	.word	0x0800848f
 8008410:	0800848f 	.word	0x0800848f
 8008414:	0800848f 	.word	0x0800848f
 8008418:	0800848f 	.word	0x0800848f
 800841c:	0800848f 	.word	0x0800848f
 8008420:	0800848f 	.word	0x0800848f
 8008424:	0800848f 	.word	0x0800848f
 8008428:	08008481 	.word	0x08008481
 800842c:	2b40      	cmp	r3, #64	@ 0x40
 800842e:	d02a      	beq.n	8008486 <UART_SetConfig+0x8aa>
 8008430:	e02d      	b.n	800848e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008432:	f7fd fceb 	bl	8005e0c <HAL_RCCEx_GetD3PCLK1Freq>
 8008436:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008438:	e02f      	b.n	800849a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800843a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800843e:	4618      	mov	r0, r3
 8008440:	f7fd fcfa 	bl	8005e38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008448:	e027      	b.n	800849a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800844a:	f107 0318 	add.w	r3, r7, #24
 800844e:	4618      	mov	r0, r3
 8008450:	f7fd fe46 	bl	80060e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008454:	69fb      	ldr	r3, [r7, #28]
 8008456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008458:	e01f      	b.n	800849a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800845a:	4b21      	ldr	r3, [pc, #132]	@ (80084e0 <UART_SetConfig+0x904>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f003 0320 	and.w	r3, r3, #32
 8008462:	2b00      	cmp	r3, #0
 8008464:	d009      	beq.n	800847a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008466:	4b1e      	ldr	r3, [pc, #120]	@ (80084e0 <UART_SetConfig+0x904>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	08db      	lsrs	r3, r3, #3
 800846c:	f003 0303 	and.w	r3, r3, #3
 8008470:	4a1d      	ldr	r2, [pc, #116]	@ (80084e8 <UART_SetConfig+0x90c>)
 8008472:	fa22 f303 	lsr.w	r3, r2, r3
 8008476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008478:	e00f      	b.n	800849a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800847a:	4b1b      	ldr	r3, [pc, #108]	@ (80084e8 <UART_SetConfig+0x90c>)
 800847c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800847e:	e00c      	b.n	800849a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008480:	4b1a      	ldr	r3, [pc, #104]	@ (80084ec <UART_SetConfig+0x910>)
 8008482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008484:	e009      	b.n	800849a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008486:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800848a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800848c:	e005      	b.n	800849a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800848e:	2300      	movs	r3, #0
 8008490:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008492:	2301      	movs	r3, #1
 8008494:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008498:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800849a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800849c:	2b00      	cmp	r3, #0
 800849e:	f000 81ee 	beq.w	800887e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084a6:	4a12      	ldr	r2, [pc, #72]	@ (80084f0 <UART_SetConfig+0x914>)
 80084a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084ac:	461a      	mov	r2, r3
 80084ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80084b4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	685a      	ldr	r2, [r3, #4]
 80084ba:	4613      	mov	r3, r2
 80084bc:	005b      	lsls	r3, r3, #1
 80084be:	4413      	add	r3, r2
 80084c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d305      	bcc.n	80084d2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d910      	bls.n	80084f4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80084d2:	2301      	movs	r3, #1
 80084d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80084d8:	e1d1      	b.n	800887e <UART_SetConfig+0xca2>
 80084da:	bf00      	nop
 80084dc:	40011c00 	.word	0x40011c00
 80084e0:	58024400 	.word	0x58024400
 80084e4:	58000c00 	.word	0x58000c00
 80084e8:	03d09000 	.word	0x03d09000
 80084ec:	003d0900 	.word	0x003d0900
 80084f0:	0801504c 	.word	0x0801504c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084f6:	2200      	movs	r2, #0
 80084f8:	60bb      	str	r3, [r7, #8]
 80084fa:	60fa      	str	r2, [r7, #12]
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008500:	4ac0      	ldr	r2, [pc, #768]	@ (8008804 <UART_SetConfig+0xc28>)
 8008502:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008506:	b29b      	uxth	r3, r3
 8008508:	2200      	movs	r2, #0
 800850a:	603b      	str	r3, [r7, #0]
 800850c:	607a      	str	r2, [r7, #4]
 800850e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008512:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008516:	f7f7 ff4b 	bl	80003b0 <__aeabi_uldivmod>
 800851a:	4602      	mov	r2, r0
 800851c:	460b      	mov	r3, r1
 800851e:	4610      	mov	r0, r2
 8008520:	4619      	mov	r1, r3
 8008522:	f04f 0200 	mov.w	r2, #0
 8008526:	f04f 0300 	mov.w	r3, #0
 800852a:	020b      	lsls	r3, r1, #8
 800852c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008530:	0202      	lsls	r2, r0, #8
 8008532:	6979      	ldr	r1, [r7, #20]
 8008534:	6849      	ldr	r1, [r1, #4]
 8008536:	0849      	lsrs	r1, r1, #1
 8008538:	2000      	movs	r0, #0
 800853a:	460c      	mov	r4, r1
 800853c:	4605      	mov	r5, r0
 800853e:	eb12 0804 	adds.w	r8, r2, r4
 8008542:	eb43 0905 	adc.w	r9, r3, r5
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	469a      	mov	sl, r3
 800854e:	4693      	mov	fp, r2
 8008550:	4652      	mov	r2, sl
 8008552:	465b      	mov	r3, fp
 8008554:	4640      	mov	r0, r8
 8008556:	4649      	mov	r1, r9
 8008558:	f7f7 ff2a 	bl	80003b0 <__aeabi_uldivmod>
 800855c:	4602      	mov	r2, r0
 800855e:	460b      	mov	r3, r1
 8008560:	4613      	mov	r3, r2
 8008562:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008566:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800856a:	d308      	bcc.n	800857e <UART_SetConfig+0x9a2>
 800856c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800856e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008572:	d204      	bcs.n	800857e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800857a:	60da      	str	r2, [r3, #12]
 800857c:	e17f      	b.n	800887e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008584:	e17b      	b.n	800887e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	69db      	ldr	r3, [r3, #28]
 800858a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800858e:	f040 80bd 	bne.w	800870c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8008592:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008596:	2b20      	cmp	r3, #32
 8008598:	dc48      	bgt.n	800862c <UART_SetConfig+0xa50>
 800859a:	2b00      	cmp	r3, #0
 800859c:	db7b      	blt.n	8008696 <UART_SetConfig+0xaba>
 800859e:	2b20      	cmp	r3, #32
 80085a0:	d879      	bhi.n	8008696 <UART_SetConfig+0xaba>
 80085a2:	a201      	add	r2, pc, #4	@ (adr r2, 80085a8 <UART_SetConfig+0x9cc>)
 80085a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a8:	08008633 	.word	0x08008633
 80085ac:	0800863b 	.word	0x0800863b
 80085b0:	08008697 	.word	0x08008697
 80085b4:	08008697 	.word	0x08008697
 80085b8:	08008643 	.word	0x08008643
 80085bc:	08008697 	.word	0x08008697
 80085c0:	08008697 	.word	0x08008697
 80085c4:	08008697 	.word	0x08008697
 80085c8:	08008653 	.word	0x08008653
 80085cc:	08008697 	.word	0x08008697
 80085d0:	08008697 	.word	0x08008697
 80085d4:	08008697 	.word	0x08008697
 80085d8:	08008697 	.word	0x08008697
 80085dc:	08008697 	.word	0x08008697
 80085e0:	08008697 	.word	0x08008697
 80085e4:	08008697 	.word	0x08008697
 80085e8:	08008663 	.word	0x08008663
 80085ec:	08008697 	.word	0x08008697
 80085f0:	08008697 	.word	0x08008697
 80085f4:	08008697 	.word	0x08008697
 80085f8:	08008697 	.word	0x08008697
 80085fc:	08008697 	.word	0x08008697
 8008600:	08008697 	.word	0x08008697
 8008604:	08008697 	.word	0x08008697
 8008608:	08008697 	.word	0x08008697
 800860c:	08008697 	.word	0x08008697
 8008610:	08008697 	.word	0x08008697
 8008614:	08008697 	.word	0x08008697
 8008618:	08008697 	.word	0x08008697
 800861c:	08008697 	.word	0x08008697
 8008620:	08008697 	.word	0x08008697
 8008624:	08008697 	.word	0x08008697
 8008628:	08008689 	.word	0x08008689
 800862c:	2b40      	cmp	r3, #64	@ 0x40
 800862e:	d02e      	beq.n	800868e <UART_SetConfig+0xab2>
 8008630:	e031      	b.n	8008696 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008632:	f7fc fa1f 	bl	8004a74 <HAL_RCC_GetPCLK1Freq>
 8008636:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008638:	e033      	b.n	80086a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800863a:	f7fc fa31 	bl	8004aa0 <HAL_RCC_GetPCLK2Freq>
 800863e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008640:	e02f      	b.n	80086a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008642:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008646:	4618      	mov	r0, r3
 8008648:	f7fd fbf6 	bl	8005e38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800864c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800864e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008650:	e027      	b.n	80086a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008652:	f107 0318 	add.w	r3, r7, #24
 8008656:	4618      	mov	r0, r3
 8008658:	f7fd fd42 	bl	80060e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008660:	e01f      	b.n	80086a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008662:	4b69      	ldr	r3, [pc, #420]	@ (8008808 <UART_SetConfig+0xc2c>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f003 0320 	and.w	r3, r3, #32
 800866a:	2b00      	cmp	r3, #0
 800866c:	d009      	beq.n	8008682 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800866e:	4b66      	ldr	r3, [pc, #408]	@ (8008808 <UART_SetConfig+0xc2c>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	08db      	lsrs	r3, r3, #3
 8008674:	f003 0303 	and.w	r3, r3, #3
 8008678:	4a64      	ldr	r2, [pc, #400]	@ (800880c <UART_SetConfig+0xc30>)
 800867a:	fa22 f303 	lsr.w	r3, r2, r3
 800867e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008680:	e00f      	b.n	80086a2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8008682:	4b62      	ldr	r3, [pc, #392]	@ (800880c <UART_SetConfig+0xc30>)
 8008684:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008686:	e00c      	b.n	80086a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008688:	4b61      	ldr	r3, [pc, #388]	@ (8008810 <UART_SetConfig+0xc34>)
 800868a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800868c:	e009      	b.n	80086a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800868e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008692:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008694:	e005      	b.n	80086a2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8008696:	2300      	movs	r3, #0
 8008698:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800869a:	2301      	movs	r3, #1
 800869c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80086a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80086a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	f000 80ea 	beq.w	800887e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ae:	4a55      	ldr	r2, [pc, #340]	@ (8008804 <UART_SetConfig+0xc28>)
 80086b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086b4:	461a      	mov	r2, r3
 80086b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80086bc:	005a      	lsls	r2, r3, #1
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	085b      	lsrs	r3, r3, #1
 80086c4:	441a      	add	r2, r3
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80086ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086d2:	2b0f      	cmp	r3, #15
 80086d4:	d916      	bls.n	8008704 <UART_SetConfig+0xb28>
 80086d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086dc:	d212      	bcs.n	8008704 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80086de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	f023 030f 	bic.w	r3, r3, #15
 80086e6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80086e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086ea:	085b      	lsrs	r3, r3, #1
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	f003 0307 	and.w	r3, r3, #7
 80086f2:	b29a      	uxth	r2, r3
 80086f4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80086f6:	4313      	orrs	r3, r2
 80086f8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008700:	60da      	str	r2, [r3, #12]
 8008702:	e0bc      	b.n	800887e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008704:	2301      	movs	r3, #1
 8008706:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800870a:	e0b8      	b.n	800887e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800870c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008710:	2b20      	cmp	r3, #32
 8008712:	dc4b      	bgt.n	80087ac <UART_SetConfig+0xbd0>
 8008714:	2b00      	cmp	r3, #0
 8008716:	f2c0 8087 	blt.w	8008828 <UART_SetConfig+0xc4c>
 800871a:	2b20      	cmp	r3, #32
 800871c:	f200 8084 	bhi.w	8008828 <UART_SetConfig+0xc4c>
 8008720:	a201      	add	r2, pc, #4	@ (adr r2, 8008728 <UART_SetConfig+0xb4c>)
 8008722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008726:	bf00      	nop
 8008728:	080087b3 	.word	0x080087b3
 800872c:	080087bb 	.word	0x080087bb
 8008730:	08008829 	.word	0x08008829
 8008734:	08008829 	.word	0x08008829
 8008738:	080087c3 	.word	0x080087c3
 800873c:	08008829 	.word	0x08008829
 8008740:	08008829 	.word	0x08008829
 8008744:	08008829 	.word	0x08008829
 8008748:	080087d3 	.word	0x080087d3
 800874c:	08008829 	.word	0x08008829
 8008750:	08008829 	.word	0x08008829
 8008754:	08008829 	.word	0x08008829
 8008758:	08008829 	.word	0x08008829
 800875c:	08008829 	.word	0x08008829
 8008760:	08008829 	.word	0x08008829
 8008764:	08008829 	.word	0x08008829
 8008768:	080087e3 	.word	0x080087e3
 800876c:	08008829 	.word	0x08008829
 8008770:	08008829 	.word	0x08008829
 8008774:	08008829 	.word	0x08008829
 8008778:	08008829 	.word	0x08008829
 800877c:	08008829 	.word	0x08008829
 8008780:	08008829 	.word	0x08008829
 8008784:	08008829 	.word	0x08008829
 8008788:	08008829 	.word	0x08008829
 800878c:	08008829 	.word	0x08008829
 8008790:	08008829 	.word	0x08008829
 8008794:	08008829 	.word	0x08008829
 8008798:	08008829 	.word	0x08008829
 800879c:	08008829 	.word	0x08008829
 80087a0:	08008829 	.word	0x08008829
 80087a4:	08008829 	.word	0x08008829
 80087a8:	0800881b 	.word	0x0800881b
 80087ac:	2b40      	cmp	r3, #64	@ 0x40
 80087ae:	d037      	beq.n	8008820 <UART_SetConfig+0xc44>
 80087b0:	e03a      	b.n	8008828 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087b2:	f7fc f95f 	bl	8004a74 <HAL_RCC_GetPCLK1Freq>
 80087b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80087b8:	e03c      	b.n	8008834 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087ba:	f7fc f971 	bl	8004aa0 <HAL_RCC_GetPCLK2Freq>
 80087be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80087c0:	e038      	b.n	8008834 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7fd fb36 	bl	8005e38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80087cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087d0:	e030      	b.n	8008834 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087d2:	f107 0318 	add.w	r3, r7, #24
 80087d6:	4618      	mov	r0, r3
 80087d8:	f7fd fc82 	bl	80060e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80087dc:	69fb      	ldr	r3, [r7, #28]
 80087de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087e0:	e028      	b.n	8008834 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087e2:	4b09      	ldr	r3, [pc, #36]	@ (8008808 <UART_SetConfig+0xc2c>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f003 0320 	and.w	r3, r3, #32
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d012      	beq.n	8008814 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80087ee:	4b06      	ldr	r3, [pc, #24]	@ (8008808 <UART_SetConfig+0xc2c>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	08db      	lsrs	r3, r3, #3
 80087f4:	f003 0303 	and.w	r3, r3, #3
 80087f8:	4a04      	ldr	r2, [pc, #16]	@ (800880c <UART_SetConfig+0xc30>)
 80087fa:	fa22 f303 	lsr.w	r3, r2, r3
 80087fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008800:	e018      	b.n	8008834 <UART_SetConfig+0xc58>
 8008802:	bf00      	nop
 8008804:	0801504c 	.word	0x0801504c
 8008808:	58024400 	.word	0x58024400
 800880c:	03d09000 	.word	0x03d09000
 8008810:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8008814:	4b24      	ldr	r3, [pc, #144]	@ (80088a8 <UART_SetConfig+0xccc>)
 8008816:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008818:	e00c      	b.n	8008834 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800881a:	4b24      	ldr	r3, [pc, #144]	@ (80088ac <UART_SetConfig+0xcd0>)
 800881c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800881e:	e009      	b.n	8008834 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008820:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008826:	e005      	b.n	8008834 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8008828:	2300      	movs	r3, #0
 800882a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800882c:	2301      	movs	r3, #1
 800882e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008832:	bf00      	nop
    }

    if (pclk != 0U)
 8008834:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008836:	2b00      	cmp	r3, #0
 8008838:	d021      	beq.n	800887e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800883e:	4a1c      	ldr	r2, [pc, #112]	@ (80088b0 <UART_SetConfig+0xcd4>)
 8008840:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008844:	461a      	mov	r2, r3
 8008846:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008848:	fbb3 f2f2 	udiv	r2, r3, r2
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	085b      	lsrs	r3, r3, #1
 8008852:	441a      	add	r2, r3
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	fbb2 f3f3 	udiv	r3, r2, r3
 800885c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800885e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008860:	2b0f      	cmp	r3, #15
 8008862:	d909      	bls.n	8008878 <UART_SetConfig+0xc9c>
 8008864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008866:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800886a:	d205      	bcs.n	8008878 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800886c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800886e:	b29a      	uxth	r2, r3
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	60da      	str	r2, [r3, #12]
 8008876:	e002      	b.n	800887e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008878:	2301      	movs	r3, #1
 800887a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	2201      	movs	r2, #1
 8008882:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	2201      	movs	r2, #1
 800888a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	2200      	movs	r2, #0
 8008892:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	2200      	movs	r2, #0
 8008898:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800889a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3748      	adds	r7, #72	@ 0x48
 80088a2:	46bd      	mov	sp, r7
 80088a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088a8:	03d09000 	.word	0x03d09000
 80088ac:	003d0900 	.word	0x003d0900
 80088b0:	0801504c 	.word	0x0801504c

080088b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b083      	sub	sp, #12
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088c0:	f003 0308 	and.w	r3, r3, #8
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d00a      	beq.n	80088de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	430a      	orrs	r2, r1
 80088dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088e2:	f003 0301 	and.w	r3, r3, #1
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d00a      	beq.n	8008900 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	430a      	orrs	r2, r1
 80088fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008904:	f003 0302 	and.w	r3, r3, #2
 8008908:	2b00      	cmp	r3, #0
 800890a:	d00a      	beq.n	8008922 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	430a      	orrs	r2, r1
 8008920:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008926:	f003 0304 	and.w	r3, r3, #4
 800892a:	2b00      	cmp	r3, #0
 800892c:	d00a      	beq.n	8008944 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	430a      	orrs	r2, r1
 8008942:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008948:	f003 0310 	and.w	r3, r3, #16
 800894c:	2b00      	cmp	r3, #0
 800894e:	d00a      	beq.n	8008966 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	430a      	orrs	r2, r1
 8008964:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800896a:	f003 0320 	and.w	r3, r3, #32
 800896e:	2b00      	cmp	r3, #0
 8008970:	d00a      	beq.n	8008988 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	430a      	orrs	r2, r1
 8008986:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800898c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008990:	2b00      	cmp	r3, #0
 8008992:	d01a      	beq.n	80089ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	430a      	orrs	r2, r1
 80089a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089b2:	d10a      	bne.n	80089ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	430a      	orrs	r2, r1
 80089c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d00a      	beq.n	80089ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	430a      	orrs	r2, r1
 80089ea:	605a      	str	r2, [r3, #4]
  }
}
 80089ec:	bf00      	nop
 80089ee:	370c      	adds	r7, #12
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b098      	sub	sp, #96	@ 0x60
 80089fc:	af02      	add	r7, sp, #8
 80089fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a08:	f7fa fd40 	bl	800348c <HAL_GetTick>
 8008a0c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f003 0308 	and.w	r3, r3, #8
 8008a18:	2b08      	cmp	r3, #8
 8008a1a:	d12f      	bne.n	8008a7c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a1c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008a20:	9300      	str	r3, [sp, #0]
 8008a22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a24:	2200      	movs	r2, #0
 8008a26:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 f88e 	bl	8008b4c <UART_WaitOnFlagUntilTimeout>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d022      	beq.n	8008a7c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a3e:	e853 3f00 	ldrex	r3, [r3]
 8008a42:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	461a      	mov	r2, r3
 8008a52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a54:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a56:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008a5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a5c:	e841 2300 	strex	r3, r2, [r1]
 8008a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008a62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d1e6      	bne.n	8008a36 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2220      	movs	r2, #32
 8008a6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2200      	movs	r2, #0
 8008a74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a78:	2303      	movs	r3, #3
 8008a7a:	e063      	b.n	8008b44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f003 0304 	and.w	r3, r3, #4
 8008a86:	2b04      	cmp	r3, #4
 8008a88:	d149      	bne.n	8008b1e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a8a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008a8e:	9300      	str	r3, [sp, #0]
 8008a90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a92:	2200      	movs	r2, #0
 8008a94:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 f857 	bl	8008b4c <UART_WaitOnFlagUntilTimeout>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d03c      	beq.n	8008b1e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aac:	e853 3f00 	ldrex	r3, [r3]
 8008ab0:	623b      	str	r3, [r7, #32]
   return(result);
 8008ab2:	6a3b      	ldr	r3, [r7, #32]
 8008ab4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ab8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	461a      	mov	r2, r3
 8008ac0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ac2:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ac4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ac8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008aca:	e841 2300 	strex	r3, r2, [r1]
 8008ace:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d1e6      	bne.n	8008aa4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	3308      	adds	r3, #8
 8008adc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	e853 3f00 	ldrex	r3, [r3]
 8008ae4:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f023 0301 	bic.w	r3, r3, #1
 8008aec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	3308      	adds	r3, #8
 8008af4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008af6:	61fa      	str	r2, [r7, #28]
 8008af8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008afa:	69b9      	ldr	r1, [r7, #24]
 8008afc:	69fa      	ldr	r2, [r7, #28]
 8008afe:	e841 2300 	strex	r3, r2, [r1]
 8008b02:	617b      	str	r3, [r7, #20]
   return(result);
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d1e5      	bne.n	8008ad6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2220      	movs	r2, #32
 8008b0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2200      	movs	r2, #0
 8008b16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b1a:	2303      	movs	r3, #3
 8008b1c:	e012      	b.n	8008b44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2220      	movs	r2, #32
 8008b22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2220      	movs	r2, #32
 8008b2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2200      	movs	r2, #0
 8008b38:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008b42:	2300      	movs	r3, #0
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3758      	adds	r7, #88	@ 0x58
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	60b9      	str	r1, [r7, #8]
 8008b56:	603b      	str	r3, [r7, #0]
 8008b58:	4613      	mov	r3, r2
 8008b5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b5c:	e04f      	b.n	8008bfe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b5e:	69bb      	ldr	r3, [r7, #24]
 8008b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b64:	d04b      	beq.n	8008bfe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b66:	f7fa fc91 	bl	800348c <HAL_GetTick>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	1ad3      	subs	r3, r2, r3
 8008b70:	69ba      	ldr	r2, [r7, #24]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d302      	bcc.n	8008b7c <UART_WaitOnFlagUntilTimeout+0x30>
 8008b76:	69bb      	ldr	r3, [r7, #24]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d101      	bne.n	8008b80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008b7c:	2303      	movs	r3, #3
 8008b7e:	e04e      	b.n	8008c1e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f003 0304 	and.w	r3, r3, #4
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d037      	beq.n	8008bfe <UART_WaitOnFlagUntilTimeout+0xb2>
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	2b80      	cmp	r3, #128	@ 0x80
 8008b92:	d034      	beq.n	8008bfe <UART_WaitOnFlagUntilTimeout+0xb2>
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	2b40      	cmp	r3, #64	@ 0x40
 8008b98:	d031      	beq.n	8008bfe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	69db      	ldr	r3, [r3, #28]
 8008ba0:	f003 0308 	and.w	r3, r3, #8
 8008ba4:	2b08      	cmp	r3, #8
 8008ba6:	d110      	bne.n	8008bca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	2208      	movs	r2, #8
 8008bae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008bb0:	68f8      	ldr	r0, [r7, #12]
 8008bb2:	f000 f839 	bl	8008c28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2208      	movs	r2, #8
 8008bba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	e029      	b.n	8008c1e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	69db      	ldr	r3, [r3, #28]
 8008bd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008bd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008bd8:	d111      	bne.n	8008bfe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008be2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008be4:	68f8      	ldr	r0, [r7, #12]
 8008be6:	f000 f81f 	bl	8008c28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2220      	movs	r2, #32
 8008bee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008bfa:	2303      	movs	r3, #3
 8008bfc:	e00f      	b.n	8008c1e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	69da      	ldr	r2, [r3, #28]
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	4013      	ands	r3, r2
 8008c08:	68ba      	ldr	r2, [r7, #8]
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	bf0c      	ite	eq
 8008c0e:	2301      	moveq	r3, #1
 8008c10:	2300      	movne	r3, #0
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	461a      	mov	r2, r3
 8008c16:	79fb      	ldrb	r3, [r7, #7]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d0a0      	beq.n	8008b5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c1c:	2300      	movs	r3, #0
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3710      	adds	r7, #16
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
	...

08008c28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b095      	sub	sp, #84	@ 0x54
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c38:	e853 3f00 	ldrex	r3, [r3]
 8008c3c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c4e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c50:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c52:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008c54:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c56:	e841 2300 	strex	r3, r2, [r1]
 8008c5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d1e6      	bne.n	8008c30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	3308      	adds	r3, #8
 8008c68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c6a:	6a3b      	ldr	r3, [r7, #32]
 8008c6c:	e853 3f00 	ldrex	r3, [r3]
 8008c70:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c72:	69fa      	ldr	r2, [r7, #28]
 8008c74:	4b1e      	ldr	r3, [pc, #120]	@ (8008cf0 <UART_EndRxTransfer+0xc8>)
 8008c76:	4013      	ands	r3, r2
 8008c78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	3308      	adds	r3, #8
 8008c80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008c84:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c8a:	e841 2300 	strex	r3, r2, [r1]
 8008c8e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d1e5      	bne.n	8008c62 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c9a:	2b01      	cmp	r3, #1
 8008c9c:	d118      	bne.n	8008cd0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	e853 3f00 	ldrex	r3, [r3]
 8008caa:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	f023 0310 	bic.w	r3, r3, #16
 8008cb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	461a      	mov	r2, r3
 8008cba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008cbc:	61bb      	str	r3, [r7, #24]
 8008cbe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cc0:	6979      	ldr	r1, [r7, #20]
 8008cc2:	69ba      	ldr	r2, [r7, #24]
 8008cc4:	e841 2300 	strex	r3, r2, [r1]
 8008cc8:	613b      	str	r3, [r7, #16]
   return(result);
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d1e6      	bne.n	8008c9e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2220      	movs	r2, #32
 8008cd4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008ce4:	bf00      	nop
 8008ce6:	3754      	adds	r7, #84	@ 0x54
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr
 8008cf0:	effffffe 	.word	0xeffffffe

08008cf4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b085      	sub	sp, #20
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d101      	bne.n	8008d0a <HAL_UARTEx_DisableFifoMode+0x16>
 8008d06:	2302      	movs	r3, #2
 8008d08:	e027      	b.n	8008d5a <HAL_UARTEx_DisableFifoMode+0x66>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2224      	movs	r2, #36	@ 0x24
 8008d16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f022 0201 	bic.w	r2, r2, #1
 8008d30:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008d38:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	68fa      	ldr	r2, [r7, #12]
 8008d46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2220      	movs	r2, #32
 8008d4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2200      	movs	r2, #0
 8008d54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008d58:	2300      	movs	r3, #0
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3714      	adds	r7, #20
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr

08008d66 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d66:	b580      	push	{r7, lr}
 8008d68:	b084      	sub	sp, #16
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
 8008d6e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d101      	bne.n	8008d7e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008d7a:	2302      	movs	r3, #2
 8008d7c:	e02d      	b.n	8008dda <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2201      	movs	r2, #1
 8008d82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2224      	movs	r2, #36	@ 0x24
 8008d8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f022 0201 	bic.w	r2, r2, #1
 8008da4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	689b      	ldr	r3, [r3, #8]
 8008dac:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	683a      	ldr	r2, [r7, #0]
 8008db6:	430a      	orrs	r2, r1
 8008db8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 f850 	bl	8008e60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	68fa      	ldr	r2, [r7, #12]
 8008dc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2220      	movs	r2, #32
 8008dcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008dd8:	2300      	movs	r3, #0
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3710      	adds	r7, #16
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008de2:	b580      	push	{r7, lr}
 8008de4:	b084      	sub	sp, #16
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
 8008dea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d101      	bne.n	8008dfa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008df6:	2302      	movs	r3, #2
 8008df8:	e02d      	b.n	8008e56 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2224      	movs	r2, #36	@ 0x24
 8008e06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	681a      	ldr	r2, [r3, #0]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f022 0201 	bic.w	r2, r2, #1
 8008e20:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	683a      	ldr	r2, [r7, #0]
 8008e32:	430a      	orrs	r2, r1
 8008e34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 f812 	bl	8008e60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	68fa      	ldr	r2, [r7, #12]
 8008e42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2220      	movs	r2, #32
 8008e48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3710      	adds	r7, #16
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
	...

08008e60 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b085      	sub	sp, #20
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d108      	bne.n	8008e82 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2201      	movs	r2, #1
 8008e74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008e80:	e031      	b.n	8008ee6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008e82:	2310      	movs	r3, #16
 8008e84:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008e86:	2310      	movs	r3, #16
 8008e88:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	0e5b      	lsrs	r3, r3, #25
 8008e92:	b2db      	uxtb	r3, r3
 8008e94:	f003 0307 	and.w	r3, r3, #7
 8008e98:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	0f5b      	lsrs	r3, r3, #29
 8008ea2:	b2db      	uxtb	r3, r3
 8008ea4:	f003 0307 	and.w	r3, r3, #7
 8008ea8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008eaa:	7bbb      	ldrb	r3, [r7, #14]
 8008eac:	7b3a      	ldrb	r2, [r7, #12]
 8008eae:	4911      	ldr	r1, [pc, #68]	@ (8008ef4 <UARTEx_SetNbDataToProcess+0x94>)
 8008eb0:	5c8a      	ldrb	r2, [r1, r2]
 8008eb2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008eb6:	7b3a      	ldrb	r2, [r7, #12]
 8008eb8:	490f      	ldr	r1, [pc, #60]	@ (8008ef8 <UARTEx_SetNbDataToProcess+0x98>)
 8008eba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ebc:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ec0:	b29a      	uxth	r2, r3
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ec8:	7bfb      	ldrb	r3, [r7, #15]
 8008eca:	7b7a      	ldrb	r2, [r7, #13]
 8008ecc:	4909      	ldr	r1, [pc, #36]	@ (8008ef4 <UARTEx_SetNbDataToProcess+0x94>)
 8008ece:	5c8a      	ldrb	r2, [r1, r2]
 8008ed0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008ed4:	7b7a      	ldrb	r2, [r7, #13]
 8008ed6:	4908      	ldr	r1, [pc, #32]	@ (8008ef8 <UARTEx_SetNbDataToProcess+0x98>)
 8008ed8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008eda:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ede:	b29a      	uxth	r2, r3
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008ee6:	bf00      	nop
 8008ee8:	3714      	adds	r7, #20
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr
 8008ef2:	bf00      	nop
 8008ef4:	08015064 	.word	0x08015064
 8008ef8:	0801506c 	.word	0x0801506c

08008efc <malloc>:
 8008efc:	4b02      	ldr	r3, [pc, #8]	@ (8008f08 <malloc+0xc>)
 8008efe:	4601      	mov	r1, r0
 8008f00:	6818      	ldr	r0, [r3, #0]
 8008f02:	f000 b82d 	b.w	8008f60 <_malloc_r>
 8008f06:	bf00      	nop
 8008f08:	2400004c 	.word	0x2400004c

08008f0c <free>:
 8008f0c:	4b02      	ldr	r3, [pc, #8]	@ (8008f18 <free+0xc>)
 8008f0e:	4601      	mov	r1, r0
 8008f10:	6818      	ldr	r0, [r3, #0]
 8008f12:	f000 bb47 	b.w	80095a4 <_free_r>
 8008f16:	bf00      	nop
 8008f18:	2400004c 	.word	0x2400004c

08008f1c <sbrk_aligned>:
 8008f1c:	b570      	push	{r4, r5, r6, lr}
 8008f1e:	4e0f      	ldr	r6, [pc, #60]	@ (8008f5c <sbrk_aligned+0x40>)
 8008f20:	460c      	mov	r4, r1
 8008f22:	6831      	ldr	r1, [r6, #0]
 8008f24:	4605      	mov	r5, r0
 8008f26:	b911      	cbnz	r1, 8008f2e <sbrk_aligned+0x12>
 8008f28:	f000 faec 	bl	8009504 <_sbrk_r>
 8008f2c:	6030      	str	r0, [r6, #0]
 8008f2e:	4621      	mov	r1, r4
 8008f30:	4628      	mov	r0, r5
 8008f32:	f000 fae7 	bl	8009504 <_sbrk_r>
 8008f36:	1c43      	adds	r3, r0, #1
 8008f38:	d103      	bne.n	8008f42 <sbrk_aligned+0x26>
 8008f3a:	f04f 34ff 	mov.w	r4, #4294967295
 8008f3e:	4620      	mov	r0, r4
 8008f40:	bd70      	pop	{r4, r5, r6, pc}
 8008f42:	1cc4      	adds	r4, r0, #3
 8008f44:	f024 0403 	bic.w	r4, r4, #3
 8008f48:	42a0      	cmp	r0, r4
 8008f4a:	d0f8      	beq.n	8008f3e <sbrk_aligned+0x22>
 8008f4c:	1a21      	subs	r1, r4, r0
 8008f4e:	4628      	mov	r0, r5
 8008f50:	f000 fad8 	bl	8009504 <_sbrk_r>
 8008f54:	3001      	adds	r0, #1
 8008f56:	d1f2      	bne.n	8008f3e <sbrk_aligned+0x22>
 8008f58:	e7ef      	b.n	8008f3a <sbrk_aligned+0x1e>
 8008f5a:	bf00      	nop
 8008f5c:	24000240 	.word	0x24000240

08008f60 <_malloc_r>:
 8008f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f64:	1ccd      	adds	r5, r1, #3
 8008f66:	f025 0503 	bic.w	r5, r5, #3
 8008f6a:	3508      	adds	r5, #8
 8008f6c:	2d0c      	cmp	r5, #12
 8008f6e:	bf38      	it	cc
 8008f70:	250c      	movcc	r5, #12
 8008f72:	2d00      	cmp	r5, #0
 8008f74:	4606      	mov	r6, r0
 8008f76:	db01      	blt.n	8008f7c <_malloc_r+0x1c>
 8008f78:	42a9      	cmp	r1, r5
 8008f7a:	d904      	bls.n	8008f86 <_malloc_r+0x26>
 8008f7c:	230c      	movs	r3, #12
 8008f7e:	6033      	str	r3, [r6, #0]
 8008f80:	2000      	movs	r0, #0
 8008f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800905c <_malloc_r+0xfc>
 8008f8a:	f000 f869 	bl	8009060 <__malloc_lock>
 8008f8e:	f8d8 3000 	ldr.w	r3, [r8]
 8008f92:	461c      	mov	r4, r3
 8008f94:	bb44      	cbnz	r4, 8008fe8 <_malloc_r+0x88>
 8008f96:	4629      	mov	r1, r5
 8008f98:	4630      	mov	r0, r6
 8008f9a:	f7ff ffbf 	bl	8008f1c <sbrk_aligned>
 8008f9e:	1c43      	adds	r3, r0, #1
 8008fa0:	4604      	mov	r4, r0
 8008fa2:	d158      	bne.n	8009056 <_malloc_r+0xf6>
 8008fa4:	f8d8 4000 	ldr.w	r4, [r8]
 8008fa8:	4627      	mov	r7, r4
 8008faa:	2f00      	cmp	r7, #0
 8008fac:	d143      	bne.n	8009036 <_malloc_r+0xd6>
 8008fae:	2c00      	cmp	r4, #0
 8008fb0:	d04b      	beq.n	800904a <_malloc_r+0xea>
 8008fb2:	6823      	ldr	r3, [r4, #0]
 8008fb4:	4639      	mov	r1, r7
 8008fb6:	4630      	mov	r0, r6
 8008fb8:	eb04 0903 	add.w	r9, r4, r3
 8008fbc:	f000 faa2 	bl	8009504 <_sbrk_r>
 8008fc0:	4581      	cmp	r9, r0
 8008fc2:	d142      	bne.n	800904a <_malloc_r+0xea>
 8008fc4:	6821      	ldr	r1, [r4, #0]
 8008fc6:	1a6d      	subs	r5, r5, r1
 8008fc8:	4629      	mov	r1, r5
 8008fca:	4630      	mov	r0, r6
 8008fcc:	f7ff ffa6 	bl	8008f1c <sbrk_aligned>
 8008fd0:	3001      	adds	r0, #1
 8008fd2:	d03a      	beq.n	800904a <_malloc_r+0xea>
 8008fd4:	6823      	ldr	r3, [r4, #0]
 8008fd6:	442b      	add	r3, r5
 8008fd8:	6023      	str	r3, [r4, #0]
 8008fda:	f8d8 3000 	ldr.w	r3, [r8]
 8008fde:	685a      	ldr	r2, [r3, #4]
 8008fe0:	bb62      	cbnz	r2, 800903c <_malloc_r+0xdc>
 8008fe2:	f8c8 7000 	str.w	r7, [r8]
 8008fe6:	e00f      	b.n	8009008 <_malloc_r+0xa8>
 8008fe8:	6822      	ldr	r2, [r4, #0]
 8008fea:	1b52      	subs	r2, r2, r5
 8008fec:	d420      	bmi.n	8009030 <_malloc_r+0xd0>
 8008fee:	2a0b      	cmp	r2, #11
 8008ff0:	d917      	bls.n	8009022 <_malloc_r+0xc2>
 8008ff2:	1961      	adds	r1, r4, r5
 8008ff4:	42a3      	cmp	r3, r4
 8008ff6:	6025      	str	r5, [r4, #0]
 8008ff8:	bf18      	it	ne
 8008ffa:	6059      	strne	r1, [r3, #4]
 8008ffc:	6863      	ldr	r3, [r4, #4]
 8008ffe:	bf08      	it	eq
 8009000:	f8c8 1000 	streq.w	r1, [r8]
 8009004:	5162      	str	r2, [r4, r5]
 8009006:	604b      	str	r3, [r1, #4]
 8009008:	4630      	mov	r0, r6
 800900a:	f000 f82f 	bl	800906c <__malloc_unlock>
 800900e:	f104 000b 	add.w	r0, r4, #11
 8009012:	1d23      	adds	r3, r4, #4
 8009014:	f020 0007 	bic.w	r0, r0, #7
 8009018:	1ac2      	subs	r2, r0, r3
 800901a:	bf1c      	itt	ne
 800901c:	1a1b      	subne	r3, r3, r0
 800901e:	50a3      	strne	r3, [r4, r2]
 8009020:	e7af      	b.n	8008f82 <_malloc_r+0x22>
 8009022:	6862      	ldr	r2, [r4, #4]
 8009024:	42a3      	cmp	r3, r4
 8009026:	bf0c      	ite	eq
 8009028:	f8c8 2000 	streq.w	r2, [r8]
 800902c:	605a      	strne	r2, [r3, #4]
 800902e:	e7eb      	b.n	8009008 <_malloc_r+0xa8>
 8009030:	4623      	mov	r3, r4
 8009032:	6864      	ldr	r4, [r4, #4]
 8009034:	e7ae      	b.n	8008f94 <_malloc_r+0x34>
 8009036:	463c      	mov	r4, r7
 8009038:	687f      	ldr	r7, [r7, #4]
 800903a:	e7b6      	b.n	8008faa <_malloc_r+0x4a>
 800903c:	461a      	mov	r2, r3
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	42a3      	cmp	r3, r4
 8009042:	d1fb      	bne.n	800903c <_malloc_r+0xdc>
 8009044:	2300      	movs	r3, #0
 8009046:	6053      	str	r3, [r2, #4]
 8009048:	e7de      	b.n	8009008 <_malloc_r+0xa8>
 800904a:	230c      	movs	r3, #12
 800904c:	6033      	str	r3, [r6, #0]
 800904e:	4630      	mov	r0, r6
 8009050:	f000 f80c 	bl	800906c <__malloc_unlock>
 8009054:	e794      	b.n	8008f80 <_malloc_r+0x20>
 8009056:	6005      	str	r5, [r0, #0]
 8009058:	e7d6      	b.n	8009008 <_malloc_r+0xa8>
 800905a:	bf00      	nop
 800905c:	24000244 	.word	0x24000244

08009060 <__malloc_lock>:
 8009060:	4801      	ldr	r0, [pc, #4]	@ (8009068 <__malloc_lock+0x8>)
 8009062:	f000 ba9c 	b.w	800959e <__retarget_lock_acquire_recursive>
 8009066:	bf00      	nop
 8009068:	24000388 	.word	0x24000388

0800906c <__malloc_unlock>:
 800906c:	4801      	ldr	r0, [pc, #4]	@ (8009074 <__malloc_unlock+0x8>)
 800906e:	f000 ba97 	b.w	80095a0 <__retarget_lock_release_recursive>
 8009072:	bf00      	nop
 8009074:	24000388 	.word	0x24000388

08009078 <std>:
 8009078:	2300      	movs	r3, #0
 800907a:	b510      	push	{r4, lr}
 800907c:	4604      	mov	r4, r0
 800907e:	e9c0 3300 	strd	r3, r3, [r0]
 8009082:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009086:	6083      	str	r3, [r0, #8]
 8009088:	8181      	strh	r1, [r0, #12]
 800908a:	6643      	str	r3, [r0, #100]	@ 0x64
 800908c:	81c2      	strh	r2, [r0, #14]
 800908e:	6183      	str	r3, [r0, #24]
 8009090:	4619      	mov	r1, r3
 8009092:	2208      	movs	r2, #8
 8009094:	305c      	adds	r0, #92	@ 0x5c
 8009096:	f000 f9f9 	bl	800948c <memset>
 800909a:	4b0d      	ldr	r3, [pc, #52]	@ (80090d0 <std+0x58>)
 800909c:	6263      	str	r3, [r4, #36]	@ 0x24
 800909e:	4b0d      	ldr	r3, [pc, #52]	@ (80090d4 <std+0x5c>)
 80090a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80090a2:	4b0d      	ldr	r3, [pc, #52]	@ (80090d8 <std+0x60>)
 80090a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80090a6:	4b0d      	ldr	r3, [pc, #52]	@ (80090dc <std+0x64>)
 80090a8:	6323      	str	r3, [r4, #48]	@ 0x30
 80090aa:	4b0d      	ldr	r3, [pc, #52]	@ (80090e0 <std+0x68>)
 80090ac:	6224      	str	r4, [r4, #32]
 80090ae:	429c      	cmp	r4, r3
 80090b0:	d006      	beq.n	80090c0 <std+0x48>
 80090b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80090b6:	4294      	cmp	r4, r2
 80090b8:	d002      	beq.n	80090c0 <std+0x48>
 80090ba:	33d0      	adds	r3, #208	@ 0xd0
 80090bc:	429c      	cmp	r4, r3
 80090be:	d105      	bne.n	80090cc <std+0x54>
 80090c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80090c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090c8:	f000 ba68 	b.w	800959c <__retarget_lock_init_recursive>
 80090cc:	bd10      	pop	{r4, pc}
 80090ce:	bf00      	nop
 80090d0:	080092dd 	.word	0x080092dd
 80090d4:	080092ff 	.word	0x080092ff
 80090d8:	08009337 	.word	0x08009337
 80090dc:	0800935b 	.word	0x0800935b
 80090e0:	24000248 	.word	0x24000248

080090e4 <stdio_exit_handler>:
 80090e4:	4a02      	ldr	r2, [pc, #8]	@ (80090f0 <stdio_exit_handler+0xc>)
 80090e6:	4903      	ldr	r1, [pc, #12]	@ (80090f4 <stdio_exit_handler+0x10>)
 80090e8:	4803      	ldr	r0, [pc, #12]	@ (80090f8 <stdio_exit_handler+0x14>)
 80090ea:	f000 b869 	b.w	80091c0 <_fwalk_sglue>
 80090ee:	bf00      	nop
 80090f0:	24000040 	.word	0x24000040
 80090f4:	08009ce1 	.word	0x08009ce1
 80090f8:	24000050 	.word	0x24000050

080090fc <cleanup_stdio>:
 80090fc:	6841      	ldr	r1, [r0, #4]
 80090fe:	4b0c      	ldr	r3, [pc, #48]	@ (8009130 <cleanup_stdio+0x34>)
 8009100:	4299      	cmp	r1, r3
 8009102:	b510      	push	{r4, lr}
 8009104:	4604      	mov	r4, r0
 8009106:	d001      	beq.n	800910c <cleanup_stdio+0x10>
 8009108:	f000 fdea 	bl	8009ce0 <_fflush_r>
 800910c:	68a1      	ldr	r1, [r4, #8]
 800910e:	4b09      	ldr	r3, [pc, #36]	@ (8009134 <cleanup_stdio+0x38>)
 8009110:	4299      	cmp	r1, r3
 8009112:	d002      	beq.n	800911a <cleanup_stdio+0x1e>
 8009114:	4620      	mov	r0, r4
 8009116:	f000 fde3 	bl	8009ce0 <_fflush_r>
 800911a:	68e1      	ldr	r1, [r4, #12]
 800911c:	4b06      	ldr	r3, [pc, #24]	@ (8009138 <cleanup_stdio+0x3c>)
 800911e:	4299      	cmp	r1, r3
 8009120:	d004      	beq.n	800912c <cleanup_stdio+0x30>
 8009122:	4620      	mov	r0, r4
 8009124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009128:	f000 bdda 	b.w	8009ce0 <_fflush_r>
 800912c:	bd10      	pop	{r4, pc}
 800912e:	bf00      	nop
 8009130:	24000248 	.word	0x24000248
 8009134:	240002b0 	.word	0x240002b0
 8009138:	24000318 	.word	0x24000318

0800913c <global_stdio_init.part.0>:
 800913c:	b510      	push	{r4, lr}
 800913e:	4b0b      	ldr	r3, [pc, #44]	@ (800916c <global_stdio_init.part.0+0x30>)
 8009140:	4c0b      	ldr	r4, [pc, #44]	@ (8009170 <global_stdio_init.part.0+0x34>)
 8009142:	4a0c      	ldr	r2, [pc, #48]	@ (8009174 <global_stdio_init.part.0+0x38>)
 8009144:	601a      	str	r2, [r3, #0]
 8009146:	4620      	mov	r0, r4
 8009148:	2200      	movs	r2, #0
 800914a:	2104      	movs	r1, #4
 800914c:	f7ff ff94 	bl	8009078 <std>
 8009150:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009154:	2201      	movs	r2, #1
 8009156:	2109      	movs	r1, #9
 8009158:	f7ff ff8e 	bl	8009078 <std>
 800915c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009160:	2202      	movs	r2, #2
 8009162:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009166:	2112      	movs	r1, #18
 8009168:	f7ff bf86 	b.w	8009078 <std>
 800916c:	24000380 	.word	0x24000380
 8009170:	24000248 	.word	0x24000248
 8009174:	080090e5 	.word	0x080090e5

08009178 <__sfp_lock_acquire>:
 8009178:	4801      	ldr	r0, [pc, #4]	@ (8009180 <__sfp_lock_acquire+0x8>)
 800917a:	f000 ba10 	b.w	800959e <__retarget_lock_acquire_recursive>
 800917e:	bf00      	nop
 8009180:	24000389 	.word	0x24000389

08009184 <__sfp_lock_release>:
 8009184:	4801      	ldr	r0, [pc, #4]	@ (800918c <__sfp_lock_release+0x8>)
 8009186:	f000 ba0b 	b.w	80095a0 <__retarget_lock_release_recursive>
 800918a:	bf00      	nop
 800918c:	24000389 	.word	0x24000389

08009190 <__sinit>:
 8009190:	b510      	push	{r4, lr}
 8009192:	4604      	mov	r4, r0
 8009194:	f7ff fff0 	bl	8009178 <__sfp_lock_acquire>
 8009198:	6a23      	ldr	r3, [r4, #32]
 800919a:	b11b      	cbz	r3, 80091a4 <__sinit+0x14>
 800919c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091a0:	f7ff bff0 	b.w	8009184 <__sfp_lock_release>
 80091a4:	4b04      	ldr	r3, [pc, #16]	@ (80091b8 <__sinit+0x28>)
 80091a6:	6223      	str	r3, [r4, #32]
 80091a8:	4b04      	ldr	r3, [pc, #16]	@ (80091bc <__sinit+0x2c>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d1f5      	bne.n	800919c <__sinit+0xc>
 80091b0:	f7ff ffc4 	bl	800913c <global_stdio_init.part.0>
 80091b4:	e7f2      	b.n	800919c <__sinit+0xc>
 80091b6:	bf00      	nop
 80091b8:	080090fd 	.word	0x080090fd
 80091bc:	24000380 	.word	0x24000380

080091c0 <_fwalk_sglue>:
 80091c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091c4:	4607      	mov	r7, r0
 80091c6:	4688      	mov	r8, r1
 80091c8:	4614      	mov	r4, r2
 80091ca:	2600      	movs	r6, #0
 80091cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80091d0:	f1b9 0901 	subs.w	r9, r9, #1
 80091d4:	d505      	bpl.n	80091e2 <_fwalk_sglue+0x22>
 80091d6:	6824      	ldr	r4, [r4, #0]
 80091d8:	2c00      	cmp	r4, #0
 80091da:	d1f7      	bne.n	80091cc <_fwalk_sglue+0xc>
 80091dc:	4630      	mov	r0, r6
 80091de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091e2:	89ab      	ldrh	r3, [r5, #12]
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d907      	bls.n	80091f8 <_fwalk_sglue+0x38>
 80091e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80091ec:	3301      	adds	r3, #1
 80091ee:	d003      	beq.n	80091f8 <_fwalk_sglue+0x38>
 80091f0:	4629      	mov	r1, r5
 80091f2:	4638      	mov	r0, r7
 80091f4:	47c0      	blx	r8
 80091f6:	4306      	orrs	r6, r0
 80091f8:	3568      	adds	r5, #104	@ 0x68
 80091fa:	e7e9      	b.n	80091d0 <_fwalk_sglue+0x10>

080091fc <iprintf>:
 80091fc:	b40f      	push	{r0, r1, r2, r3}
 80091fe:	b507      	push	{r0, r1, r2, lr}
 8009200:	4906      	ldr	r1, [pc, #24]	@ (800921c <iprintf+0x20>)
 8009202:	ab04      	add	r3, sp, #16
 8009204:	6808      	ldr	r0, [r1, #0]
 8009206:	f853 2b04 	ldr.w	r2, [r3], #4
 800920a:	6881      	ldr	r1, [r0, #8]
 800920c:	9301      	str	r3, [sp, #4]
 800920e:	f000 fa3d 	bl	800968c <_vfiprintf_r>
 8009212:	b003      	add	sp, #12
 8009214:	f85d eb04 	ldr.w	lr, [sp], #4
 8009218:	b004      	add	sp, #16
 800921a:	4770      	bx	lr
 800921c:	2400004c 	.word	0x2400004c

08009220 <_puts_r>:
 8009220:	6a03      	ldr	r3, [r0, #32]
 8009222:	b570      	push	{r4, r5, r6, lr}
 8009224:	6884      	ldr	r4, [r0, #8]
 8009226:	4605      	mov	r5, r0
 8009228:	460e      	mov	r6, r1
 800922a:	b90b      	cbnz	r3, 8009230 <_puts_r+0x10>
 800922c:	f7ff ffb0 	bl	8009190 <__sinit>
 8009230:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009232:	07db      	lsls	r3, r3, #31
 8009234:	d405      	bmi.n	8009242 <_puts_r+0x22>
 8009236:	89a3      	ldrh	r3, [r4, #12]
 8009238:	0598      	lsls	r0, r3, #22
 800923a:	d402      	bmi.n	8009242 <_puts_r+0x22>
 800923c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800923e:	f000 f9ae 	bl	800959e <__retarget_lock_acquire_recursive>
 8009242:	89a3      	ldrh	r3, [r4, #12]
 8009244:	0719      	lsls	r1, r3, #28
 8009246:	d502      	bpl.n	800924e <_puts_r+0x2e>
 8009248:	6923      	ldr	r3, [r4, #16]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d135      	bne.n	80092ba <_puts_r+0x9a>
 800924e:	4621      	mov	r1, r4
 8009250:	4628      	mov	r0, r5
 8009252:	f000 f8c5 	bl	80093e0 <__swsetup_r>
 8009256:	b380      	cbz	r0, 80092ba <_puts_r+0x9a>
 8009258:	f04f 35ff 	mov.w	r5, #4294967295
 800925c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800925e:	07da      	lsls	r2, r3, #31
 8009260:	d405      	bmi.n	800926e <_puts_r+0x4e>
 8009262:	89a3      	ldrh	r3, [r4, #12]
 8009264:	059b      	lsls	r3, r3, #22
 8009266:	d402      	bmi.n	800926e <_puts_r+0x4e>
 8009268:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800926a:	f000 f999 	bl	80095a0 <__retarget_lock_release_recursive>
 800926e:	4628      	mov	r0, r5
 8009270:	bd70      	pop	{r4, r5, r6, pc}
 8009272:	2b00      	cmp	r3, #0
 8009274:	da04      	bge.n	8009280 <_puts_r+0x60>
 8009276:	69a2      	ldr	r2, [r4, #24]
 8009278:	429a      	cmp	r2, r3
 800927a:	dc17      	bgt.n	80092ac <_puts_r+0x8c>
 800927c:	290a      	cmp	r1, #10
 800927e:	d015      	beq.n	80092ac <_puts_r+0x8c>
 8009280:	6823      	ldr	r3, [r4, #0]
 8009282:	1c5a      	adds	r2, r3, #1
 8009284:	6022      	str	r2, [r4, #0]
 8009286:	7019      	strb	r1, [r3, #0]
 8009288:	68a3      	ldr	r3, [r4, #8]
 800928a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800928e:	3b01      	subs	r3, #1
 8009290:	60a3      	str	r3, [r4, #8]
 8009292:	2900      	cmp	r1, #0
 8009294:	d1ed      	bne.n	8009272 <_puts_r+0x52>
 8009296:	2b00      	cmp	r3, #0
 8009298:	da11      	bge.n	80092be <_puts_r+0x9e>
 800929a:	4622      	mov	r2, r4
 800929c:	210a      	movs	r1, #10
 800929e:	4628      	mov	r0, r5
 80092a0:	f000 f85f 	bl	8009362 <__swbuf_r>
 80092a4:	3001      	adds	r0, #1
 80092a6:	d0d7      	beq.n	8009258 <_puts_r+0x38>
 80092a8:	250a      	movs	r5, #10
 80092aa:	e7d7      	b.n	800925c <_puts_r+0x3c>
 80092ac:	4622      	mov	r2, r4
 80092ae:	4628      	mov	r0, r5
 80092b0:	f000 f857 	bl	8009362 <__swbuf_r>
 80092b4:	3001      	adds	r0, #1
 80092b6:	d1e7      	bne.n	8009288 <_puts_r+0x68>
 80092b8:	e7ce      	b.n	8009258 <_puts_r+0x38>
 80092ba:	3e01      	subs	r6, #1
 80092bc:	e7e4      	b.n	8009288 <_puts_r+0x68>
 80092be:	6823      	ldr	r3, [r4, #0]
 80092c0:	1c5a      	adds	r2, r3, #1
 80092c2:	6022      	str	r2, [r4, #0]
 80092c4:	220a      	movs	r2, #10
 80092c6:	701a      	strb	r2, [r3, #0]
 80092c8:	e7ee      	b.n	80092a8 <_puts_r+0x88>
	...

080092cc <puts>:
 80092cc:	4b02      	ldr	r3, [pc, #8]	@ (80092d8 <puts+0xc>)
 80092ce:	4601      	mov	r1, r0
 80092d0:	6818      	ldr	r0, [r3, #0]
 80092d2:	f7ff bfa5 	b.w	8009220 <_puts_r>
 80092d6:	bf00      	nop
 80092d8:	2400004c 	.word	0x2400004c

080092dc <__sread>:
 80092dc:	b510      	push	{r4, lr}
 80092de:	460c      	mov	r4, r1
 80092e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092e4:	f000 f8fc 	bl	80094e0 <_read_r>
 80092e8:	2800      	cmp	r0, #0
 80092ea:	bfab      	itete	ge
 80092ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80092ee:	89a3      	ldrhlt	r3, [r4, #12]
 80092f0:	181b      	addge	r3, r3, r0
 80092f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80092f6:	bfac      	ite	ge
 80092f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80092fa:	81a3      	strhlt	r3, [r4, #12]
 80092fc:	bd10      	pop	{r4, pc}

080092fe <__swrite>:
 80092fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009302:	461f      	mov	r7, r3
 8009304:	898b      	ldrh	r3, [r1, #12]
 8009306:	05db      	lsls	r3, r3, #23
 8009308:	4605      	mov	r5, r0
 800930a:	460c      	mov	r4, r1
 800930c:	4616      	mov	r6, r2
 800930e:	d505      	bpl.n	800931c <__swrite+0x1e>
 8009310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009314:	2302      	movs	r3, #2
 8009316:	2200      	movs	r2, #0
 8009318:	f000 f8d0 	bl	80094bc <_lseek_r>
 800931c:	89a3      	ldrh	r3, [r4, #12]
 800931e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009322:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009326:	81a3      	strh	r3, [r4, #12]
 8009328:	4632      	mov	r2, r6
 800932a:	463b      	mov	r3, r7
 800932c:	4628      	mov	r0, r5
 800932e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009332:	f000 b8f7 	b.w	8009524 <_write_r>

08009336 <__sseek>:
 8009336:	b510      	push	{r4, lr}
 8009338:	460c      	mov	r4, r1
 800933a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800933e:	f000 f8bd 	bl	80094bc <_lseek_r>
 8009342:	1c43      	adds	r3, r0, #1
 8009344:	89a3      	ldrh	r3, [r4, #12]
 8009346:	bf15      	itete	ne
 8009348:	6560      	strne	r0, [r4, #84]	@ 0x54
 800934a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800934e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009352:	81a3      	strheq	r3, [r4, #12]
 8009354:	bf18      	it	ne
 8009356:	81a3      	strhne	r3, [r4, #12]
 8009358:	bd10      	pop	{r4, pc}

0800935a <__sclose>:
 800935a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800935e:	f000 b89d 	b.w	800949c <_close_r>

08009362 <__swbuf_r>:
 8009362:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009364:	460e      	mov	r6, r1
 8009366:	4614      	mov	r4, r2
 8009368:	4605      	mov	r5, r0
 800936a:	b118      	cbz	r0, 8009374 <__swbuf_r+0x12>
 800936c:	6a03      	ldr	r3, [r0, #32]
 800936e:	b90b      	cbnz	r3, 8009374 <__swbuf_r+0x12>
 8009370:	f7ff ff0e 	bl	8009190 <__sinit>
 8009374:	69a3      	ldr	r3, [r4, #24]
 8009376:	60a3      	str	r3, [r4, #8]
 8009378:	89a3      	ldrh	r3, [r4, #12]
 800937a:	071a      	lsls	r2, r3, #28
 800937c:	d501      	bpl.n	8009382 <__swbuf_r+0x20>
 800937e:	6923      	ldr	r3, [r4, #16]
 8009380:	b943      	cbnz	r3, 8009394 <__swbuf_r+0x32>
 8009382:	4621      	mov	r1, r4
 8009384:	4628      	mov	r0, r5
 8009386:	f000 f82b 	bl	80093e0 <__swsetup_r>
 800938a:	b118      	cbz	r0, 8009394 <__swbuf_r+0x32>
 800938c:	f04f 37ff 	mov.w	r7, #4294967295
 8009390:	4638      	mov	r0, r7
 8009392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009394:	6823      	ldr	r3, [r4, #0]
 8009396:	6922      	ldr	r2, [r4, #16]
 8009398:	1a98      	subs	r0, r3, r2
 800939a:	6963      	ldr	r3, [r4, #20]
 800939c:	b2f6      	uxtb	r6, r6
 800939e:	4283      	cmp	r3, r0
 80093a0:	4637      	mov	r7, r6
 80093a2:	dc05      	bgt.n	80093b0 <__swbuf_r+0x4e>
 80093a4:	4621      	mov	r1, r4
 80093a6:	4628      	mov	r0, r5
 80093a8:	f000 fc9a 	bl	8009ce0 <_fflush_r>
 80093ac:	2800      	cmp	r0, #0
 80093ae:	d1ed      	bne.n	800938c <__swbuf_r+0x2a>
 80093b0:	68a3      	ldr	r3, [r4, #8]
 80093b2:	3b01      	subs	r3, #1
 80093b4:	60a3      	str	r3, [r4, #8]
 80093b6:	6823      	ldr	r3, [r4, #0]
 80093b8:	1c5a      	adds	r2, r3, #1
 80093ba:	6022      	str	r2, [r4, #0]
 80093bc:	701e      	strb	r6, [r3, #0]
 80093be:	6962      	ldr	r2, [r4, #20]
 80093c0:	1c43      	adds	r3, r0, #1
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d004      	beq.n	80093d0 <__swbuf_r+0x6e>
 80093c6:	89a3      	ldrh	r3, [r4, #12]
 80093c8:	07db      	lsls	r3, r3, #31
 80093ca:	d5e1      	bpl.n	8009390 <__swbuf_r+0x2e>
 80093cc:	2e0a      	cmp	r6, #10
 80093ce:	d1df      	bne.n	8009390 <__swbuf_r+0x2e>
 80093d0:	4621      	mov	r1, r4
 80093d2:	4628      	mov	r0, r5
 80093d4:	f000 fc84 	bl	8009ce0 <_fflush_r>
 80093d8:	2800      	cmp	r0, #0
 80093da:	d0d9      	beq.n	8009390 <__swbuf_r+0x2e>
 80093dc:	e7d6      	b.n	800938c <__swbuf_r+0x2a>
	...

080093e0 <__swsetup_r>:
 80093e0:	b538      	push	{r3, r4, r5, lr}
 80093e2:	4b29      	ldr	r3, [pc, #164]	@ (8009488 <__swsetup_r+0xa8>)
 80093e4:	4605      	mov	r5, r0
 80093e6:	6818      	ldr	r0, [r3, #0]
 80093e8:	460c      	mov	r4, r1
 80093ea:	b118      	cbz	r0, 80093f4 <__swsetup_r+0x14>
 80093ec:	6a03      	ldr	r3, [r0, #32]
 80093ee:	b90b      	cbnz	r3, 80093f4 <__swsetup_r+0x14>
 80093f0:	f7ff fece 	bl	8009190 <__sinit>
 80093f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093f8:	0719      	lsls	r1, r3, #28
 80093fa:	d422      	bmi.n	8009442 <__swsetup_r+0x62>
 80093fc:	06da      	lsls	r2, r3, #27
 80093fe:	d407      	bmi.n	8009410 <__swsetup_r+0x30>
 8009400:	2209      	movs	r2, #9
 8009402:	602a      	str	r2, [r5, #0]
 8009404:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009408:	81a3      	strh	r3, [r4, #12]
 800940a:	f04f 30ff 	mov.w	r0, #4294967295
 800940e:	e033      	b.n	8009478 <__swsetup_r+0x98>
 8009410:	0758      	lsls	r0, r3, #29
 8009412:	d512      	bpl.n	800943a <__swsetup_r+0x5a>
 8009414:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009416:	b141      	cbz	r1, 800942a <__swsetup_r+0x4a>
 8009418:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800941c:	4299      	cmp	r1, r3
 800941e:	d002      	beq.n	8009426 <__swsetup_r+0x46>
 8009420:	4628      	mov	r0, r5
 8009422:	f000 f8bf 	bl	80095a4 <_free_r>
 8009426:	2300      	movs	r3, #0
 8009428:	6363      	str	r3, [r4, #52]	@ 0x34
 800942a:	89a3      	ldrh	r3, [r4, #12]
 800942c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009430:	81a3      	strh	r3, [r4, #12]
 8009432:	2300      	movs	r3, #0
 8009434:	6063      	str	r3, [r4, #4]
 8009436:	6923      	ldr	r3, [r4, #16]
 8009438:	6023      	str	r3, [r4, #0]
 800943a:	89a3      	ldrh	r3, [r4, #12]
 800943c:	f043 0308 	orr.w	r3, r3, #8
 8009440:	81a3      	strh	r3, [r4, #12]
 8009442:	6923      	ldr	r3, [r4, #16]
 8009444:	b94b      	cbnz	r3, 800945a <__swsetup_r+0x7a>
 8009446:	89a3      	ldrh	r3, [r4, #12]
 8009448:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800944c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009450:	d003      	beq.n	800945a <__swsetup_r+0x7a>
 8009452:	4621      	mov	r1, r4
 8009454:	4628      	mov	r0, r5
 8009456:	f000 fc91 	bl	8009d7c <__smakebuf_r>
 800945a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800945e:	f013 0201 	ands.w	r2, r3, #1
 8009462:	d00a      	beq.n	800947a <__swsetup_r+0x9a>
 8009464:	2200      	movs	r2, #0
 8009466:	60a2      	str	r2, [r4, #8]
 8009468:	6962      	ldr	r2, [r4, #20]
 800946a:	4252      	negs	r2, r2
 800946c:	61a2      	str	r2, [r4, #24]
 800946e:	6922      	ldr	r2, [r4, #16]
 8009470:	b942      	cbnz	r2, 8009484 <__swsetup_r+0xa4>
 8009472:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009476:	d1c5      	bne.n	8009404 <__swsetup_r+0x24>
 8009478:	bd38      	pop	{r3, r4, r5, pc}
 800947a:	0799      	lsls	r1, r3, #30
 800947c:	bf58      	it	pl
 800947e:	6962      	ldrpl	r2, [r4, #20]
 8009480:	60a2      	str	r2, [r4, #8]
 8009482:	e7f4      	b.n	800946e <__swsetup_r+0x8e>
 8009484:	2000      	movs	r0, #0
 8009486:	e7f7      	b.n	8009478 <__swsetup_r+0x98>
 8009488:	2400004c 	.word	0x2400004c

0800948c <memset>:
 800948c:	4402      	add	r2, r0
 800948e:	4603      	mov	r3, r0
 8009490:	4293      	cmp	r3, r2
 8009492:	d100      	bne.n	8009496 <memset+0xa>
 8009494:	4770      	bx	lr
 8009496:	f803 1b01 	strb.w	r1, [r3], #1
 800949a:	e7f9      	b.n	8009490 <memset+0x4>

0800949c <_close_r>:
 800949c:	b538      	push	{r3, r4, r5, lr}
 800949e:	4d06      	ldr	r5, [pc, #24]	@ (80094b8 <_close_r+0x1c>)
 80094a0:	2300      	movs	r3, #0
 80094a2:	4604      	mov	r4, r0
 80094a4:	4608      	mov	r0, r1
 80094a6:	602b      	str	r3, [r5, #0]
 80094a8:	f7f9 fe5e 	bl	8003168 <_close>
 80094ac:	1c43      	adds	r3, r0, #1
 80094ae:	d102      	bne.n	80094b6 <_close_r+0x1a>
 80094b0:	682b      	ldr	r3, [r5, #0]
 80094b2:	b103      	cbz	r3, 80094b6 <_close_r+0x1a>
 80094b4:	6023      	str	r3, [r4, #0]
 80094b6:	bd38      	pop	{r3, r4, r5, pc}
 80094b8:	24000384 	.word	0x24000384

080094bc <_lseek_r>:
 80094bc:	b538      	push	{r3, r4, r5, lr}
 80094be:	4d07      	ldr	r5, [pc, #28]	@ (80094dc <_lseek_r+0x20>)
 80094c0:	4604      	mov	r4, r0
 80094c2:	4608      	mov	r0, r1
 80094c4:	4611      	mov	r1, r2
 80094c6:	2200      	movs	r2, #0
 80094c8:	602a      	str	r2, [r5, #0]
 80094ca:	461a      	mov	r2, r3
 80094cc:	f7f9 fe73 	bl	80031b6 <_lseek>
 80094d0:	1c43      	adds	r3, r0, #1
 80094d2:	d102      	bne.n	80094da <_lseek_r+0x1e>
 80094d4:	682b      	ldr	r3, [r5, #0]
 80094d6:	b103      	cbz	r3, 80094da <_lseek_r+0x1e>
 80094d8:	6023      	str	r3, [r4, #0]
 80094da:	bd38      	pop	{r3, r4, r5, pc}
 80094dc:	24000384 	.word	0x24000384

080094e0 <_read_r>:
 80094e0:	b538      	push	{r3, r4, r5, lr}
 80094e2:	4d07      	ldr	r5, [pc, #28]	@ (8009500 <_read_r+0x20>)
 80094e4:	4604      	mov	r4, r0
 80094e6:	4608      	mov	r0, r1
 80094e8:	4611      	mov	r1, r2
 80094ea:	2200      	movs	r2, #0
 80094ec:	602a      	str	r2, [r5, #0]
 80094ee:	461a      	mov	r2, r3
 80094f0:	f7f9 fe01 	bl	80030f6 <_read>
 80094f4:	1c43      	adds	r3, r0, #1
 80094f6:	d102      	bne.n	80094fe <_read_r+0x1e>
 80094f8:	682b      	ldr	r3, [r5, #0]
 80094fa:	b103      	cbz	r3, 80094fe <_read_r+0x1e>
 80094fc:	6023      	str	r3, [r4, #0]
 80094fe:	bd38      	pop	{r3, r4, r5, pc}
 8009500:	24000384 	.word	0x24000384

08009504 <_sbrk_r>:
 8009504:	b538      	push	{r3, r4, r5, lr}
 8009506:	4d06      	ldr	r5, [pc, #24]	@ (8009520 <_sbrk_r+0x1c>)
 8009508:	2300      	movs	r3, #0
 800950a:	4604      	mov	r4, r0
 800950c:	4608      	mov	r0, r1
 800950e:	602b      	str	r3, [r5, #0]
 8009510:	f7f9 fe5e 	bl	80031d0 <_sbrk>
 8009514:	1c43      	adds	r3, r0, #1
 8009516:	d102      	bne.n	800951e <_sbrk_r+0x1a>
 8009518:	682b      	ldr	r3, [r5, #0]
 800951a:	b103      	cbz	r3, 800951e <_sbrk_r+0x1a>
 800951c:	6023      	str	r3, [r4, #0]
 800951e:	bd38      	pop	{r3, r4, r5, pc}
 8009520:	24000384 	.word	0x24000384

08009524 <_write_r>:
 8009524:	b538      	push	{r3, r4, r5, lr}
 8009526:	4d07      	ldr	r5, [pc, #28]	@ (8009544 <_write_r+0x20>)
 8009528:	4604      	mov	r4, r0
 800952a:	4608      	mov	r0, r1
 800952c:	4611      	mov	r1, r2
 800952e:	2200      	movs	r2, #0
 8009530:	602a      	str	r2, [r5, #0]
 8009532:	461a      	mov	r2, r3
 8009534:	f7f9 fdfc 	bl	8003130 <_write>
 8009538:	1c43      	adds	r3, r0, #1
 800953a:	d102      	bne.n	8009542 <_write_r+0x1e>
 800953c:	682b      	ldr	r3, [r5, #0]
 800953e:	b103      	cbz	r3, 8009542 <_write_r+0x1e>
 8009540:	6023      	str	r3, [r4, #0]
 8009542:	bd38      	pop	{r3, r4, r5, pc}
 8009544:	24000384 	.word	0x24000384

08009548 <__errno>:
 8009548:	4b01      	ldr	r3, [pc, #4]	@ (8009550 <__errno+0x8>)
 800954a:	6818      	ldr	r0, [r3, #0]
 800954c:	4770      	bx	lr
 800954e:	bf00      	nop
 8009550:	2400004c 	.word	0x2400004c

08009554 <__libc_init_array>:
 8009554:	b570      	push	{r4, r5, r6, lr}
 8009556:	4d0d      	ldr	r5, [pc, #52]	@ (800958c <__libc_init_array+0x38>)
 8009558:	4c0d      	ldr	r4, [pc, #52]	@ (8009590 <__libc_init_array+0x3c>)
 800955a:	1b64      	subs	r4, r4, r5
 800955c:	10a4      	asrs	r4, r4, #2
 800955e:	2600      	movs	r6, #0
 8009560:	42a6      	cmp	r6, r4
 8009562:	d109      	bne.n	8009578 <__libc_init_array+0x24>
 8009564:	4d0b      	ldr	r5, [pc, #44]	@ (8009594 <__libc_init_array+0x40>)
 8009566:	4c0c      	ldr	r4, [pc, #48]	@ (8009598 <__libc_init_array+0x44>)
 8009568:	f000 fc66 	bl	8009e38 <_init>
 800956c:	1b64      	subs	r4, r4, r5
 800956e:	10a4      	asrs	r4, r4, #2
 8009570:	2600      	movs	r6, #0
 8009572:	42a6      	cmp	r6, r4
 8009574:	d105      	bne.n	8009582 <__libc_init_array+0x2e>
 8009576:	bd70      	pop	{r4, r5, r6, pc}
 8009578:	f855 3b04 	ldr.w	r3, [r5], #4
 800957c:	4798      	blx	r3
 800957e:	3601      	adds	r6, #1
 8009580:	e7ee      	b.n	8009560 <__libc_init_array+0xc>
 8009582:	f855 3b04 	ldr.w	r3, [r5], #4
 8009586:	4798      	blx	r3
 8009588:	3601      	adds	r6, #1
 800958a:	e7f2      	b.n	8009572 <__libc_init_array+0x1e>
 800958c:	080150b0 	.word	0x080150b0
 8009590:	080150b0 	.word	0x080150b0
 8009594:	080150b0 	.word	0x080150b0
 8009598:	080150b4 	.word	0x080150b4

0800959c <__retarget_lock_init_recursive>:
 800959c:	4770      	bx	lr

0800959e <__retarget_lock_acquire_recursive>:
 800959e:	4770      	bx	lr

080095a0 <__retarget_lock_release_recursive>:
 80095a0:	4770      	bx	lr
	...

080095a4 <_free_r>:
 80095a4:	b538      	push	{r3, r4, r5, lr}
 80095a6:	4605      	mov	r5, r0
 80095a8:	2900      	cmp	r1, #0
 80095aa:	d041      	beq.n	8009630 <_free_r+0x8c>
 80095ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095b0:	1f0c      	subs	r4, r1, #4
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	bfb8      	it	lt
 80095b6:	18e4      	addlt	r4, r4, r3
 80095b8:	f7ff fd52 	bl	8009060 <__malloc_lock>
 80095bc:	4a1d      	ldr	r2, [pc, #116]	@ (8009634 <_free_r+0x90>)
 80095be:	6813      	ldr	r3, [r2, #0]
 80095c0:	b933      	cbnz	r3, 80095d0 <_free_r+0x2c>
 80095c2:	6063      	str	r3, [r4, #4]
 80095c4:	6014      	str	r4, [r2, #0]
 80095c6:	4628      	mov	r0, r5
 80095c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095cc:	f7ff bd4e 	b.w	800906c <__malloc_unlock>
 80095d0:	42a3      	cmp	r3, r4
 80095d2:	d908      	bls.n	80095e6 <_free_r+0x42>
 80095d4:	6820      	ldr	r0, [r4, #0]
 80095d6:	1821      	adds	r1, r4, r0
 80095d8:	428b      	cmp	r3, r1
 80095da:	bf01      	itttt	eq
 80095dc:	6819      	ldreq	r1, [r3, #0]
 80095de:	685b      	ldreq	r3, [r3, #4]
 80095e0:	1809      	addeq	r1, r1, r0
 80095e2:	6021      	streq	r1, [r4, #0]
 80095e4:	e7ed      	b.n	80095c2 <_free_r+0x1e>
 80095e6:	461a      	mov	r2, r3
 80095e8:	685b      	ldr	r3, [r3, #4]
 80095ea:	b10b      	cbz	r3, 80095f0 <_free_r+0x4c>
 80095ec:	42a3      	cmp	r3, r4
 80095ee:	d9fa      	bls.n	80095e6 <_free_r+0x42>
 80095f0:	6811      	ldr	r1, [r2, #0]
 80095f2:	1850      	adds	r0, r2, r1
 80095f4:	42a0      	cmp	r0, r4
 80095f6:	d10b      	bne.n	8009610 <_free_r+0x6c>
 80095f8:	6820      	ldr	r0, [r4, #0]
 80095fa:	4401      	add	r1, r0
 80095fc:	1850      	adds	r0, r2, r1
 80095fe:	4283      	cmp	r3, r0
 8009600:	6011      	str	r1, [r2, #0]
 8009602:	d1e0      	bne.n	80095c6 <_free_r+0x22>
 8009604:	6818      	ldr	r0, [r3, #0]
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	6053      	str	r3, [r2, #4]
 800960a:	4408      	add	r0, r1
 800960c:	6010      	str	r0, [r2, #0]
 800960e:	e7da      	b.n	80095c6 <_free_r+0x22>
 8009610:	d902      	bls.n	8009618 <_free_r+0x74>
 8009612:	230c      	movs	r3, #12
 8009614:	602b      	str	r3, [r5, #0]
 8009616:	e7d6      	b.n	80095c6 <_free_r+0x22>
 8009618:	6820      	ldr	r0, [r4, #0]
 800961a:	1821      	adds	r1, r4, r0
 800961c:	428b      	cmp	r3, r1
 800961e:	bf04      	itt	eq
 8009620:	6819      	ldreq	r1, [r3, #0]
 8009622:	685b      	ldreq	r3, [r3, #4]
 8009624:	6063      	str	r3, [r4, #4]
 8009626:	bf04      	itt	eq
 8009628:	1809      	addeq	r1, r1, r0
 800962a:	6021      	streq	r1, [r4, #0]
 800962c:	6054      	str	r4, [r2, #4]
 800962e:	e7ca      	b.n	80095c6 <_free_r+0x22>
 8009630:	bd38      	pop	{r3, r4, r5, pc}
 8009632:	bf00      	nop
 8009634:	24000244 	.word	0x24000244

08009638 <__sfputc_r>:
 8009638:	6893      	ldr	r3, [r2, #8]
 800963a:	3b01      	subs	r3, #1
 800963c:	2b00      	cmp	r3, #0
 800963e:	b410      	push	{r4}
 8009640:	6093      	str	r3, [r2, #8]
 8009642:	da08      	bge.n	8009656 <__sfputc_r+0x1e>
 8009644:	6994      	ldr	r4, [r2, #24]
 8009646:	42a3      	cmp	r3, r4
 8009648:	db01      	blt.n	800964e <__sfputc_r+0x16>
 800964a:	290a      	cmp	r1, #10
 800964c:	d103      	bne.n	8009656 <__sfputc_r+0x1e>
 800964e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009652:	f7ff be86 	b.w	8009362 <__swbuf_r>
 8009656:	6813      	ldr	r3, [r2, #0]
 8009658:	1c58      	adds	r0, r3, #1
 800965a:	6010      	str	r0, [r2, #0]
 800965c:	7019      	strb	r1, [r3, #0]
 800965e:	4608      	mov	r0, r1
 8009660:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009664:	4770      	bx	lr

08009666 <__sfputs_r>:
 8009666:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009668:	4606      	mov	r6, r0
 800966a:	460f      	mov	r7, r1
 800966c:	4614      	mov	r4, r2
 800966e:	18d5      	adds	r5, r2, r3
 8009670:	42ac      	cmp	r4, r5
 8009672:	d101      	bne.n	8009678 <__sfputs_r+0x12>
 8009674:	2000      	movs	r0, #0
 8009676:	e007      	b.n	8009688 <__sfputs_r+0x22>
 8009678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800967c:	463a      	mov	r2, r7
 800967e:	4630      	mov	r0, r6
 8009680:	f7ff ffda 	bl	8009638 <__sfputc_r>
 8009684:	1c43      	adds	r3, r0, #1
 8009686:	d1f3      	bne.n	8009670 <__sfputs_r+0xa>
 8009688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800968c <_vfiprintf_r>:
 800968c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009690:	460d      	mov	r5, r1
 8009692:	b09d      	sub	sp, #116	@ 0x74
 8009694:	4614      	mov	r4, r2
 8009696:	4698      	mov	r8, r3
 8009698:	4606      	mov	r6, r0
 800969a:	b118      	cbz	r0, 80096a4 <_vfiprintf_r+0x18>
 800969c:	6a03      	ldr	r3, [r0, #32]
 800969e:	b90b      	cbnz	r3, 80096a4 <_vfiprintf_r+0x18>
 80096a0:	f7ff fd76 	bl	8009190 <__sinit>
 80096a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80096a6:	07d9      	lsls	r1, r3, #31
 80096a8:	d405      	bmi.n	80096b6 <_vfiprintf_r+0x2a>
 80096aa:	89ab      	ldrh	r3, [r5, #12]
 80096ac:	059a      	lsls	r2, r3, #22
 80096ae:	d402      	bmi.n	80096b6 <_vfiprintf_r+0x2a>
 80096b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80096b2:	f7ff ff74 	bl	800959e <__retarget_lock_acquire_recursive>
 80096b6:	89ab      	ldrh	r3, [r5, #12]
 80096b8:	071b      	lsls	r3, r3, #28
 80096ba:	d501      	bpl.n	80096c0 <_vfiprintf_r+0x34>
 80096bc:	692b      	ldr	r3, [r5, #16]
 80096be:	b99b      	cbnz	r3, 80096e8 <_vfiprintf_r+0x5c>
 80096c0:	4629      	mov	r1, r5
 80096c2:	4630      	mov	r0, r6
 80096c4:	f7ff fe8c 	bl	80093e0 <__swsetup_r>
 80096c8:	b170      	cbz	r0, 80096e8 <_vfiprintf_r+0x5c>
 80096ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80096cc:	07dc      	lsls	r4, r3, #31
 80096ce:	d504      	bpl.n	80096da <_vfiprintf_r+0x4e>
 80096d0:	f04f 30ff 	mov.w	r0, #4294967295
 80096d4:	b01d      	add	sp, #116	@ 0x74
 80096d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096da:	89ab      	ldrh	r3, [r5, #12]
 80096dc:	0598      	lsls	r0, r3, #22
 80096de:	d4f7      	bmi.n	80096d0 <_vfiprintf_r+0x44>
 80096e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80096e2:	f7ff ff5d 	bl	80095a0 <__retarget_lock_release_recursive>
 80096e6:	e7f3      	b.n	80096d0 <_vfiprintf_r+0x44>
 80096e8:	2300      	movs	r3, #0
 80096ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80096ec:	2320      	movs	r3, #32
 80096ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80096f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80096f6:	2330      	movs	r3, #48	@ 0x30
 80096f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80098a8 <_vfiprintf_r+0x21c>
 80096fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009700:	f04f 0901 	mov.w	r9, #1
 8009704:	4623      	mov	r3, r4
 8009706:	469a      	mov	sl, r3
 8009708:	f813 2b01 	ldrb.w	r2, [r3], #1
 800970c:	b10a      	cbz	r2, 8009712 <_vfiprintf_r+0x86>
 800970e:	2a25      	cmp	r2, #37	@ 0x25
 8009710:	d1f9      	bne.n	8009706 <_vfiprintf_r+0x7a>
 8009712:	ebba 0b04 	subs.w	fp, sl, r4
 8009716:	d00b      	beq.n	8009730 <_vfiprintf_r+0xa4>
 8009718:	465b      	mov	r3, fp
 800971a:	4622      	mov	r2, r4
 800971c:	4629      	mov	r1, r5
 800971e:	4630      	mov	r0, r6
 8009720:	f7ff ffa1 	bl	8009666 <__sfputs_r>
 8009724:	3001      	adds	r0, #1
 8009726:	f000 80a7 	beq.w	8009878 <_vfiprintf_r+0x1ec>
 800972a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800972c:	445a      	add	r2, fp
 800972e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009730:	f89a 3000 	ldrb.w	r3, [sl]
 8009734:	2b00      	cmp	r3, #0
 8009736:	f000 809f 	beq.w	8009878 <_vfiprintf_r+0x1ec>
 800973a:	2300      	movs	r3, #0
 800973c:	f04f 32ff 	mov.w	r2, #4294967295
 8009740:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009744:	f10a 0a01 	add.w	sl, sl, #1
 8009748:	9304      	str	r3, [sp, #16]
 800974a:	9307      	str	r3, [sp, #28]
 800974c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009750:	931a      	str	r3, [sp, #104]	@ 0x68
 8009752:	4654      	mov	r4, sl
 8009754:	2205      	movs	r2, #5
 8009756:	f814 1b01 	ldrb.w	r1, [r4], #1
 800975a:	4853      	ldr	r0, [pc, #332]	@ (80098a8 <_vfiprintf_r+0x21c>)
 800975c:	f7f6 fdd8 	bl	8000310 <memchr>
 8009760:	9a04      	ldr	r2, [sp, #16]
 8009762:	b9d8      	cbnz	r0, 800979c <_vfiprintf_r+0x110>
 8009764:	06d1      	lsls	r1, r2, #27
 8009766:	bf44      	itt	mi
 8009768:	2320      	movmi	r3, #32
 800976a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800976e:	0713      	lsls	r3, r2, #28
 8009770:	bf44      	itt	mi
 8009772:	232b      	movmi	r3, #43	@ 0x2b
 8009774:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009778:	f89a 3000 	ldrb.w	r3, [sl]
 800977c:	2b2a      	cmp	r3, #42	@ 0x2a
 800977e:	d015      	beq.n	80097ac <_vfiprintf_r+0x120>
 8009780:	9a07      	ldr	r2, [sp, #28]
 8009782:	4654      	mov	r4, sl
 8009784:	2000      	movs	r0, #0
 8009786:	f04f 0c0a 	mov.w	ip, #10
 800978a:	4621      	mov	r1, r4
 800978c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009790:	3b30      	subs	r3, #48	@ 0x30
 8009792:	2b09      	cmp	r3, #9
 8009794:	d94b      	bls.n	800982e <_vfiprintf_r+0x1a2>
 8009796:	b1b0      	cbz	r0, 80097c6 <_vfiprintf_r+0x13a>
 8009798:	9207      	str	r2, [sp, #28]
 800979a:	e014      	b.n	80097c6 <_vfiprintf_r+0x13a>
 800979c:	eba0 0308 	sub.w	r3, r0, r8
 80097a0:	fa09 f303 	lsl.w	r3, r9, r3
 80097a4:	4313      	orrs	r3, r2
 80097a6:	9304      	str	r3, [sp, #16]
 80097a8:	46a2      	mov	sl, r4
 80097aa:	e7d2      	b.n	8009752 <_vfiprintf_r+0xc6>
 80097ac:	9b03      	ldr	r3, [sp, #12]
 80097ae:	1d19      	adds	r1, r3, #4
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	9103      	str	r1, [sp, #12]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	bfbb      	ittet	lt
 80097b8:	425b      	neglt	r3, r3
 80097ba:	f042 0202 	orrlt.w	r2, r2, #2
 80097be:	9307      	strge	r3, [sp, #28]
 80097c0:	9307      	strlt	r3, [sp, #28]
 80097c2:	bfb8      	it	lt
 80097c4:	9204      	strlt	r2, [sp, #16]
 80097c6:	7823      	ldrb	r3, [r4, #0]
 80097c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80097ca:	d10a      	bne.n	80097e2 <_vfiprintf_r+0x156>
 80097cc:	7863      	ldrb	r3, [r4, #1]
 80097ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80097d0:	d132      	bne.n	8009838 <_vfiprintf_r+0x1ac>
 80097d2:	9b03      	ldr	r3, [sp, #12]
 80097d4:	1d1a      	adds	r2, r3, #4
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	9203      	str	r2, [sp, #12]
 80097da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80097de:	3402      	adds	r4, #2
 80097e0:	9305      	str	r3, [sp, #20]
 80097e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80098b8 <_vfiprintf_r+0x22c>
 80097e6:	7821      	ldrb	r1, [r4, #0]
 80097e8:	2203      	movs	r2, #3
 80097ea:	4650      	mov	r0, sl
 80097ec:	f7f6 fd90 	bl	8000310 <memchr>
 80097f0:	b138      	cbz	r0, 8009802 <_vfiprintf_r+0x176>
 80097f2:	9b04      	ldr	r3, [sp, #16]
 80097f4:	eba0 000a 	sub.w	r0, r0, sl
 80097f8:	2240      	movs	r2, #64	@ 0x40
 80097fa:	4082      	lsls	r2, r0
 80097fc:	4313      	orrs	r3, r2
 80097fe:	3401      	adds	r4, #1
 8009800:	9304      	str	r3, [sp, #16]
 8009802:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009806:	4829      	ldr	r0, [pc, #164]	@ (80098ac <_vfiprintf_r+0x220>)
 8009808:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800980c:	2206      	movs	r2, #6
 800980e:	f7f6 fd7f 	bl	8000310 <memchr>
 8009812:	2800      	cmp	r0, #0
 8009814:	d03f      	beq.n	8009896 <_vfiprintf_r+0x20a>
 8009816:	4b26      	ldr	r3, [pc, #152]	@ (80098b0 <_vfiprintf_r+0x224>)
 8009818:	bb1b      	cbnz	r3, 8009862 <_vfiprintf_r+0x1d6>
 800981a:	9b03      	ldr	r3, [sp, #12]
 800981c:	3307      	adds	r3, #7
 800981e:	f023 0307 	bic.w	r3, r3, #7
 8009822:	3308      	adds	r3, #8
 8009824:	9303      	str	r3, [sp, #12]
 8009826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009828:	443b      	add	r3, r7
 800982a:	9309      	str	r3, [sp, #36]	@ 0x24
 800982c:	e76a      	b.n	8009704 <_vfiprintf_r+0x78>
 800982e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009832:	460c      	mov	r4, r1
 8009834:	2001      	movs	r0, #1
 8009836:	e7a8      	b.n	800978a <_vfiprintf_r+0xfe>
 8009838:	2300      	movs	r3, #0
 800983a:	3401      	adds	r4, #1
 800983c:	9305      	str	r3, [sp, #20]
 800983e:	4619      	mov	r1, r3
 8009840:	f04f 0c0a 	mov.w	ip, #10
 8009844:	4620      	mov	r0, r4
 8009846:	f810 2b01 	ldrb.w	r2, [r0], #1
 800984a:	3a30      	subs	r2, #48	@ 0x30
 800984c:	2a09      	cmp	r2, #9
 800984e:	d903      	bls.n	8009858 <_vfiprintf_r+0x1cc>
 8009850:	2b00      	cmp	r3, #0
 8009852:	d0c6      	beq.n	80097e2 <_vfiprintf_r+0x156>
 8009854:	9105      	str	r1, [sp, #20]
 8009856:	e7c4      	b.n	80097e2 <_vfiprintf_r+0x156>
 8009858:	fb0c 2101 	mla	r1, ip, r1, r2
 800985c:	4604      	mov	r4, r0
 800985e:	2301      	movs	r3, #1
 8009860:	e7f0      	b.n	8009844 <_vfiprintf_r+0x1b8>
 8009862:	ab03      	add	r3, sp, #12
 8009864:	9300      	str	r3, [sp, #0]
 8009866:	462a      	mov	r2, r5
 8009868:	4b12      	ldr	r3, [pc, #72]	@ (80098b4 <_vfiprintf_r+0x228>)
 800986a:	a904      	add	r1, sp, #16
 800986c:	4630      	mov	r0, r6
 800986e:	f3af 8000 	nop.w
 8009872:	4607      	mov	r7, r0
 8009874:	1c78      	adds	r0, r7, #1
 8009876:	d1d6      	bne.n	8009826 <_vfiprintf_r+0x19a>
 8009878:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800987a:	07d9      	lsls	r1, r3, #31
 800987c:	d405      	bmi.n	800988a <_vfiprintf_r+0x1fe>
 800987e:	89ab      	ldrh	r3, [r5, #12]
 8009880:	059a      	lsls	r2, r3, #22
 8009882:	d402      	bmi.n	800988a <_vfiprintf_r+0x1fe>
 8009884:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009886:	f7ff fe8b 	bl	80095a0 <__retarget_lock_release_recursive>
 800988a:	89ab      	ldrh	r3, [r5, #12]
 800988c:	065b      	lsls	r3, r3, #25
 800988e:	f53f af1f 	bmi.w	80096d0 <_vfiprintf_r+0x44>
 8009892:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009894:	e71e      	b.n	80096d4 <_vfiprintf_r+0x48>
 8009896:	ab03      	add	r3, sp, #12
 8009898:	9300      	str	r3, [sp, #0]
 800989a:	462a      	mov	r2, r5
 800989c:	4b05      	ldr	r3, [pc, #20]	@ (80098b4 <_vfiprintf_r+0x228>)
 800989e:	a904      	add	r1, sp, #16
 80098a0:	4630      	mov	r0, r6
 80098a2:	f000 f879 	bl	8009998 <_printf_i>
 80098a6:	e7e4      	b.n	8009872 <_vfiprintf_r+0x1e6>
 80098a8:	08015074 	.word	0x08015074
 80098ac:	0801507e 	.word	0x0801507e
 80098b0:	00000000 	.word	0x00000000
 80098b4:	08009667 	.word	0x08009667
 80098b8:	0801507a 	.word	0x0801507a

080098bc <_printf_common>:
 80098bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098c0:	4616      	mov	r6, r2
 80098c2:	4698      	mov	r8, r3
 80098c4:	688a      	ldr	r2, [r1, #8]
 80098c6:	690b      	ldr	r3, [r1, #16]
 80098c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80098cc:	4293      	cmp	r3, r2
 80098ce:	bfb8      	it	lt
 80098d0:	4613      	movlt	r3, r2
 80098d2:	6033      	str	r3, [r6, #0]
 80098d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80098d8:	4607      	mov	r7, r0
 80098da:	460c      	mov	r4, r1
 80098dc:	b10a      	cbz	r2, 80098e2 <_printf_common+0x26>
 80098de:	3301      	adds	r3, #1
 80098e0:	6033      	str	r3, [r6, #0]
 80098e2:	6823      	ldr	r3, [r4, #0]
 80098e4:	0699      	lsls	r1, r3, #26
 80098e6:	bf42      	ittt	mi
 80098e8:	6833      	ldrmi	r3, [r6, #0]
 80098ea:	3302      	addmi	r3, #2
 80098ec:	6033      	strmi	r3, [r6, #0]
 80098ee:	6825      	ldr	r5, [r4, #0]
 80098f0:	f015 0506 	ands.w	r5, r5, #6
 80098f4:	d106      	bne.n	8009904 <_printf_common+0x48>
 80098f6:	f104 0a19 	add.w	sl, r4, #25
 80098fa:	68e3      	ldr	r3, [r4, #12]
 80098fc:	6832      	ldr	r2, [r6, #0]
 80098fe:	1a9b      	subs	r3, r3, r2
 8009900:	42ab      	cmp	r3, r5
 8009902:	dc26      	bgt.n	8009952 <_printf_common+0x96>
 8009904:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009908:	6822      	ldr	r2, [r4, #0]
 800990a:	3b00      	subs	r3, #0
 800990c:	bf18      	it	ne
 800990e:	2301      	movne	r3, #1
 8009910:	0692      	lsls	r2, r2, #26
 8009912:	d42b      	bmi.n	800996c <_printf_common+0xb0>
 8009914:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009918:	4641      	mov	r1, r8
 800991a:	4638      	mov	r0, r7
 800991c:	47c8      	blx	r9
 800991e:	3001      	adds	r0, #1
 8009920:	d01e      	beq.n	8009960 <_printf_common+0xa4>
 8009922:	6823      	ldr	r3, [r4, #0]
 8009924:	6922      	ldr	r2, [r4, #16]
 8009926:	f003 0306 	and.w	r3, r3, #6
 800992a:	2b04      	cmp	r3, #4
 800992c:	bf02      	ittt	eq
 800992e:	68e5      	ldreq	r5, [r4, #12]
 8009930:	6833      	ldreq	r3, [r6, #0]
 8009932:	1aed      	subeq	r5, r5, r3
 8009934:	68a3      	ldr	r3, [r4, #8]
 8009936:	bf0c      	ite	eq
 8009938:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800993c:	2500      	movne	r5, #0
 800993e:	4293      	cmp	r3, r2
 8009940:	bfc4      	itt	gt
 8009942:	1a9b      	subgt	r3, r3, r2
 8009944:	18ed      	addgt	r5, r5, r3
 8009946:	2600      	movs	r6, #0
 8009948:	341a      	adds	r4, #26
 800994a:	42b5      	cmp	r5, r6
 800994c:	d11a      	bne.n	8009984 <_printf_common+0xc8>
 800994e:	2000      	movs	r0, #0
 8009950:	e008      	b.n	8009964 <_printf_common+0xa8>
 8009952:	2301      	movs	r3, #1
 8009954:	4652      	mov	r2, sl
 8009956:	4641      	mov	r1, r8
 8009958:	4638      	mov	r0, r7
 800995a:	47c8      	blx	r9
 800995c:	3001      	adds	r0, #1
 800995e:	d103      	bne.n	8009968 <_printf_common+0xac>
 8009960:	f04f 30ff 	mov.w	r0, #4294967295
 8009964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009968:	3501      	adds	r5, #1
 800996a:	e7c6      	b.n	80098fa <_printf_common+0x3e>
 800996c:	18e1      	adds	r1, r4, r3
 800996e:	1c5a      	adds	r2, r3, #1
 8009970:	2030      	movs	r0, #48	@ 0x30
 8009972:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009976:	4422      	add	r2, r4
 8009978:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800997c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009980:	3302      	adds	r3, #2
 8009982:	e7c7      	b.n	8009914 <_printf_common+0x58>
 8009984:	2301      	movs	r3, #1
 8009986:	4622      	mov	r2, r4
 8009988:	4641      	mov	r1, r8
 800998a:	4638      	mov	r0, r7
 800998c:	47c8      	blx	r9
 800998e:	3001      	adds	r0, #1
 8009990:	d0e6      	beq.n	8009960 <_printf_common+0xa4>
 8009992:	3601      	adds	r6, #1
 8009994:	e7d9      	b.n	800994a <_printf_common+0x8e>
	...

08009998 <_printf_i>:
 8009998:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800999c:	7e0f      	ldrb	r7, [r1, #24]
 800999e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80099a0:	2f78      	cmp	r7, #120	@ 0x78
 80099a2:	4691      	mov	r9, r2
 80099a4:	4680      	mov	r8, r0
 80099a6:	460c      	mov	r4, r1
 80099a8:	469a      	mov	sl, r3
 80099aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80099ae:	d807      	bhi.n	80099c0 <_printf_i+0x28>
 80099b0:	2f62      	cmp	r7, #98	@ 0x62
 80099b2:	d80a      	bhi.n	80099ca <_printf_i+0x32>
 80099b4:	2f00      	cmp	r7, #0
 80099b6:	f000 80d2 	beq.w	8009b5e <_printf_i+0x1c6>
 80099ba:	2f58      	cmp	r7, #88	@ 0x58
 80099bc:	f000 80b9 	beq.w	8009b32 <_printf_i+0x19a>
 80099c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80099c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80099c8:	e03a      	b.n	8009a40 <_printf_i+0xa8>
 80099ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80099ce:	2b15      	cmp	r3, #21
 80099d0:	d8f6      	bhi.n	80099c0 <_printf_i+0x28>
 80099d2:	a101      	add	r1, pc, #4	@ (adr r1, 80099d8 <_printf_i+0x40>)
 80099d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80099d8:	08009a31 	.word	0x08009a31
 80099dc:	08009a45 	.word	0x08009a45
 80099e0:	080099c1 	.word	0x080099c1
 80099e4:	080099c1 	.word	0x080099c1
 80099e8:	080099c1 	.word	0x080099c1
 80099ec:	080099c1 	.word	0x080099c1
 80099f0:	08009a45 	.word	0x08009a45
 80099f4:	080099c1 	.word	0x080099c1
 80099f8:	080099c1 	.word	0x080099c1
 80099fc:	080099c1 	.word	0x080099c1
 8009a00:	080099c1 	.word	0x080099c1
 8009a04:	08009b45 	.word	0x08009b45
 8009a08:	08009a6f 	.word	0x08009a6f
 8009a0c:	08009aff 	.word	0x08009aff
 8009a10:	080099c1 	.word	0x080099c1
 8009a14:	080099c1 	.word	0x080099c1
 8009a18:	08009b67 	.word	0x08009b67
 8009a1c:	080099c1 	.word	0x080099c1
 8009a20:	08009a6f 	.word	0x08009a6f
 8009a24:	080099c1 	.word	0x080099c1
 8009a28:	080099c1 	.word	0x080099c1
 8009a2c:	08009b07 	.word	0x08009b07
 8009a30:	6833      	ldr	r3, [r6, #0]
 8009a32:	1d1a      	adds	r2, r3, #4
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	6032      	str	r2, [r6, #0]
 8009a38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009a40:	2301      	movs	r3, #1
 8009a42:	e09d      	b.n	8009b80 <_printf_i+0x1e8>
 8009a44:	6833      	ldr	r3, [r6, #0]
 8009a46:	6820      	ldr	r0, [r4, #0]
 8009a48:	1d19      	adds	r1, r3, #4
 8009a4a:	6031      	str	r1, [r6, #0]
 8009a4c:	0606      	lsls	r6, r0, #24
 8009a4e:	d501      	bpl.n	8009a54 <_printf_i+0xbc>
 8009a50:	681d      	ldr	r5, [r3, #0]
 8009a52:	e003      	b.n	8009a5c <_printf_i+0xc4>
 8009a54:	0645      	lsls	r5, r0, #25
 8009a56:	d5fb      	bpl.n	8009a50 <_printf_i+0xb8>
 8009a58:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009a5c:	2d00      	cmp	r5, #0
 8009a5e:	da03      	bge.n	8009a68 <_printf_i+0xd0>
 8009a60:	232d      	movs	r3, #45	@ 0x2d
 8009a62:	426d      	negs	r5, r5
 8009a64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a68:	4859      	ldr	r0, [pc, #356]	@ (8009bd0 <_printf_i+0x238>)
 8009a6a:	230a      	movs	r3, #10
 8009a6c:	e011      	b.n	8009a92 <_printf_i+0xfa>
 8009a6e:	6821      	ldr	r1, [r4, #0]
 8009a70:	6833      	ldr	r3, [r6, #0]
 8009a72:	0608      	lsls	r0, r1, #24
 8009a74:	f853 5b04 	ldr.w	r5, [r3], #4
 8009a78:	d402      	bmi.n	8009a80 <_printf_i+0xe8>
 8009a7a:	0649      	lsls	r1, r1, #25
 8009a7c:	bf48      	it	mi
 8009a7e:	b2ad      	uxthmi	r5, r5
 8009a80:	2f6f      	cmp	r7, #111	@ 0x6f
 8009a82:	4853      	ldr	r0, [pc, #332]	@ (8009bd0 <_printf_i+0x238>)
 8009a84:	6033      	str	r3, [r6, #0]
 8009a86:	bf14      	ite	ne
 8009a88:	230a      	movne	r3, #10
 8009a8a:	2308      	moveq	r3, #8
 8009a8c:	2100      	movs	r1, #0
 8009a8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009a92:	6866      	ldr	r6, [r4, #4]
 8009a94:	60a6      	str	r6, [r4, #8]
 8009a96:	2e00      	cmp	r6, #0
 8009a98:	bfa2      	ittt	ge
 8009a9a:	6821      	ldrge	r1, [r4, #0]
 8009a9c:	f021 0104 	bicge.w	r1, r1, #4
 8009aa0:	6021      	strge	r1, [r4, #0]
 8009aa2:	b90d      	cbnz	r5, 8009aa8 <_printf_i+0x110>
 8009aa4:	2e00      	cmp	r6, #0
 8009aa6:	d04b      	beq.n	8009b40 <_printf_i+0x1a8>
 8009aa8:	4616      	mov	r6, r2
 8009aaa:	fbb5 f1f3 	udiv	r1, r5, r3
 8009aae:	fb03 5711 	mls	r7, r3, r1, r5
 8009ab2:	5dc7      	ldrb	r7, [r0, r7]
 8009ab4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009ab8:	462f      	mov	r7, r5
 8009aba:	42bb      	cmp	r3, r7
 8009abc:	460d      	mov	r5, r1
 8009abe:	d9f4      	bls.n	8009aaa <_printf_i+0x112>
 8009ac0:	2b08      	cmp	r3, #8
 8009ac2:	d10b      	bne.n	8009adc <_printf_i+0x144>
 8009ac4:	6823      	ldr	r3, [r4, #0]
 8009ac6:	07df      	lsls	r7, r3, #31
 8009ac8:	d508      	bpl.n	8009adc <_printf_i+0x144>
 8009aca:	6923      	ldr	r3, [r4, #16]
 8009acc:	6861      	ldr	r1, [r4, #4]
 8009ace:	4299      	cmp	r1, r3
 8009ad0:	bfde      	ittt	le
 8009ad2:	2330      	movle	r3, #48	@ 0x30
 8009ad4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009ad8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009adc:	1b92      	subs	r2, r2, r6
 8009ade:	6122      	str	r2, [r4, #16]
 8009ae0:	f8cd a000 	str.w	sl, [sp]
 8009ae4:	464b      	mov	r3, r9
 8009ae6:	aa03      	add	r2, sp, #12
 8009ae8:	4621      	mov	r1, r4
 8009aea:	4640      	mov	r0, r8
 8009aec:	f7ff fee6 	bl	80098bc <_printf_common>
 8009af0:	3001      	adds	r0, #1
 8009af2:	d14a      	bne.n	8009b8a <_printf_i+0x1f2>
 8009af4:	f04f 30ff 	mov.w	r0, #4294967295
 8009af8:	b004      	add	sp, #16
 8009afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009afe:	6823      	ldr	r3, [r4, #0]
 8009b00:	f043 0320 	orr.w	r3, r3, #32
 8009b04:	6023      	str	r3, [r4, #0]
 8009b06:	4833      	ldr	r0, [pc, #204]	@ (8009bd4 <_printf_i+0x23c>)
 8009b08:	2778      	movs	r7, #120	@ 0x78
 8009b0a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009b0e:	6823      	ldr	r3, [r4, #0]
 8009b10:	6831      	ldr	r1, [r6, #0]
 8009b12:	061f      	lsls	r7, r3, #24
 8009b14:	f851 5b04 	ldr.w	r5, [r1], #4
 8009b18:	d402      	bmi.n	8009b20 <_printf_i+0x188>
 8009b1a:	065f      	lsls	r7, r3, #25
 8009b1c:	bf48      	it	mi
 8009b1e:	b2ad      	uxthmi	r5, r5
 8009b20:	6031      	str	r1, [r6, #0]
 8009b22:	07d9      	lsls	r1, r3, #31
 8009b24:	bf44      	itt	mi
 8009b26:	f043 0320 	orrmi.w	r3, r3, #32
 8009b2a:	6023      	strmi	r3, [r4, #0]
 8009b2c:	b11d      	cbz	r5, 8009b36 <_printf_i+0x19e>
 8009b2e:	2310      	movs	r3, #16
 8009b30:	e7ac      	b.n	8009a8c <_printf_i+0xf4>
 8009b32:	4827      	ldr	r0, [pc, #156]	@ (8009bd0 <_printf_i+0x238>)
 8009b34:	e7e9      	b.n	8009b0a <_printf_i+0x172>
 8009b36:	6823      	ldr	r3, [r4, #0]
 8009b38:	f023 0320 	bic.w	r3, r3, #32
 8009b3c:	6023      	str	r3, [r4, #0]
 8009b3e:	e7f6      	b.n	8009b2e <_printf_i+0x196>
 8009b40:	4616      	mov	r6, r2
 8009b42:	e7bd      	b.n	8009ac0 <_printf_i+0x128>
 8009b44:	6833      	ldr	r3, [r6, #0]
 8009b46:	6825      	ldr	r5, [r4, #0]
 8009b48:	6961      	ldr	r1, [r4, #20]
 8009b4a:	1d18      	adds	r0, r3, #4
 8009b4c:	6030      	str	r0, [r6, #0]
 8009b4e:	062e      	lsls	r6, r5, #24
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	d501      	bpl.n	8009b58 <_printf_i+0x1c0>
 8009b54:	6019      	str	r1, [r3, #0]
 8009b56:	e002      	b.n	8009b5e <_printf_i+0x1c6>
 8009b58:	0668      	lsls	r0, r5, #25
 8009b5a:	d5fb      	bpl.n	8009b54 <_printf_i+0x1bc>
 8009b5c:	8019      	strh	r1, [r3, #0]
 8009b5e:	2300      	movs	r3, #0
 8009b60:	6123      	str	r3, [r4, #16]
 8009b62:	4616      	mov	r6, r2
 8009b64:	e7bc      	b.n	8009ae0 <_printf_i+0x148>
 8009b66:	6833      	ldr	r3, [r6, #0]
 8009b68:	1d1a      	adds	r2, r3, #4
 8009b6a:	6032      	str	r2, [r6, #0]
 8009b6c:	681e      	ldr	r6, [r3, #0]
 8009b6e:	6862      	ldr	r2, [r4, #4]
 8009b70:	2100      	movs	r1, #0
 8009b72:	4630      	mov	r0, r6
 8009b74:	f7f6 fbcc 	bl	8000310 <memchr>
 8009b78:	b108      	cbz	r0, 8009b7e <_printf_i+0x1e6>
 8009b7a:	1b80      	subs	r0, r0, r6
 8009b7c:	6060      	str	r0, [r4, #4]
 8009b7e:	6863      	ldr	r3, [r4, #4]
 8009b80:	6123      	str	r3, [r4, #16]
 8009b82:	2300      	movs	r3, #0
 8009b84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b88:	e7aa      	b.n	8009ae0 <_printf_i+0x148>
 8009b8a:	6923      	ldr	r3, [r4, #16]
 8009b8c:	4632      	mov	r2, r6
 8009b8e:	4649      	mov	r1, r9
 8009b90:	4640      	mov	r0, r8
 8009b92:	47d0      	blx	sl
 8009b94:	3001      	adds	r0, #1
 8009b96:	d0ad      	beq.n	8009af4 <_printf_i+0x15c>
 8009b98:	6823      	ldr	r3, [r4, #0]
 8009b9a:	079b      	lsls	r3, r3, #30
 8009b9c:	d413      	bmi.n	8009bc6 <_printf_i+0x22e>
 8009b9e:	68e0      	ldr	r0, [r4, #12]
 8009ba0:	9b03      	ldr	r3, [sp, #12]
 8009ba2:	4298      	cmp	r0, r3
 8009ba4:	bfb8      	it	lt
 8009ba6:	4618      	movlt	r0, r3
 8009ba8:	e7a6      	b.n	8009af8 <_printf_i+0x160>
 8009baa:	2301      	movs	r3, #1
 8009bac:	4632      	mov	r2, r6
 8009bae:	4649      	mov	r1, r9
 8009bb0:	4640      	mov	r0, r8
 8009bb2:	47d0      	blx	sl
 8009bb4:	3001      	adds	r0, #1
 8009bb6:	d09d      	beq.n	8009af4 <_printf_i+0x15c>
 8009bb8:	3501      	adds	r5, #1
 8009bba:	68e3      	ldr	r3, [r4, #12]
 8009bbc:	9903      	ldr	r1, [sp, #12]
 8009bbe:	1a5b      	subs	r3, r3, r1
 8009bc0:	42ab      	cmp	r3, r5
 8009bc2:	dcf2      	bgt.n	8009baa <_printf_i+0x212>
 8009bc4:	e7eb      	b.n	8009b9e <_printf_i+0x206>
 8009bc6:	2500      	movs	r5, #0
 8009bc8:	f104 0619 	add.w	r6, r4, #25
 8009bcc:	e7f5      	b.n	8009bba <_printf_i+0x222>
 8009bce:	bf00      	nop
 8009bd0:	08015085 	.word	0x08015085
 8009bd4:	08015096 	.word	0x08015096

08009bd8 <__sflush_r>:
 8009bd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009be0:	0716      	lsls	r6, r2, #28
 8009be2:	4605      	mov	r5, r0
 8009be4:	460c      	mov	r4, r1
 8009be6:	d454      	bmi.n	8009c92 <__sflush_r+0xba>
 8009be8:	684b      	ldr	r3, [r1, #4]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	dc02      	bgt.n	8009bf4 <__sflush_r+0x1c>
 8009bee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	dd48      	ble.n	8009c86 <__sflush_r+0xae>
 8009bf4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009bf6:	2e00      	cmp	r6, #0
 8009bf8:	d045      	beq.n	8009c86 <__sflush_r+0xae>
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009c00:	682f      	ldr	r7, [r5, #0]
 8009c02:	6a21      	ldr	r1, [r4, #32]
 8009c04:	602b      	str	r3, [r5, #0]
 8009c06:	d030      	beq.n	8009c6a <__sflush_r+0x92>
 8009c08:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009c0a:	89a3      	ldrh	r3, [r4, #12]
 8009c0c:	0759      	lsls	r1, r3, #29
 8009c0e:	d505      	bpl.n	8009c1c <__sflush_r+0x44>
 8009c10:	6863      	ldr	r3, [r4, #4]
 8009c12:	1ad2      	subs	r2, r2, r3
 8009c14:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009c16:	b10b      	cbz	r3, 8009c1c <__sflush_r+0x44>
 8009c18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009c1a:	1ad2      	subs	r2, r2, r3
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009c20:	6a21      	ldr	r1, [r4, #32]
 8009c22:	4628      	mov	r0, r5
 8009c24:	47b0      	blx	r6
 8009c26:	1c43      	adds	r3, r0, #1
 8009c28:	89a3      	ldrh	r3, [r4, #12]
 8009c2a:	d106      	bne.n	8009c3a <__sflush_r+0x62>
 8009c2c:	6829      	ldr	r1, [r5, #0]
 8009c2e:	291d      	cmp	r1, #29
 8009c30:	d82b      	bhi.n	8009c8a <__sflush_r+0xb2>
 8009c32:	4a2a      	ldr	r2, [pc, #168]	@ (8009cdc <__sflush_r+0x104>)
 8009c34:	410a      	asrs	r2, r1
 8009c36:	07d6      	lsls	r6, r2, #31
 8009c38:	d427      	bmi.n	8009c8a <__sflush_r+0xb2>
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	6062      	str	r2, [r4, #4]
 8009c3e:	04d9      	lsls	r1, r3, #19
 8009c40:	6922      	ldr	r2, [r4, #16]
 8009c42:	6022      	str	r2, [r4, #0]
 8009c44:	d504      	bpl.n	8009c50 <__sflush_r+0x78>
 8009c46:	1c42      	adds	r2, r0, #1
 8009c48:	d101      	bne.n	8009c4e <__sflush_r+0x76>
 8009c4a:	682b      	ldr	r3, [r5, #0]
 8009c4c:	b903      	cbnz	r3, 8009c50 <__sflush_r+0x78>
 8009c4e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009c50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c52:	602f      	str	r7, [r5, #0]
 8009c54:	b1b9      	cbz	r1, 8009c86 <__sflush_r+0xae>
 8009c56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c5a:	4299      	cmp	r1, r3
 8009c5c:	d002      	beq.n	8009c64 <__sflush_r+0x8c>
 8009c5e:	4628      	mov	r0, r5
 8009c60:	f7ff fca0 	bl	80095a4 <_free_r>
 8009c64:	2300      	movs	r3, #0
 8009c66:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c68:	e00d      	b.n	8009c86 <__sflush_r+0xae>
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	4628      	mov	r0, r5
 8009c6e:	47b0      	blx	r6
 8009c70:	4602      	mov	r2, r0
 8009c72:	1c50      	adds	r0, r2, #1
 8009c74:	d1c9      	bne.n	8009c0a <__sflush_r+0x32>
 8009c76:	682b      	ldr	r3, [r5, #0]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d0c6      	beq.n	8009c0a <__sflush_r+0x32>
 8009c7c:	2b1d      	cmp	r3, #29
 8009c7e:	d001      	beq.n	8009c84 <__sflush_r+0xac>
 8009c80:	2b16      	cmp	r3, #22
 8009c82:	d11e      	bne.n	8009cc2 <__sflush_r+0xea>
 8009c84:	602f      	str	r7, [r5, #0]
 8009c86:	2000      	movs	r0, #0
 8009c88:	e022      	b.n	8009cd0 <__sflush_r+0xf8>
 8009c8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c8e:	b21b      	sxth	r3, r3
 8009c90:	e01b      	b.n	8009cca <__sflush_r+0xf2>
 8009c92:	690f      	ldr	r7, [r1, #16]
 8009c94:	2f00      	cmp	r7, #0
 8009c96:	d0f6      	beq.n	8009c86 <__sflush_r+0xae>
 8009c98:	0793      	lsls	r3, r2, #30
 8009c9a:	680e      	ldr	r6, [r1, #0]
 8009c9c:	bf08      	it	eq
 8009c9e:	694b      	ldreq	r3, [r1, #20]
 8009ca0:	600f      	str	r7, [r1, #0]
 8009ca2:	bf18      	it	ne
 8009ca4:	2300      	movne	r3, #0
 8009ca6:	eba6 0807 	sub.w	r8, r6, r7
 8009caa:	608b      	str	r3, [r1, #8]
 8009cac:	f1b8 0f00 	cmp.w	r8, #0
 8009cb0:	dde9      	ble.n	8009c86 <__sflush_r+0xae>
 8009cb2:	6a21      	ldr	r1, [r4, #32]
 8009cb4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009cb6:	4643      	mov	r3, r8
 8009cb8:	463a      	mov	r2, r7
 8009cba:	4628      	mov	r0, r5
 8009cbc:	47b0      	blx	r6
 8009cbe:	2800      	cmp	r0, #0
 8009cc0:	dc08      	bgt.n	8009cd4 <__sflush_r+0xfc>
 8009cc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cca:	81a3      	strh	r3, [r4, #12]
 8009ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8009cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cd4:	4407      	add	r7, r0
 8009cd6:	eba8 0800 	sub.w	r8, r8, r0
 8009cda:	e7e7      	b.n	8009cac <__sflush_r+0xd4>
 8009cdc:	dfbffffe 	.word	0xdfbffffe

08009ce0 <_fflush_r>:
 8009ce0:	b538      	push	{r3, r4, r5, lr}
 8009ce2:	690b      	ldr	r3, [r1, #16]
 8009ce4:	4605      	mov	r5, r0
 8009ce6:	460c      	mov	r4, r1
 8009ce8:	b913      	cbnz	r3, 8009cf0 <_fflush_r+0x10>
 8009cea:	2500      	movs	r5, #0
 8009cec:	4628      	mov	r0, r5
 8009cee:	bd38      	pop	{r3, r4, r5, pc}
 8009cf0:	b118      	cbz	r0, 8009cfa <_fflush_r+0x1a>
 8009cf2:	6a03      	ldr	r3, [r0, #32]
 8009cf4:	b90b      	cbnz	r3, 8009cfa <_fflush_r+0x1a>
 8009cf6:	f7ff fa4b 	bl	8009190 <__sinit>
 8009cfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d0f3      	beq.n	8009cea <_fflush_r+0xa>
 8009d02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009d04:	07d0      	lsls	r0, r2, #31
 8009d06:	d404      	bmi.n	8009d12 <_fflush_r+0x32>
 8009d08:	0599      	lsls	r1, r3, #22
 8009d0a:	d402      	bmi.n	8009d12 <_fflush_r+0x32>
 8009d0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d0e:	f7ff fc46 	bl	800959e <__retarget_lock_acquire_recursive>
 8009d12:	4628      	mov	r0, r5
 8009d14:	4621      	mov	r1, r4
 8009d16:	f7ff ff5f 	bl	8009bd8 <__sflush_r>
 8009d1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009d1c:	07da      	lsls	r2, r3, #31
 8009d1e:	4605      	mov	r5, r0
 8009d20:	d4e4      	bmi.n	8009cec <_fflush_r+0xc>
 8009d22:	89a3      	ldrh	r3, [r4, #12]
 8009d24:	059b      	lsls	r3, r3, #22
 8009d26:	d4e1      	bmi.n	8009cec <_fflush_r+0xc>
 8009d28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d2a:	f7ff fc39 	bl	80095a0 <__retarget_lock_release_recursive>
 8009d2e:	e7dd      	b.n	8009cec <_fflush_r+0xc>

08009d30 <__swhatbuf_r>:
 8009d30:	b570      	push	{r4, r5, r6, lr}
 8009d32:	460c      	mov	r4, r1
 8009d34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d38:	2900      	cmp	r1, #0
 8009d3a:	b096      	sub	sp, #88	@ 0x58
 8009d3c:	4615      	mov	r5, r2
 8009d3e:	461e      	mov	r6, r3
 8009d40:	da0d      	bge.n	8009d5e <__swhatbuf_r+0x2e>
 8009d42:	89a3      	ldrh	r3, [r4, #12]
 8009d44:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009d48:	f04f 0100 	mov.w	r1, #0
 8009d4c:	bf14      	ite	ne
 8009d4e:	2340      	movne	r3, #64	@ 0x40
 8009d50:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009d54:	2000      	movs	r0, #0
 8009d56:	6031      	str	r1, [r6, #0]
 8009d58:	602b      	str	r3, [r5, #0]
 8009d5a:	b016      	add	sp, #88	@ 0x58
 8009d5c:	bd70      	pop	{r4, r5, r6, pc}
 8009d5e:	466a      	mov	r2, sp
 8009d60:	f000 f848 	bl	8009df4 <_fstat_r>
 8009d64:	2800      	cmp	r0, #0
 8009d66:	dbec      	blt.n	8009d42 <__swhatbuf_r+0x12>
 8009d68:	9901      	ldr	r1, [sp, #4]
 8009d6a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009d6e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009d72:	4259      	negs	r1, r3
 8009d74:	4159      	adcs	r1, r3
 8009d76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d7a:	e7eb      	b.n	8009d54 <__swhatbuf_r+0x24>

08009d7c <__smakebuf_r>:
 8009d7c:	898b      	ldrh	r3, [r1, #12]
 8009d7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d80:	079d      	lsls	r5, r3, #30
 8009d82:	4606      	mov	r6, r0
 8009d84:	460c      	mov	r4, r1
 8009d86:	d507      	bpl.n	8009d98 <__smakebuf_r+0x1c>
 8009d88:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009d8c:	6023      	str	r3, [r4, #0]
 8009d8e:	6123      	str	r3, [r4, #16]
 8009d90:	2301      	movs	r3, #1
 8009d92:	6163      	str	r3, [r4, #20]
 8009d94:	b003      	add	sp, #12
 8009d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d98:	ab01      	add	r3, sp, #4
 8009d9a:	466a      	mov	r2, sp
 8009d9c:	f7ff ffc8 	bl	8009d30 <__swhatbuf_r>
 8009da0:	9f00      	ldr	r7, [sp, #0]
 8009da2:	4605      	mov	r5, r0
 8009da4:	4639      	mov	r1, r7
 8009da6:	4630      	mov	r0, r6
 8009da8:	f7ff f8da 	bl	8008f60 <_malloc_r>
 8009dac:	b948      	cbnz	r0, 8009dc2 <__smakebuf_r+0x46>
 8009dae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009db2:	059a      	lsls	r2, r3, #22
 8009db4:	d4ee      	bmi.n	8009d94 <__smakebuf_r+0x18>
 8009db6:	f023 0303 	bic.w	r3, r3, #3
 8009dba:	f043 0302 	orr.w	r3, r3, #2
 8009dbe:	81a3      	strh	r3, [r4, #12]
 8009dc0:	e7e2      	b.n	8009d88 <__smakebuf_r+0xc>
 8009dc2:	89a3      	ldrh	r3, [r4, #12]
 8009dc4:	6020      	str	r0, [r4, #0]
 8009dc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009dca:	81a3      	strh	r3, [r4, #12]
 8009dcc:	9b01      	ldr	r3, [sp, #4]
 8009dce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009dd2:	b15b      	cbz	r3, 8009dec <__smakebuf_r+0x70>
 8009dd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009dd8:	4630      	mov	r0, r6
 8009dda:	f000 f81d 	bl	8009e18 <_isatty_r>
 8009dde:	b128      	cbz	r0, 8009dec <__smakebuf_r+0x70>
 8009de0:	89a3      	ldrh	r3, [r4, #12]
 8009de2:	f023 0303 	bic.w	r3, r3, #3
 8009de6:	f043 0301 	orr.w	r3, r3, #1
 8009dea:	81a3      	strh	r3, [r4, #12]
 8009dec:	89a3      	ldrh	r3, [r4, #12]
 8009dee:	431d      	orrs	r5, r3
 8009df0:	81a5      	strh	r5, [r4, #12]
 8009df2:	e7cf      	b.n	8009d94 <__smakebuf_r+0x18>

08009df4 <_fstat_r>:
 8009df4:	b538      	push	{r3, r4, r5, lr}
 8009df6:	4d07      	ldr	r5, [pc, #28]	@ (8009e14 <_fstat_r+0x20>)
 8009df8:	2300      	movs	r3, #0
 8009dfa:	4604      	mov	r4, r0
 8009dfc:	4608      	mov	r0, r1
 8009dfe:	4611      	mov	r1, r2
 8009e00:	602b      	str	r3, [r5, #0]
 8009e02:	f7f9 f9bd 	bl	8003180 <_fstat>
 8009e06:	1c43      	adds	r3, r0, #1
 8009e08:	d102      	bne.n	8009e10 <_fstat_r+0x1c>
 8009e0a:	682b      	ldr	r3, [r5, #0]
 8009e0c:	b103      	cbz	r3, 8009e10 <_fstat_r+0x1c>
 8009e0e:	6023      	str	r3, [r4, #0]
 8009e10:	bd38      	pop	{r3, r4, r5, pc}
 8009e12:	bf00      	nop
 8009e14:	24000384 	.word	0x24000384

08009e18 <_isatty_r>:
 8009e18:	b538      	push	{r3, r4, r5, lr}
 8009e1a:	4d06      	ldr	r5, [pc, #24]	@ (8009e34 <_isatty_r+0x1c>)
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	4604      	mov	r4, r0
 8009e20:	4608      	mov	r0, r1
 8009e22:	602b      	str	r3, [r5, #0]
 8009e24:	f7f9 f9bc 	bl	80031a0 <_isatty>
 8009e28:	1c43      	adds	r3, r0, #1
 8009e2a:	d102      	bne.n	8009e32 <_isatty_r+0x1a>
 8009e2c:	682b      	ldr	r3, [r5, #0]
 8009e2e:	b103      	cbz	r3, 8009e32 <_isatty_r+0x1a>
 8009e30:	6023      	str	r3, [r4, #0]
 8009e32:	bd38      	pop	{r3, r4, r5, pc}
 8009e34:	24000384 	.word	0x24000384

08009e38 <_init>:
 8009e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e3a:	bf00      	nop
 8009e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e3e:	bc08      	pop	{r3}
 8009e40:	469e      	mov	lr, r3
 8009e42:	4770      	bx	lr

08009e44 <_fini>:
 8009e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e46:	bf00      	nop
 8009e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e4a:	bc08      	pop	{r3}
 8009e4c:	469e      	mov	lr, r3
 8009e4e:	4770      	bx	lr

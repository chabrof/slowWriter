
STM32H7v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ae0  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b58  08008db0  08008db0  00009db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b908  0800b908  0000c908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b910  0800b910  0000c910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b914  0800b914  0000c914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000070  24000000  0800b918  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003d84  24000070  0800b988  0000d070  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24003df4  0800b988  0000ddf4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d070  2**0
                  CONTENTS, READONLY
 10 .debug_info   000176c4  00000000  00000000  0000d09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002b4a  00000000  00000000  00024762  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000013c8  00000000  00000000  000272b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000f6d  00000000  00000000  00028678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00003e22  00000000  00000000  000295e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00018ca6  00000000  00000000  0002d407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015353f  00000000  00000000  000460ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001995ec  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005de4  00000000  00000000  00199630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000065  00000000  00000000  0019f414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000070 	.word	0x24000070
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08008d98 	.word	0x08008d98

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000074 	.word	0x24000074
 800030c:	08008d98 	.word	0x08008d98

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <epd_delay>:
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x0, 0x0, 0x0,
};*/

void epd_delay(uint16_t ms)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	80fb      	strh	r3, [r7, #6]
  HAL_Delay(ms);
 80006aa:	88fb      	ldrh	r3, [r7, #6]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f001 fcd5 	bl	800205c <HAL_Delay>
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
	...

080006bc <epd_res_set>:

void epd_res_set()
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, SPI2_RESET_Pin, GPIO_PIN_SET);
 80006c0:	2201      	movs	r2, #1
 80006c2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006c6:	4802      	ldr	r0, [pc, #8]	@ (80006d0 <epd_res_set+0x14>)
 80006c8:	f002 f808 	bl	80026dc <HAL_GPIO_WritePin>
  //GPIO_SetBits(GPIOA, GPIO_Pin_8);
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	58020400 	.word	0x58020400

080006d4 <epd_res_reset>:

void epd_res_reset()
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, SPI2_RESET_Pin, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006de:	4802      	ldr	r0, [pc, #8]	@ (80006e8 <epd_res_reset+0x14>)
 80006e0:	f001 fffc 	bl	80026dc <HAL_GPIO_WritePin>
  //GPIO_ResetBits(GPIOA, GPIO_Pin_8);
}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	58020400 	.word	0x58020400

080006ec <epd_dc_set>:

void epd_dc_set()
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 80006f0:	2201      	movs	r2, #1
 80006f2:	2102      	movs	r1, #2
 80006f4:	4802      	ldr	r0, [pc, #8]	@ (8000700 <epd_dc_set+0x14>)
 80006f6:	f001 fff1 	bl	80026dc <HAL_GPIO_WritePin>
  //GPIO_SetBits(GPIOB, GPIO_Pin_14);
}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	58020400 	.word	0x58020400

08000704 <epd_dc_reset>:

void epd_dc_reset()
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	2102      	movs	r1, #2
 800070c:	4802      	ldr	r0, [pc, #8]	@ (8000718 <epd_dc_reset+0x14>)
 800070e:	f001 ffe5 	bl	80026dc <HAL_GPIO_WritePin>
  //GPIO_ResetBits(GPIOB, GPIO_Pin_14);
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	58020400 	.word	0x58020400

0800071c <epd_cs_set>:

void epd_cs_set()
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 8000720:	2201      	movs	r2, #1
 8000722:	2104      	movs	r1, #4
 8000724:	4802      	ldr	r0, [pc, #8]	@ (8000730 <epd_cs_set+0x14>)
 8000726:	f001 ffd9 	bl	80026dc <HAL_GPIO_WritePin>
  //GPIO_SetBits(GPIOB, GPIO_Pin_12);
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	58020400 	.word	0x58020400

08000734 <epd_cs_reset>:

void epd_cs_reset()
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000738:	2200      	movs	r2, #0
 800073a:	2104      	movs	r1, #4
 800073c:	4802      	ldr	r0, [pc, #8]	@ (8000748 <epd_cs_reset+0x14>)
 800073e:	f001 ffcd 	bl	80026dc <HAL_GPIO_WritePin>
  //GPIO_ResetBits(GPIOB, GPIO_Pin_12);
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	58020400 	.word	0x58020400

0800074c <epd_is_busy>:

uint8_t epd_is_busy()
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin (SPI2_BUSY_GPIO_Port, SPI2_BUSY_Pin);
 8000750:	2101      	movs	r1, #1
 8000752:	4803      	ldr	r0, [pc, #12]	@ (8000760 <epd_is_busy+0x14>)
 8000754:	f001 ffaa 	bl	80026ac <HAL_GPIO_ReadPin>
 8000758:	4603      	mov	r3, r0
  //return GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_15) == Bit_RESET ? 0 : 1;
}
 800075a:	4618      	mov	r0, r3
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	58020400 	.word	0x58020400

08000764 <epd_write_reg>:

void epd_write_reg(uint8_t reg)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
  epd_dc_reset();
 800076e:	f7ff ffc9 	bl	8000704 <epd_dc_reset>
  epd_cs_reset();
 8000772:	f7ff ffdf 	bl	8000734 <epd_cs_reset>

  //SPI_I2S_SendData(SPI2, reg);
  //while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) != RESET)
  //  ;
  _epd_write_data(reg);
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	4618      	mov	r0, r3
 800077a:	f000 f819 	bl	80007b0 <_epd_write_data>
  //HAL_SPI_Transmit(&hspi2, &reg, 1, 1000);
  epd_cs_set();
 800077e:	f7ff ffcd 	bl	800071c <epd_cs_set>
  epd_dc_set();
 8000782:	f7ff ffb3 	bl	80006ec <epd_dc_set>
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <epd_write_data>:

void epd_write_data(uint8_t data)
{
 800078e:	b580      	push	{r7, lr}
 8000790:	b082      	sub	sp, #8
 8000792:	af00      	add	r7, sp, #0
 8000794:	4603      	mov	r3, r0
 8000796:	71fb      	strb	r3, [r7, #7]
  epd_cs_reset();
 8000798:	f7ff ffcc 	bl	8000734 <epd_cs_reset>
  _epd_write_data(data);
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 f806 	bl	80007b0 <_epd_write_data>
  //HAL_SPI_Transmit(&hspi2, &data, 1, 1000);
  //SPI_I2S_SendData(SPI2, data);
  //while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) != RESET)
  //  ;

  epd_cs_set();
 80007a4:	f7ff ffba 	bl	800071c <epd_cs_set>
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <_epd_write_data>:

void _epd_write_data(uint8_t data)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	71fb      	strb	r3, [r7, #7]
  if (HAL_SPI_Transmit(&hspi2, &data, 1, 1000) != HAL_OK)
 80007ba:	1df9      	adds	r1, r7, #7
 80007bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007c0:	2201      	movs	r2, #1
 80007c2:	4818      	ldr	r0, [pc, #96]	@ (8000824 <_epd_write_data+0x74>)
 80007c4:	f004 fe44 	bl	8005450 <HAL_SPI_Transmit>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d026      	beq.n	800081c <_epd_write_data+0x6c>
  {
    // Une erreur s'est produite
    uint32_t error = HAL_SPI_GetError(&hspi2);
 80007ce:	4815      	ldr	r0, [pc, #84]	@ (8000824 <_epd_write_data+0x74>)
 80007d0:	f005 f82c 	bl	800582c <HAL_SPI_GetError>
 80007d4:	60f8      	str	r0, [r7, #12]
    printf("Erreur SPI\r\n");
 80007d6:	4814      	ldr	r0, [pc, #80]	@ (8000828 <_epd_write_data+0x78>)
 80007d8:	f007 faa4 	bl	8007d24 <puts>
    // Vérifier le type d'erreur
    if (error & HAL_SPI_ERROR_MODF)
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d002      	beq.n	80007ec <_epd_write_data+0x3c>
    {
       printf("Erreur : Mode Fault Detected\r\n");
 80007e6:	4811      	ldr	r0, [pc, #68]	@ (800082c <_epd_write_data+0x7c>)
 80007e8:	f007 fa9c 	bl	8007d24 <puts>
    }
    if (error & HAL_SPI_ERROR_OVR)
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	f003 0304 	and.w	r3, r3, #4
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d002      	beq.n	80007fc <_epd_write_data+0x4c>
    {
       printf("Erreur : Overrun Detected\r\n");
 80007f6:	480e      	ldr	r0, [pc, #56]	@ (8000830 <_epd_write_data+0x80>)
 80007f8:	f007 fa94 	bl	8007d24 <puts>
    }
    if (error & HAL_SPI_ERROR_CRC)
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	2b00      	cmp	r3, #0
 8000804:	d002      	beq.n	800080c <_epd_write_data+0x5c>
    {
       printf("Erreur : CRC Error Detected\r\n");
 8000806:	480b      	ldr	r0, [pc, #44]	@ (8000834 <_epd_write_data+0x84>)
 8000808:	f007 fa8c 	bl	8007d24 <puts>
    }
    if (error & HAL_SPI_ERROR_DMA)
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	f003 0310 	and.w	r3, r3, #16
 8000812:	2b00      	cmp	r3, #0
 8000814:	d002      	beq.n	800081c <_epd_write_data+0x6c>
    {
       printf("Erreur : DMA Error Detected\r\n");
 8000816:	4808      	ldr	r0, [pc, #32]	@ (8000838 <_epd_write_data+0x88>)
 8000818:	f007 fa84 	bl	8007d24 <puts>
    //printf("Transmission SPI réussie\r\n");
  }
  // while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET)
  //  ;
  // SPI_I2S_SendData(SPI2, data);
}
 800081c:	bf00      	nop
 800081e:	3710      	adds	r7, #16
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	240000a0 	.word	0x240000a0
 8000828:	08008db0 	.word	0x08008db0
 800082c:	08008dbc 	.word	0x08008dbc
 8000830:	08008ddc 	.word	0x08008ddc
 8000834:	08008df8 	.word	0x08008df8
 8000838:	08008e18 	.word	0x08008e18

0800083c <_epd_write_data_over>:

void _epd_write_data_over()
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  //while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) != RESET)
  //  ;
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr

0800084a <epd_wait_busy>:

uint8_t epd_wait_busy()
{
 800084a:	b580      	push	{r7, lr}
 800084c:	b082      	sub	sp, #8
 800084e:	af00      	add	r7, sp, #0
  uint32_t timeout = 0;
 8000850:	2300      	movs	r3, #0
 8000852:	607b      	str	r3, [r7, #4]
  while (epd_is_busy())
 8000854:	e00c      	b.n	8000870 <epd_wait_busy+0x26>
  {
    timeout++;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	3301      	adds	r3, #1
 800085a:	607b      	str	r3, [r7, #4]
    if (timeout > 40000)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8000862:	4293      	cmp	r3, r2
 8000864:	d901      	bls.n	800086a <epd_wait_busy+0x20>
    {
      return 1;
 8000866:	2301      	movs	r3, #1
 8000868:	e008      	b.n	800087c <epd_wait_busy+0x32>
    }
    epd_delay(1);
 800086a:	2001      	movs	r0, #1
 800086c:	f7ff ff18 	bl	80006a0 <epd_delay>
  while (epd_is_busy())
 8000870:	f7ff ff6c 	bl	800074c <epd_is_busy>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d1ed      	bne.n	8000856 <epd_wait_busy+0xc>
  }
  return 0;
 800087a:	2300      	movs	r3, #0
}
 800087c:	4618      	mov	r0, r3
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <epd_reset>:

void epd_reset(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  epd_res_reset();
 8000888:	f7ff ff24 	bl	80006d4 <epd_res_reset>
  epd_delay(50);
 800088c:	2032      	movs	r0, #50	@ 0x32
 800088e:	f7ff ff07 	bl	80006a0 <epd_delay>
  epd_res_set();
 8000892:	f7ff ff13 	bl	80006bc <epd_res_set>
  epd_delay(50);
 8000896:	2032      	movs	r0, #50	@ 0x32
 8000898:	f7ff ff02 	bl	80006a0 <epd_delay>
  _hibernating = 0;
 800089c:	4b02      	ldr	r3, [pc, #8]	@ (80008a8 <epd_reset+0x24>)
 800089e:	2200      	movs	r2, #0
 80008a0:	701a      	strb	r2, [r3, #0]
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	24000000 	.word	0x24000000

080008ac <epd_init>:

uint8_t epd_init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  if (_hibernating)
 80008b0:	4b2b      	ldr	r3, [pc, #172]	@ (8000960 <epd_init+0xb4>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <epd_init+0x10>
    epd_reset();
 80008b8:	f7ff ffe4 	bl	8000884 <epd_reset>

  if (epd_wait_busy())
 80008bc:	f7ff ffc5 	bl	800084a <epd_wait_busy>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <epd_init+0x1e>
    return 1;
 80008c6:	2301      	movs	r3, #1
 80008c8:	e047      	b.n	800095a <epd_init+0xae>

  epd_write_reg(0x12); // SWRESET
 80008ca:	2012      	movs	r0, #18
 80008cc:	f7ff ff4a 	bl	8000764 <epd_write_reg>

  epd_delay(10);
 80008d0:	200a      	movs	r0, #10
 80008d2:	f7ff fee5 	bl	80006a0 <epd_delay>

  if (epd_wait_busy())
 80008d6:	f7ff ffb8 	bl	800084a <epd_wait_busy>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <epd_init+0x38>
    return 1;
 80008e0:	2301      	movs	r3, #1
 80008e2:	e03a      	b.n	800095a <epd_init+0xae>
      epd_write_data(0x00);
      epd_write_data(0x80);
    #endif

  #elif defined(EPD_42)
    epd_write_reg(0x21); // Display Update Control
 80008e4:	2021      	movs	r0, #33	@ 0x21
 80008e6:	f7ff ff3d 	bl	8000764 <epd_write_reg>
    epd_write_data(0x40);
 80008ea:	2040      	movs	r0, #64	@ 0x40
 80008ec:	f7ff ff4f 	bl	800078e <epd_write_data>
    epd_write_data(0x00);
 80008f0:	2000      	movs	r0, #0
 80008f2:	f7ff ff4c 	bl	800078e <epd_write_data>
    epd_write_reg(0x01);  // Set MUX as 300
 80008f6:	2001      	movs	r0, #1
 80008f8:	f7ff ff34 	bl	8000764 <epd_write_reg>
    epd_write_data(0x2B);
 80008fc:	202b      	movs	r0, #43	@ 0x2b
 80008fe:	f7ff ff46 	bl	800078e <epd_write_data>
    epd_write_data(0x01);
 8000902:	2001      	movs	r0, #1
 8000904:	f7ff ff43 	bl	800078e <epd_write_data>
    epd_write_data(0x00);
 8000908:	2000      	movs	r0, #0
 800090a:	f7ff ff40 	bl	800078e <epd_write_data>
    epd_write_reg(0x3C); //BorderWavefrom
 800090e:	203c      	movs	r0, #60	@ 0x3c
 8000910:	f7ff ff28 	bl	8000764 <epd_write_reg>
    epd_write_data(0x01);
 8000914:	2001      	movs	r0, #1
 8000916:	f7ff ff3a 	bl	800078e <epd_write_data>
    epd_write_reg(0x11);  // data  entry  mode
 800091a:	2011      	movs	r0, #17
 800091c:	f7ff ff22 	bl	8000764 <epd_write_reg>
    epd_write_data(0x03);   // X-mode
 8000920:	2003      	movs	r0, #3
 8000922:	f7ff ff34 	bl	800078e <epd_write_data>
    epd_address_set(0,0,EPD_W-1,EPD_H-1);
 8000926:	f240 132b 	movw	r3, #299	@ 0x12b
 800092a:	f240 128f 	movw	r2, #399	@ 0x18f
 800092e:	2100      	movs	r1, #0
 8000930:	2000      	movs	r0, #0
 8000932:	f000 f889 	bl	8000a48 <epd_address_set>
  #endif

  epd_write_reg(0x18); // Read built-in temperature sensor
 8000936:	2018      	movs	r0, #24
 8000938:	f7ff ff14 	bl	8000764 <epd_write_reg>
  epd_write_data(0x80);
 800093c:	2080      	movs	r0, #128	@ 0x80
 800093e:	f7ff ff26 	bl	800078e <epd_write_data>

  epd_setpos(0,0);
 8000942:	2100      	movs	r1, #0
 8000944:	2000      	movs	r0, #0
 8000946:	f000 f8be 	bl	8000ac6 <epd_setpos>

  if (epd_power_on())
 800094a:	f000 f83f 	bl	80009cc <epd_power_on>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <epd_init+0xac>
    return 1;
 8000954:	2301      	movs	r3, #1
 8000956:	e000      	b.n	800095a <epd_init+0xae>

  return 0;
 8000958:	2300      	movs	r3, #0
}
 800095a:	4618      	mov	r0, r3
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	24000000 	.word	0x24000000

08000964 <epd_init_partial>:

uint8_t epd_init_partial(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  if (epd_init())
 8000968:	f7ff ffa0 	bl	80008ac <epd_init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <epd_init_partial+0x12>
    return 1;
 8000972:	2301      	movs	r3, #1
 8000974:	e00f      	b.n	8000996 <epd_init_partial+0x32>
      _epd_write_data(lut_partial[j]);
    }
    _epd_write_data_over();
    epd_cs_set();
    #elif defined(EPD_42)
    epd_write_reg(0x3C); //BorderWavefrom
 8000976:	203c      	movs	r0, #60	@ 0x3c
 8000978:	f7ff fef4 	bl	8000764 <epd_write_reg>
    epd_write_data(0x80);
 800097c:	2080      	movs	r0, #128	@ 0x80
 800097e:	f7ff ff06 	bl	800078e <epd_write_data>
    epd_write_reg(0x21); // Display Update Controll
 8000982:	2021      	movs	r0, #33	@ 0x21
 8000984:	f7ff feee 	bl	8000764 <epd_write_reg>
    epd_write_data(0x00);    // RED normal
 8000988:	2000      	movs	r0, #0
 800098a:	f7ff ff00 	bl	800078e <epd_write_data>
    epd_write_data(0x00);    // single chip application
 800098e:	2000      	movs	r0, #0
 8000990:	f7ff fefd 	bl	800078e <epd_write_data>
  #endif

  return 0;
 8000994:	2300      	movs	r3, #0
}
 8000996:	4618      	mov	r0, r3
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <epd_enter_deepsleepmode>:

void epd_enter_deepsleepmode(uint8_t mode)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
  epd_power_off();
 80009a6:	f000 f821 	bl	80009ec <epd_power_off>
  epd_write_reg(0x10);
 80009aa:	2010      	movs	r0, #16
 80009ac:	f7ff feda 	bl	8000764 <epd_write_reg>
  epd_write_data(mode);
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff feeb 	bl	800078e <epd_write_data>
  _hibernating = 1;
 80009b8:	4b03      	ldr	r3, [pc, #12]	@ (80009c8 <epd_enter_deepsleepmode+0x2c>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	701a      	strb	r2, [r3, #0]
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	24000000 	.word	0x24000000

080009cc <epd_power_on>:

uint8_t epd_power_on(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  #if defined EPD_42
    epd_write_reg(0x22); // Display Update Control
 80009d0:	2022      	movs	r0, #34	@ 0x22
 80009d2:	f7ff fec7 	bl	8000764 <epd_write_reg>
    epd_write_data(0xe0);
 80009d6:	20e0      	movs	r0, #224	@ 0xe0
 80009d8:	f7ff fed9 	bl	800078e <epd_write_data>
  #else
    epd_write_reg(0x22); // Display Update Control
    epd_write_data(0xf8);
  #endif
  epd_write_reg(0x20); // Activate Display Update Sequence
 80009dc:	2020      	movs	r0, #32
 80009de:	f7ff fec1 	bl	8000764 <epd_write_reg>

  return epd_wait_busy();
 80009e2:	f7ff ff32 	bl	800084a <epd_wait_busy>
 80009e6:	4603      	mov	r3, r0
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	bd80      	pop	{r7, pc}

080009ec <epd_power_off>:

uint8_t epd_power_off(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  epd_write_reg(0x22); // Display Update Control
 80009f0:	2022      	movs	r0, #34	@ 0x22
 80009f2:	f7ff feb7 	bl	8000764 <epd_write_reg>
  epd_write_data(0x83);
 80009f6:	2083      	movs	r0, #131	@ 0x83
 80009f8:	f7ff fec9 	bl	800078e <epd_write_data>
  epd_write_reg(0x20); // Activate Display Update Sequence
 80009fc:	2020      	movs	r0, #32
 80009fe:	f7ff feb1 	bl	8000764 <epd_write_reg>

  return epd_wait_busy();
 8000a02:	f7ff ff22 	bl	800084a <epd_wait_busy>
 8000a06:	4603      	mov	r3, r0
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <epd_update>:
  epd_write_reg(0x1A);
  epd_write_data(0x7F);
//  epd_write_data(0xF0);
}

void epd_update(void) {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  #ifdef EPD_154
    epd_write_reg(0x22); // Display Update Control
    epd_write_data(0xF4);
  #elif defined EPD_42
    epd_write_reg(0x22); // Display Update Control
 8000a10:	2022      	movs	r0, #34	@ 0x22
 8000a12:	f7ff fea7 	bl	8000764 <epd_write_reg>
    epd_write_data(0xF7);
 8000a16:	20f7      	movs	r0, #247	@ 0xf7
 8000a18:	f7ff feb9 	bl	800078e <epd_write_data>
  #else
    epd_wr                                                                                                                                                                                                                       zfdcgzsvite_reg(0x22); // Display Update Control
    epd_write_data(0xF7);
  #endif
  epd_write_reg(0x20); // Activate Display Update Sequence
 8000a1c:	2020      	movs	r0, #32
 8000a1e:	f7ff fea1 	bl	8000764 <epd_write_reg>

  epd_wait_busy();
 8000a22:	f7ff ff12 	bl	800084a <epd_wait_busy>
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <epd_update_partial>:

void epd_update_partial(void) {
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	af00      	add	r7, sp, #0
  #ifdef EPD_154
    epd_write_reg(0x22); // Display Update Control
    epd_write_data(0xFC);
  #elif defined EPD_42
    epd_write_reg(0x22); // Display Update Control
 8000a2e:	2022      	movs	r0, #34	@ 0x22
 8000a30:	f7ff fe98 	bl	8000764 <epd_write_reg>
    epd_write_data(0xFF);
 8000a34:	20ff      	movs	r0, #255	@ 0xff
 8000a36:	f7ff feaa 	bl	800078e <epd_write_data>
  #else
    epd_write_reg(0x22); // Display Update Control
    epd_write_data(0xCC);
  #endif
  epd_write_reg(0x20); // Activate Display Update Sequence
 8000a3a:	2020      	movs	r0, #32
 8000a3c:	f7ff fe92 	bl	8000764 <epd_write_reg>

  epd_wait_busy();
 8000a40:	f7ff ff03 	bl	800084a <epd_wait_busy>
}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <epd_address_set>:

void epd_address_set(uint16_t x_start,uint16_t y_start,uint16_t x_end,uint16_t y_end)
{
 8000a48:	b590      	push	{r4, r7, lr}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4604      	mov	r4, r0
 8000a50:	4608      	mov	r0, r1
 8000a52:	4611      	mov	r1, r2
 8000a54:	461a      	mov	r2, r3
 8000a56:	4623      	mov	r3, r4
 8000a58:	80fb      	strh	r3, [r7, #6]
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	80bb      	strh	r3, [r7, #4]
 8000a5e:	460b      	mov	r3, r1
 8000a60:	807b      	strh	r3, [r7, #2]
 8000a62:	4613      	mov	r3, r2
 8000a64:	803b      	strh	r3, [r7, #0]
  epd_write_reg(0x44); // SET_RAM_X_ADDRESS_START_END_POSITION
 8000a66:	2044      	movs	r0, #68	@ 0x44
 8000a68:	f7ff fe7c 	bl	8000764 <epd_write_reg>
  epd_write_data((x_start>>3) & 0xFF);
 8000a6c:	88fb      	ldrh	r3, [r7, #6]
 8000a6e:	08db      	lsrs	r3, r3, #3
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff fe8a 	bl	800078e <epd_write_data>
  epd_write_data((x_end>>3) & 0xFF);
 8000a7a:	887b      	ldrh	r3, [r7, #2]
 8000a7c:	08db      	lsrs	r3, r3, #3
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff fe83 	bl	800078e <epd_write_data>

  epd_write_reg(0x45); // SET_RAM_Y_ADDRESS_START_END_POSITION
 8000a88:	2045      	movs	r0, #69	@ 0x45
 8000a8a:	f7ff fe6b 	bl	8000764 <epd_write_reg>
  epd_write_data(y_start & 0xFF);
 8000a8e:	88bb      	ldrh	r3, [r7, #4]
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff fe7b 	bl	800078e <epd_write_data>
  epd_write_data((y_start >> 8) & 0xFF);
 8000a98:	88bb      	ldrh	r3, [r7, #4]
 8000a9a:	0a1b      	lsrs	r3, r3, #8
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff fe74 	bl	800078e <epd_write_data>
  epd_write_data(y_end & 0xFF);
 8000aa6:	883b      	ldrh	r3, [r7, #0]
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff fe6f 	bl	800078e <epd_write_data>
  epd_write_data((y_end >> 8) & 0xFF);
 8000ab0:	883b      	ldrh	r3, [r7, #0]
 8000ab2:	0a1b      	lsrs	r3, r3, #8
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff fe68 	bl	800078e <epd_write_data>
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd90      	pop	{r4, r7, pc}

08000ac6 <epd_setpos>:

void epd_setpos(uint16_t x, uint16_t y)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b084      	sub	sp, #16
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	4603      	mov	r3, r0
 8000ace:	460a      	mov	r2, r1
 8000ad0:	80fb      	strh	r3, [r7, #6]
 8000ad2:	4613      	mov	r3, r2
 8000ad4:	80bb      	strh	r3, [r7, #4]
  uint8_t _x;
  uint16_t _y;

  _x = x / 8;
 8000ad6:	88fb      	ldrh	r3, [r7, #6]
 8000ad8:	08db      	lsrs	r3, r3, #3
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	73fb      	strb	r3, [r7, #15]
#ifdef EPD_154
  _y = 199 - y;
  #elif defined(EPD_29) || defined(EPD_213)
  _y = 295 - y;
  #elif defined(EPD_42)
  _y = y;
 8000ade:	88bb      	ldrh	r3, [r7, #4]
 8000ae0:	81bb      	strh	r3, [r7, #12]
#endif

  epd_write_reg(0x4E); // set RAM x address count to 0;
 8000ae2:	204e      	movs	r0, #78	@ 0x4e
 8000ae4:	f7ff fe3e 	bl	8000764 <epd_write_reg>
  epd_write_data(_x);
 8000ae8:	7bfb      	ldrb	r3, [r7, #15]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fe4f 	bl	800078e <epd_write_data>
  epd_write_reg(0x4F); // set RAM y address count to 0x127;
 8000af0:	204f      	movs	r0, #79	@ 0x4f
 8000af2:	f7ff fe37 	bl	8000764 <epd_write_reg>
  epd_write_data(_y & 0xff);
 8000af6:	89bb      	ldrh	r3, [r7, #12]
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff fe47 	bl	800078e <epd_write_data>
  epd_write_data(_y >> 8 & 0x01);
 8000b00:	89bb      	ldrh	r3, [r7, #12]
 8000b02:	0a1b      	lsrs	r3, r3, #8
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	f003 0301 	and.w	r3, r3, #1
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff fe3d 	bl	800078e <epd_write_data>
}
 8000b14:	bf00      	nop
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <epd_writedata>:

void epd_writedata(uint8_t *Image1, uint32_t length)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	6039      	str	r1, [r7, #0]
  epd_cs_reset();
 8000b26:	f7ff fe05 	bl	8000734 <epd_cs_reset>
  for (uint32_t j = 0; j < length; j++)
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	e009      	b.n	8000b44 <epd_writedata+0x28>
  {
    _epd_write_data(Image1[j]);
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	4413      	add	r3, r2
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff fe39 	bl	80007b0 <_epd_write_data>
  for (uint32_t j = 0; j < length; j++)
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	3301      	adds	r3, #1
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fa      	ldr	r2, [r7, #12]
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d3f1      	bcc.n	8000b30 <epd_writedata+0x14>
  }
  _epd_write_data_over();
 8000b4c:	f7ff fe76 	bl	800083c <_epd_write_data_over>
  epd_cs_set();
 8000b50:	f7ff fde4 	bl	800071c <epd_cs_set>
}
 8000b54:	bf00      	nop
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <epd_displayBW>:

  epd_update();
}

void epd_displayBW(uint8_t *Image)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  uint32_t Width, Height;

  Width = EPD_H;
 8000b64:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000b68:	60fb      	str	r3, [r7, #12]
  Height = EPD_W_BUFF_SIZE;
 8000b6a:	2332      	movs	r3, #50	@ 0x32
 8000b6c:	60bb      	str	r3, [r7, #8]

  epd_setpos(0, 0);
 8000b6e:	2100      	movs	r1, #0
 8000b70:	2000      	movs	r0, #0
 8000b72:	f7ff ffa8 	bl	8000ac6 <epd_setpos>
  epd_write_reg(0x26);
 8000b76:	2026      	movs	r0, #38	@ 0x26
 8000b78:	f7ff fdf4 	bl	8000764 <epd_write_reg>
  epd_writedata(Image, Width * Height);
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	fb02 f303 	mul.w	r3, r2, r3
 8000b84:	4619      	mov	r1, r3
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f7ff ffc8 	bl	8000b1c <epd_writedata>

  epd_setpos(0, 0);
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f7ff ff99 	bl	8000ac6 <epd_setpos>
  epd_write_reg(0x24);
 8000b94:	2024      	movs	r0, #36	@ 0x24
 8000b96:	f7ff fde5 	bl	8000764 <epd_write_reg>
  epd_writedata(Image, Width * Height);
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	68ba      	ldr	r2, [r7, #8]
 8000b9e:	fb02 f303 	mul.w	r3, r2, r3
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f7ff ffb9 	bl	8000b1c <epd_writedata>

  epd_update();
 8000baa:	f7ff ff2f 	bl	8000a0c <epd_update>
}
 8000bae:	bf00      	nop
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <epd_displayBW_partial>:

void epd_displayBW_partial(uint8_t *Image)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b084      	sub	sp, #16
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
  uint32_t Width, Height;

  Width = EPD_H;
 8000bbe:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000bc2:	60fb      	str	r3, [r7, #12]
  Height = EPD_W_BUFF_SIZE;
 8000bc4:	2332      	movs	r3, #50	@ 0x32
 8000bc6:	60bb      	str	r3, [r7, #8]

  epd_setpos(0, 0);
 8000bc8:	2100      	movs	r1, #0
 8000bca:	2000      	movs	r0, #0
 8000bcc:	f7ff ff7b 	bl	8000ac6 <epd_setpos>
  epd_write_reg(0x24);
 8000bd0:	2024      	movs	r0, #36	@ 0x24
 8000bd2:	f7ff fdc7 	bl	8000764 <epd_write_reg>
  epd_writedata(Image, Width * Height);
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	68ba      	ldr	r2, [r7, #8]
 8000bda:	fb02 f303 	mul.w	r3, r2, r3
 8000bde:	4619      	mov	r1, r3
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f7ff ff9b 	bl	8000b1c <epd_writedata>

  epd_update_partial();
 8000be6:	f7ff ff20 	bl	8000a2a <epd_update_partial>

  epd_setpos(0, 0);
 8000bea:	2100      	movs	r1, #0
 8000bec:	2000      	movs	r0, #0
 8000bee:	f7ff ff6a 	bl	8000ac6 <epd_setpos>
  epd_write_reg(0x26);
 8000bf2:	2026      	movs	r0, #38	@ 0x26
 8000bf4:	f7ff fdb6 	bl	8000764 <epd_write_reg>
  epd_writedata(Image, Width * Height);
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	68ba      	ldr	r2, [r7, #8]
 8000bfc:	fb02 f303 	mul.w	r3, r2, r3
 8000c00:	4619      	mov	r1, r3
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f7ff ff8a 	bl	8000b1c <epd_writedata>
}
 8000c08:	bf00      	nop
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <epd_paint_newimage>:
  #endif
  epd_update();
}

void epd_paint_newimage(uint8_t *image, uint16_t Width, uint16_t Height, uint16_t Rotate, uint16_t Color)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	4608      	mov	r0, r1
 8000c1a:	4611      	mov	r1, r2
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4603      	mov	r3, r0
 8000c20:	817b      	strh	r3, [r7, #10]
 8000c22:	460b      	mov	r3, r1
 8000c24:	813b      	strh	r3, [r7, #8]
 8000c26:	4613      	mov	r3, r2
 8000c28:	80fb      	strh	r3, [r7, #6]
  EPD_Paint.Image = 0x00;
 8000c2a:	4b20      	ldr	r3, [pc, #128]	@ (8000cac <epd_paint_newimage+0x9c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
  EPD_Paint.Image = image;
 8000c30:	4a1e      	ldr	r2, [pc, #120]	@ (8000cac <epd_paint_newimage+0x9c>)
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	6013      	str	r3, [r2, #0]

  EPD_Paint.WidthMemory = Width;
 8000c36:	4a1d      	ldr	r2, [pc, #116]	@ (8000cac <epd_paint_newimage+0x9c>)
 8000c38:	897b      	ldrh	r3, [r7, #10]
 8000c3a:	8113      	strh	r3, [r2, #8]
  EPD_Paint.HeightMemory = Height;
 8000c3c:	4a1b      	ldr	r2, [pc, #108]	@ (8000cac <epd_paint_newimage+0x9c>)
 8000c3e:	893b      	ldrh	r3, [r7, #8]
 8000c40:	8153      	strh	r3, [r2, #10]
  EPD_Paint.Color = Color;
 8000c42:	4a1a      	ldr	r2, [pc, #104]	@ (8000cac <epd_paint_newimage+0x9c>)
 8000c44:	8b3b      	ldrh	r3, [r7, #24]
 8000c46:	8193      	strh	r3, [r2, #12]
  EPD_Paint.WidthByte = (Width % 8 == 0) ? (Width / 8) : (Width / 8 + 1);
 8000c48:	897b      	ldrh	r3, [r7, #10]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d103      	bne.n	8000c5c <epd_paint_newimage+0x4c>
 8000c54:	897b      	ldrh	r3, [r7, #10]
 8000c56:	08db      	lsrs	r3, r3, #3
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	e004      	b.n	8000c66 <epd_paint_newimage+0x56>
 8000c5c:	897b      	ldrh	r3, [r7, #10]
 8000c5e:	08db      	lsrs	r3, r3, #3
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	3301      	adds	r3, #1
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	4a11      	ldr	r2, [pc, #68]	@ (8000cac <epd_paint_newimage+0x9c>)
 8000c68:	8213      	strh	r3, [r2, #16]
  EPD_Paint.HeightByte = Height;
 8000c6a:	4a10      	ldr	r2, [pc, #64]	@ (8000cac <epd_paint_newimage+0x9c>)
 8000c6c:	893b      	ldrh	r3, [r7, #8]
 8000c6e:	8253      	strh	r3, [r2, #18]
  EPD_Paint.Rotate = Rotate;
 8000c70:	4a0e      	ldr	r2, [pc, #56]	@ (8000cac <epd_paint_newimage+0x9c>)
 8000c72:	88fb      	ldrh	r3, [r7, #6]
 8000c74:	81d3      	strh	r3, [r2, #14]
  if (Rotate == EPD_ROTATE_0 || Rotate == EPD_ROTATE_180)
 8000c76:	88fb      	ldrh	r3, [r7, #6]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d002      	beq.n	8000c82 <epd_paint_newimage+0x72>
 8000c7c:	88fb      	ldrh	r3, [r7, #6]
 8000c7e:	2bb4      	cmp	r3, #180	@ 0xb4
 8000c80:	d106      	bne.n	8000c90 <epd_paint_newimage+0x80>
  {

    EPD_Paint.Width = Height;
 8000c82:	4a0a      	ldr	r2, [pc, #40]	@ (8000cac <epd_paint_newimage+0x9c>)
 8000c84:	893b      	ldrh	r3, [r7, #8]
 8000c86:	8093      	strh	r3, [r2, #4]
    EPD_Paint.Height = Width;
 8000c88:	4a08      	ldr	r2, [pc, #32]	@ (8000cac <epd_paint_newimage+0x9c>)
 8000c8a:	897b      	ldrh	r3, [r7, #10]
 8000c8c:	80d3      	strh	r3, [r2, #6]
 8000c8e:	e006      	b.n	8000c9e <epd_paint_newimage+0x8e>
  }
  else
  {
    EPD_Paint.Width = Width;
 8000c90:	4a06      	ldr	r2, [pc, #24]	@ (8000cac <epd_paint_newimage+0x9c>)
 8000c92:	897b      	ldrh	r3, [r7, #10]
 8000c94:	8093      	strh	r3, [r2, #4]
    EPD_Paint.Height = Height;
 8000c96:	4a05      	ldr	r2, [pc, #20]	@ (8000cac <epd_paint_newimage+0x9c>)
 8000c98:	893b      	ldrh	r3, [r7, #8]
 8000c9a:	80d3      	strh	r3, [r2, #6]
  }
}
 8000c9c:	bf00      	nop
 8000c9e:	bf00      	nop
 8000ca0:	3714      	adds	r7, #20
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	2400008c 	.word	0x2400008c

08000cb0 <epd_paint_setpixel>:

void epd_paint_setpixel(uint16_t Xpoint, uint16_t Ypoint, uint16_t Color)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b087      	sub	sp, #28
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	80fb      	strh	r3, [r7, #6]
 8000cba:	460b      	mov	r3, r1
 8000cbc:	80bb      	strh	r3, [r7, #4]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	807b      	strh	r3, [r7, #2]
  uint16_t X, Y;
  uint32_t Addr;
  uint8_t Rdata;
  switch (EPD_Paint.Rotate)
 8000cc2:	4b3c      	ldr	r3, [pc, #240]	@ (8000db4 <epd_paint_setpixel+0x104>)
 8000cc4:	89db      	ldrh	r3, [r3, #14]
 8000cc6:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8000cca:	d02e      	beq.n	8000d2a <epd_paint_setpixel+0x7a>
 8000ccc:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8000cd0:	dc6a      	bgt.n	8000da8 <epd_paint_setpixel+0xf8>
 8000cd2:	2bb4      	cmp	r3, #180	@ 0xb4
 8000cd4:	d01f      	beq.n	8000d16 <epd_paint_setpixel+0x66>
 8000cd6:	2bb4      	cmp	r3, #180	@ 0xb4
 8000cd8:	dc66      	bgt.n	8000da8 <epd_paint_setpixel+0xf8>
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d002      	beq.n	8000ce4 <epd_paint_setpixel+0x34>
 8000cde:	2b5a      	cmp	r3, #90	@ 0x5a
 8000ce0:	d00a      	beq.n	8000cf8 <epd_paint_setpixel+0x48>
  case 270:
    X = Xpoint;
    Y = Ypoint;
    break;
  default:
    return;
 8000ce2:	e061      	b.n	8000da8 <epd_paint_setpixel+0xf8>
    X = EPD_Paint.WidthMemory - Ypoint - 1;
 8000ce4:	4b33      	ldr	r3, [pc, #204]	@ (8000db4 <epd_paint_setpixel+0x104>)
 8000ce6:	891a      	ldrh	r2, [r3, #8]
 8000ce8:	88bb      	ldrh	r3, [r7, #4]
 8000cea:	1ad3      	subs	r3, r2, r3
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	82fb      	strh	r3, [r7, #22]
    Y = Xpoint;
 8000cf2:	88fb      	ldrh	r3, [r7, #6]
 8000cf4:	82bb      	strh	r3, [r7, #20]
    break;
 8000cf6:	e01d      	b.n	8000d34 <epd_paint_setpixel+0x84>
    X = EPD_Paint.WidthMemory - Xpoint - 1;
 8000cf8:	4b2e      	ldr	r3, [pc, #184]	@ (8000db4 <epd_paint_setpixel+0x104>)
 8000cfa:	891a      	ldrh	r2, [r3, #8]
 8000cfc:	88fb      	ldrh	r3, [r7, #6]
 8000cfe:	1ad3      	subs	r3, r2, r3
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	3b01      	subs	r3, #1
 8000d04:	82fb      	strh	r3, [r7, #22]
    Y = EPD_Paint.HeightMemory - Ypoint - 1;
 8000d06:	4b2b      	ldr	r3, [pc, #172]	@ (8000db4 <epd_paint_setpixel+0x104>)
 8000d08:	895a      	ldrh	r2, [r3, #10]
 8000d0a:	88bb      	ldrh	r3, [r7, #4]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	3b01      	subs	r3, #1
 8000d12:	82bb      	strh	r3, [r7, #20]
    break;
 8000d14:	e00e      	b.n	8000d34 <epd_paint_setpixel+0x84>
    X = Ypoint;
 8000d16:	88bb      	ldrh	r3, [r7, #4]
 8000d18:	82fb      	strh	r3, [r7, #22]
    Y = EPD_Paint.HeightMemory - Xpoint - 1;
 8000d1a:	4b26      	ldr	r3, [pc, #152]	@ (8000db4 <epd_paint_setpixel+0x104>)
 8000d1c:	895a      	ldrh	r2, [r3, #10]
 8000d1e:	88fb      	ldrh	r3, [r7, #6]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	3b01      	subs	r3, #1
 8000d26:	82bb      	strh	r3, [r7, #20]
    break;
 8000d28:	e004      	b.n	8000d34 <epd_paint_setpixel+0x84>
    X = Xpoint;
 8000d2a:	88fb      	ldrh	r3, [r7, #6]
 8000d2c:	82fb      	strh	r3, [r7, #22]
    Y = Ypoint;
 8000d2e:	88bb      	ldrh	r3, [r7, #4]
 8000d30:	82bb      	strh	r3, [r7, #20]
    break;
 8000d32:	bf00      	nop
  }
  Addr = X / 8 + Y * EPD_Paint.WidthByte;
 8000d34:	8afb      	ldrh	r3, [r7, #22]
 8000d36:	08db      	lsrs	r3, r3, #3
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	8abb      	ldrh	r3, [r7, #20]
 8000d3e:	4a1d      	ldr	r2, [pc, #116]	@ (8000db4 <epd_paint_setpixel+0x104>)
 8000d40:	8a12      	ldrh	r2, [r2, #16]
 8000d42:	fb02 f303 	mul.w	r3, r2, r3
 8000d46:	440b      	add	r3, r1
 8000d48:	613b      	str	r3, [r7, #16]
  Rdata = EPD_Paint.Image[Addr];
 8000d4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000db4 <epd_paint_setpixel+0x104>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	4413      	add	r3, r2
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	73fb      	strb	r3, [r7, #15]
  if (Color == EPD_COLOR_BLACK)
 8000d56:	887b      	ldrh	r3, [r7, #2]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d113      	bne.n	8000d84 <epd_paint_setpixel+0xd4>
  {
    EPD_Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 8000d5c:	8afb      	ldrh	r3, [r7, #22]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	2280      	movs	r2, #128	@ 0x80
 8000d64:	fa42 f303 	asr.w	r3, r2, r3
 8000d68:	b25b      	sxtb	r3, r3
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	b25a      	sxtb	r2, r3
 8000d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d72:	4013      	ands	r3, r2
 8000d74:	b259      	sxtb	r1, r3
 8000d76:	4b0f      	ldr	r3, [pc, #60]	@ (8000db4 <epd_paint_setpixel+0x104>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	b2ca      	uxtb	r2, r1
 8000d80:	701a      	strb	r2, [r3, #0]
 8000d82:	e012      	b.n	8000daa <epd_paint_setpixel+0xfa>
  }
  else
    EPD_Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 8000d84:	8afb      	ldrh	r3, [r7, #22]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	2280      	movs	r2, #128	@ 0x80
 8000d8c:	fa42 f303 	asr.w	r3, r2, r3
 8000d90:	b25a      	sxtb	r2, r3
 8000d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	b259      	sxtb	r1, r3
 8000d9a:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <epd_paint_setpixel+0x104>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	4413      	add	r3, r2
 8000da2:	b2ca      	uxtb	r2, r1
 8000da4:	701a      	strb	r2, [r3, #0]
 8000da6:	e000      	b.n	8000daa <epd_paint_setpixel+0xfa>
    return;
 8000da8:	bf00      	nop
}
 8000daa:	371c      	adds	r7, #28
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	2400008c 	.word	0x2400008c

08000db8 <epd_paint_clear>:

void epd_paint_clear(uint16_t color)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	80fb      	strh	r3, [r7, #6]
  uint16_t X, Y;
  uint32_t Addr;

  for (Y = 0; Y < EPD_Paint.HeightByte; Y++)
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	81bb      	strh	r3, [r7, #12]
 8000dc6:	e01c      	b.n	8000e02 <epd_paint_clear+0x4a>
  {
    for (X = 0; X < EPD_Paint.WidthByte; X++)
 8000dc8:	2300      	movs	r3, #0
 8000dca:	81fb      	strh	r3, [r7, #14]
 8000dcc:	e011      	b.n	8000df2 <epd_paint_clear+0x3a>
    { // 8 pixel =  1 byte
      Addr = X + Y * EPD_Paint.WidthByte;
 8000dce:	89fa      	ldrh	r2, [r7, #14]
 8000dd0:	89bb      	ldrh	r3, [r7, #12]
 8000dd2:	4912      	ldr	r1, [pc, #72]	@ (8000e1c <epd_paint_clear+0x64>)
 8000dd4:	8a09      	ldrh	r1, [r1, #16]
 8000dd6:	fb01 f303 	mul.w	r3, r1, r3
 8000dda:	4413      	add	r3, r2
 8000ddc:	60bb      	str	r3, [r7, #8]
      EPD_Paint.Image[Addr] = color;
 8000dde:	4b0f      	ldr	r3, [pc, #60]	@ (8000e1c <epd_paint_clear+0x64>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	4413      	add	r3, r2
 8000de6:	88fa      	ldrh	r2, [r7, #6]
 8000de8:	b2d2      	uxtb	r2, r2
 8000dea:	701a      	strb	r2, [r3, #0]
    for (X = 0; X < EPD_Paint.WidthByte; X++)
 8000dec:	89fb      	ldrh	r3, [r7, #14]
 8000dee:	3301      	adds	r3, #1
 8000df0:	81fb      	strh	r3, [r7, #14]
 8000df2:	4b0a      	ldr	r3, [pc, #40]	@ (8000e1c <epd_paint_clear+0x64>)
 8000df4:	8a1b      	ldrh	r3, [r3, #16]
 8000df6:	89fa      	ldrh	r2, [r7, #14]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d3e8      	bcc.n	8000dce <epd_paint_clear+0x16>
  for (Y = 0; Y < EPD_Paint.HeightByte; Y++)
 8000dfc:	89bb      	ldrh	r3, [r7, #12]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	81bb      	strh	r3, [r7, #12]
 8000e02:	4b06      	ldr	r3, [pc, #24]	@ (8000e1c <epd_paint_clear+0x64>)
 8000e04:	8a5b      	ldrh	r3, [r3, #18]
 8000e06:	89ba      	ldrh	r2, [r7, #12]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d3dd      	bcc.n	8000dc8 <epd_paint_clear+0x10>
    }
  }
}
 8000e0c:	bf00      	nop
 8000e0e:	bf00      	nop
 8000e10:	3714      	adds	r7, #20
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	2400008c 	.word	0x2400008c

08000e20 <epd_paint_selectimage>:

void epd_paint_selectimage(uint8_t *image)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  EPD_Paint.Image = image;
 8000e28:	4a04      	ldr	r2, [pc, #16]	@ (8000e3c <epd_paint_selectimage+0x1c>)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6013      	str	r3, [r2, #0]
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	2400008c 	.word	0x2400008c

08000e40 <epd_paint_drawPoint>:

void epd_paint_drawPoint(uint16_t Xpoint, uint16_t Ypoint, uint16_t Color)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	80fb      	strh	r3, [r7, #6]
 8000e4a:	460b      	mov	r3, r1
 8000e4c:	80bb      	strh	r3, [r7, #4]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	807b      	strh	r3, [r7, #2]
  epd_paint_setpixel(Xpoint - 1, Ypoint - 1, Color);
 8000e52:	88fb      	ldrh	r3, [r7, #6]
 8000e54:	3b01      	subs	r3, #1
 8000e56:	b298      	uxth	r0, r3
 8000e58:	88bb      	ldrh	r3, [r7, #4]
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	887a      	ldrh	r2, [r7, #2]
 8000e60:	4619      	mov	r1, r3
 8000e62:	f7ff ff25 	bl	8000cb0 <epd_paint_setpixel>
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <epd_paint_drawLine>:

void epd_paint_drawLine(uint16_t Xstart, uint16_t Ystart, uint16_t Xend, uint16_t Yend, uint16_t Color)
{
 8000e6e:	b590      	push	{r4, r7, lr}
 8000e70:	b08b      	sub	sp, #44	@ 0x2c
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	4604      	mov	r4, r0
 8000e76:	4608      	mov	r0, r1
 8000e78:	4611      	mov	r1, r2
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	4623      	mov	r3, r4
 8000e7e:	80fb      	strh	r3, [r7, #6]
 8000e80:	4603      	mov	r3, r0
 8000e82:	80bb      	strh	r3, [r7, #4]
 8000e84:	460b      	mov	r3, r1
 8000e86:	807b      	strh	r3, [r7, #2]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	803b      	strh	r3, [r7, #0]
  uint16_t Xpoint, Ypoint;
  int32_t dx, dy;
  int32_t XAddway, YAddway;
  int32_t Esp;
  char Dotted_Len;
  Xpoint = Xstart;
 8000e8c:	88fb      	ldrh	r3, [r7, #6]
 8000e8e:	84fb      	strh	r3, [r7, #38]	@ 0x26
  Ypoint = Ystart;
 8000e90:	88bb      	ldrh	r3, [r7, #4]
 8000e92:	84bb      	strh	r3, [r7, #36]	@ 0x24
  dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 8000e94:	887a      	ldrh	r2, [r7, #2]
 8000e96:	88fb      	ldrh	r3, [r7, #6]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	bfb8      	it	lt
 8000e9e:	425b      	neglt	r3, r3
 8000ea0:	61bb      	str	r3, [r7, #24]
  dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 8000ea2:	883a      	ldrh	r2, [r7, #0]
 8000ea4:	88bb      	ldrh	r3, [r7, #4]
 8000ea6:	1ad3      	subs	r3, r2, r3
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	bfb8      	it	lt
 8000eac:	425b      	neglt	r3, r3
 8000eae:	425b      	negs	r3, r3
 8000eb0:	617b      	str	r3, [r7, #20]

  XAddway = Xstart < Xend ? 1 : -1;
 8000eb2:	88fa      	ldrh	r2, [r7, #6]
 8000eb4:	887b      	ldrh	r3, [r7, #2]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d201      	bcs.n	8000ebe <epd_paint_drawLine+0x50>
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e001      	b.n	8000ec2 <epd_paint_drawLine+0x54>
 8000ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec2:	613b      	str	r3, [r7, #16]
  YAddway = Ystart < Yend ? 1 : -1;
 8000ec4:	88ba      	ldrh	r2, [r7, #4]
 8000ec6:	883b      	ldrh	r3, [r7, #0]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d201      	bcs.n	8000ed0 <epd_paint_drawLine+0x62>
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e001      	b.n	8000ed4 <epd_paint_drawLine+0x66>
 8000ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed4:	60fb      	str	r3, [r7, #12]

  Esp = dx + dy;
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	4413      	add	r3, r2
 8000edc:	623b      	str	r3, [r7, #32]
  Dotted_Len = 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	77fb      	strb	r3, [r7, #31]

  for (;;)
  {
    Dotted_Len++;
 8000ee2:	7ffb      	ldrb	r3, [r7, #31]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	77fb      	strb	r3, [r7, #31]
    epd_paint_drawPoint(Xpoint, Ypoint, Color);
 8000ee8:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8000eea:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8000eec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff ffa6 	bl	8000e40 <epd_paint_drawPoint>
    if (2 * Esp >= dy)
 8000ef4:	6a3b      	ldr	r3, [r7, #32]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	697a      	ldr	r2, [r7, #20]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	dc0c      	bgt.n	8000f18 <epd_paint_drawLine+0xaa>
    {
      if (Xpoint == Xend)
 8000efe:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000f00:	887b      	ldrh	r3, [r7, #2]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d01b      	beq.n	8000f3e <epd_paint_drawLine+0xd0>
        break;
      Esp += dy;
 8000f06:	6a3a      	ldr	r2, [r7, #32]
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	623b      	str	r3, [r7, #32]
      Xpoint += XAddway;
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000f14:	4413      	add	r3, r2
 8000f16:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }
    if (2 * Esp <= dx)
 8000f18:	6a3b      	ldr	r3, [r7, #32]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	dbdf      	blt.n	8000ee2 <epd_paint_drawLine+0x74>
    {
      if (Ypoint == Yend)
 8000f22:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000f24:	883b      	ldrh	r3, [r7, #0]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d00b      	beq.n	8000f42 <epd_paint_drawLine+0xd4>
        break;
      Esp += dx;
 8000f2a:	6a3a      	ldr	r2, [r7, #32]
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	4413      	add	r3, r2
 8000f30:	623b      	str	r3, [r7, #32]
      Ypoint += YAddway;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000f38:	4413      	add	r3, r2
 8000f3a:	84bb      	strh	r3, [r7, #36]	@ 0x24
    Dotted_Len++;
 8000f3c:	e7d1      	b.n	8000ee2 <epd_paint_drawLine+0x74>
        break;
 8000f3e:	bf00      	nop
 8000f40:	e000      	b.n	8000f44 <epd_paint_drawLine+0xd6>
        break;
 8000f42:	bf00      	nop
    }
  }
}
 8000f44:	bf00      	nop
 8000f46:	372c      	adds	r7, #44	@ 0x2c
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd90      	pop	{r4, r7, pc}

08000f4c <epd_paint_drawRectangle>:

void epd_paint_drawRectangle(uint16_t Xstart, uint16_t Ystart, uint16_t Xend, uint16_t Yend, uint16_t Color, uint8_t mode)
{
 8000f4c:	b590      	push	{r4, r7, lr}
 8000f4e:	b087      	sub	sp, #28
 8000f50:	af02      	add	r7, sp, #8
 8000f52:	4604      	mov	r4, r0
 8000f54:	4608      	mov	r0, r1
 8000f56:	4611      	mov	r1, r2
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4623      	mov	r3, r4
 8000f5c:	80fb      	strh	r3, [r7, #6]
 8000f5e:	4603      	mov	r3, r0
 8000f60:	80bb      	strh	r3, [r7, #4]
 8000f62:	460b      	mov	r3, r1
 8000f64:	807b      	strh	r3, [r7, #2]
 8000f66:	4613      	mov	r3, r2
 8000f68:	803b      	strh	r3, [r7, #0]
  uint16_t i;
  if (mode)
 8000f6a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d013      	beq.n	8000f9a <epd_paint_drawRectangle+0x4e>
  {
    for (i = Ystart; i < Yend; i++)
 8000f72:	88bb      	ldrh	r3, [r7, #4]
 8000f74:	81fb      	strh	r3, [r7, #14]
 8000f76:	e00b      	b.n	8000f90 <epd_paint_drawRectangle+0x44>
    {
      epd_paint_drawLine(Xstart, i, Xend, i, Color);
 8000f78:	89fc      	ldrh	r4, [r7, #14]
 8000f7a:	887a      	ldrh	r2, [r7, #2]
 8000f7c:	89f9      	ldrh	r1, [r7, #14]
 8000f7e:	88f8      	ldrh	r0, [r7, #6]
 8000f80:	8c3b      	ldrh	r3, [r7, #32]
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	4623      	mov	r3, r4
 8000f86:	f7ff ff72 	bl	8000e6e <epd_paint_drawLine>
    for (i = Ystart; i < Yend; i++)
 8000f8a:	89fb      	ldrh	r3, [r7, #14]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	81fb      	strh	r3, [r7, #14]
 8000f90:	89fa      	ldrh	r2, [r7, #14]
 8000f92:	883b      	ldrh	r3, [r7, #0]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d3ef      	bcc.n	8000f78 <epd_paint_drawRectangle+0x2c>
    epd_paint_drawLine(Xstart, Ystart, Xend, Ystart, Color);
    epd_paint_drawLine(Xstart, Ystart, Xstart, Yend, Color);
    epd_paint_drawLine(Xend, Yend, Xend, Ystart, Color);
    epd_paint_drawLine(Xend, Yend, Xstart, Yend, Color);
  }
}
 8000f98:	e023      	b.n	8000fe2 <epd_paint_drawRectangle+0x96>
    epd_paint_drawLine(Xstart, Ystart, Xend, Ystart, Color);
 8000f9a:	88bc      	ldrh	r4, [r7, #4]
 8000f9c:	887a      	ldrh	r2, [r7, #2]
 8000f9e:	88b9      	ldrh	r1, [r7, #4]
 8000fa0:	88f8      	ldrh	r0, [r7, #6]
 8000fa2:	8c3b      	ldrh	r3, [r7, #32]
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	4623      	mov	r3, r4
 8000fa8:	f7ff ff61 	bl	8000e6e <epd_paint_drawLine>
    epd_paint_drawLine(Xstart, Ystart, Xstart, Yend, Color);
 8000fac:	883c      	ldrh	r4, [r7, #0]
 8000fae:	88fa      	ldrh	r2, [r7, #6]
 8000fb0:	88b9      	ldrh	r1, [r7, #4]
 8000fb2:	88f8      	ldrh	r0, [r7, #6]
 8000fb4:	8c3b      	ldrh	r3, [r7, #32]
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	4623      	mov	r3, r4
 8000fba:	f7ff ff58 	bl	8000e6e <epd_paint_drawLine>
    epd_paint_drawLine(Xend, Yend, Xend, Ystart, Color);
 8000fbe:	88bc      	ldrh	r4, [r7, #4]
 8000fc0:	887a      	ldrh	r2, [r7, #2]
 8000fc2:	8839      	ldrh	r1, [r7, #0]
 8000fc4:	8878      	ldrh	r0, [r7, #2]
 8000fc6:	8c3b      	ldrh	r3, [r7, #32]
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	4623      	mov	r3, r4
 8000fcc:	f7ff ff4f 	bl	8000e6e <epd_paint_drawLine>
    epd_paint_drawLine(Xend, Yend, Xstart, Yend, Color);
 8000fd0:	883c      	ldrh	r4, [r7, #0]
 8000fd2:	88fa      	ldrh	r2, [r7, #6]
 8000fd4:	8839      	ldrh	r1, [r7, #0]
 8000fd6:	8878      	ldrh	r0, [r7, #2]
 8000fd8:	8c3b      	ldrh	r3, [r7, #32]
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	4623      	mov	r3, r4
 8000fde:	f7ff ff46 	bl	8000e6e <epd_paint_drawLine>
}
 8000fe2:	bf00      	nop
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd90      	pop	{r4, r7, pc}
	...

08000fec <epd_paint_showChar>:
    }
  }
}

void epd_paint_showChar(uint16_t x, uint16_t y, uint16_t chr, uint16_t size1, uint16_t color)
{
 8000fec:	b590      	push	{r4, r7, lr}
 8000fee:	b087      	sub	sp, #28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4623      	mov	r3, r4
 8000ffc:	80fb      	strh	r3, [r7, #6]
 8000ffe:	4603      	mov	r3, r0
 8001000:	80bb      	strh	r3, [r7, #4]
 8001002:	460b      	mov	r3, r1
 8001004:	807b      	strh	r3, [r7, #2]
 8001006:	4613      	mov	r3, r2
 8001008:	803b      	strh	r3, [r7, #0]
  uint16_t i, m, temp, size2, chr1;
  uint16_t x0, y0;
  x += 1, y += 1, x0 = x, y0 = y;
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	3301      	adds	r3, #1
 800100e:	80fb      	strh	r3, [r7, #6]
 8001010:	88bb      	ldrh	r3, [r7, #4]
 8001012:	3301      	adds	r3, #1
 8001014:	80bb      	strh	r3, [r7, #4]
 8001016:	88fb      	ldrh	r3, [r7, #6]
 8001018:	81bb      	strh	r3, [r7, #12]
 800101a:	88bb      	ldrh	r3, [r7, #4]
 800101c:	81fb      	strh	r3, [r7, #14]
  if (x - size1 > EPD_H)
 800101e:	88fa      	ldrh	r2, [r7, #6]
 8001020:	883b      	ldrh	r3, [r7, #0]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001028:	f300 809d 	bgt.w	8001166 <epd_paint_showChar+0x17a>
    return;
  if (size1 == 8)
 800102c:	883b      	ldrh	r3, [r7, #0]
 800102e:	2b08      	cmp	r3, #8
 8001030:	d102      	bne.n	8001038 <epd_paint_showChar+0x4c>
    size2 = 6;
 8001032:	2306      	movs	r3, #6
 8001034:	823b      	strh	r3, [r7, #16]
 8001036:	e014      	b.n	8001062 <epd_paint_showChar+0x76>
  else
    size2 = (size1 / 8 + ((size1 % 8) ? 1 : 0)) * (size1 / 2);
 8001038:	883b      	ldrh	r3, [r7, #0]
 800103a:	08db      	lsrs	r3, r3, #3
 800103c:	b29b      	uxth	r3, r3
 800103e:	461a      	mov	r2, r3
 8001040:	883b      	ldrh	r3, [r7, #0]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	b29b      	uxth	r3, r3
 8001048:	2b00      	cmp	r3, #0
 800104a:	bf14      	ite	ne
 800104c:	2301      	movne	r3, #1
 800104e:	2300      	moveq	r3, #0
 8001050:	b2db      	uxtb	r3, r3
 8001052:	4413      	add	r3, r2
 8001054:	b29a      	uxth	r2, r3
 8001056:	883b      	ldrh	r3, [r7, #0]
 8001058:	085b      	lsrs	r3, r3, #1
 800105a:	b29b      	uxth	r3, r3
 800105c:	fb12 f303 	smulbb	r3, r2, r3
 8001060:	823b      	strh	r3, [r7, #16]
  chr1 = chr - ' ';
 8001062:	887b      	ldrh	r3, [r7, #2]
 8001064:	3b20      	subs	r3, #32
 8001066:	817b      	strh	r3, [r7, #10]
  for (i = 0; i < size2; i++)
 8001068:	2300      	movs	r3, #0
 800106a:	82fb      	strh	r3, [r7, #22]
 800106c:	e076      	b.n	800115c <epd_paint_showChar+0x170>
  {
    if (size1 == 8)
 800106e:	883b      	ldrh	r3, [r7, #0]
 8001070:	2b08      	cmp	r3, #8
 8001072:	d10b      	bne.n	800108c <epd_paint_showChar+0xa0>
    {
      temp = asc2_0806[chr1][i];
 8001074:	897a      	ldrh	r2, [r7, #10]
 8001076:	8af9      	ldrh	r1, [r7, #22]
 8001078:	483e      	ldr	r0, [pc, #248]	@ (8001174 <epd_paint_showChar+0x188>)
 800107a:	4613      	mov	r3, r2
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	4413      	add	r3, r2
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	4403      	add	r3, r0
 8001084:	440b      	add	r3, r1
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	827b      	strh	r3, [r7, #18]
 800108a:	e028      	b.n	80010de <epd_paint_showChar+0xf2>
    } // 0806
    else if (size1 == 12)
 800108c:	883b      	ldrh	r3, [r7, #0]
 800108e:	2b0c      	cmp	r3, #12
 8001090:	d10b      	bne.n	80010aa <epd_paint_showChar+0xbe>
    {
      temp = asc2_1206[chr1][i];
 8001092:	897a      	ldrh	r2, [r7, #10]
 8001094:	8af9      	ldrh	r1, [r7, #22]
 8001096:	4838      	ldr	r0, [pc, #224]	@ (8001178 <epd_paint_showChar+0x18c>)
 8001098:	4613      	mov	r3, r2
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	4413      	add	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4403      	add	r3, r0
 80010a2:	440b      	add	r3, r1
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	827b      	strh	r3, [r7, #18]
 80010a8:	e019      	b.n	80010de <epd_paint_showChar+0xf2>
    } // 1206
    else if (size1 == 16)
 80010aa:	883b      	ldrh	r3, [r7, #0]
 80010ac:	2b10      	cmp	r3, #16
 80010ae:	d108      	bne.n	80010c2 <epd_paint_showChar+0xd6>
    {
      temp = asc2_1608[chr1][i];
 80010b0:	897a      	ldrh	r2, [r7, #10]
 80010b2:	8afb      	ldrh	r3, [r7, #22]
 80010b4:	4931      	ldr	r1, [pc, #196]	@ (800117c <epd_paint_showChar+0x190>)
 80010b6:	0112      	lsls	r2, r2, #4
 80010b8:	440a      	add	r2, r1
 80010ba:	4413      	add	r3, r2
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	827b      	strh	r3, [r7, #18]
 80010c0:	e00d      	b.n	80010de <epd_paint_showChar+0xf2>
    } // 1608
    else if (size1 == 24)
 80010c2:	883b      	ldrh	r3, [r7, #0]
 80010c4:	2b18      	cmp	r3, #24
 80010c6:	d150      	bne.n	800116a <epd_paint_showChar+0x17e>
    {
      temp = asc2_2412[chr1][i];
 80010c8:	897a      	ldrh	r2, [r7, #10]
 80010ca:	8af9      	ldrh	r1, [r7, #22]
 80010cc:	482c      	ldr	r0, [pc, #176]	@ (8001180 <epd_paint_showChar+0x194>)
 80010ce:	4613      	mov	r3, r2
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	4413      	add	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	4403      	add	r3, r0
 80010d8:	440b      	add	r3, r1
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	827b      	strh	r3, [r7, #18]
    } // 2412
    else
      return;
    for (m = 0; m < 8; m++)
 80010de:	2300      	movs	r3, #0
 80010e0:	82bb      	strh	r3, [r7, #20]
 80010e2:	e020      	b.n	8001126 <epd_paint_showChar+0x13a>
    {
      if (temp & 0x01)
 80010e4:	8a7b      	ldrh	r3, [r7, #18]
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d006      	beq.n	80010fc <epd_paint_showChar+0x110>
        epd_paint_drawPoint(x, y, color);
 80010ee:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80010f0:	88b9      	ldrh	r1, [r7, #4]
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fea3 	bl	8000e40 <epd_paint_drawPoint>
 80010fa:	e00b      	b.n	8001114 <epd_paint_showChar+0x128>
      else
        epd_paint_drawPoint(x, y, !color);
 80010fc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80010fe:	2b00      	cmp	r3, #0
 8001100:	bf0c      	ite	eq
 8001102:	2301      	moveq	r3, #1
 8001104:	2300      	movne	r3, #0
 8001106:	b2db      	uxtb	r3, r3
 8001108:	461a      	mov	r2, r3
 800110a:	88b9      	ldrh	r1, [r7, #4]
 800110c:	88fb      	ldrh	r3, [r7, #6]
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fe96 	bl	8000e40 <epd_paint_drawPoint>
      temp >>= 1;
 8001114:	8a7b      	ldrh	r3, [r7, #18]
 8001116:	085b      	lsrs	r3, r3, #1
 8001118:	827b      	strh	r3, [r7, #18]
      y++;
 800111a:	88bb      	ldrh	r3, [r7, #4]
 800111c:	3301      	adds	r3, #1
 800111e:	80bb      	strh	r3, [r7, #4]
    for (m = 0; m < 8; m++)
 8001120:	8abb      	ldrh	r3, [r7, #20]
 8001122:	3301      	adds	r3, #1
 8001124:	82bb      	strh	r3, [r7, #20]
 8001126:	8abb      	ldrh	r3, [r7, #20]
 8001128:	2b07      	cmp	r3, #7
 800112a:	d9db      	bls.n	80010e4 <epd_paint_showChar+0xf8>
    }
    x++;
 800112c:	88fb      	ldrh	r3, [r7, #6]
 800112e:	3301      	adds	r3, #1
 8001130:	80fb      	strh	r3, [r7, #6]
    if ((size1 != 8) && ((x - x0) == size1 / 2))
 8001132:	883b      	ldrh	r3, [r7, #0]
 8001134:	2b08      	cmp	r3, #8
 8001136:	d00c      	beq.n	8001152 <epd_paint_showChar+0x166>
 8001138:	88fa      	ldrh	r2, [r7, #6]
 800113a:	89bb      	ldrh	r3, [r7, #12]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	883a      	ldrh	r2, [r7, #0]
 8001140:	0852      	lsrs	r2, r2, #1
 8001142:	b292      	uxth	r2, r2
 8001144:	4293      	cmp	r3, r2
 8001146:	d104      	bne.n	8001152 <epd_paint_showChar+0x166>
    {
      x = x0;
 8001148:	89bb      	ldrh	r3, [r7, #12]
 800114a:	80fb      	strh	r3, [r7, #6]
      y0 = y0 + 8;
 800114c:	89fb      	ldrh	r3, [r7, #14]
 800114e:	3308      	adds	r3, #8
 8001150:	81fb      	strh	r3, [r7, #14]
    }
    y = y0;
 8001152:	89fb      	ldrh	r3, [r7, #14]
 8001154:	80bb      	strh	r3, [r7, #4]
  for (i = 0; i < size2; i++)
 8001156:	8afb      	ldrh	r3, [r7, #22]
 8001158:	3301      	adds	r3, #1
 800115a:	82fb      	strh	r3, [r7, #22]
 800115c:	8afa      	ldrh	r2, [r7, #22]
 800115e:	8a3b      	ldrh	r3, [r7, #16]
 8001160:	429a      	cmp	r2, r3
 8001162:	d384      	bcc.n	800106e <epd_paint_showChar+0x82>
 8001164:	e002      	b.n	800116c <epd_paint_showChar+0x180>
    return;
 8001166:	bf00      	nop
 8001168:	e000      	b.n	800116c <epd_paint_showChar+0x180>
      return;
 800116a:	bf00      	nop
  }
}
 800116c:	371c      	adds	r7, #28
 800116e:	46bd      	mov	sp, r7
 8001170:	bd90      	pop	{r4, r7, pc}
 8001172:	bf00      	nop
 8001174:	08008f14 	.word	0x08008f14
 8001178:	0800913c 	.word	0x0800913c
 800117c:	080095b0 	.word	0x080095b0
 8001180:	08009ba0 	.word	0x08009ba0

08001184 <epd_paint_showString>:

void epd_paint_showString(uint16_t x, uint16_t y, uint8_t *chr, uint16_t size1, uint16_t color)
{
 8001184:	b590      	push	{r4, r7, lr}
 8001186:	b087      	sub	sp, #28
 8001188:	af02      	add	r7, sp, #8
 800118a:	60ba      	str	r2, [r7, #8]
 800118c:	461a      	mov	r2, r3
 800118e:	4603      	mov	r3, r0
 8001190:	81fb      	strh	r3, [r7, #14]
 8001192:	460b      	mov	r3, r1
 8001194:	81bb      	strh	r3, [r7, #12]
 8001196:	4613      	mov	r3, r2
 8001198:	80fb      	strh	r3, [r7, #6]
  while (*chr != '\0')
 800119a:	e027      	b.n	80011ec <epd_paint_showString+0x68>
  {
    epd_paint_showChar(x, y, *chr, size1, color);
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	461c      	mov	r4, r3
 80011a2:	88fa      	ldrh	r2, [r7, #6]
 80011a4:	89b9      	ldrh	r1, [r7, #12]
 80011a6:	89f8      	ldrh	r0, [r7, #14]
 80011a8:	8c3b      	ldrh	r3, [r7, #32]
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	4613      	mov	r3, r2
 80011ae:	4622      	mov	r2, r4
 80011b0:	f7ff ff1c 	bl	8000fec <epd_paint_showChar>
    chr++;
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	3301      	adds	r3, #1
 80011b8:	60bb      	str	r3, [r7, #8]
    if (size1 == 8)
 80011ba:	88fb      	ldrh	r3, [r7, #6]
 80011bc:	2b08      	cmp	r3, #8
 80011be:	d107      	bne.n	80011d0 <epd_paint_showString+0x4c>
    {
      x += 6;
 80011c0:	89fb      	ldrh	r3, [r7, #14]
 80011c2:	3306      	adds	r3, #6
 80011c4:	81fb      	strh	r3, [r7, #14]
      if(x > EPD_H-6)
 80011c6:	89fb      	ldrh	r3, [r7, #14]
 80011c8:	f5b3 7f93 	cmp.w	r3, #294	@ 0x126
 80011cc:	d90e      	bls.n	80011ec <epd_paint_showString+0x68>
              break;
 80011ce:	e013      	b.n	80011f8 <epd_paint_showString+0x74>
    }
    else
    {
      x += size1 / 2;
 80011d0:	88fb      	ldrh	r3, [r7, #6]
 80011d2:	085b      	lsrs	r3, r3, #1
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	89fb      	ldrh	r3, [r7, #14]
 80011d8:	4413      	add	r3, r2
 80011da:	81fb      	strh	r3, [r7, #14]
      if(x > EPD_H-size1 / 2)
 80011dc:	89fa      	ldrh	r2, [r7, #14]
 80011de:	88fb      	ldrh	r3, [r7, #6]
 80011e0:	085b      	lsrs	r3, r3, #1
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	f5c3 7396 	rsb	r3, r3, #300	@ 0x12c
 80011e8:	429a      	cmp	r2, r3
 80011ea:	dc04      	bgt.n	80011f6 <epd_paint_showString+0x72>
  while (*chr != '\0')
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d1d3      	bne.n	800119c <epd_paint_showString+0x18>
              break;
    }
  }
}
 80011f4:	e000      	b.n	80011f8 <epd_paint_showString+0x74>
              break;
 80011f6:	bf00      	nop
}
 80011f8:	bf00      	nop
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd90      	pop	{r4, r7, pc}

08001200 <epd_paint_showPicture>:
    y = y0;
  }
}

void epd_paint_showPicture(uint16_t x, uint16_t y, uint16_t sizex, uint16_t sizey, const uint8_t BMP[], uint16_t Color)
{
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b087      	sub	sp, #28
 8001204:	af00      	add	r7, sp, #0
 8001206:	4604      	mov	r4, r0
 8001208:	4608      	mov	r0, r1
 800120a:	4611      	mov	r1, r2
 800120c:	461a      	mov	r2, r3
 800120e:	4623      	mov	r3, r4
 8001210:	80fb      	strh	r3, [r7, #6]
 8001212:	4603      	mov	r3, r0
 8001214:	80bb      	strh	r3, [r7, #4]
 8001216:	460b      	mov	r3, r1
 8001218:	807b      	strh	r3, [r7, #2]
 800121a:	4613      	mov	r3, r2
 800121c:	803b      	strh	r3, [r7, #0]
  uint16_t j = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	82fb      	strh	r3, [r7, #22]
  uint16_t i, n = 0, temp = 0, m = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	827b      	strh	r3, [r7, #18]
 8001226:	2300      	movs	r3, #0
 8001228:	823b      	strh	r3, [r7, #16]
 800122a:	2300      	movs	r3, #0
 800122c:	81fb      	strh	r3, [r7, #14]
  uint16_t x0 = 0, y0 = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	817b      	strh	r3, [r7, #10]
 8001232:	2300      	movs	r3, #0
 8001234:	81bb      	strh	r3, [r7, #12]
  x += 1, y += 1, x0 = x, y0 = y;
 8001236:	88fb      	ldrh	r3, [r7, #6]
 8001238:	3301      	adds	r3, #1
 800123a:	80fb      	strh	r3, [r7, #6]
 800123c:	88bb      	ldrh	r3, [r7, #4]
 800123e:	3301      	adds	r3, #1
 8001240:	80bb      	strh	r3, [r7, #4]
 8001242:	88fb      	ldrh	r3, [r7, #6]
 8001244:	817b      	strh	r3, [r7, #10]
 8001246:	88bb      	ldrh	r3, [r7, #4]
 8001248:	81bb      	strh	r3, [r7, #12]
  sizey = sizey / 8 + ((sizey % 8) ? 1 : 0);
 800124a:	883b      	ldrh	r3, [r7, #0]
 800124c:	08db      	lsrs	r3, r3, #3
 800124e:	b29b      	uxth	r3, r3
 8001250:	883a      	ldrh	r2, [r7, #0]
 8001252:	f002 0207 	and.w	r2, r2, #7
 8001256:	b292      	uxth	r2, r2
 8001258:	2a00      	cmp	r2, #0
 800125a:	bf14      	ite	ne
 800125c:	2201      	movne	r2, #1
 800125e:	2200      	moveq	r2, #0
 8001260:	b2d2      	uxtb	r2, r2
 8001262:	4413      	add	r3, r2
 8001264:	803b      	strh	r3, [r7, #0]
  for (n = 0; n < sizey; n++)
 8001266:	2300      	movs	r3, #0
 8001268:	827b      	strh	r3, [r7, #18]
 800126a:	e04b      	b.n	8001304 <epd_paint_showPicture+0x104>
  {
    for (i = 0; i < sizex; i++)
 800126c:	2300      	movs	r3, #0
 800126e:	82bb      	strh	r3, [r7, #20]
 8001270:	e041      	b.n	80012f6 <epd_paint_showPicture+0xf6>
    {
      temp = BMP[j];
 8001272:	8afb      	ldrh	r3, [r7, #22]
 8001274:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001276:	4413      	add	r3, r2
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	823b      	strh	r3, [r7, #16]
      j++;
 800127c:	8afb      	ldrh	r3, [r7, #22]
 800127e:	3301      	adds	r3, #1
 8001280:	82fb      	strh	r3, [r7, #22]
      for (m = 0; m < 8; m++)
 8001282:	2300      	movs	r3, #0
 8001284:	81fb      	strh	r3, [r7, #14]
 8001286:	e020      	b.n	80012ca <epd_paint_showPicture+0xca>
      {
        if (temp & 0x01)
 8001288:	8a3b      	ldrh	r3, [r7, #16]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	2b00      	cmp	r3, #0
 8001290:	d00c      	beq.n	80012ac <epd_paint_showPicture+0xac>
          epd_paint_drawPoint(x, y, !Color);
 8001292:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001294:	2b00      	cmp	r3, #0
 8001296:	bf0c      	ite	eq
 8001298:	2301      	moveq	r3, #1
 800129a:	2300      	movne	r3, #0
 800129c:	b2db      	uxtb	r3, r3
 800129e:	461a      	mov	r2, r3
 80012a0:	88b9      	ldrh	r1, [r7, #4]
 80012a2:	88fb      	ldrh	r3, [r7, #6]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fdcb 	bl	8000e40 <epd_paint_drawPoint>
 80012aa:	e005      	b.n	80012b8 <epd_paint_showPicture+0xb8>
        else
          epd_paint_drawPoint(x, y, Color);
 80012ac:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80012ae:	88b9      	ldrh	r1, [r7, #4]
 80012b0:	88fb      	ldrh	r3, [r7, #6]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fdc4 	bl	8000e40 <epd_paint_drawPoint>
        temp >>= 1;
 80012b8:	8a3b      	ldrh	r3, [r7, #16]
 80012ba:	085b      	lsrs	r3, r3, #1
 80012bc:	823b      	strh	r3, [r7, #16]
        y++;
 80012be:	88bb      	ldrh	r3, [r7, #4]
 80012c0:	3301      	adds	r3, #1
 80012c2:	80bb      	strh	r3, [r7, #4]
      for (m = 0; m < 8; m++)
 80012c4:	89fb      	ldrh	r3, [r7, #14]
 80012c6:	3301      	adds	r3, #1
 80012c8:	81fb      	strh	r3, [r7, #14]
 80012ca:	89fb      	ldrh	r3, [r7, #14]
 80012cc:	2b07      	cmp	r3, #7
 80012ce:	d9db      	bls.n	8001288 <epd_paint_showPicture+0x88>
      }
      x++;
 80012d0:	88fb      	ldrh	r3, [r7, #6]
 80012d2:	3301      	adds	r3, #1
 80012d4:	80fb      	strh	r3, [r7, #6]
      if ((x - x0) == sizex)
 80012d6:	88fa      	ldrh	r2, [r7, #6]
 80012d8:	897b      	ldrh	r3, [r7, #10]
 80012da:	1ad2      	subs	r2, r2, r3
 80012dc:	887b      	ldrh	r3, [r7, #2]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d104      	bne.n	80012ec <epd_paint_showPicture+0xec>
      {
        x = x0;
 80012e2:	897b      	ldrh	r3, [r7, #10]
 80012e4:	80fb      	strh	r3, [r7, #6]
        y0 = y0 + 8;
 80012e6:	89bb      	ldrh	r3, [r7, #12]
 80012e8:	3308      	adds	r3, #8
 80012ea:	81bb      	strh	r3, [r7, #12]
      }
      y = y0;
 80012ec:	89bb      	ldrh	r3, [r7, #12]
 80012ee:	80bb      	strh	r3, [r7, #4]
    for (i = 0; i < sizex; i++)
 80012f0:	8abb      	ldrh	r3, [r7, #20]
 80012f2:	3301      	adds	r3, #1
 80012f4:	82bb      	strh	r3, [r7, #20]
 80012f6:	8aba      	ldrh	r2, [r7, #20]
 80012f8:	887b      	ldrh	r3, [r7, #2]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d3b9      	bcc.n	8001272 <epd_paint_showPicture+0x72>
  for (n = 0; n < sizey; n++)
 80012fe:	8a7b      	ldrh	r3, [r7, #18]
 8001300:	3301      	adds	r3, #1
 8001302:	827b      	strh	r3, [r7, #18]
 8001304:	8a7a      	ldrh	r2, [r7, #18]
 8001306:	883b      	ldrh	r3, [r7, #0]
 8001308:	429a      	cmp	r2, r3
 800130a:	d3af      	bcc.n	800126c <epd_paint_showPicture+0x6c>
    }
  }
}
 800130c:	bf00      	nop
 800130e:	bf00      	nop
 8001310:	371c      	adds	r7, #28
 8001312:	46bd      	mov	sp, r7
 8001314:	bd90      	pop	{r4, r7, pc}
	...

08001318 <__io_putchar>:
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart4, (uint8_t *)&ch, 1, 0xFFFF);
 8001320:	1d39      	adds	r1, r7, #4
 8001322:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001326:	2201      	movs	r2, #1
 8001328:	4803      	ldr	r0, [pc, #12]	@ (8001338 <__io_putchar+0x20>)
 800132a:	f005 f9b3 	bl	8006694 <HAL_UART_Transmit>
  return ch;
 800132e:	687b      	ldr	r3, [r7, #4]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	24000174 	.word	0x24000174

0800133c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001340:	f000 fb22 	bl	8001988 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001344:	f000 fdf8 	bl	8001f38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001348:	f000 f816 	bl	8001378 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800134c:	f000 f9ba 	bl	80016c4 <MX_GPIO_Init>
  MX_TIM8_Init();
 8001350:	f000 f8dc 	bl	800150c <MX_TIM8_Init>
  MX_UART4_Init();
 8001354:	f000 f96a 	bl	800162c <MX_UART4_Init>
  MX_SPI2_Init();
 8001358:	f000 f87e 	bl	8001458 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  #ifdef __WE_ACT_STUDIO_VERSION
    _mainWeActStudio();
 800135c:	f000 fa38 	bl	80017d0 <_mainWeActStudio>
      /*ITM_SendChar('a');
      ITM_SendChar('b');
      ITM_SendChar('c');
      ITM_SendChar('\n');*/

      HAL_GPIO_TogglePin (GPIOE, GPIO_PIN_3);
 8001360:	2108      	movs	r1, #8
 8001362:	4804      	ldr	r0, [pc, #16]	@ (8001374 <main+0x38>)
 8001364:	f001 f9d3 	bl	800270e <HAL_GPIO_TogglePin>
      HAL_Delay (4000);   /* Insert delay 100 ms */
 8001368:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 800136c:	f000 fe76 	bl	800205c <HAL_Delay>
      HAL_GPIO_TogglePin (GPIOE, GPIO_PIN_3);
 8001370:	bf00      	nop
 8001372:	e7f5      	b.n	8001360 <main+0x24>
 8001374:	58021000 	.word	0x58021000

08001378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b09c      	sub	sp, #112	@ 0x70
 800137c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800137e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001382:	224c      	movs	r2, #76	@ 0x4c
 8001384:	2100      	movs	r1, #0
 8001386:	4618      	mov	r0, r3
 8001388:	f006 fdcc 	bl	8007f24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	2220      	movs	r2, #32
 8001390:	2100      	movs	r1, #0
 8001392:	4618      	mov	r0, r3
 8001394:	f006 fdc6 	bl	8007f24 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001398:	2002      	movs	r0, #2
 800139a:	f001 f9d3 	bl	8002744 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800139e:	2300      	movs	r3, #0
 80013a0:	603b      	str	r3, [r7, #0]
 80013a2:	4b2c      	ldr	r3, [pc, #176]	@ (8001454 <SystemClock_Config+0xdc>)
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80013aa:	4a2a      	ldr	r2, [pc, #168]	@ (8001454 <SystemClock_Config+0xdc>)
 80013ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013b0:	6193      	str	r3, [r2, #24]
 80013b2:	4b28      	ldr	r3, [pc, #160]	@ (8001454 <SystemClock_Config+0xdc>)
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013ba:	603b      	str	r3, [r7, #0]
 80013bc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013be:	bf00      	nop
 80013c0:	4b24      	ldr	r3, [pc, #144]	@ (8001454 <SystemClock_Config+0xdc>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80013cc:	d1f8      	bne.n	80013c0 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013ce:	2302      	movs	r3, #2
 80013d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80013d2:	2301      	movs	r3, #1
 80013d4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80013d6:	2340      	movs	r3, #64	@ 0x40
 80013d8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013da:	2302      	movs	r3, #2
 80013dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013de:	2300      	movs	r3, #0
 80013e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013e2:	2304      	movs	r3, #4
 80013e4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80013e6:	230c      	movs	r3, #12
 80013e8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80013ea:	2302      	movs	r3, #2
 80013ec:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80013ee:	2303      	movs	r3, #3
 80013f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013f2:	2302      	movs	r3, #2
 80013f4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80013f6:	230c      	movs	r3, #12
 80013f8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001402:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001406:	4618      	mov	r0, r3
 8001408:	f001 f9d6 	bl	80027b8 <HAL_RCC_OscConfig>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001412:	f000 fae5 	bl	80019e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001416:	233f      	movs	r3, #63	@ 0x3f
 8001418:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800141a:	2300      	movs	r3, #0
 800141c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800142a:	2340      	movs	r3, #64	@ 0x40
 800142c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001432:	2300      	movs	r3, #0
 8001434:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	2101      	movs	r1, #1
 800143a:	4618      	mov	r0, r3
 800143c:	f001 fd96 	bl	8002f6c <HAL_RCC_ClockConfig>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001446:	f000 facb 	bl	80019e0 <Error_Handler>
  }
}
 800144a:	bf00      	nop
 800144c:	3770      	adds	r7, #112	@ 0x70
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	58024800 	.word	0x58024800

08001458 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800145c:	4b29      	ldr	r3, [pc, #164]	@ (8001504 <MX_SPI2_Init+0xac>)
 800145e:	4a2a      	ldr	r2, [pc, #168]	@ (8001508 <MX_SPI2_Init+0xb0>)
 8001460:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001462:	4b28      	ldr	r3, [pc, #160]	@ (8001504 <MX_SPI2_Init+0xac>)
 8001464:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001468:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 800146a:	4b26      	ldr	r3, [pc, #152]	@ (8001504 <MX_SPI2_Init+0xac>)
 800146c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001470:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001472:	4b24      	ldr	r3, [pc, #144]	@ (8001504 <MX_SPI2_Init+0xac>)
 8001474:	2207      	movs	r2, #7
 8001476:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001478:	4b22      	ldr	r3, [pc, #136]	@ (8001504 <MX_SPI2_Init+0xac>)
 800147a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800147e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001480:	4b20      	ldr	r3, [pc, #128]	@ (8001504 <MX_SPI2_Init+0xac>)
 8001482:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001486:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001488:	4b1e      	ldr	r3, [pc, #120]	@ (8001504 <MX_SPI2_Init+0xac>)
 800148a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800148e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001490:	4b1c      	ldr	r3, [pc, #112]	@ (8001504 <MX_SPI2_Init+0xac>)
 8001492:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 8001496:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001498:	4b1a      	ldr	r3, [pc, #104]	@ (8001504 <MX_SPI2_Init+0xac>)
 800149a:	2200      	movs	r2, #0
 800149c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800149e:	4b19      	ldr	r3, [pc, #100]	@ (8001504 <MX_SPI2_Init+0xac>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014a4:	4b17      	ldr	r3, [pc, #92]	@ (8001504 <MX_SPI2_Init+0xac>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80014aa:	4b16      	ldr	r3, [pc, #88]	@ (8001504 <MX_SPI2_Init+0xac>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014b0:	4b14      	ldr	r3, [pc, #80]	@ (8001504 <MX_SPI2_Init+0xac>)
 80014b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014b6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80014b8:	4b12      	ldr	r3, [pc, #72]	@ (8001504 <MX_SPI2_Init+0xac>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80014be:	4b11      	ldr	r3, [pc, #68]	@ (8001504 <MX_SPI2_Init+0xac>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80014c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001504 <MX_SPI2_Init+0xac>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80014ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001504 <MX_SPI2_Init+0xac>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80014d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001504 <MX_SPI2_Init+0xac>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80014d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001504 <MX_SPI2_Init+0xac>)
 80014d8:	2200      	movs	r2, #0
 80014da:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80014dc:	4b09      	ldr	r3, [pc, #36]	@ (8001504 <MX_SPI2_Init+0xac>)
 80014de:	2200      	movs	r2, #0
 80014e0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80014e2:	4b08      	ldr	r3, [pc, #32]	@ (8001504 <MX_SPI2_Init+0xac>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80014e8:	4b06      	ldr	r3, [pc, #24]	@ (8001504 <MX_SPI2_Init+0xac>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014ee:	4805      	ldr	r0, [pc, #20]	@ (8001504 <MX_SPI2_Init+0xac>)
 80014f0:	f003 fe8a 	bl	8005208 <HAL_SPI_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_SPI2_Init+0xa6>
  {
    Error_Handler();
 80014fa:	f000 fa71 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	240000a0 	.word	0x240000a0
 8001508:	40003800 	.word	0x40003800

0800150c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08c      	sub	sp, #48	@ 0x30
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001512:	f107 031c 	add.w	r3, r7, #28
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]
 8001520:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001522:	f107 0310 	add.w	r3, r7, #16
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800152e:	463b      	mov	r3, r7
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800153a:	4b3a      	ldr	r3, [pc, #232]	@ (8001624 <MX_TIM8_Init+0x118>)
 800153c:	4a3a      	ldr	r2, [pc, #232]	@ (8001628 <MX_TIM8_Init+0x11c>)
 800153e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001540:	4b38      	ldr	r3, [pc, #224]	@ (8001624 <MX_TIM8_Init+0x118>)
 8001542:	2200      	movs	r2, #0
 8001544:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001546:	4b37      	ldr	r3, [pc, #220]	@ (8001624 <MX_TIM8_Init+0x118>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800154c:	4b35      	ldr	r3, [pc, #212]	@ (8001624 <MX_TIM8_Init+0x118>)
 800154e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001552:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001554:	4b33      	ldr	r3, [pc, #204]	@ (8001624 <MX_TIM8_Init+0x118>)
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800155a:	4b32      	ldr	r3, [pc, #200]	@ (8001624 <MX_TIM8_Init+0x118>)
 800155c:	2200      	movs	r2, #0
 800155e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001560:	4b30      	ldr	r3, [pc, #192]	@ (8001624 <MX_TIM8_Init+0x118>)
 8001562:	2200      	movs	r2, #0
 8001564:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001566:	482f      	ldr	r0, [pc, #188]	@ (8001624 <MX_TIM8_Init+0x118>)
 8001568:	f004 fa57 	bl	8005a1a <HAL_TIM_Base_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_TIM8_Init+0x6a>
  {
    Error_Handler();
 8001572:	f000 fa35 	bl	80019e0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8001576:	482b      	ldr	r0, [pc, #172]	@ (8001624 <MX_TIM8_Init+0x118>)
 8001578:	f004 faa6 	bl	8005ac8 <HAL_TIM_IC_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001582:	f000 fa2d 	bl	80019e0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001586:	2307      	movs	r3, #7
 8001588:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800158a:	2300      	movs	r3, #0
 800158c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 800158e:	f107 031c 	add.w	r3, r7, #28
 8001592:	4619      	mov	r1, r3
 8001594:	4823      	ldr	r0, [pc, #140]	@ (8001624 <MX_TIM8_Init+0x118>)
 8001596:	f004 fb94 	bl	8005cc2 <HAL_TIM_SlaveConfigSynchro>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80015a0:	f000 fa1e 	bl	80019e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a4:	2300      	movs	r3, #0
 80015a6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80015b0:	f107 0310 	add.w	r3, r7, #16
 80015b4:	4619      	mov	r1, r3
 80015b6:	481b      	ldr	r0, [pc, #108]	@ (8001624 <MX_TIM8_Init+0x118>)
 80015b8:	f004 ff12 	bl	80063e0 <HAL_TIMEx_MasterConfigSynchronization>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM8_Init+0xba>
  {
    Error_Handler();
 80015c2:	f000 fa0d 	bl	80019e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80015c6:	2300      	movs	r3, #0
 80015c8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015ca:	2301      	movs	r3, #1
 80015cc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80015d6:	463b      	mov	r3, r7
 80015d8:	2200      	movs	r2, #0
 80015da:	4619      	mov	r1, r3
 80015dc:	4811      	ldr	r0, [pc, #68]	@ (8001624 <MX_TIM8_Init+0x118>)
 80015de:	f004 fad4 	bl	8005b8a <HAL_TIM_IC_ConfigChannel>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM8_Init+0xe0>
  {
    Error_Handler();
 80015e8:	f000 f9fa 	bl	80019e0 <Error_Handler>
  }
  if (HAL_TIMEx_TISelection(&htim8, TIM_TIM8_TI1_COMP2, TIM_CHANNEL_1) != HAL_OK)
 80015ec:	2200      	movs	r2, #0
 80015ee:	2101      	movs	r1, #1
 80015f0:	480c      	ldr	r0, [pc, #48]	@ (8001624 <MX_TIM8_Init+0x118>)
 80015f2:	f004 ff91 	bl	8006518 <HAL_TIMEx_TISelection>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 80015fc:	f000 f9f0 	bl	80019e0 <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001600:	2302      	movs	r3, #2
 8001602:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001604:	463b      	mov	r3, r7
 8001606:	2204      	movs	r2, #4
 8001608:	4619      	mov	r1, r3
 800160a:	4806      	ldr	r0, [pc, #24]	@ (8001624 <MX_TIM8_Init+0x118>)
 800160c:	f004 fabd 	bl	8005b8a <HAL_TIM_IC_ConfigChannel>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8001616:	f000 f9e3 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800161a:	bf00      	nop
 800161c:	3730      	adds	r7, #48	@ 0x30
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	24000128 	.word	0x24000128
 8001628:	40010400 	.word	0x40010400

0800162c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001630:	4b22      	ldr	r3, [pc, #136]	@ (80016bc <MX_UART4_Init+0x90>)
 8001632:	4a23      	ldr	r2, [pc, #140]	@ (80016c0 <MX_UART4_Init+0x94>)
 8001634:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001636:	4b21      	ldr	r3, [pc, #132]	@ (80016bc <MX_UART4_Init+0x90>)
 8001638:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800163c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800163e:	4b1f      	ldr	r3, [pc, #124]	@ (80016bc <MX_UART4_Init+0x90>)
 8001640:	2200      	movs	r2, #0
 8001642:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001644:	4b1d      	ldr	r3, [pc, #116]	@ (80016bc <MX_UART4_Init+0x90>)
 8001646:	2200      	movs	r2, #0
 8001648:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800164a:	4b1c      	ldr	r3, [pc, #112]	@ (80016bc <MX_UART4_Init+0x90>)
 800164c:	2200      	movs	r2, #0
 800164e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001650:	4b1a      	ldr	r3, [pc, #104]	@ (80016bc <MX_UART4_Init+0x90>)
 8001652:	220c      	movs	r2, #12
 8001654:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001656:	4b19      	ldr	r3, [pc, #100]	@ (80016bc <MX_UART4_Init+0x90>)
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800165c:	4b17      	ldr	r3, [pc, #92]	@ (80016bc <MX_UART4_Init+0x90>)
 800165e:	2200      	movs	r2, #0
 8001660:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001662:	4b16      	ldr	r3, [pc, #88]	@ (80016bc <MX_UART4_Init+0x90>)
 8001664:	2200      	movs	r2, #0
 8001666:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001668:	4b14      	ldr	r3, [pc, #80]	@ (80016bc <MX_UART4_Init+0x90>)
 800166a:	2200      	movs	r2, #0
 800166c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800166e:	4b13      	ldr	r3, [pc, #76]	@ (80016bc <MX_UART4_Init+0x90>)
 8001670:	2200      	movs	r2, #0
 8001672:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001674:	4811      	ldr	r0, [pc, #68]	@ (80016bc <MX_UART4_Init+0x90>)
 8001676:	f004 ffbd 	bl	80065f4 <HAL_UART_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001680:	f000 f9ae 	bl	80019e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001684:	2100      	movs	r1, #0
 8001686:	480d      	ldr	r0, [pc, #52]	@ (80016bc <MX_UART4_Init+0x90>)
 8001688:	f006 f957 	bl	800793a <HAL_UARTEx_SetTxFifoThreshold>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001692:	f000 f9a5 	bl	80019e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001696:	2100      	movs	r1, #0
 8001698:	4808      	ldr	r0, [pc, #32]	@ (80016bc <MX_UART4_Init+0x90>)
 800169a:	f006 f98c 	bl	80079b6 <HAL_UARTEx_SetRxFifoThreshold>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80016a4:	f000 f99c 	bl	80019e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80016a8:	4804      	ldr	r0, [pc, #16]	@ (80016bc <MX_UART4_Init+0x90>)
 80016aa:	f006 f90d 	bl	80078c8 <HAL_UARTEx_DisableFifoMode>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80016b4:	f000 f994 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	24000174 	.word	0x24000174
 80016c0:	40004c00 	.word	0x40004c00

080016c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08a      	sub	sp, #40	@ 0x28
 80016c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ca:	f107 0314 	add.w	r3, r7, #20
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]
 80016d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016da:	4b3a      	ldr	r3, [pc, #232]	@ (80017c4 <MX_GPIO_Init+0x100>)
 80016dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016e0:	4a38      	ldr	r2, [pc, #224]	@ (80017c4 <MX_GPIO_Init+0x100>)
 80016e2:	f043 0310 	orr.w	r3, r3, #16
 80016e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016ea:	4b36      	ldr	r3, [pc, #216]	@ (80017c4 <MX_GPIO_Init+0x100>)
 80016ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016f0:	f003 0310 	and.w	r3, r3, #16
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016f8:	4b32      	ldr	r3, [pc, #200]	@ (80017c4 <MX_GPIO_Init+0x100>)
 80016fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016fe:	4a31      	ldr	r2, [pc, #196]	@ (80017c4 <MX_GPIO_Init+0x100>)
 8001700:	f043 0304 	orr.w	r3, r3, #4
 8001704:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001708:	4b2e      	ldr	r3, [pc, #184]	@ (80017c4 <MX_GPIO_Init+0x100>)
 800170a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800170e:	f003 0304 	and.w	r3, r3, #4
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001716:	4b2b      	ldr	r3, [pc, #172]	@ (80017c4 <MX_GPIO_Init+0x100>)
 8001718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800171c:	4a29      	ldr	r2, [pc, #164]	@ (80017c4 <MX_GPIO_Init+0x100>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001726:	4b27      	ldr	r3, [pc, #156]	@ (80017c4 <MX_GPIO_Init+0x100>)
 8001728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001734:	4b23      	ldr	r3, [pc, #140]	@ (80017c4 <MX_GPIO_Init+0x100>)
 8001736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800173a:	4a22      	ldr	r2, [pc, #136]	@ (80017c4 <MX_GPIO_Init+0x100>)
 800173c:	f043 0302 	orr.w	r3, r3, #2
 8001740:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001744:	4b1f      	ldr	r3, [pc, #124]	@ (80017c4 <MX_GPIO_Init+0x100>)
 8001746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8001752:	2200      	movs	r2, #0
 8001754:	2108      	movs	r1, #8
 8001756:	481c      	ldr	r0, [pc, #112]	@ (80017c8 <MX_GPIO_Init+0x104>)
 8001758:	f000 ffc0 	bl	80026dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin|SPI2_CS_Pin|SPI2_RESET_Pin, GPIO_PIN_RESET);
 800175c:	2200      	movs	r2, #0
 800175e:	f640 0106 	movw	r1, #2054	@ 0x806
 8001762:	481a      	ldr	r0, [pc, #104]	@ (80017cc <MX_GPIO_Init+0x108>)
 8001764:	f000 ffba 	bl	80026dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001768:	2308      	movs	r3, #8
 800176a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176c:	2301      	movs	r3, #1
 800176e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001774:	2300      	movs	r3, #0
 8001776:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	4619      	mov	r1, r3
 800177e:	4812      	ldr	r0, [pc, #72]	@ (80017c8 <MX_GPIO_Init+0x104>)
 8001780:	f000 fdec 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_BUSY_Pin */
  GPIO_InitStruct.Pin = SPI2_BUSY_Pin;
 8001784:	2301      	movs	r3, #1
 8001786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001788:	2300      	movs	r3, #0
 800178a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI2_BUSY_GPIO_Port, &GPIO_InitStruct);
 8001790:	f107 0314 	add.w	r3, r7, #20
 8001794:	4619      	mov	r1, r3
 8001796:	480d      	ldr	r0, [pc, #52]	@ (80017cc <MX_GPIO_Init+0x108>)
 8001798:	f000 fde0 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_DC_Pin SPI2_CS_Pin SPI2_RESET_Pin */
  GPIO_InitStruct.Pin = SPI2_DC_Pin|SPI2_CS_Pin|SPI2_RESET_Pin;
 800179c:	f640 0306 	movw	r3, #2054	@ 0x806
 80017a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a2:	2301      	movs	r3, #1
 80017a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80017aa:	2301      	movs	r3, #1
 80017ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ae:	f107 0314 	add.w	r3, r7, #20
 80017b2:	4619      	mov	r1, r3
 80017b4:	4805      	ldr	r0, [pc, #20]	@ (80017cc <MX_GPIO_Init+0x108>)
 80017b6:	f000 fdd1 	bl	800235c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017ba:	bf00      	nop
 80017bc:	3728      	adds	r7, #40	@ 0x28
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	58024400 	.word	0x58024400
 80017c8:	58021000 	.word	0x58021000
 80017cc:	58020400 	.word	0x58020400

080017d0 <_mainWeActStudio>:

/* USER CODE BEGIN 4 */
#ifdef __WE_ACT_STUDIO_VERSION
  void _mainWeActStudio(void) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b088      	sub	sp, #32
 80017d4:	af02      	add	r7, sp, #8
    uint8_t text[20];

    HAL_Delay(1000);
 80017d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017da:	f000 fc3f 	bl	800205c <HAL_Delay>
    printf("WeActStudio start : \r\n");
 80017de:	485d      	ldr	r0, [pc, #372]	@ (8001954 <_mainWeActStudio+0x184>)
 80017e0:	f006 faa0 	bl	8007d24 <puts>
    epd_init();
 80017e4:	f7ff f862 	bl	80008ac <epd_init>
    epd_paint_clear(EPD_COLOR_WHITE);
 80017e8:	20ff      	movs	r0, #255	@ 0xff
 80017ea:	f7ff fae5 	bl	8000db8 <epd_paint_clear>
    epd_paint_newimage(image_bw, EPD_W, EPD_H, EPD_ROTATE_270, EPD_COLOR_WHITE);
 80017ee:	23ff      	movs	r3, #255	@ 0xff
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 80017f6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80017fa:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80017fe:	4856      	ldr	r0, [pc, #344]	@ (8001958 <_mainWeActStudio+0x188>)
 8001800:	f7ff fa06 	bl	8000c10 <epd_paint_newimage>
    epd_paint_selectimage(image_bw);
 8001804:	4854      	ldr	r0, [pc, #336]	@ (8001958 <_mainWeActStudio+0x188>)
 8001806:	f7ff fb0b 	bl	8000e20 <epd_paint_selectimage>
    epd_paint_clear(EPD_COLOR_WHITE);
 800180a:	20ff      	movs	r0, #255	@ 0xff
 800180c:	f7ff fad4 	bl	8000db8 <epd_paint_clear>
    epd_paint_showPicture(
 8001810:	23ff      	movs	r3, #255	@ 0xff
 8001812:	9301      	str	r3, [sp, #4]
 8001814:	4b51      	ldr	r3, [pc, #324]	@ (800195c <_mainWeActStudio+0x18c>)
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	237a      	movs	r3, #122	@ 0x7a
 800181a:	22fa      	movs	r2, #250	@ 0xfa
 800181c:	2159      	movs	r1, #89	@ 0x59
 800181e:	204b      	movs	r0, #75	@ 0x4b
 8001820:	f7ff fcee 	bl	8001200 <epd_paint_showPicture>
      (EPD_W - 250) / 2,
      (EPD_H - 122) / 2,
      250, 122,
      gImage_1,
      EPD_COLOR_WHITE);
    epd_displayBW(image_bw);
 8001824:	484c      	ldr	r0, [pc, #304]	@ (8001958 <_mainWeActStudio+0x188>)
 8001826:	f7ff f999 	bl	8000b5c <epd_displayBW>
    //epd_enter_deepsleepmode(EPD_DEEPSLEEP_MODE1);

    HAL_Delay(2000);
 800182a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800182e:	f000 fc15 	bl	800205c <HAL_Delay>
    printf("... Partial display  \r\n");
 8001832:	484b      	ldr	r0, [pc, #300]	@ (8001960 <_mainWeActStudio+0x190>)
 8001834:	f006 fa76 	bl	8007d24 <puts>
    epd_init_partial();
 8001838:	f7ff f894 	bl	8000964 <epd_init_partial>

    epd_paint_selectimage(image_bw);
 800183c:	4846      	ldr	r0, [pc, #280]	@ (8001958 <_mainWeActStudio+0x188>)
 800183e:	f7ff faef 	bl	8000e20 <epd_paint_selectimage>
    epd_paint_clear(EPD_COLOR_WHITE);
 8001842:	20ff      	movs	r0, #255	@ 0xff
 8001844:	f7ff fab8 	bl	8000db8 <epd_paint_clear>

    epd_paint_showString(10, 0, (uint8_t *)&"4.2 Inch Epaper Module", EPD_FONT_SIZE24x12, EPD_COLOR_BLACK);
 8001848:	2300      	movs	r3, #0
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	2318      	movs	r3, #24
 800184e:	4a45      	ldr	r2, [pc, #276]	@ (8001964 <_mainWeActStudio+0x194>)
 8001850:	2100      	movs	r1, #0
 8001852:	200a      	movs	r0, #10
 8001854:	f7ff fc96 	bl	8001184 <epd_paint_showString>
    epd_paint_showString(10, 50, (uint8_t *)&"with 400 x 300 resolution", EPD_FONT_SIZE16x8, EPD_COLOR_BLACK);
 8001858:	2300      	movs	r3, #0
 800185a:	9300      	str	r3, [sp, #0]
 800185c:	2310      	movs	r3, #16
 800185e:	4a42      	ldr	r2, [pc, #264]	@ (8001968 <_mainWeActStudio+0x198>)
 8001860:	2132      	movs	r1, #50	@ 0x32
 8001862:	200a      	movs	r0, #10
 8001864:	f7ff fc8e 	bl	8001184 <epd_paint_showString>
    epd_paint_showString(10, 29, (uint8_t *)&"Designed By WeAct Studio", EPD_FONT_SIZE16x8, EPD_COLOR_BLACK);
 8001868:	2300      	movs	r3, #0
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	2310      	movs	r3, #16
 800186e:	4a3f      	ldr	r2, [pc, #252]	@ (800196c <_mainWeActStudio+0x19c>)
 8001870:	211d      	movs	r1, #29
 8001872:	200a      	movs	r0, #10
 8001874:	f7ff fc86 	bl	8001184 <epd_paint_showString>

    /*#if 0
      epd_paint_showString(10,100,(uint8_t *)&"CH32F103C8T6 Example",EPD_FONT_SIZE16x8,EPD_COLOR_BLACK);
    #else*/
    epd_paint_drawRectangle(10, EPD_W-20, EPD_H - 10, EPD_W-6, EPD_COLOR_BLACK, 1);
 8001878:	2301      	movs	r3, #1
 800187a:	9301      	str	r3, [sp, #4]
 800187c:	2300      	movs	r3, #0
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	f44f 73c5 	mov.w	r3, #394	@ 0x18a
 8001884:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8001888:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800188c:	200a      	movs	r0, #10
 800188e:	f7ff fb5d 	bl	8000f4c <epd_paint_drawRectangle>
    epd_update();
 8001892:	f7ff f8bb 	bl	8000a0c <epd_update>
    //#endif
    HAL_Delay(1500);
 8001896:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800189a:	f000 fbdf 	bl	800205c <HAL_Delay>
    HAL_Delay(700);
    epd_paint_clear(EPD_COLOR_WHITE);
    HAL_Delay(700);
    epd_paint_clear(EPD_COLOR_BLACK);
  */
    sprintf((char *)&text, ">> Partial Mode");
 800189e:	463b      	mov	r3, r7
 80018a0:	4933      	ldr	r1, [pc, #204]	@ (8001970 <_mainWeActStudio+0x1a0>)
 80018a2:	4618      	mov	r0, r3
 80018a4:	f006 fa46 	bl	8007d34 <siprintf>
    epd_paint_showString(10, 71, text, EPD_FONT_SIZE24x12, EPD_COLOR_BLACK);
 80018a8:	463a      	mov	r2, r7
 80018aa:	2300      	movs	r3, #0
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	2318      	movs	r3, #24
 80018b0:	2147      	movs	r1, #71	@ 0x47
 80018b2:	200a      	movs	r0, #10
 80018b4:	f7ff fc66 	bl	8001184 <epd_paint_showString>

    epd_displayBW_partial(image_bw);
 80018b8:	4827      	ldr	r0, [pc, #156]	@ (8001958 <_mainWeActStudio+0x188>)
 80018ba:	f7ff f97c 	bl	8000bb6 <epd_displayBW_partial>

    printf("Before loop.\r\n");
 80018be:	482d      	ldr	r0, [pc, #180]	@ (8001974 <_mainWeActStudio+0x1a4>)
 80018c0:	f006 fa30 	bl	8007d24 <puts>
    HAL_Delay(500);
 80018c4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80018c8:	f000 fbc8 	bl	800205c <HAL_Delay>

    for (int i = 123; i < 8 * 123; i += 123)
 80018cc:	237b      	movs	r3, #123	@ 0x7b
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	e016      	b.n	8001900 <_mainWeActStudio+0x130>
    {
      sprintf((char *)&text, ">> Num=%d     ", i);
 80018d2:	463b      	mov	r3, r7
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	4928      	ldr	r1, [pc, #160]	@ (8001978 <_mainWeActStudio+0x1a8>)
 80018d8:	4618      	mov	r0, r3
 80018da:	f006 fa2b 	bl	8007d34 <siprintf>
      epd_paint_showString(10, 71, text, EPD_FONT_SIZE24x12, EPD_COLOR_BLACK);
 80018de:	463a      	mov	r2, r7
 80018e0:	2300      	movs	r3, #0
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	2318      	movs	r3, #24
 80018e6:	2147      	movs	r1, #71	@ 0x47
 80018e8:	200a      	movs	r0, #10
 80018ea:	f7ff fc4b 	bl	8001184 <epd_paint_showString>

      epd_displayBW_partial(image_bw);
 80018ee:	481a      	ldr	r0, [pc, #104]	@ (8001958 <_mainWeActStudio+0x188>)
 80018f0:	f7ff f961 	bl	8000bb6 <epd_displayBW_partial>

      HAL_Delay(100);
 80018f4:	2064      	movs	r0, #100	@ 0x64
 80018f6:	f000 fbb1 	bl	800205c <HAL_Delay>
    for (int i = 123; i < 8 * 123; i += 123)
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	337b      	adds	r3, #123	@ 0x7b
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	f5b3 7f76 	cmp.w	r3, #984	@ 0x3d8
 8001906:	dbe4      	blt.n	80018d2 <_mainWeActStudio+0x102>
    }

    sprintf((char *)&text, ">> Hello World.");
 8001908:	463b      	mov	r3, r7
 800190a:	491c      	ldr	r1, [pc, #112]	@ (800197c <_mainWeActStudio+0x1ac>)
 800190c:	4618      	mov	r0, r3
 800190e:	f006 fa11 	bl	8007d34 <siprintf>
    epd_paint_showString(10, 71, text, EPD_FONT_SIZE24x12, EPD_COLOR_BLACK);
 8001912:	463a      	mov	r2, r7
 8001914:	2300      	movs	r3, #0
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	2318      	movs	r3, #24
 800191a:	2147      	movs	r1, #71	@ 0x47
 800191c:	200a      	movs	r0, #10
 800191e:	f7ff fc31 	bl	8001184 <epd_paint_showString>
    epd_displayBW_partial(image_bw);
 8001922:	480d      	ldr	r0, [pc, #52]	@ (8001958 <_mainWeActStudio+0x188>)
 8001924:	f7ff f947 	bl	8000bb6 <epd_displayBW_partial>

    HAL_Delay(1000);
 8001928:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800192c:	f000 fb96 	bl	800205c <HAL_Delay>
    epd_paint_clear(EPD_COLOR_WHITE);
 8001930:	20ff      	movs	r0, #255	@ 0xff
 8001932:	f7ff fa41 	bl	8000db8 <epd_paint_clear>
    epd_update();
 8001936:	f7ff f869 	bl	8000a0c <epd_update>

    epd_enter_deepsleepmode(EPD_DEEPSLEEP_MODE1);
 800193a:	2001      	movs	r0, #1
 800193c:	f7ff f82e 	bl	800099c <epd_enter_deepsleepmode>

    printf("END ");
 8001940:	480f      	ldr	r0, [pc, #60]	@ (8001980 <_mainWeActStudio+0x1b0>)
 8001942:	f006 f987 	bl	8007c54 <iprintf>
    printf("(WeActStudio Code)\r\n");
 8001946:	480f      	ldr	r0, [pc, #60]	@ (8001984 <_mainWeActStudio+0x1b4>)
 8001948:	f006 f9ec 	bl	8007d24 <puts>
  }
 800194c:	bf00      	nop
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	08008e38 	.word	0x08008e38
 8001958:	24000208 	.word	0x24000208
 800195c:	0800a8fc 	.word	0x0800a8fc
 8001960:	08008e50 	.word	0x08008e50
 8001964:	08008e68 	.word	0x08008e68
 8001968:	08008e80 	.word	0x08008e80
 800196c:	08008e9c 	.word	0x08008e9c
 8001970:	08008eb8 	.word	0x08008eb8
 8001974:	08008ec8 	.word	0x08008ec8
 8001978:	08008ed8 	.word	0x08008ed8
 800197c:	08008ee8 	.word	0x08008ee8
 8001980:	08008ef8 	.word	0x08008ef8
 8001984:	08008f00 	.word	0x08008f00

08001988 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800198e:	463b      	mov	r3, r7
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800199a:	f000 fc67 	bl	800226c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800199e:	2301      	movs	r3, #1
 80019a0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80019aa:	231f      	movs	r3, #31
 80019ac:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80019ae:	2387      	movs	r3, #135	@ 0x87
 80019b0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80019b6:	2300      	movs	r3, #0
 80019b8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80019ba:	2301      	movs	r3, #1
 80019bc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80019be:	2301      	movs	r3, #1
 80019c0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80019ca:	463b      	mov	r3, r7
 80019cc:	4618      	mov	r0, r3
 80019ce:	f000 fc85 	bl	80022dc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80019d2:	2004      	movs	r0, #4
 80019d4:	f000 fc62 	bl	800229c <HAL_MPU_Enable>

}
 80019d8:	bf00      	nop
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019e4:	b672      	cpsid	i
}
 80019e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019e8:	bf00      	nop
 80019ea:	e7fd      	b.n	80019e8 <Error_Handler+0x8>

080019ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f2:	4b0a      	ldr	r3, [pc, #40]	@ (8001a1c <HAL_MspInit+0x30>)
 80019f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80019f8:	4a08      	ldr	r2, [pc, #32]	@ (8001a1c <HAL_MspInit+0x30>)
 80019fa:	f043 0302 	orr.w	r3, r3, #2
 80019fe:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001a02:	4b06      	ldr	r3, [pc, #24]	@ (8001a1c <HAL_MspInit+0x30>)
 8001a04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	607b      	str	r3, [r7, #4]
 8001a0e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	58024400 	.word	0x58024400

08001a20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b0ba      	sub	sp, #232	@ 0xe8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a38:	f107 0318 	add.w	r3, r7, #24
 8001a3c:	22b8      	movs	r2, #184	@ 0xb8
 8001a3e:	2100      	movs	r1, #0
 8001a40:	4618      	mov	r0, r3
 8001a42:	f006 fa6f 	bl	8007f24 <memset>
  if(hspi->Instance==SPI2)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a38      	ldr	r2, [pc, #224]	@ (8001b2c <HAL_SPI_MspInit+0x10c>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d169      	bne.n	8001b24 <HAL_SPI_MspInit+0x104>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001a50:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a54:	f04f 0300 	mov.w	r3, #0
 8001a58:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a60:	f107 0318 	add.w	r3, r7, #24
 8001a64:	4618      	mov	r0, r3
 8001a66:	f001 fe0d 	bl	8003684 <HAL_RCCEx_PeriphCLKConfig>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001a70:	f7ff ffb6 	bl	80019e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a74:	4b2e      	ldr	r3, [pc, #184]	@ (8001b30 <HAL_SPI_MspInit+0x110>)
 8001a76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a7a:	4a2d      	ldr	r2, [pc, #180]	@ (8001b30 <HAL_SPI_MspInit+0x110>)
 8001a7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a80:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a84:	4b2a      	ldr	r3, [pc, #168]	@ (8001b30 <HAL_SPI_MspInit+0x110>)
 8001a86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a8e:	617b      	str	r3, [r7, #20]
 8001a90:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a92:	4b27      	ldr	r3, [pc, #156]	@ (8001b30 <HAL_SPI_MspInit+0x110>)
 8001a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a98:	4a25      	ldr	r2, [pc, #148]	@ (8001b30 <HAL_SPI_MspInit+0x110>)
 8001a9a:	f043 0304 	orr.w	r3, r3, #4
 8001a9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001aa2:	4b23      	ldr	r3, [pc, #140]	@ (8001b30 <HAL_SPI_MspInit+0x110>)
 8001aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab0:	4b1f      	ldr	r3, [pc, #124]	@ (8001b30 <HAL_SPI_MspInit+0x110>)
 8001ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ab6:	4a1e      	ldr	r2, [pc, #120]	@ (8001b30 <HAL_SPI_MspInit+0x110>)
 8001ab8:	f043 0302 	orr.w	r3, r3, #2
 8001abc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b30 <HAL_SPI_MspInit+0x110>)
 8001ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ae6:	2305      	movs	r3, #5
 8001ae8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001af0:	4619      	mov	r1, r3
 8001af2:	4810      	ldr	r0, [pc, #64]	@ (8001b34 <HAL_SPI_MspInit+0x114>)
 8001af4:	f000 fc32 	bl	800235c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001af8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001afc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b00:	2302      	movs	r3, #2
 8001b02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b12:	2305      	movs	r3, #5
 8001b14:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b18:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4806      	ldr	r0, [pc, #24]	@ (8001b38 <HAL_SPI_MspInit+0x118>)
 8001b20:	f000 fc1c 	bl	800235c <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001b24:	bf00      	nop
 8001b26:	37e8      	adds	r7, #232	@ 0xe8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40003800 	.word	0x40003800
 8001b30:	58024400 	.word	0x58024400
 8001b34:	58020800 	.word	0x58020800
 8001b38:	58020400 	.word	0x58020400

08001b3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a0b      	ldr	r2, [pc, #44]	@ (8001b78 <HAL_TIM_Base_MspInit+0x3c>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d10e      	bne.n	8001b6c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b7c <HAL_TIM_Base_MspInit+0x40>)
 8001b50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b54:	4a09      	ldr	r2, [pc, #36]	@ (8001b7c <HAL_TIM_Base_MspInit+0x40>)
 8001b56:	f043 0302 	orr.w	r3, r3, #2
 8001b5a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001b5e:	4b07      	ldr	r3, [pc, #28]	@ (8001b7c <HAL_TIM_Base_MspInit+0x40>)
 8001b60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM8_MspInit 1 */

  }

}
 8001b6c:	bf00      	nop
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	40010400 	.word	0x40010400
 8001b7c:	58024400 	.word	0x58024400

08001b80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b0b8      	sub	sp, #224	@ 0xe0
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b88:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b98:	f107 0310 	add.w	r3, r7, #16
 8001b9c:	22b8      	movs	r2, #184	@ 0xb8
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f006 f9bf 	bl	8007f24 <memset>
  if(huart->Instance==UART4)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a26      	ldr	r2, [pc, #152]	@ (8001c44 <HAL_UART_MspInit+0xc4>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d145      	bne.n	8001c3c <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001bb0:	f04f 0202 	mov.w	r2, #2
 8001bb4:	f04f 0300 	mov.w	r3, #0
 8001bb8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bc2:	f107 0310 	add.w	r3, r7, #16
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f001 fd5c 	bl	8003684 <HAL_RCCEx_PeriphCLKConfig>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001bd2:	f7ff ff05 	bl	80019e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001bd6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c48 <HAL_UART_MspInit+0xc8>)
 8001bd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001bdc:	4a1a      	ldr	r2, [pc, #104]	@ (8001c48 <HAL_UART_MspInit+0xc8>)
 8001bde:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001be2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001be6:	4b18      	ldr	r3, [pc, #96]	@ (8001c48 <HAL_UART_MspInit+0xc8>)
 8001be8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001bec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf4:	4b14      	ldr	r3, [pc, #80]	@ (8001c48 <HAL_UART_MspInit+0xc8>)
 8001bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bfa:	4a13      	ldr	r2, [pc, #76]	@ (8001c48 <HAL_UART_MspInit+0xc8>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c04:	4b10      	ldr	r3, [pc, #64]	@ (8001c48 <HAL_UART_MspInit+0xc8>)
 8001c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c12:	2303      	movs	r3, #3
 8001c14:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c24:	2300      	movs	r3, #0
 8001c26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001c2a:	2308      	movs	r3, #8
 8001c2c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c30:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001c34:	4619      	mov	r1, r3
 8001c36:	4805      	ldr	r0, [pc, #20]	@ (8001c4c <HAL_UART_MspInit+0xcc>)
 8001c38:	f000 fb90 	bl	800235c <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8001c3c:	bf00      	nop
 8001c3e:	37e0      	adds	r7, #224	@ 0xe0
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40004c00 	.word	0x40004c00
 8001c48:	58024400 	.word	0x58024400
 8001c4c:	58020000 	.word	0x58020000

08001c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c54:	bf00      	nop
 8001c56:	e7fd      	b.n	8001c54 <NMI_Handler+0x4>

08001c58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c5c:	bf00      	nop
 8001c5e:	e7fd      	b.n	8001c5c <HardFault_Handler+0x4>

08001c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c64:	bf00      	nop
 8001c66:	e7fd      	b.n	8001c64 <MemManage_Handler+0x4>

08001c68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c6c:	bf00      	nop
 8001c6e:	e7fd      	b.n	8001c6c <BusFault_Handler+0x4>

08001c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c74:	bf00      	nop
 8001c76:	e7fd      	b.n	8001c74 <UsageFault_Handler+0x4>

08001c78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c86:	b480      	push	{r7}
 8001c88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ca6:	f000 f9b9 	bl	800201c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}

08001cae <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b086      	sub	sp, #24
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	60f8      	str	r0, [r7, #12]
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]
 8001cbe:	e00a      	b.n	8001cd6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cc0:	f3af 8000 	nop.w
 8001cc4:	4601      	mov	r1, r0
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	1c5a      	adds	r2, r3, #1
 8001cca:	60ba      	str	r2, [r7, #8]
 8001ccc:	b2ca      	uxtb	r2, r1
 8001cce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	dbf0      	blt.n	8001cc0 <_read+0x12>
  }

  return len;
 8001cde:	687b      	ldr	r3, [r7, #4]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3718      	adds	r7, #24
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]
 8001cf8:	e009      	b.n	8001d0e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	1c5a      	adds	r2, r3, #1
 8001cfe:	60ba      	str	r2, [r7, #8]
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff fb08 	bl	8001318 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	617b      	str	r3, [r7, #20]
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	dbf1      	blt.n	8001cfa <_write+0x12>
  }
  return len;
 8001d16:	687b      	ldr	r3, [r7, #4]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <_close>:

int _close(int file)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d48:	605a      	str	r2, [r3, #4]
  return 0;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <_isatty>:

int _isatty(int file)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d60:	2301      	movs	r3, #1
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b085      	sub	sp, #20
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	60f8      	str	r0, [r7, #12]
 8001d76:	60b9      	str	r1, [r7, #8]
 8001d78:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d90:	4a14      	ldr	r2, [pc, #80]	@ (8001de4 <_sbrk+0x5c>)
 8001d92:	4b15      	ldr	r3, [pc, #84]	@ (8001de8 <_sbrk+0x60>)
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d9c:	4b13      	ldr	r3, [pc, #76]	@ (8001dec <_sbrk+0x64>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d102      	bne.n	8001daa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001da4:	4b11      	ldr	r3, [pc, #68]	@ (8001dec <_sbrk+0x64>)
 8001da6:	4a12      	ldr	r2, [pc, #72]	@ (8001df0 <_sbrk+0x68>)
 8001da8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001daa:	4b10      	ldr	r3, [pc, #64]	@ (8001dec <_sbrk+0x64>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4413      	add	r3, r2
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d207      	bcs.n	8001dc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001db8:	f006 f902 	bl	8007fc0 <__errno>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	220c      	movs	r2, #12
 8001dc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc6:	e009      	b.n	8001ddc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dc8:	4b08      	ldr	r3, [pc, #32]	@ (8001dec <_sbrk+0x64>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dce:	4b07      	ldr	r3, [pc, #28]	@ (8001dec <_sbrk+0x64>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	4a05      	ldr	r2, [pc, #20]	@ (8001dec <_sbrk+0x64>)
 8001dd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dda:	68fb      	ldr	r3, [r7, #12]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3718      	adds	r7, #24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	24050000 	.word	0x24050000
 8001de8:	00000400 	.word	0x00000400
 8001dec:	24003ca0 	.word	0x24003ca0
 8001df0:	24003df8 	.word	0x24003df8

08001df4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001df8:	4b32      	ldr	r3, [pc, #200]	@ (8001ec4 <SystemInit+0xd0>)
 8001dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dfe:	4a31      	ldr	r2, [pc, #196]	@ (8001ec4 <SystemInit+0xd0>)
 8001e00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001e08:	4b2f      	ldr	r3, [pc, #188]	@ (8001ec8 <SystemInit+0xd4>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 030f 	and.w	r3, r3, #15
 8001e10:	2b06      	cmp	r3, #6
 8001e12:	d807      	bhi.n	8001e24 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001e14:	4b2c      	ldr	r3, [pc, #176]	@ (8001ec8 <SystemInit+0xd4>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f023 030f 	bic.w	r3, r3, #15
 8001e1c:	4a2a      	ldr	r2, [pc, #168]	@ (8001ec8 <SystemInit+0xd4>)
 8001e1e:	f043 0307 	orr.w	r3, r3, #7
 8001e22:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001e24:	4b29      	ldr	r3, [pc, #164]	@ (8001ecc <SystemInit+0xd8>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a28      	ldr	r2, [pc, #160]	@ (8001ecc <SystemInit+0xd8>)
 8001e2a:	f043 0301 	orr.w	r3, r3, #1
 8001e2e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001e30:	4b26      	ldr	r3, [pc, #152]	@ (8001ecc <SystemInit+0xd8>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001e36:	4b25      	ldr	r3, [pc, #148]	@ (8001ecc <SystemInit+0xd8>)
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	4924      	ldr	r1, [pc, #144]	@ (8001ecc <SystemInit+0xd8>)
 8001e3c:	4b24      	ldr	r3, [pc, #144]	@ (8001ed0 <SystemInit+0xdc>)
 8001e3e:	4013      	ands	r3, r2
 8001e40:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001e42:	4b21      	ldr	r3, [pc, #132]	@ (8001ec8 <SystemInit+0xd4>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0308 	and.w	r3, r3, #8
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d007      	beq.n	8001e5e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001e4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ec8 <SystemInit+0xd4>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f023 030f 	bic.w	r3, r3, #15
 8001e56:	4a1c      	ldr	r2, [pc, #112]	@ (8001ec8 <SystemInit+0xd4>)
 8001e58:	f043 0307 	orr.w	r3, r3, #7
 8001e5c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ecc <SystemInit+0xd8>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001e64:	4b19      	ldr	r3, [pc, #100]	@ (8001ecc <SystemInit+0xd8>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001e6a:	4b18      	ldr	r3, [pc, #96]	@ (8001ecc <SystemInit+0xd8>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001e70:	4b16      	ldr	r3, [pc, #88]	@ (8001ecc <SystemInit+0xd8>)
 8001e72:	4a18      	ldr	r2, [pc, #96]	@ (8001ed4 <SystemInit+0xe0>)
 8001e74:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001e76:	4b15      	ldr	r3, [pc, #84]	@ (8001ecc <SystemInit+0xd8>)
 8001e78:	4a17      	ldr	r2, [pc, #92]	@ (8001ed8 <SystemInit+0xe4>)
 8001e7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001e7c:	4b13      	ldr	r3, [pc, #76]	@ (8001ecc <SystemInit+0xd8>)
 8001e7e:	4a17      	ldr	r2, [pc, #92]	@ (8001edc <SystemInit+0xe8>)
 8001e80:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001e82:	4b12      	ldr	r3, [pc, #72]	@ (8001ecc <SystemInit+0xd8>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001e88:	4b10      	ldr	r3, [pc, #64]	@ (8001ecc <SystemInit+0xd8>)
 8001e8a:	4a14      	ldr	r2, [pc, #80]	@ (8001edc <SystemInit+0xe8>)
 8001e8c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001ecc <SystemInit+0xd8>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001e94:	4b0d      	ldr	r3, [pc, #52]	@ (8001ecc <SystemInit+0xd8>)
 8001e96:	4a11      	ldr	r2, [pc, #68]	@ (8001edc <SystemInit+0xe8>)
 8001e98:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001ecc <SystemInit+0xd8>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8001ecc <SystemInit+0xd8>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a09      	ldr	r2, [pc, #36]	@ (8001ecc <SystemInit+0xd8>)
 8001ea6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001eaa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001eac:	4b07      	ldr	r3, [pc, #28]	@ (8001ecc <SystemInit+0xd8>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee0 <SystemInit+0xec>)
 8001eb4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001eb8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001eba:	bf00      	nop
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	e000ed00 	.word	0xe000ed00
 8001ec8:	52002000 	.word	0x52002000
 8001ecc:	58024400 	.word	0x58024400
 8001ed0:	eaf6ed7f 	.word	0xeaf6ed7f
 8001ed4:	02020200 	.word	0x02020200
 8001ed8:	01ff0000 	.word	0x01ff0000
 8001edc:	01010280 	.word	0x01010280
 8001ee0:	52004000 	.word	0x52004000

08001ee4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001ee4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f1c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ee8:	f7ff ff84 	bl	8001df4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001eec:	480c      	ldr	r0, [pc, #48]	@ (8001f20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001eee:	490d      	ldr	r1, [pc, #52]	@ (8001f24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ef0:	4a0d      	ldr	r2, [pc, #52]	@ (8001f28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ef2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ef4:	e002      	b.n	8001efc <LoopCopyDataInit>

08001ef6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ef6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ef8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001efa:	3304      	adds	r3, #4

08001efc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001efc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001efe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f00:	d3f9      	bcc.n	8001ef6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f02:	4a0a      	ldr	r2, [pc, #40]	@ (8001f2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f04:	4c0a      	ldr	r4, [pc, #40]	@ (8001f30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f08:	e001      	b.n	8001f0e <LoopFillZerobss>

08001f0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f0c:	3204      	adds	r2, #4

08001f0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f10:	d3fb      	bcc.n	8001f0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f12:	f006 f85b 	bl	8007fcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f16:	f7ff fa11 	bl	800133c <main>
  bx  lr
 8001f1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f1c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001f20:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001f24:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 8001f28:	0800b918 	.word	0x0800b918
  ldr r2, =_sbss
 8001f2c:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 8001f30:	24003df4 	.word	0x24003df4

08001f34 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f34:	e7fe      	b.n	8001f34 <ADC3_IRQHandler>
	...

08001f38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f3e:	2003      	movs	r0, #3
 8001f40:	f000 f962 	bl	8002208 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f44:	f001 f9c8 	bl	80032d8 <HAL_RCC_GetSysClockFreq>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	4b15      	ldr	r3, [pc, #84]	@ (8001fa0 <HAL_Init+0x68>)
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	0a1b      	lsrs	r3, r3, #8
 8001f50:	f003 030f 	and.w	r3, r3, #15
 8001f54:	4913      	ldr	r1, [pc, #76]	@ (8001fa4 <HAL_Init+0x6c>)
 8001f56:	5ccb      	ldrb	r3, [r1, r3]
 8001f58:	f003 031f 	and.w	r3, r3, #31
 8001f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f60:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f62:	4b0f      	ldr	r3, [pc, #60]	@ (8001fa0 <HAL_Init+0x68>)
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	4a0e      	ldr	r2, [pc, #56]	@ (8001fa4 <HAL_Init+0x6c>)
 8001f6c:	5cd3      	ldrb	r3, [r2, r3]
 8001f6e:	f003 031f 	and.w	r3, r3, #31
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	fa22 f303 	lsr.w	r3, r2, r3
 8001f78:	4a0b      	ldr	r2, [pc, #44]	@ (8001fa8 <HAL_Init+0x70>)
 8001f7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f7c:	4a0b      	ldr	r2, [pc, #44]	@ (8001fac <HAL_Init+0x74>)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f82:	200f      	movs	r0, #15
 8001f84:	f000 f814 	bl	8001fb0 <HAL_InitTick>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e002      	b.n	8001f98 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f92:	f7ff fd2b 	bl	80019ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	58024400 	.word	0x58024400
 8001fa4:	0800b89c 	.word	0x0800b89c
 8001fa8:	24000008 	.word	0x24000008
 8001fac:	24000004 	.word	0x24000004

08001fb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001fb8:	4b15      	ldr	r3, [pc, #84]	@ (8002010 <HAL_InitTick+0x60>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e021      	b.n	8002008 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001fc4:	4b13      	ldr	r3, [pc, #76]	@ (8002014 <HAL_InitTick+0x64>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4b11      	ldr	r3, [pc, #68]	@ (8002010 <HAL_InitTick+0x60>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f000 f939 	bl	8002252 <HAL_SYSTICK_Config>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e00e      	b.n	8002008 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b0f      	cmp	r3, #15
 8001fee:	d80a      	bhi.n	8002006 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff8:	f000 f911 	bl	800221e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ffc:	4a06      	ldr	r2, [pc, #24]	@ (8002018 <HAL_InitTick+0x68>)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002002:	2300      	movs	r3, #0
 8002004:	e000      	b.n	8002008 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
}
 8002008:	4618      	mov	r0, r3
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	24000010 	.word	0x24000010
 8002014:	24000004 	.word	0x24000004
 8002018:	2400000c 	.word	0x2400000c

0800201c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002020:	4b06      	ldr	r3, [pc, #24]	@ (800203c <HAL_IncTick+0x20>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	461a      	mov	r2, r3
 8002026:	4b06      	ldr	r3, [pc, #24]	@ (8002040 <HAL_IncTick+0x24>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4413      	add	r3, r2
 800202c:	4a04      	ldr	r2, [pc, #16]	@ (8002040 <HAL_IncTick+0x24>)
 800202e:	6013      	str	r3, [r2, #0]
}
 8002030:	bf00      	nop
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	24000010 	.word	0x24000010
 8002040:	24003ca4 	.word	0x24003ca4

08002044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return uwTick;
 8002048:	4b03      	ldr	r3, [pc, #12]	@ (8002058 <HAL_GetTick+0x14>)
 800204a:	681b      	ldr	r3, [r3, #0]
}
 800204c:	4618      	mov	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	24003ca4 	.word	0x24003ca4

0800205c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002064:	f7ff ffee 	bl	8002044 <HAL_GetTick>
 8002068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002074:	d005      	beq.n	8002082 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002076:	4b0a      	ldr	r3, [pc, #40]	@ (80020a0 <HAL_Delay+0x44>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	461a      	mov	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4413      	add	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002082:	bf00      	nop
 8002084:	f7ff ffde 	bl	8002044 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	429a      	cmp	r2, r3
 8002092:	d8f7      	bhi.n	8002084 <HAL_Delay+0x28>
  {
  }
}
 8002094:	bf00      	nop
 8002096:	bf00      	nop
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	24000010 	.word	0x24000010

080020a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020b4:	4b0b      	ldr	r3, [pc, #44]	@ (80020e4 <__NVIC_SetPriorityGrouping+0x40>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ba:	68ba      	ldr	r2, [r7, #8]
 80020bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020c0:	4013      	ands	r3, r2
 80020c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80020cc:	4b06      	ldr	r3, [pc, #24]	@ (80020e8 <__NVIC_SetPriorityGrouping+0x44>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020d2:	4a04      	ldr	r2, [pc, #16]	@ (80020e4 <__NVIC_SetPriorityGrouping+0x40>)
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	60d3      	str	r3, [r2, #12]
}
 80020d8:	bf00      	nop
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	e000ed00 	.word	0xe000ed00
 80020e8:	05fa0000 	.word	0x05fa0000

080020ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020f0:	4b04      	ldr	r3, [pc, #16]	@ (8002104 <__NVIC_GetPriorityGrouping+0x18>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	0a1b      	lsrs	r3, r3, #8
 80020f6:	f003 0307 	and.w	r3, r3, #7
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	6039      	str	r1, [r7, #0]
 8002112:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002114:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002118:	2b00      	cmp	r3, #0
 800211a:	db0a      	blt.n	8002132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	b2da      	uxtb	r2, r3
 8002120:	490c      	ldr	r1, [pc, #48]	@ (8002154 <__NVIC_SetPriority+0x4c>)
 8002122:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002126:	0112      	lsls	r2, r2, #4
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	440b      	add	r3, r1
 800212c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002130:	e00a      	b.n	8002148 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	b2da      	uxtb	r2, r3
 8002136:	4908      	ldr	r1, [pc, #32]	@ (8002158 <__NVIC_SetPriority+0x50>)
 8002138:	88fb      	ldrh	r3, [r7, #6]
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	3b04      	subs	r3, #4
 8002140:	0112      	lsls	r2, r2, #4
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	440b      	add	r3, r1
 8002146:	761a      	strb	r2, [r3, #24]
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	e000e100 	.word	0xe000e100
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800215c:	b480      	push	{r7}
 800215e:	b089      	sub	sp, #36	@ 0x24
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	f1c3 0307 	rsb	r3, r3, #7
 8002176:	2b04      	cmp	r3, #4
 8002178:	bf28      	it	cs
 800217a:	2304      	movcs	r3, #4
 800217c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	3304      	adds	r3, #4
 8002182:	2b06      	cmp	r3, #6
 8002184:	d902      	bls.n	800218c <NVIC_EncodePriority+0x30>
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	3b03      	subs	r3, #3
 800218a:	e000      	b.n	800218e <NVIC_EncodePriority+0x32>
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002190:	f04f 32ff 	mov.w	r2, #4294967295
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	43da      	mvns	r2, r3
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	401a      	ands	r2, r3
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021a4:	f04f 31ff 	mov.w	r1, #4294967295
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	fa01 f303 	lsl.w	r3, r1, r3
 80021ae:	43d9      	mvns	r1, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b4:	4313      	orrs	r3, r2
         );
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3724      	adds	r7, #36	@ 0x24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
	...

080021c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3b01      	subs	r3, #1
 80021d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021d4:	d301      	bcc.n	80021da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021d6:	2301      	movs	r3, #1
 80021d8:	e00f      	b.n	80021fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021da:	4a0a      	ldr	r2, [pc, #40]	@ (8002204 <SysTick_Config+0x40>)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3b01      	subs	r3, #1
 80021e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021e2:	210f      	movs	r1, #15
 80021e4:	f04f 30ff 	mov.w	r0, #4294967295
 80021e8:	f7ff ff8e 	bl	8002108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021ec:	4b05      	ldr	r3, [pc, #20]	@ (8002204 <SysTick_Config+0x40>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021f2:	4b04      	ldr	r3, [pc, #16]	@ (8002204 <SysTick_Config+0x40>)
 80021f4:	2207      	movs	r2, #7
 80021f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	e000e010 	.word	0xe000e010

08002208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff ff47 	bl	80020a4 <__NVIC_SetPriorityGrouping>
}
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b086      	sub	sp, #24
 8002222:	af00      	add	r7, sp, #0
 8002224:	4603      	mov	r3, r0
 8002226:	60b9      	str	r1, [r7, #8]
 8002228:	607a      	str	r2, [r7, #4]
 800222a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800222c:	f7ff ff5e 	bl	80020ec <__NVIC_GetPriorityGrouping>
 8002230:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	68b9      	ldr	r1, [r7, #8]
 8002236:	6978      	ldr	r0, [r7, #20]
 8002238:	f7ff ff90 	bl	800215c <NVIC_EncodePriority>
 800223c:	4602      	mov	r2, r0
 800223e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002242:	4611      	mov	r1, r2
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff ff5f 	bl	8002108 <__NVIC_SetPriority>
}
 800224a:	bf00      	nop
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff ffb2 	bl	80021c4 <SysTick_Config>
 8002260:	4603      	mov	r3, r0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002270:	f3bf 8f5f 	dmb	sy
}
 8002274:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002276:	4b07      	ldr	r3, [pc, #28]	@ (8002294 <HAL_MPU_Disable+0x28>)
 8002278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227a:	4a06      	ldr	r2, [pc, #24]	@ (8002294 <HAL_MPU_Disable+0x28>)
 800227c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002280:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002282:	4b05      	ldr	r3, [pc, #20]	@ (8002298 <HAL_MPU_Disable+0x2c>)
 8002284:	2200      	movs	r2, #0
 8002286:	605a      	str	r2, [r3, #4]
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	e000ed00 	.word	0xe000ed00
 8002298:	e000ed90 	.word	0xe000ed90

0800229c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80022a4:	4a0b      	ldr	r2, [pc, #44]	@ (80022d4 <HAL_MPU_Enable+0x38>)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f043 0301 	orr.w	r3, r3, #1
 80022ac:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80022ae:	4b0a      	ldr	r3, [pc, #40]	@ (80022d8 <HAL_MPU_Enable+0x3c>)
 80022b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b2:	4a09      	ldr	r2, [pc, #36]	@ (80022d8 <HAL_MPU_Enable+0x3c>)
 80022b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022b8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80022ba:	f3bf 8f4f 	dsb	sy
}
 80022be:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80022c0:	f3bf 8f6f 	isb	sy
}
 80022c4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	e000ed90 	.word	0xe000ed90
 80022d8:	e000ed00 	.word	0xe000ed00

080022dc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	785a      	ldrb	r2, [r3, #1]
 80022e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002358 <HAL_MPU_ConfigRegion+0x7c>)
 80022ea:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80022ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002358 <HAL_MPU_ConfigRegion+0x7c>)
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	4a19      	ldr	r2, [pc, #100]	@ (8002358 <HAL_MPU_ConfigRegion+0x7c>)
 80022f2:	f023 0301 	bic.w	r3, r3, #1
 80022f6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80022f8:	4a17      	ldr	r2, [pc, #92]	@ (8002358 <HAL_MPU_ConfigRegion+0x7c>)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	7b1b      	ldrb	r3, [r3, #12]
 8002304:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	7adb      	ldrb	r3, [r3, #11]
 800230a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800230c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	7a9b      	ldrb	r3, [r3, #10]
 8002312:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002314:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	7b5b      	ldrb	r3, [r3, #13]
 800231a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800231c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	7b9b      	ldrb	r3, [r3, #14]
 8002322:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002324:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	7bdb      	ldrb	r3, [r3, #15]
 800232a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800232c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	7a5b      	ldrb	r3, [r3, #9]
 8002332:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002334:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	7a1b      	ldrb	r3, [r3, #8]
 800233a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800233c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	7812      	ldrb	r2, [r2, #0]
 8002342:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002344:	4a04      	ldr	r2, [pc, #16]	@ (8002358 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002346:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002348:	6113      	str	r3, [r2, #16]
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	e000ed90 	.word	0xe000ed90

0800235c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800235c:	b480      	push	{r7}
 800235e:	b089      	sub	sp, #36	@ 0x24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002366:	2300      	movs	r3, #0
 8002368:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800236a:	4b86      	ldr	r3, [pc, #536]	@ (8002584 <HAL_GPIO_Init+0x228>)
 800236c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800236e:	e18c      	b.n	800268a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	2101      	movs	r1, #1
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	fa01 f303 	lsl.w	r3, r1, r3
 800237c:	4013      	ands	r3, r2
 800237e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	2b00      	cmp	r3, #0
 8002384:	f000 817e 	beq.w	8002684 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f003 0303 	and.w	r3, r3, #3
 8002390:	2b01      	cmp	r3, #1
 8002392:	d005      	beq.n	80023a0 <HAL_GPIO_Init+0x44>
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 0303 	and.w	r3, r3, #3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d130      	bne.n	8002402 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	2203      	movs	r2, #3
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	68da      	ldr	r2, [r3, #12]
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023d6:	2201      	movs	r2, #1
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43db      	mvns	r3, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4013      	ands	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	091b      	lsrs	r3, r3, #4
 80023ec:	f003 0201 	and.w	r2, r3, #1
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f003 0303 	and.w	r3, r3, #3
 800240a:	2b03      	cmp	r3, #3
 800240c:	d017      	beq.n	800243e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	2203      	movs	r2, #3
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43db      	mvns	r3, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4013      	ands	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	689a      	ldr	r2, [r3, #8]
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4313      	orrs	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d123      	bne.n	8002492 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	08da      	lsrs	r2, r3, #3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3208      	adds	r2, #8
 8002452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002456:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	220f      	movs	r2, #15
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43db      	mvns	r3, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4013      	ands	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	691a      	ldr	r2, [r3, #16]
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4313      	orrs	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	08da      	lsrs	r2, r3, #3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3208      	adds	r2, #8
 800248c:	69b9      	ldr	r1, [r7, #24]
 800248e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	2203      	movs	r2, #3
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43db      	mvns	r3, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4013      	ands	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f003 0203 	and.w	r2, r3, #3
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4313      	orrs	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f000 80d8 	beq.w	8002684 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024d4:	4b2c      	ldr	r3, [pc, #176]	@ (8002588 <HAL_GPIO_Init+0x22c>)
 80024d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80024da:	4a2b      	ldr	r2, [pc, #172]	@ (8002588 <HAL_GPIO_Init+0x22c>)
 80024dc:	f043 0302 	orr.w	r3, r3, #2
 80024e0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80024e4:	4b28      	ldr	r3, [pc, #160]	@ (8002588 <HAL_GPIO_Init+0x22c>)
 80024e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024f2:	4a26      	ldr	r2, [pc, #152]	@ (800258c <HAL_GPIO_Init+0x230>)
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	089b      	lsrs	r3, r3, #2
 80024f8:	3302      	adds	r3, #2
 80024fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	220f      	movs	r2, #15
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43db      	mvns	r3, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4013      	ands	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a1d      	ldr	r2, [pc, #116]	@ (8002590 <HAL_GPIO_Init+0x234>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d04a      	beq.n	80025b4 <HAL_GPIO_Init+0x258>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a1c      	ldr	r2, [pc, #112]	@ (8002594 <HAL_GPIO_Init+0x238>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d02b      	beq.n	800257e <HAL_GPIO_Init+0x222>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a1b      	ldr	r2, [pc, #108]	@ (8002598 <HAL_GPIO_Init+0x23c>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d025      	beq.n	800257a <HAL_GPIO_Init+0x21e>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a1a      	ldr	r2, [pc, #104]	@ (800259c <HAL_GPIO_Init+0x240>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d01f      	beq.n	8002576 <HAL_GPIO_Init+0x21a>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a19      	ldr	r2, [pc, #100]	@ (80025a0 <HAL_GPIO_Init+0x244>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d019      	beq.n	8002572 <HAL_GPIO_Init+0x216>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a18      	ldr	r2, [pc, #96]	@ (80025a4 <HAL_GPIO_Init+0x248>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d013      	beq.n	800256e <HAL_GPIO_Init+0x212>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a17      	ldr	r2, [pc, #92]	@ (80025a8 <HAL_GPIO_Init+0x24c>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d00d      	beq.n	800256a <HAL_GPIO_Init+0x20e>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a16      	ldr	r2, [pc, #88]	@ (80025ac <HAL_GPIO_Init+0x250>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d007      	beq.n	8002566 <HAL_GPIO_Init+0x20a>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a15      	ldr	r2, [pc, #84]	@ (80025b0 <HAL_GPIO_Init+0x254>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d101      	bne.n	8002562 <HAL_GPIO_Init+0x206>
 800255e:	2309      	movs	r3, #9
 8002560:	e029      	b.n	80025b6 <HAL_GPIO_Init+0x25a>
 8002562:	230a      	movs	r3, #10
 8002564:	e027      	b.n	80025b6 <HAL_GPIO_Init+0x25a>
 8002566:	2307      	movs	r3, #7
 8002568:	e025      	b.n	80025b6 <HAL_GPIO_Init+0x25a>
 800256a:	2306      	movs	r3, #6
 800256c:	e023      	b.n	80025b6 <HAL_GPIO_Init+0x25a>
 800256e:	2305      	movs	r3, #5
 8002570:	e021      	b.n	80025b6 <HAL_GPIO_Init+0x25a>
 8002572:	2304      	movs	r3, #4
 8002574:	e01f      	b.n	80025b6 <HAL_GPIO_Init+0x25a>
 8002576:	2303      	movs	r3, #3
 8002578:	e01d      	b.n	80025b6 <HAL_GPIO_Init+0x25a>
 800257a:	2302      	movs	r3, #2
 800257c:	e01b      	b.n	80025b6 <HAL_GPIO_Init+0x25a>
 800257e:	2301      	movs	r3, #1
 8002580:	e019      	b.n	80025b6 <HAL_GPIO_Init+0x25a>
 8002582:	bf00      	nop
 8002584:	58000080 	.word	0x58000080
 8002588:	58024400 	.word	0x58024400
 800258c:	58000400 	.word	0x58000400
 8002590:	58020000 	.word	0x58020000
 8002594:	58020400 	.word	0x58020400
 8002598:	58020800 	.word	0x58020800
 800259c:	58020c00 	.word	0x58020c00
 80025a0:	58021000 	.word	0x58021000
 80025a4:	58021400 	.word	0x58021400
 80025a8:	58021800 	.word	0x58021800
 80025ac:	58021c00 	.word	0x58021c00
 80025b0:	58022400 	.word	0x58022400
 80025b4:	2300      	movs	r3, #0
 80025b6:	69fa      	ldr	r2, [r7, #28]
 80025b8:	f002 0203 	and.w	r2, r2, #3
 80025bc:	0092      	lsls	r2, r2, #2
 80025be:	4093      	lsls	r3, r2
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025c6:	4938      	ldr	r1, [pc, #224]	@ (80026a8 <HAL_GPIO_Init+0x34c>)
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	089b      	lsrs	r3, r3, #2
 80025cc:	3302      	adds	r3, #2
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	43db      	mvns	r3, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4013      	ands	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80025fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002602:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4313      	orrs	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002628:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	43db      	mvns	r3, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4013      	ands	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	4313      	orrs	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	43db      	mvns	r3, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4013      	ands	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	4313      	orrs	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	3301      	adds	r3, #1
 8002688:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	fa22 f303 	lsr.w	r3, r2, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	f47f ae6b 	bne.w	8002370 <HAL_GPIO_Init+0x14>
  }
}
 800269a:	bf00      	nop
 800269c:	bf00      	nop
 800269e:	3724      	adds	r7, #36	@ 0x24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	58000400 	.word	0x58000400

080026ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	460b      	mov	r3, r1
 80026b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691a      	ldr	r2, [r3, #16]
 80026bc:	887b      	ldrh	r3, [r7, #2]
 80026be:	4013      	ands	r3, r2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d002      	beq.n	80026ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026c4:	2301      	movs	r3, #1
 80026c6:	73fb      	strb	r3, [r7, #15]
 80026c8:	e001      	b.n	80026ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026ca:	2300      	movs	r3, #0
 80026cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3714      	adds	r7, #20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	460b      	mov	r3, r1
 80026e6:	807b      	strh	r3, [r7, #2]
 80026e8:	4613      	mov	r3, r2
 80026ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026ec:	787b      	ldrb	r3, [r7, #1]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026f2:	887a      	ldrh	r2, [r7, #2]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80026f8:	e003      	b.n	8002702 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80026fa:	887b      	ldrh	r3, [r7, #2]
 80026fc:	041a      	lsls	r2, r3, #16
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	619a      	str	r2, [r3, #24]
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800270e:	b480      	push	{r7}
 8002710:	b085      	sub	sp, #20
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
 8002716:	460b      	mov	r3, r1
 8002718:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002720:	887a      	ldrh	r2, [r7, #2]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	4013      	ands	r3, r2
 8002726:	041a      	lsls	r2, r3, #16
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	43d9      	mvns	r1, r3
 800272c:	887b      	ldrh	r3, [r7, #2]
 800272e:	400b      	ands	r3, r1
 8002730:	431a      	orrs	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	619a      	str	r2, [r3, #24]
}
 8002736:	bf00      	nop
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
	...

08002744 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800274c:	4b19      	ldr	r3, [pc, #100]	@ (80027b4 <HAL_PWREx_ConfigSupply+0x70>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b04      	cmp	r3, #4
 8002756:	d00a      	beq.n	800276e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002758:	4b16      	ldr	r3, [pc, #88]	@ (80027b4 <HAL_PWREx_ConfigSupply+0x70>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	f003 0307 	and.w	r3, r3, #7
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	429a      	cmp	r2, r3
 8002764:	d001      	beq.n	800276a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e01f      	b.n	80027aa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800276a:	2300      	movs	r3, #0
 800276c:	e01d      	b.n	80027aa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800276e:	4b11      	ldr	r3, [pc, #68]	@ (80027b4 <HAL_PWREx_ConfigSupply+0x70>)
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	f023 0207 	bic.w	r2, r3, #7
 8002776:	490f      	ldr	r1, [pc, #60]	@ (80027b4 <HAL_PWREx_ConfigSupply+0x70>)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4313      	orrs	r3, r2
 800277c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800277e:	f7ff fc61 	bl	8002044 <HAL_GetTick>
 8002782:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002784:	e009      	b.n	800279a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002786:	f7ff fc5d 	bl	8002044 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002794:	d901      	bls.n	800279a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e007      	b.n	80027aa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800279a:	4b06      	ldr	r3, [pc, #24]	@ (80027b4 <HAL_PWREx_ConfigSupply+0x70>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027a6:	d1ee      	bne.n	8002786 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	58024800 	.word	0x58024800

080027b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b08c      	sub	sp, #48	@ 0x30
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e3c8      	b.n	8002f5c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f000 8087 	beq.w	80028e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027d8:	4b88      	ldr	r3, [pc, #544]	@ (80029fc <HAL_RCC_OscConfig+0x244>)
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027e2:	4b86      	ldr	r3, [pc, #536]	@ (80029fc <HAL_RCC_OscConfig+0x244>)
 80027e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80027e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027ea:	2b10      	cmp	r3, #16
 80027ec:	d007      	beq.n	80027fe <HAL_RCC_OscConfig+0x46>
 80027ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027f0:	2b18      	cmp	r3, #24
 80027f2:	d110      	bne.n	8002816 <HAL_RCC_OscConfig+0x5e>
 80027f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d10b      	bne.n	8002816 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027fe:	4b7f      	ldr	r3, [pc, #508]	@ (80029fc <HAL_RCC_OscConfig+0x244>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d06c      	beq.n	80028e4 <HAL_RCC_OscConfig+0x12c>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d168      	bne.n	80028e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e3a2      	b.n	8002f5c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800281e:	d106      	bne.n	800282e <HAL_RCC_OscConfig+0x76>
 8002820:	4b76      	ldr	r3, [pc, #472]	@ (80029fc <HAL_RCC_OscConfig+0x244>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a75      	ldr	r2, [pc, #468]	@ (80029fc <HAL_RCC_OscConfig+0x244>)
 8002826:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800282a:	6013      	str	r3, [r2, #0]
 800282c:	e02e      	b.n	800288c <HAL_RCC_OscConfig+0xd4>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10c      	bne.n	8002850 <HAL_RCC_OscConfig+0x98>
 8002836:	4b71      	ldr	r3, [pc, #452]	@ (80029fc <HAL_RCC_OscConfig+0x244>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a70      	ldr	r2, [pc, #448]	@ (80029fc <HAL_RCC_OscConfig+0x244>)
 800283c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002840:	6013      	str	r3, [r2, #0]
 8002842:	4b6e      	ldr	r3, [pc, #440]	@ (80029fc <HAL_RCC_OscConfig+0x244>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a6d      	ldr	r2, [pc, #436]	@ (80029fc <HAL_RCC_OscConfig+0x244>)
 8002848:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	e01d      	b.n	800288c <HAL_RCC_OscConfig+0xd4>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002858:	d10c      	bne.n	8002874 <HAL_RCC_OscConfig+0xbc>
 800285a:	4b68      	ldr	r3, [pc, #416]	@ (80029fc <HAL_RCC_OscConfig+0x244>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a67      	ldr	r2, [pc, #412]	@ (80029fc <HAL_RCC_OscConfig+0x244>)
 8002860:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002864:	6013      	str	r3, [r2, #0]
 8002866:	4b65      	ldr	r3, [pc, #404]	@ (80029fc <HAL_RCC_OscConfig+0x244>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a64      	ldr	r2, [pc, #400]	@ (80029fc <HAL_RCC_OscConfig+0x244>)
 800286c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002870:	6013      	str	r3, [r2, #0]
 8002872:	e00b      	b.n	800288c <HAL_RCC_OscConfig+0xd4>
 8002874:	4b61      	ldr	r3, [pc, #388]	@ (80029fc <HAL_RCC_OscConfig+0x244>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a60      	ldr	r2, [pc, #384]	@ (80029fc <HAL_RCC_OscConfig+0x244>)
 800287a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800287e:	6013      	str	r3, [r2, #0]
 8002880:	4b5e      	ldr	r3, [pc, #376]	@ (80029fc <HAL_RCC_OscConfig+0x244>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a5d      	ldr	r2, [pc, #372]	@ (80029fc <HAL_RCC_OscConfig+0x244>)
 8002886:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800288a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d013      	beq.n	80028bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002894:	f7ff fbd6 	bl	8002044 <HAL_GetTick>
 8002898:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800289c:	f7ff fbd2 	bl	8002044 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b64      	cmp	r3, #100	@ 0x64
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e356      	b.n	8002f5c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028ae:	4b53      	ldr	r3, [pc, #332]	@ (80029fc <HAL_RCC_OscConfig+0x244>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0f0      	beq.n	800289c <HAL_RCC_OscConfig+0xe4>
 80028ba:	e014      	b.n	80028e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028bc:	f7ff fbc2 	bl	8002044 <HAL_GetTick>
 80028c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028c4:	f7ff fbbe 	bl	8002044 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b64      	cmp	r3, #100	@ 0x64
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e342      	b.n	8002f5c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028d6:	4b49      	ldr	r3, [pc, #292]	@ (80029fc <HAL_RCC_OscConfig+0x244>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f0      	bne.n	80028c4 <HAL_RCC_OscConfig+0x10c>
 80028e2:	e000      	b.n	80028e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 808c 	beq.w	8002a0c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028f4:	4b41      	ldr	r3, [pc, #260]	@ (80029fc <HAL_RCC_OscConfig+0x244>)
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028fc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028fe:	4b3f      	ldr	r3, [pc, #252]	@ (80029fc <HAL_RCC_OscConfig+0x244>)
 8002900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002902:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002904:	6a3b      	ldr	r3, [r7, #32]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d007      	beq.n	800291a <HAL_RCC_OscConfig+0x162>
 800290a:	6a3b      	ldr	r3, [r7, #32]
 800290c:	2b18      	cmp	r3, #24
 800290e:	d137      	bne.n	8002980 <HAL_RCC_OscConfig+0x1c8>
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d132      	bne.n	8002980 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800291a:	4b38      	ldr	r3, [pc, #224]	@ (80029fc <HAL_RCC_OscConfig+0x244>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0304 	and.w	r3, r3, #4
 8002922:	2b00      	cmp	r3, #0
 8002924:	d005      	beq.n	8002932 <HAL_RCC_OscConfig+0x17a>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e314      	b.n	8002f5c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002932:	4b32      	ldr	r3, [pc, #200]	@ (80029fc <HAL_RCC_OscConfig+0x244>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f023 0219 	bic.w	r2, r3, #25
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	492f      	ldr	r1, [pc, #188]	@ (80029fc <HAL_RCC_OscConfig+0x244>)
 8002940:	4313      	orrs	r3, r2
 8002942:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002944:	f7ff fb7e 	bl	8002044 <HAL_GetTick>
 8002948:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800294c:	f7ff fb7a 	bl	8002044 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e2fe      	b.n	8002f5c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800295e:	4b27      	ldr	r3, [pc, #156]	@ (80029fc <HAL_RCC_OscConfig+0x244>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0304 	and.w	r3, r3, #4
 8002966:	2b00      	cmp	r3, #0
 8002968:	d0f0      	beq.n	800294c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800296a:	4b24      	ldr	r3, [pc, #144]	@ (80029fc <HAL_RCC_OscConfig+0x244>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	061b      	lsls	r3, r3, #24
 8002978:	4920      	ldr	r1, [pc, #128]	@ (80029fc <HAL_RCC_OscConfig+0x244>)
 800297a:	4313      	orrs	r3, r2
 800297c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800297e:	e045      	b.n	8002a0c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d026      	beq.n	80029d6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002988:	4b1c      	ldr	r3, [pc, #112]	@ (80029fc <HAL_RCC_OscConfig+0x244>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f023 0219 	bic.w	r2, r3, #25
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	4919      	ldr	r1, [pc, #100]	@ (80029fc <HAL_RCC_OscConfig+0x244>)
 8002996:	4313      	orrs	r3, r2
 8002998:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299a:	f7ff fb53 	bl	8002044 <HAL_GetTick>
 800299e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029a2:	f7ff fb4f 	bl	8002044 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e2d3      	b.n	8002f5c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029b4:	4b11      	ldr	r3, [pc, #68]	@ (80029fc <HAL_RCC_OscConfig+0x244>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d0f0      	beq.n	80029a2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c0:	4b0e      	ldr	r3, [pc, #56]	@ (80029fc <HAL_RCC_OscConfig+0x244>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	061b      	lsls	r3, r3, #24
 80029ce:	490b      	ldr	r1, [pc, #44]	@ (80029fc <HAL_RCC_OscConfig+0x244>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	604b      	str	r3, [r1, #4]
 80029d4:	e01a      	b.n	8002a0c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029d6:	4b09      	ldr	r3, [pc, #36]	@ (80029fc <HAL_RCC_OscConfig+0x244>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a08      	ldr	r2, [pc, #32]	@ (80029fc <HAL_RCC_OscConfig+0x244>)
 80029dc:	f023 0301 	bic.w	r3, r3, #1
 80029e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e2:	f7ff fb2f 	bl	8002044 <HAL_GetTick>
 80029e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029e8:	e00a      	b.n	8002a00 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ea:	f7ff fb2b 	bl	8002044 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d903      	bls.n	8002a00 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e2af      	b.n	8002f5c <HAL_RCC_OscConfig+0x7a4>
 80029fc:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a00:	4b96      	ldr	r3, [pc, #600]	@ (8002c5c <HAL_RCC_OscConfig+0x4a4>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1ee      	bne.n	80029ea <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0310 	and.w	r3, r3, #16
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d06a      	beq.n	8002aee <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a18:	4b90      	ldr	r3, [pc, #576]	@ (8002c5c <HAL_RCC_OscConfig+0x4a4>)
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a20:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a22:	4b8e      	ldr	r3, [pc, #568]	@ (8002c5c <HAL_RCC_OscConfig+0x4a4>)
 8002a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a26:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	2b08      	cmp	r3, #8
 8002a2c:	d007      	beq.n	8002a3e <HAL_RCC_OscConfig+0x286>
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	2b18      	cmp	r3, #24
 8002a32:	d11b      	bne.n	8002a6c <HAL_RCC_OscConfig+0x2b4>
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	f003 0303 	and.w	r3, r3, #3
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d116      	bne.n	8002a6c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a3e:	4b87      	ldr	r3, [pc, #540]	@ (8002c5c <HAL_RCC_OscConfig+0x4a4>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d005      	beq.n	8002a56 <HAL_RCC_OscConfig+0x29e>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	2b80      	cmp	r3, #128	@ 0x80
 8002a50:	d001      	beq.n	8002a56 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e282      	b.n	8002f5c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a56:	4b81      	ldr	r3, [pc, #516]	@ (8002c5c <HAL_RCC_OscConfig+0x4a4>)
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	061b      	lsls	r3, r3, #24
 8002a64:	497d      	ldr	r1, [pc, #500]	@ (8002c5c <HAL_RCC_OscConfig+0x4a4>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a6a:	e040      	b.n	8002aee <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d023      	beq.n	8002abc <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002a74:	4b79      	ldr	r3, [pc, #484]	@ (8002c5c <HAL_RCC_OscConfig+0x4a4>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a78      	ldr	r2, [pc, #480]	@ (8002c5c <HAL_RCC_OscConfig+0x4a4>)
 8002a7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a80:	f7ff fae0 	bl	8002044 <HAL_GetTick>
 8002a84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002a88:	f7ff fadc 	bl	8002044 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e260      	b.n	8002f5c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a9a:	4b70      	ldr	r3, [pc, #448]	@ (8002c5c <HAL_RCC_OscConfig+0x4a4>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d0f0      	beq.n	8002a88 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002aa6:	4b6d      	ldr	r3, [pc, #436]	@ (8002c5c <HAL_RCC_OscConfig+0x4a4>)
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	061b      	lsls	r3, r3, #24
 8002ab4:	4969      	ldr	r1, [pc, #420]	@ (8002c5c <HAL_RCC_OscConfig+0x4a4>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	60cb      	str	r3, [r1, #12]
 8002aba:	e018      	b.n	8002aee <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002abc:	4b67      	ldr	r3, [pc, #412]	@ (8002c5c <HAL_RCC_OscConfig+0x4a4>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a66      	ldr	r2, [pc, #408]	@ (8002c5c <HAL_RCC_OscConfig+0x4a4>)
 8002ac2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ac6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac8:	f7ff fabc 	bl	8002044 <HAL_GetTick>
 8002acc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002ad0:	f7ff fab8 	bl	8002044 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e23c      	b.n	8002f5c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ae2:	4b5e      	ldr	r3, [pc, #376]	@ (8002c5c <HAL_RCC_OscConfig+0x4a4>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f0      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0308 	and.w	r3, r3, #8
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d036      	beq.n	8002b68 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d019      	beq.n	8002b36 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b02:	4b56      	ldr	r3, [pc, #344]	@ (8002c5c <HAL_RCC_OscConfig+0x4a4>)
 8002b04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b06:	4a55      	ldr	r2, [pc, #340]	@ (8002c5c <HAL_RCC_OscConfig+0x4a4>)
 8002b08:	f043 0301 	orr.w	r3, r3, #1
 8002b0c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b0e:	f7ff fa99 	bl	8002044 <HAL_GetTick>
 8002b12:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b14:	e008      	b.n	8002b28 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b16:	f7ff fa95 	bl	8002044 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e219      	b.n	8002f5c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b28:	4b4c      	ldr	r3, [pc, #304]	@ (8002c5c <HAL_RCC_OscConfig+0x4a4>)
 8002b2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d0f0      	beq.n	8002b16 <HAL_RCC_OscConfig+0x35e>
 8002b34:	e018      	b.n	8002b68 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b36:	4b49      	ldr	r3, [pc, #292]	@ (8002c5c <HAL_RCC_OscConfig+0x4a4>)
 8002b38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b3a:	4a48      	ldr	r2, [pc, #288]	@ (8002c5c <HAL_RCC_OscConfig+0x4a4>)
 8002b3c:	f023 0301 	bic.w	r3, r3, #1
 8002b40:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b42:	f7ff fa7f 	bl	8002044 <HAL_GetTick>
 8002b46:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b4a:	f7ff fa7b 	bl	8002044 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e1ff      	b.n	8002f5c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b5c:	4b3f      	ldr	r3, [pc, #252]	@ (8002c5c <HAL_RCC_OscConfig+0x4a4>)
 8002b5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1f0      	bne.n	8002b4a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0320 	and.w	r3, r3, #32
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d036      	beq.n	8002be2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d019      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b7c:	4b37      	ldr	r3, [pc, #220]	@ (8002c5c <HAL_RCC_OscConfig+0x4a4>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a36      	ldr	r2, [pc, #216]	@ (8002c5c <HAL_RCC_OscConfig+0x4a4>)
 8002b82:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b86:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b88:	f7ff fa5c 	bl	8002044 <HAL_GetTick>
 8002b8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b90:	f7ff fa58 	bl	8002044 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e1dc      	b.n	8002f5c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ba2:	4b2e      	ldr	r3, [pc, #184]	@ (8002c5c <HAL_RCC_OscConfig+0x4a4>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0f0      	beq.n	8002b90 <HAL_RCC_OscConfig+0x3d8>
 8002bae:	e018      	b.n	8002be2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002bb0:	4b2a      	ldr	r3, [pc, #168]	@ (8002c5c <HAL_RCC_OscConfig+0x4a4>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a29      	ldr	r2, [pc, #164]	@ (8002c5c <HAL_RCC_OscConfig+0x4a4>)
 8002bb6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002bba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002bbc:	f7ff fa42 	bl	8002044 <HAL_GetTick>
 8002bc0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bc4:	f7ff fa3e 	bl	8002044 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e1c2      	b.n	8002f5c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002bd6:	4b21      	ldr	r3, [pc, #132]	@ (8002c5c <HAL_RCC_OscConfig+0x4a4>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1f0      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0304 	and.w	r3, r3, #4
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 8086 	beq.w	8002cfc <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8002c60 <HAL_RCC_OscConfig+0x4a8>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a1a      	ldr	r2, [pc, #104]	@ (8002c60 <HAL_RCC_OscConfig+0x4a8>)
 8002bf6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bfa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bfc:	f7ff fa22 	bl	8002044 <HAL_GetTick>
 8002c00:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c04:	f7ff fa1e 	bl	8002044 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b64      	cmp	r3, #100	@ 0x64
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e1a2      	b.n	8002f5c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c16:	4b12      	ldr	r3, [pc, #72]	@ (8002c60 <HAL_RCC_OscConfig+0x4a8>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d0f0      	beq.n	8002c04 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d106      	bne.n	8002c38 <HAL_RCC_OscConfig+0x480>
 8002c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8002c5c <HAL_RCC_OscConfig+0x4a4>)
 8002c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c2e:	4a0b      	ldr	r2, [pc, #44]	@ (8002c5c <HAL_RCC_OscConfig+0x4a4>)
 8002c30:	f043 0301 	orr.w	r3, r3, #1
 8002c34:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c36:	e032      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e6>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d111      	bne.n	8002c64 <HAL_RCC_OscConfig+0x4ac>
 8002c40:	4b06      	ldr	r3, [pc, #24]	@ (8002c5c <HAL_RCC_OscConfig+0x4a4>)
 8002c42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c44:	4a05      	ldr	r2, [pc, #20]	@ (8002c5c <HAL_RCC_OscConfig+0x4a4>)
 8002c46:	f023 0301 	bic.w	r3, r3, #1
 8002c4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c4c:	4b03      	ldr	r3, [pc, #12]	@ (8002c5c <HAL_RCC_OscConfig+0x4a4>)
 8002c4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c50:	4a02      	ldr	r2, [pc, #8]	@ (8002c5c <HAL_RCC_OscConfig+0x4a4>)
 8002c52:	f023 0304 	bic.w	r3, r3, #4
 8002c56:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c58:	e021      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e6>
 8002c5a:	bf00      	nop
 8002c5c:	58024400 	.word	0x58024400
 8002c60:	58024800 	.word	0x58024800
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	2b05      	cmp	r3, #5
 8002c6a:	d10c      	bne.n	8002c86 <HAL_RCC_OscConfig+0x4ce>
 8002c6c:	4b83      	ldr	r3, [pc, #524]	@ (8002e7c <HAL_RCC_OscConfig+0x6c4>)
 8002c6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c70:	4a82      	ldr	r2, [pc, #520]	@ (8002e7c <HAL_RCC_OscConfig+0x6c4>)
 8002c72:	f043 0304 	orr.w	r3, r3, #4
 8002c76:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c78:	4b80      	ldr	r3, [pc, #512]	@ (8002e7c <HAL_RCC_OscConfig+0x6c4>)
 8002c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c7c:	4a7f      	ldr	r2, [pc, #508]	@ (8002e7c <HAL_RCC_OscConfig+0x6c4>)
 8002c7e:	f043 0301 	orr.w	r3, r3, #1
 8002c82:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c84:	e00b      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e6>
 8002c86:	4b7d      	ldr	r3, [pc, #500]	@ (8002e7c <HAL_RCC_OscConfig+0x6c4>)
 8002c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c8a:	4a7c      	ldr	r2, [pc, #496]	@ (8002e7c <HAL_RCC_OscConfig+0x6c4>)
 8002c8c:	f023 0301 	bic.w	r3, r3, #1
 8002c90:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c92:	4b7a      	ldr	r3, [pc, #488]	@ (8002e7c <HAL_RCC_OscConfig+0x6c4>)
 8002c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c96:	4a79      	ldr	r2, [pc, #484]	@ (8002e7c <HAL_RCC_OscConfig+0x6c4>)
 8002c98:	f023 0304 	bic.w	r3, r3, #4
 8002c9c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d015      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca6:	f7ff f9cd 	bl	8002044 <HAL_GetTick>
 8002caa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cac:	e00a      	b.n	8002cc4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cae:	f7ff f9c9 	bl	8002044 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e14b      	b.n	8002f5c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cc4:	4b6d      	ldr	r3, [pc, #436]	@ (8002e7c <HAL_RCC_OscConfig+0x6c4>)
 8002cc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0ee      	beq.n	8002cae <HAL_RCC_OscConfig+0x4f6>
 8002cd0:	e014      	b.n	8002cfc <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd2:	f7ff f9b7 	bl	8002044 <HAL_GetTick>
 8002cd6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cd8:	e00a      	b.n	8002cf0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cda:	f7ff f9b3 	bl	8002044 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e135      	b.n	8002f5c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cf0:	4b62      	ldr	r3, [pc, #392]	@ (8002e7c <HAL_RCC_OscConfig+0x6c4>)
 8002cf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1ee      	bne.n	8002cda <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 812a 	beq.w	8002f5a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002d06:	4b5d      	ldr	r3, [pc, #372]	@ (8002e7c <HAL_RCC_OscConfig+0x6c4>)
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d0e:	2b18      	cmp	r3, #24
 8002d10:	f000 80ba 	beq.w	8002e88 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	f040 8095 	bne.w	8002e48 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d1e:	4b57      	ldr	r3, [pc, #348]	@ (8002e7c <HAL_RCC_OscConfig+0x6c4>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a56      	ldr	r2, [pc, #344]	@ (8002e7c <HAL_RCC_OscConfig+0x6c4>)
 8002d24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2a:	f7ff f98b 	bl	8002044 <HAL_GetTick>
 8002d2e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d30:	e008      	b.n	8002d44 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d32:	f7ff f987 	bl	8002044 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e10b      	b.n	8002f5c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d44:	4b4d      	ldr	r3, [pc, #308]	@ (8002e7c <HAL_RCC_OscConfig+0x6c4>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1f0      	bne.n	8002d32 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d50:	4b4a      	ldr	r3, [pc, #296]	@ (8002e7c <HAL_RCC_OscConfig+0x6c4>)
 8002d52:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d54:	4b4a      	ldr	r3, [pc, #296]	@ (8002e80 <HAL_RCC_OscConfig+0x6c8>)
 8002d56:	4013      	ands	r3, r2
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002d60:	0112      	lsls	r2, r2, #4
 8002d62:	430a      	orrs	r2, r1
 8002d64:	4945      	ldr	r1, [pc, #276]	@ (8002e7c <HAL_RCC_OscConfig+0x6c4>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	628b      	str	r3, [r1, #40]	@ 0x28
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	025b      	lsls	r3, r3, #9
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d84:	3b01      	subs	r3, #1
 8002d86:	041b      	lsls	r3, r3, #16
 8002d88:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d92:	3b01      	subs	r3, #1
 8002d94:	061b      	lsls	r3, r3, #24
 8002d96:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002d9a:	4938      	ldr	r1, [pc, #224]	@ (8002e7c <HAL_RCC_OscConfig+0x6c4>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002da0:	4b36      	ldr	r3, [pc, #216]	@ (8002e7c <HAL_RCC_OscConfig+0x6c4>)
 8002da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da4:	4a35      	ldr	r2, [pc, #212]	@ (8002e7c <HAL_RCC_OscConfig+0x6c4>)
 8002da6:	f023 0301 	bic.w	r3, r3, #1
 8002daa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002dac:	4b33      	ldr	r3, [pc, #204]	@ (8002e7c <HAL_RCC_OscConfig+0x6c4>)
 8002dae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002db0:	4b34      	ldr	r3, [pc, #208]	@ (8002e84 <HAL_RCC_OscConfig+0x6cc>)
 8002db2:	4013      	ands	r3, r2
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002db8:	00d2      	lsls	r2, r2, #3
 8002dba:	4930      	ldr	r1, [pc, #192]	@ (8002e7c <HAL_RCC_OscConfig+0x6c4>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002dc0:	4b2e      	ldr	r3, [pc, #184]	@ (8002e7c <HAL_RCC_OscConfig+0x6c4>)
 8002dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc4:	f023 020c 	bic.w	r2, r3, #12
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dcc:	492b      	ldr	r1, [pc, #172]	@ (8002e7c <HAL_RCC_OscConfig+0x6c4>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002dd2:	4b2a      	ldr	r3, [pc, #168]	@ (8002e7c <HAL_RCC_OscConfig+0x6c4>)
 8002dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd6:	f023 0202 	bic.w	r2, r3, #2
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dde:	4927      	ldr	r1, [pc, #156]	@ (8002e7c <HAL_RCC_OscConfig+0x6c4>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002de4:	4b25      	ldr	r3, [pc, #148]	@ (8002e7c <HAL_RCC_OscConfig+0x6c4>)
 8002de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de8:	4a24      	ldr	r2, [pc, #144]	@ (8002e7c <HAL_RCC_OscConfig+0x6c4>)
 8002dea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002df0:	4b22      	ldr	r3, [pc, #136]	@ (8002e7c <HAL_RCC_OscConfig+0x6c4>)
 8002df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002df4:	4a21      	ldr	r2, [pc, #132]	@ (8002e7c <HAL_RCC_OscConfig+0x6c4>)
 8002df6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002dfc:	4b1f      	ldr	r3, [pc, #124]	@ (8002e7c <HAL_RCC_OscConfig+0x6c4>)
 8002dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e00:	4a1e      	ldr	r2, [pc, #120]	@ (8002e7c <HAL_RCC_OscConfig+0x6c4>)
 8002e02:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002e08:	4b1c      	ldr	r3, [pc, #112]	@ (8002e7c <HAL_RCC_OscConfig+0x6c4>)
 8002e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e0c:	4a1b      	ldr	r2, [pc, #108]	@ (8002e7c <HAL_RCC_OscConfig+0x6c4>)
 8002e0e:	f043 0301 	orr.w	r3, r3, #1
 8002e12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e14:	4b19      	ldr	r3, [pc, #100]	@ (8002e7c <HAL_RCC_OscConfig+0x6c4>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a18      	ldr	r2, [pc, #96]	@ (8002e7c <HAL_RCC_OscConfig+0x6c4>)
 8002e1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e20:	f7ff f910 	bl	8002044 <HAL_GetTick>
 8002e24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e28:	f7ff f90c 	bl	8002044 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e090      	b.n	8002f5c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e3a:	4b10      	ldr	r3, [pc, #64]	@ (8002e7c <HAL_RCC_OscConfig+0x6c4>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0f0      	beq.n	8002e28 <HAL_RCC_OscConfig+0x670>
 8002e46:	e088      	b.n	8002f5a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e48:	4b0c      	ldr	r3, [pc, #48]	@ (8002e7c <HAL_RCC_OscConfig+0x6c4>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a0b      	ldr	r2, [pc, #44]	@ (8002e7c <HAL_RCC_OscConfig+0x6c4>)
 8002e4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e54:	f7ff f8f6 	bl	8002044 <HAL_GetTick>
 8002e58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e5c:	f7ff f8f2 	bl	8002044 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e076      	b.n	8002f5c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e6e:	4b03      	ldr	r3, [pc, #12]	@ (8002e7c <HAL_RCC_OscConfig+0x6c4>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1f0      	bne.n	8002e5c <HAL_RCC_OscConfig+0x6a4>
 8002e7a:	e06e      	b.n	8002f5a <HAL_RCC_OscConfig+0x7a2>
 8002e7c:	58024400 	.word	0x58024400
 8002e80:	fffffc0c 	.word	0xfffffc0c
 8002e84:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002e88:	4b36      	ldr	r3, [pc, #216]	@ (8002f64 <HAL_RCC_OscConfig+0x7ac>)
 8002e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e8c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e8e:	4b35      	ldr	r3, [pc, #212]	@ (8002f64 <HAL_RCC_OscConfig+0x7ac>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e92:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d031      	beq.n	8002f00 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	f003 0203 	and.w	r2, r3, #3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d12a      	bne.n	8002f00 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	091b      	lsrs	r3, r3, #4
 8002eae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d122      	bne.n	8002f00 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d11a      	bne.n	8002f00 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	0a5b      	lsrs	r3, r3, #9
 8002ece:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ed6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d111      	bne.n	8002f00 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	0c1b      	lsrs	r3, r3, #16
 8002ee0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ee8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d108      	bne.n	8002f00 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	0e1b      	lsrs	r3, r3, #24
 8002ef2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002efa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d001      	beq.n	8002f04 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e02b      	b.n	8002f5c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002f04:	4b17      	ldr	r3, [pc, #92]	@ (8002f64 <HAL_RCC_OscConfig+0x7ac>)
 8002f06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f08:	08db      	lsrs	r3, r3, #3
 8002f0a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f0e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d01f      	beq.n	8002f5a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002f1a:	4b12      	ldr	r3, [pc, #72]	@ (8002f64 <HAL_RCC_OscConfig+0x7ac>)
 8002f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f1e:	4a11      	ldr	r2, [pc, #68]	@ (8002f64 <HAL_RCC_OscConfig+0x7ac>)
 8002f20:	f023 0301 	bic.w	r3, r3, #1
 8002f24:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f26:	f7ff f88d 	bl	8002044 <HAL_GetTick>
 8002f2a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002f2c:	bf00      	nop
 8002f2e:	f7ff f889 	bl	8002044 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d0f9      	beq.n	8002f2e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f64 <HAL_RCC_OscConfig+0x7ac>)
 8002f3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f68 <HAL_RCC_OscConfig+0x7b0>)
 8002f40:	4013      	ands	r3, r2
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002f46:	00d2      	lsls	r2, r2, #3
 8002f48:	4906      	ldr	r1, [pc, #24]	@ (8002f64 <HAL_RCC_OscConfig+0x7ac>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002f4e:	4b05      	ldr	r3, [pc, #20]	@ (8002f64 <HAL_RCC_OscConfig+0x7ac>)
 8002f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f52:	4a04      	ldr	r2, [pc, #16]	@ (8002f64 <HAL_RCC_OscConfig+0x7ac>)
 8002f54:	f043 0301 	orr.w	r3, r3, #1
 8002f58:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3730      	adds	r7, #48	@ 0x30
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	58024400 	.word	0x58024400
 8002f68:	ffff0007 	.word	0xffff0007

08002f6c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d101      	bne.n	8002f80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e19c      	b.n	80032ba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f80:	4b8a      	ldr	r3, [pc, #552]	@ (80031ac <HAL_RCC_ClockConfig+0x240>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 030f 	and.w	r3, r3, #15
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d910      	bls.n	8002fb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f8e:	4b87      	ldr	r3, [pc, #540]	@ (80031ac <HAL_RCC_ClockConfig+0x240>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f023 020f 	bic.w	r2, r3, #15
 8002f96:	4985      	ldr	r1, [pc, #532]	@ (80031ac <HAL_RCC_ClockConfig+0x240>)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9e:	4b83      	ldr	r3, [pc, #524]	@ (80031ac <HAL_RCC_ClockConfig+0x240>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 030f 	and.w	r3, r3, #15
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d001      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e184      	b.n	80032ba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d010      	beq.n	8002fde <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	691a      	ldr	r2, [r3, #16]
 8002fc0:	4b7b      	ldr	r3, [pc, #492]	@ (80031b0 <HAL_RCC_ClockConfig+0x244>)
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d908      	bls.n	8002fde <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002fcc:	4b78      	ldr	r3, [pc, #480]	@ (80031b0 <HAL_RCC_ClockConfig+0x244>)
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	4975      	ldr	r1, [pc, #468]	@ (80031b0 <HAL_RCC_ClockConfig+0x244>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0308 	and.w	r3, r3, #8
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d010      	beq.n	800300c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	695a      	ldr	r2, [r3, #20]
 8002fee:	4b70      	ldr	r3, [pc, #448]	@ (80031b0 <HAL_RCC_ClockConfig+0x244>)
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d908      	bls.n	800300c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ffa:	4b6d      	ldr	r3, [pc, #436]	@ (80031b0 <HAL_RCC_ClockConfig+0x244>)
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	496a      	ldr	r1, [pc, #424]	@ (80031b0 <HAL_RCC_ClockConfig+0x244>)
 8003008:	4313      	orrs	r3, r2
 800300a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0310 	and.w	r3, r3, #16
 8003014:	2b00      	cmp	r3, #0
 8003016:	d010      	beq.n	800303a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	699a      	ldr	r2, [r3, #24]
 800301c:	4b64      	ldr	r3, [pc, #400]	@ (80031b0 <HAL_RCC_ClockConfig+0x244>)
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003024:	429a      	cmp	r2, r3
 8003026:	d908      	bls.n	800303a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003028:	4b61      	ldr	r3, [pc, #388]	@ (80031b0 <HAL_RCC_ClockConfig+0x244>)
 800302a:	69db      	ldr	r3, [r3, #28]
 800302c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	495e      	ldr	r1, [pc, #376]	@ (80031b0 <HAL_RCC_ClockConfig+0x244>)
 8003036:	4313      	orrs	r3, r2
 8003038:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0320 	and.w	r3, r3, #32
 8003042:	2b00      	cmp	r3, #0
 8003044:	d010      	beq.n	8003068 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	69da      	ldr	r2, [r3, #28]
 800304a:	4b59      	ldr	r3, [pc, #356]	@ (80031b0 <HAL_RCC_ClockConfig+0x244>)
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003052:	429a      	cmp	r2, r3
 8003054:	d908      	bls.n	8003068 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003056:	4b56      	ldr	r3, [pc, #344]	@ (80031b0 <HAL_RCC_ClockConfig+0x244>)
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	4953      	ldr	r1, [pc, #332]	@ (80031b0 <HAL_RCC_ClockConfig+0x244>)
 8003064:	4313      	orrs	r3, r2
 8003066:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d010      	beq.n	8003096 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68da      	ldr	r2, [r3, #12]
 8003078:	4b4d      	ldr	r3, [pc, #308]	@ (80031b0 <HAL_RCC_ClockConfig+0x244>)
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	f003 030f 	and.w	r3, r3, #15
 8003080:	429a      	cmp	r2, r3
 8003082:	d908      	bls.n	8003096 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003084:	4b4a      	ldr	r3, [pc, #296]	@ (80031b0 <HAL_RCC_ClockConfig+0x244>)
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	f023 020f 	bic.w	r2, r3, #15
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	4947      	ldr	r1, [pc, #284]	@ (80031b0 <HAL_RCC_ClockConfig+0x244>)
 8003092:	4313      	orrs	r3, r2
 8003094:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d055      	beq.n	800314e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80030a2:	4b43      	ldr	r3, [pc, #268]	@ (80031b0 <HAL_RCC_ClockConfig+0x244>)
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	4940      	ldr	r1, [pc, #256]	@ (80031b0 <HAL_RCC_ClockConfig+0x244>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d107      	bne.n	80030cc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030bc:	4b3c      	ldr	r3, [pc, #240]	@ (80031b0 <HAL_RCC_ClockConfig+0x244>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d121      	bne.n	800310c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0f6      	b.n	80032ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	2b03      	cmp	r3, #3
 80030d2:	d107      	bne.n	80030e4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030d4:	4b36      	ldr	r3, [pc, #216]	@ (80031b0 <HAL_RCC_ClockConfig+0x244>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d115      	bne.n	800310c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e0ea      	b.n	80032ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d107      	bne.n	80030fc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030ec:	4b30      	ldr	r3, [pc, #192]	@ (80031b0 <HAL_RCC_ClockConfig+0x244>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d109      	bne.n	800310c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e0de      	b.n	80032ba <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030fc:	4b2c      	ldr	r3, [pc, #176]	@ (80031b0 <HAL_RCC_ClockConfig+0x244>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0304 	and.w	r3, r3, #4
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e0d6      	b.n	80032ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800310c:	4b28      	ldr	r3, [pc, #160]	@ (80031b0 <HAL_RCC_ClockConfig+0x244>)
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	f023 0207 	bic.w	r2, r3, #7
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	4925      	ldr	r1, [pc, #148]	@ (80031b0 <HAL_RCC_ClockConfig+0x244>)
 800311a:	4313      	orrs	r3, r2
 800311c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800311e:	f7fe ff91 	bl	8002044 <HAL_GetTick>
 8003122:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003124:	e00a      	b.n	800313c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003126:	f7fe ff8d 	bl	8002044 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003134:	4293      	cmp	r3, r2
 8003136:	d901      	bls.n	800313c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e0be      	b.n	80032ba <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800313c:	4b1c      	ldr	r3, [pc, #112]	@ (80031b0 <HAL_RCC_ClockConfig+0x244>)
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	429a      	cmp	r2, r3
 800314c:	d1eb      	bne.n	8003126 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d010      	beq.n	800317c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68da      	ldr	r2, [r3, #12]
 800315e:	4b14      	ldr	r3, [pc, #80]	@ (80031b0 <HAL_RCC_ClockConfig+0x244>)
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	f003 030f 	and.w	r3, r3, #15
 8003166:	429a      	cmp	r2, r3
 8003168:	d208      	bcs.n	800317c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800316a:	4b11      	ldr	r3, [pc, #68]	@ (80031b0 <HAL_RCC_ClockConfig+0x244>)
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	f023 020f 	bic.w	r2, r3, #15
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	490e      	ldr	r1, [pc, #56]	@ (80031b0 <HAL_RCC_ClockConfig+0x244>)
 8003178:	4313      	orrs	r3, r2
 800317a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800317c:	4b0b      	ldr	r3, [pc, #44]	@ (80031ac <HAL_RCC_ClockConfig+0x240>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 030f 	and.w	r3, r3, #15
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	429a      	cmp	r2, r3
 8003188:	d214      	bcs.n	80031b4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800318a:	4b08      	ldr	r3, [pc, #32]	@ (80031ac <HAL_RCC_ClockConfig+0x240>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f023 020f 	bic.w	r2, r3, #15
 8003192:	4906      	ldr	r1, [pc, #24]	@ (80031ac <HAL_RCC_ClockConfig+0x240>)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	4313      	orrs	r3, r2
 8003198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800319a:	4b04      	ldr	r3, [pc, #16]	@ (80031ac <HAL_RCC_ClockConfig+0x240>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 030f 	and.w	r3, r3, #15
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d005      	beq.n	80031b4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e086      	b.n	80032ba <HAL_RCC_ClockConfig+0x34e>
 80031ac:	52002000 	.word	0x52002000
 80031b0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d010      	beq.n	80031e2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	691a      	ldr	r2, [r3, #16]
 80031c4:	4b3f      	ldr	r3, [pc, #252]	@ (80032c4 <HAL_RCC_ClockConfig+0x358>)
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d208      	bcs.n	80031e2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80031d0:	4b3c      	ldr	r3, [pc, #240]	@ (80032c4 <HAL_RCC_ClockConfig+0x358>)
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	4939      	ldr	r1, [pc, #228]	@ (80032c4 <HAL_RCC_ClockConfig+0x358>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0308 	and.w	r3, r3, #8
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d010      	beq.n	8003210 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	695a      	ldr	r2, [r3, #20]
 80031f2:	4b34      	ldr	r3, [pc, #208]	@ (80032c4 <HAL_RCC_ClockConfig+0x358>)
 80031f4:	69db      	ldr	r3, [r3, #28]
 80031f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d208      	bcs.n	8003210 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031fe:	4b31      	ldr	r3, [pc, #196]	@ (80032c4 <HAL_RCC_ClockConfig+0x358>)
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	492e      	ldr	r1, [pc, #184]	@ (80032c4 <HAL_RCC_ClockConfig+0x358>)
 800320c:	4313      	orrs	r3, r2
 800320e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0310 	and.w	r3, r3, #16
 8003218:	2b00      	cmp	r3, #0
 800321a:	d010      	beq.n	800323e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	699a      	ldr	r2, [r3, #24]
 8003220:	4b28      	ldr	r3, [pc, #160]	@ (80032c4 <HAL_RCC_ClockConfig+0x358>)
 8003222:	69db      	ldr	r3, [r3, #28]
 8003224:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003228:	429a      	cmp	r2, r3
 800322a:	d208      	bcs.n	800323e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800322c:	4b25      	ldr	r3, [pc, #148]	@ (80032c4 <HAL_RCC_ClockConfig+0x358>)
 800322e:	69db      	ldr	r3, [r3, #28]
 8003230:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	4922      	ldr	r1, [pc, #136]	@ (80032c4 <HAL_RCC_ClockConfig+0x358>)
 800323a:	4313      	orrs	r3, r2
 800323c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0320 	and.w	r3, r3, #32
 8003246:	2b00      	cmp	r3, #0
 8003248:	d010      	beq.n	800326c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69da      	ldr	r2, [r3, #28]
 800324e:	4b1d      	ldr	r3, [pc, #116]	@ (80032c4 <HAL_RCC_ClockConfig+0x358>)
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003256:	429a      	cmp	r2, r3
 8003258:	d208      	bcs.n	800326c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800325a:	4b1a      	ldr	r3, [pc, #104]	@ (80032c4 <HAL_RCC_ClockConfig+0x358>)
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	4917      	ldr	r1, [pc, #92]	@ (80032c4 <HAL_RCC_ClockConfig+0x358>)
 8003268:	4313      	orrs	r3, r2
 800326a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800326c:	f000 f834 	bl	80032d8 <HAL_RCC_GetSysClockFreq>
 8003270:	4602      	mov	r2, r0
 8003272:	4b14      	ldr	r3, [pc, #80]	@ (80032c4 <HAL_RCC_ClockConfig+0x358>)
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	0a1b      	lsrs	r3, r3, #8
 8003278:	f003 030f 	and.w	r3, r3, #15
 800327c:	4912      	ldr	r1, [pc, #72]	@ (80032c8 <HAL_RCC_ClockConfig+0x35c>)
 800327e:	5ccb      	ldrb	r3, [r1, r3]
 8003280:	f003 031f 	and.w	r3, r3, #31
 8003284:	fa22 f303 	lsr.w	r3, r2, r3
 8003288:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800328a:	4b0e      	ldr	r3, [pc, #56]	@ (80032c4 <HAL_RCC_ClockConfig+0x358>)
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	f003 030f 	and.w	r3, r3, #15
 8003292:	4a0d      	ldr	r2, [pc, #52]	@ (80032c8 <HAL_RCC_ClockConfig+0x35c>)
 8003294:	5cd3      	ldrb	r3, [r2, r3]
 8003296:	f003 031f 	and.w	r3, r3, #31
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	fa22 f303 	lsr.w	r3, r2, r3
 80032a0:	4a0a      	ldr	r2, [pc, #40]	@ (80032cc <HAL_RCC_ClockConfig+0x360>)
 80032a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80032a4:	4a0a      	ldr	r2, [pc, #40]	@ (80032d0 <HAL_RCC_ClockConfig+0x364>)
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80032aa:	4b0a      	ldr	r3, [pc, #40]	@ (80032d4 <HAL_RCC_ClockConfig+0x368>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fe fe7e 	bl	8001fb0 <HAL_InitTick>
 80032b4:	4603      	mov	r3, r0
 80032b6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80032b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3718      	adds	r7, #24
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	58024400 	.word	0x58024400
 80032c8:	0800b89c 	.word	0x0800b89c
 80032cc:	24000008 	.word	0x24000008
 80032d0:	24000004 	.word	0x24000004
 80032d4:	2400000c 	.word	0x2400000c

080032d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	b089      	sub	sp, #36	@ 0x24
 80032dc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032de:	4bb3      	ldr	r3, [pc, #716]	@ (80035ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80032e6:	2b18      	cmp	r3, #24
 80032e8:	f200 8155 	bhi.w	8003596 <HAL_RCC_GetSysClockFreq+0x2be>
 80032ec:	a201      	add	r2, pc, #4	@ (adr r2, 80032f4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80032ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f2:	bf00      	nop
 80032f4:	08003359 	.word	0x08003359
 80032f8:	08003597 	.word	0x08003597
 80032fc:	08003597 	.word	0x08003597
 8003300:	08003597 	.word	0x08003597
 8003304:	08003597 	.word	0x08003597
 8003308:	08003597 	.word	0x08003597
 800330c:	08003597 	.word	0x08003597
 8003310:	08003597 	.word	0x08003597
 8003314:	0800337f 	.word	0x0800337f
 8003318:	08003597 	.word	0x08003597
 800331c:	08003597 	.word	0x08003597
 8003320:	08003597 	.word	0x08003597
 8003324:	08003597 	.word	0x08003597
 8003328:	08003597 	.word	0x08003597
 800332c:	08003597 	.word	0x08003597
 8003330:	08003597 	.word	0x08003597
 8003334:	08003385 	.word	0x08003385
 8003338:	08003597 	.word	0x08003597
 800333c:	08003597 	.word	0x08003597
 8003340:	08003597 	.word	0x08003597
 8003344:	08003597 	.word	0x08003597
 8003348:	08003597 	.word	0x08003597
 800334c:	08003597 	.word	0x08003597
 8003350:	08003597 	.word	0x08003597
 8003354:	0800338b 	.word	0x0800338b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003358:	4b94      	ldr	r3, [pc, #592]	@ (80035ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0320 	and.w	r3, r3, #32
 8003360:	2b00      	cmp	r3, #0
 8003362:	d009      	beq.n	8003378 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003364:	4b91      	ldr	r3, [pc, #580]	@ (80035ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	08db      	lsrs	r3, r3, #3
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	4a90      	ldr	r2, [pc, #576]	@ (80035b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003370:	fa22 f303 	lsr.w	r3, r2, r3
 8003374:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003376:	e111      	b.n	800359c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003378:	4b8d      	ldr	r3, [pc, #564]	@ (80035b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800337a:	61bb      	str	r3, [r7, #24]
      break;
 800337c:	e10e      	b.n	800359c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800337e:	4b8d      	ldr	r3, [pc, #564]	@ (80035b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003380:	61bb      	str	r3, [r7, #24]
      break;
 8003382:	e10b      	b.n	800359c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003384:	4b8c      	ldr	r3, [pc, #560]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003386:	61bb      	str	r3, [r7, #24]
      break;
 8003388:	e108      	b.n	800359c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800338a:	4b88      	ldr	r3, [pc, #544]	@ (80035ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800338c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800338e:	f003 0303 	and.w	r3, r3, #3
 8003392:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003394:	4b85      	ldr	r3, [pc, #532]	@ (80035ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003398:	091b      	lsrs	r3, r3, #4
 800339a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800339e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80033a0:	4b82      	ldr	r3, [pc, #520]	@ (80035ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80033aa:	4b80      	ldr	r3, [pc, #512]	@ (80035ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033ae:	08db      	lsrs	r3, r3, #3
 80033b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	fb02 f303 	mul.w	r3, r2, r3
 80033ba:	ee07 3a90 	vmov	s15, r3
 80033be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033c2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 80e1 	beq.w	8003590 <HAL_RCC_GetSysClockFreq+0x2b8>
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	f000 8083 	beq.w	80034dc <HAL_RCC_GetSysClockFreq+0x204>
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	2b02      	cmp	r3, #2
 80033da:	f200 80a1 	bhi.w	8003520 <HAL_RCC_GetSysClockFreq+0x248>
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d003      	beq.n	80033ec <HAL_RCC_GetSysClockFreq+0x114>
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d056      	beq.n	8003498 <HAL_RCC_GetSysClockFreq+0x1c0>
 80033ea:	e099      	b.n	8003520 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033ec:	4b6f      	ldr	r3, [pc, #444]	@ (80035ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0320 	and.w	r3, r3, #32
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d02d      	beq.n	8003454 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80033f8:	4b6c      	ldr	r3, [pc, #432]	@ (80035ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	08db      	lsrs	r3, r3, #3
 80033fe:	f003 0303 	and.w	r3, r3, #3
 8003402:	4a6b      	ldr	r2, [pc, #428]	@ (80035b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003404:	fa22 f303 	lsr.w	r3, r2, r3
 8003408:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	ee07 3a90 	vmov	s15, r3
 8003410:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	ee07 3a90 	vmov	s15, r3
 800341a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800341e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003422:	4b62      	ldr	r3, [pc, #392]	@ (80035ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800342a:	ee07 3a90 	vmov	s15, r3
 800342e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003432:	ed97 6a02 	vldr	s12, [r7, #8]
 8003436:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80035bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800343a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800343e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003442:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800344a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800344e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003452:	e087      	b.n	8003564 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	ee07 3a90 	vmov	s15, r3
 800345a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800345e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80035c0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003466:	4b51      	ldr	r3, [pc, #324]	@ (80035ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800346a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800346e:	ee07 3a90 	vmov	s15, r3
 8003472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003476:	ed97 6a02 	vldr	s12, [r7, #8]
 800347a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80035bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800347e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003486:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800348a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800348e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003492:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003496:	e065      	b.n	8003564 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	ee07 3a90 	vmov	s15, r3
 800349e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034a2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80035c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80034a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034aa:	4b40      	ldr	r3, [pc, #256]	@ (80035ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034b2:	ee07 3a90 	vmov	s15, r3
 80034b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80034be:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80035bc <HAL_RCC_GetSysClockFreq+0x2e4>
 80034c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80034da:	e043      	b.n	8003564 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	ee07 3a90 	vmov	s15, r3
 80034e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034e6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80035c8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80034ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034ee:	4b2f      	ldr	r3, [pc, #188]	@ (80035ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034f6:	ee07 3a90 	vmov	s15, r3
 80034fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003502:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80035bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800350a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800350e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800351a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800351e:	e021      	b.n	8003564 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	ee07 3a90 	vmov	s15, r3
 8003526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800352a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80035c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800352e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003532:	4b1e      	ldr	r3, [pc, #120]	@ (80035ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800353a:	ee07 3a90 	vmov	s15, r3
 800353e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003542:	ed97 6a02 	vldr	s12, [r7, #8]
 8003546:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80035bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800354a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800354e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003552:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800355a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800355e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003562:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003564:	4b11      	ldr	r3, [pc, #68]	@ (80035ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003568:	0a5b      	lsrs	r3, r3, #9
 800356a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800356e:	3301      	adds	r3, #1
 8003570:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	ee07 3a90 	vmov	s15, r3
 8003578:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800357c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003580:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003584:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003588:	ee17 3a90 	vmov	r3, s15
 800358c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800358e:	e005      	b.n	800359c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003590:	2300      	movs	r3, #0
 8003592:	61bb      	str	r3, [r7, #24]
      break;
 8003594:	e002      	b.n	800359c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003596:	4b07      	ldr	r3, [pc, #28]	@ (80035b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003598:	61bb      	str	r3, [r7, #24]
      break;
 800359a:	bf00      	nop
  }

  return sysclockfreq;
 800359c:	69bb      	ldr	r3, [r7, #24]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3724      	adds	r7, #36	@ 0x24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	58024400 	.word	0x58024400
 80035b0:	03d09000 	.word	0x03d09000
 80035b4:	003d0900 	.word	0x003d0900
 80035b8:	017d7840 	.word	0x017d7840
 80035bc:	46000000 	.word	0x46000000
 80035c0:	4c742400 	.word	0x4c742400
 80035c4:	4a742400 	.word	0x4a742400
 80035c8:	4bbebc20 	.word	0x4bbebc20

080035cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80035d2:	f7ff fe81 	bl	80032d8 <HAL_RCC_GetSysClockFreq>
 80035d6:	4602      	mov	r2, r0
 80035d8:	4b10      	ldr	r3, [pc, #64]	@ (800361c <HAL_RCC_GetHCLKFreq+0x50>)
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	0a1b      	lsrs	r3, r3, #8
 80035de:	f003 030f 	and.w	r3, r3, #15
 80035e2:	490f      	ldr	r1, [pc, #60]	@ (8003620 <HAL_RCC_GetHCLKFreq+0x54>)
 80035e4:	5ccb      	ldrb	r3, [r1, r3]
 80035e6:	f003 031f 	and.w	r3, r3, #31
 80035ea:	fa22 f303 	lsr.w	r3, r2, r3
 80035ee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80035f0:	4b0a      	ldr	r3, [pc, #40]	@ (800361c <HAL_RCC_GetHCLKFreq+0x50>)
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	f003 030f 	and.w	r3, r3, #15
 80035f8:	4a09      	ldr	r2, [pc, #36]	@ (8003620 <HAL_RCC_GetHCLKFreq+0x54>)
 80035fa:	5cd3      	ldrb	r3, [r2, r3]
 80035fc:	f003 031f 	and.w	r3, r3, #31
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	fa22 f303 	lsr.w	r3, r2, r3
 8003606:	4a07      	ldr	r2, [pc, #28]	@ (8003624 <HAL_RCC_GetHCLKFreq+0x58>)
 8003608:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800360a:	4a07      	ldr	r2, [pc, #28]	@ (8003628 <HAL_RCC_GetHCLKFreq+0x5c>)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003610:	4b04      	ldr	r3, [pc, #16]	@ (8003624 <HAL_RCC_GetHCLKFreq+0x58>)
 8003612:	681b      	ldr	r3, [r3, #0]
}
 8003614:	4618      	mov	r0, r3
 8003616:	3708      	adds	r7, #8
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	58024400 	.word	0x58024400
 8003620:	0800b89c 	.word	0x0800b89c
 8003624:	24000008 	.word	0x24000008
 8003628:	24000004 	.word	0x24000004

0800362c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003630:	f7ff ffcc 	bl	80035cc <HAL_RCC_GetHCLKFreq>
 8003634:	4602      	mov	r2, r0
 8003636:	4b06      	ldr	r3, [pc, #24]	@ (8003650 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	091b      	lsrs	r3, r3, #4
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	4904      	ldr	r1, [pc, #16]	@ (8003654 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003642:	5ccb      	ldrb	r3, [r1, r3]
 8003644:	f003 031f 	and.w	r3, r3, #31
 8003648:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800364c:	4618      	mov	r0, r3
 800364e:	bd80      	pop	{r7, pc}
 8003650:	58024400 	.word	0x58024400
 8003654:	0800b89c 	.word	0x0800b89c

08003658 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800365c:	f7ff ffb6 	bl	80035cc <HAL_RCC_GetHCLKFreq>
 8003660:	4602      	mov	r2, r0
 8003662:	4b06      	ldr	r3, [pc, #24]	@ (800367c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	0a1b      	lsrs	r3, r3, #8
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	4904      	ldr	r1, [pc, #16]	@ (8003680 <HAL_RCC_GetPCLK2Freq+0x28>)
 800366e:	5ccb      	ldrb	r3, [r1, r3]
 8003670:	f003 031f 	and.w	r3, r3, #31
 8003674:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003678:	4618      	mov	r0, r3
 800367a:	bd80      	pop	{r7, pc}
 800367c:	58024400 	.word	0x58024400
 8003680:	0800b89c 	.word	0x0800b89c

08003684 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003688:	b0c6      	sub	sp, #280	@ 0x118
 800368a:	af00      	add	r7, sp, #0
 800368c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003690:	2300      	movs	r3, #0
 8003692:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003696:	2300      	movs	r3, #0
 8003698:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800369c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80036a8:	2500      	movs	r5, #0
 80036aa:	ea54 0305 	orrs.w	r3, r4, r5
 80036ae:	d049      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80036b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80036ba:	d02f      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80036bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80036c0:	d828      	bhi.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80036c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80036c6:	d01a      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80036c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80036cc:	d822      	bhi.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x56>
 80036d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036d6:	d007      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80036d8:	e01c      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036da:	4bab      	ldr	r3, [pc, #684]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036de:	4aaa      	ldr	r2, [pc, #680]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80036e6:	e01a      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036ec:	3308      	adds	r3, #8
 80036ee:	2102      	movs	r1, #2
 80036f0:	4618      	mov	r0, r3
 80036f2:	f001 fc25 	bl	8004f40 <RCCEx_PLL2_Config>
 80036f6:	4603      	mov	r3, r0
 80036f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80036fc:	e00f      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003702:	3328      	adds	r3, #40	@ 0x28
 8003704:	2102      	movs	r1, #2
 8003706:	4618      	mov	r0, r3
 8003708:	f001 fccc 	bl	80050a4 <RCCEx_PLL3_Config>
 800370c:	4603      	mov	r3, r0
 800370e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003712:	e004      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800371a:	e000      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800371c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800371e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10a      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003726:	4b98      	ldr	r3, [pc, #608]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003728:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800372a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800372e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003732:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003734:	4a94      	ldr	r2, [pc, #592]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003736:	430b      	orrs	r3, r1
 8003738:	6513      	str	r3, [r2, #80]	@ 0x50
 800373a:	e003      	b.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800373c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003740:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003750:	f04f 0900 	mov.w	r9, #0
 8003754:	ea58 0309 	orrs.w	r3, r8, r9
 8003758:	d047      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800375a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800375e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003760:	2b04      	cmp	r3, #4
 8003762:	d82a      	bhi.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003764:	a201      	add	r2, pc, #4	@ (adr r2, 800376c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376a:	bf00      	nop
 800376c:	08003781 	.word	0x08003781
 8003770:	0800378f 	.word	0x0800378f
 8003774:	080037a5 	.word	0x080037a5
 8003778:	080037c3 	.word	0x080037c3
 800377c:	080037c3 	.word	0x080037c3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003780:	4b81      	ldr	r3, [pc, #516]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003784:	4a80      	ldr	r2, [pc, #512]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003786:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800378a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800378c:	e01a      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800378e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003792:	3308      	adds	r3, #8
 8003794:	2100      	movs	r1, #0
 8003796:	4618      	mov	r0, r3
 8003798:	f001 fbd2 	bl	8004f40 <RCCEx_PLL2_Config>
 800379c:	4603      	mov	r3, r0
 800379e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037a2:	e00f      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037a8:	3328      	adds	r3, #40	@ 0x28
 80037aa:	2100      	movs	r1, #0
 80037ac:	4618      	mov	r0, r3
 80037ae:	f001 fc79 	bl	80050a4 <RCCEx_PLL3_Config>
 80037b2:	4603      	mov	r3, r0
 80037b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037b8:	e004      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80037c0:	e000      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80037c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10a      	bne.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037cc:	4b6e      	ldr	r3, [pc, #440]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80037ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037d0:	f023 0107 	bic.w	r1, r3, #7
 80037d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037da:	4a6b      	ldr	r2, [pc, #428]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80037dc:	430b      	orrs	r3, r1
 80037de:	6513      	str	r3, [r2, #80]	@ 0x50
 80037e0:	e003      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037e6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80037ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f2:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80037f6:	f04f 0b00 	mov.w	fp, #0
 80037fa:	ea5a 030b 	orrs.w	r3, sl, fp
 80037fe:	d05b      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003804:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003808:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800380c:	d03b      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800380e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003812:	d834      	bhi.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003814:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003818:	d037      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800381a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800381e:	d82e      	bhi.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003820:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003824:	d033      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003826:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800382a:	d828      	bhi.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800382c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003830:	d01a      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003832:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003836:	d822      	bhi.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003838:	2b00      	cmp	r3, #0
 800383a:	d003      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800383c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003840:	d007      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003842:	e01c      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003844:	4b50      	ldr	r3, [pc, #320]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003848:	4a4f      	ldr	r2, [pc, #316]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800384a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800384e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003850:	e01e      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003852:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003856:	3308      	adds	r3, #8
 8003858:	2100      	movs	r1, #0
 800385a:	4618      	mov	r0, r3
 800385c:	f001 fb70 	bl	8004f40 <RCCEx_PLL2_Config>
 8003860:	4603      	mov	r3, r0
 8003862:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003866:	e013      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003868:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800386c:	3328      	adds	r3, #40	@ 0x28
 800386e:	2100      	movs	r1, #0
 8003870:	4618      	mov	r0, r3
 8003872:	f001 fc17 	bl	80050a4 <RCCEx_PLL3_Config>
 8003876:	4603      	mov	r3, r0
 8003878:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800387c:	e008      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003884:	e004      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003886:	bf00      	nop
 8003888:	e002      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800388a:	bf00      	nop
 800388c:	e000      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800388e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003890:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10b      	bne.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003898:	4b3b      	ldr	r3, [pc, #236]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800389a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800389c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80038a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80038a8:	4a37      	ldr	r2, [pc, #220]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80038aa:	430b      	orrs	r3, r1
 80038ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80038ae:	e003      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80038b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80038c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80038c8:	2300      	movs	r3, #0
 80038ca:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80038ce:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80038d2:	460b      	mov	r3, r1
 80038d4:	4313      	orrs	r3, r2
 80038d6:	d05d      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80038d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80038e0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80038e4:	d03b      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80038e6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80038ea:	d834      	bhi.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80038ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80038f0:	d037      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80038f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80038f6:	d82e      	bhi.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80038f8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80038fc:	d033      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80038fe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003902:	d828      	bhi.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003904:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003908:	d01a      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800390a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800390e:	d822      	bhi.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003910:	2b00      	cmp	r3, #0
 8003912:	d003      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003914:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003918:	d007      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800391a:	e01c      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800391c:	4b1a      	ldr	r3, [pc, #104]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800391e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003920:	4a19      	ldr	r2, [pc, #100]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003922:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003926:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003928:	e01e      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800392a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800392e:	3308      	adds	r3, #8
 8003930:	2100      	movs	r1, #0
 8003932:	4618      	mov	r0, r3
 8003934:	f001 fb04 	bl	8004f40 <RCCEx_PLL2_Config>
 8003938:	4603      	mov	r3, r0
 800393a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800393e:	e013      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003940:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003944:	3328      	adds	r3, #40	@ 0x28
 8003946:	2100      	movs	r1, #0
 8003948:	4618      	mov	r0, r3
 800394a:	f001 fbab 	bl	80050a4 <RCCEx_PLL3_Config>
 800394e:	4603      	mov	r3, r0
 8003950:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003954:	e008      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800395c:	e004      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800395e:	bf00      	nop
 8003960:	e002      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003962:	bf00      	nop
 8003964:	e000      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003966:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003968:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10d      	bne.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003970:	4b05      	ldr	r3, [pc, #20]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003974:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003978:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800397c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003980:	4a01      	ldr	r2, [pc, #4]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003982:	430b      	orrs	r3, r1
 8003984:	6593      	str	r3, [r2, #88]	@ 0x58
 8003986:	e005      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003988:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800398c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003990:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80039a0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80039a4:	2300      	movs	r3, #0
 80039a6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80039aa:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80039ae:	460b      	mov	r3, r1
 80039b0:	4313      	orrs	r3, r2
 80039b2:	d03a      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80039b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ba:	2b30      	cmp	r3, #48	@ 0x30
 80039bc:	d01f      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80039be:	2b30      	cmp	r3, #48	@ 0x30
 80039c0:	d819      	bhi.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80039c2:	2b20      	cmp	r3, #32
 80039c4:	d00c      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80039c6:	2b20      	cmp	r3, #32
 80039c8:	d815      	bhi.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d019      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80039ce:	2b10      	cmp	r3, #16
 80039d0:	d111      	bne.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039d2:	4baa      	ldr	r3, [pc, #680]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d6:	4aa9      	ldr	r2, [pc, #676]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80039de:	e011      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039e4:	3308      	adds	r3, #8
 80039e6:	2102      	movs	r1, #2
 80039e8:	4618      	mov	r0, r3
 80039ea:	f001 faa9 	bl	8004f40 <RCCEx_PLL2_Config>
 80039ee:	4603      	mov	r3, r0
 80039f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80039f4:	e006      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80039fc:	e002      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80039fe:	bf00      	nop
 8003a00:	e000      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003a02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10a      	bne.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003a0c:	4b9b      	ldr	r3, [pc, #620]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a10:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a1a:	4a98      	ldr	r2, [pc, #608]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a1c:	430b      	orrs	r3, r1
 8003a1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a20:	e003      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a26:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a32:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003a36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003a40:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003a44:	460b      	mov	r3, r1
 8003a46:	4313      	orrs	r3, r2
 8003a48:	d051      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a54:	d035      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8003a56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a5a:	d82e      	bhi.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003a5c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003a60:	d031      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8003a62:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003a66:	d828      	bhi.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003a68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a6c:	d01a      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003a6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a72:	d822      	bhi.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d003      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003a78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a7c:	d007      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8003a7e:	e01c      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a80:	4b7e      	ldr	r3, [pc, #504]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a84:	4a7d      	ldr	r2, [pc, #500]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a8c:	e01c      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a92:	3308      	adds	r3, #8
 8003a94:	2100      	movs	r1, #0
 8003a96:	4618      	mov	r0, r3
 8003a98:	f001 fa52 	bl	8004f40 <RCCEx_PLL2_Config>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003aa2:	e011      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003aa8:	3328      	adds	r3, #40	@ 0x28
 8003aaa:	2100      	movs	r1, #0
 8003aac:	4618      	mov	r0, r3
 8003aae:	f001 faf9 	bl	80050a4 <RCCEx_PLL3_Config>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ab8:	e006      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003ac0:	e002      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003ac2:	bf00      	nop
 8003ac4:	e000      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003ac6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ac8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10a      	bne.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003ad0:	4b6a      	ldr	r3, [pc, #424]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ad2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ad4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003adc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ade:	4a67      	ldr	r2, [pc, #412]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ae0:	430b      	orrs	r3, r1
 8003ae2:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ae4:	e003      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003aea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003afa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003afe:	2300      	movs	r3, #0
 8003b00:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b04:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003b08:	460b      	mov	r3, r1
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	d053      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b18:	d033      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8003b1a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b1e:	d82c      	bhi.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003b20:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b24:	d02f      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8003b26:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b2a:	d826      	bhi.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003b2c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b30:	d02b      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003b32:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b36:	d820      	bhi.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003b38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b3c:	d012      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8003b3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b42:	d81a      	bhi.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d022      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003b48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b4c:	d115      	bne.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b52:	3308      	adds	r3, #8
 8003b54:	2101      	movs	r1, #1
 8003b56:	4618      	mov	r0, r3
 8003b58:	f001 f9f2 	bl	8004f40 <RCCEx_PLL2_Config>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003b62:	e015      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b68:	3328      	adds	r3, #40	@ 0x28
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f001 fa99 	bl	80050a4 <RCCEx_PLL3_Config>
 8003b72:	4603      	mov	r3, r0
 8003b74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003b78:	e00a      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003b80:	e006      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003b82:	bf00      	nop
 8003b84:	e004      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003b86:	bf00      	nop
 8003b88:	e002      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003b8a:	bf00      	nop
 8003b8c:	e000      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003b8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10a      	bne.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003b98:	4b38      	ldr	r3, [pc, #224]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003b9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b9c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ba4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ba6:	4a35      	ldr	r2, [pc, #212]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ba8:	430b      	orrs	r3, r1
 8003baa:	6513      	str	r3, [r2, #80]	@ 0x50
 8003bac:	e003      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003bb2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bbe:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003bc2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003bcc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	d058      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bda:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003bde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003be2:	d033      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003be4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003be8:	d82c      	bhi.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003bea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bee:	d02f      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bf4:	d826      	bhi.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003bf6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003bfa:	d02b      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003bfc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003c00:	d820      	bhi.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003c02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c06:	d012      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003c08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c0c:	d81a      	bhi.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d022      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003c12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c16:	d115      	bne.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c1c:	3308      	adds	r3, #8
 8003c1e:	2101      	movs	r1, #1
 8003c20:	4618      	mov	r0, r3
 8003c22:	f001 f98d 	bl	8004f40 <RCCEx_PLL2_Config>
 8003c26:	4603      	mov	r3, r0
 8003c28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003c2c:	e015      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c32:	3328      	adds	r3, #40	@ 0x28
 8003c34:	2101      	movs	r1, #1
 8003c36:	4618      	mov	r0, r3
 8003c38:	f001 fa34 	bl	80050a4 <RCCEx_PLL3_Config>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003c42:	e00a      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003c4a:	e006      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003c4c:	bf00      	nop
 8003c4e:	e004      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003c50:	bf00      	nop
 8003c52:	e002      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003c54:	bf00      	nop
 8003c56:	e000      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003c58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10e      	bne.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003c62:	4b06      	ldr	r3, [pc, #24]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c66:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003c72:	4a02      	ldr	r2, [pc, #8]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003c74:	430b      	orrs	r3, r1
 8003c76:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c78:	e006      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003c7a:	bf00      	nop
 8003c7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c90:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003c94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c98:	2300      	movs	r3, #0
 8003c9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003c9e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	d037      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cb2:	d00e      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003cb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cb8:	d816      	bhi.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d018      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003cbe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003cc2:	d111      	bne.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cc4:	4bc4      	ldr	r3, [pc, #784]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc8:	4ac3      	ldr	r2, [pc, #780]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003cd0:	e00f      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cd6:	3308      	adds	r3, #8
 8003cd8:	2101      	movs	r1, #1
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f001 f930 	bl	8004f40 <RCCEx_PLL2_Config>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003ce6:	e004      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003cee:	e000      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003cf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cf2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10a      	bne.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003cfa:	4bb7      	ldr	r3, [pc, #732]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cfe:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d08:	4ab3      	ldr	r2, [pc, #716]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d0a:	430b      	orrs	r3, r1
 8003d0c:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d0e:	e003      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d14:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d20:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003d24:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d28:	2300      	movs	r3, #0
 8003d2a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003d2e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003d32:	460b      	mov	r3, r1
 8003d34:	4313      	orrs	r3, r2
 8003d36:	d039      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d3e:	2b03      	cmp	r3, #3
 8003d40:	d81c      	bhi.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003d42:	a201      	add	r2, pc, #4	@ (adr r2, 8003d48 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d48:	08003d85 	.word	0x08003d85
 8003d4c:	08003d59 	.word	0x08003d59
 8003d50:	08003d67 	.word	0x08003d67
 8003d54:	08003d85 	.word	0x08003d85
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d58:	4b9f      	ldr	r3, [pc, #636]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d5c:	4a9e      	ldr	r2, [pc, #632]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003d64:	e00f      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d6a:	3308      	adds	r3, #8
 8003d6c:	2102      	movs	r1, #2
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f001 f8e6 	bl	8004f40 <RCCEx_PLL2_Config>
 8003d74:	4603      	mov	r3, r0
 8003d76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003d7a:	e004      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003d82:	e000      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003d84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10a      	bne.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003d8e:	4b92      	ldr	r3, [pc, #584]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d92:	f023 0103 	bic.w	r1, r3, #3
 8003d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d9c:	4a8e      	ldr	r2, [pc, #568]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d9e:	430b      	orrs	r3, r1
 8003da0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003da2:	e003      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003da4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003da8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003db8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003dc2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	f000 8099 	beq.w	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dce:	4b83      	ldr	r3, [pc, #524]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a82      	ldr	r2, [pc, #520]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003dd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dd8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dda:	f7fe f933 	bl	8002044 <HAL_GetTick>
 8003dde:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003de2:	e00b      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003de4:	f7fe f92e 	bl	8002044 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b64      	cmp	r3, #100	@ 0x64
 8003df2:	d903      	bls.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003dfa:	e005      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dfc:	4b77      	ldr	r3, [pc, #476]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d0ed      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003e08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d173      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003e10:	4b71      	ldr	r3, [pc, #452]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e12:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003e1c:	4053      	eors	r3, r2
 8003e1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d015      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e26:	4b6c      	ldr	r3, [pc, #432]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e2e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e32:	4b69      	ldr	r3, [pc, #420]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e36:	4a68      	ldr	r2, [pc, #416]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e3c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e3e:	4b66      	ldr	r3, [pc, #408]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e42:	4a65      	ldr	r2, [pc, #404]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e48:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003e4a:	4a63      	ldr	r2, [pc, #396]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e50:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003e5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e5e:	d118      	bne.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e60:	f7fe f8f0 	bl	8002044 <HAL_GetTick>
 8003e64:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e68:	e00d      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e6a:	f7fe f8eb 	bl	8002044 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003e74:	1ad2      	subs	r2, r2, r3
 8003e76:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d903      	bls.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8003e84:	e005      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e86:	4b54      	ldr	r3, [pc, #336]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d0eb      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003e92:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d129      	bne.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003ea2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ea6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003eaa:	d10e      	bne.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003eac:	4b4a      	ldr	r3, [pc, #296]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003ebc:	091a      	lsrs	r2, r3, #4
 8003ebe:	4b48      	ldr	r3, [pc, #288]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	4a45      	ldr	r2, [pc, #276]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ec4:	430b      	orrs	r3, r1
 8003ec6:	6113      	str	r3, [r2, #16]
 8003ec8:	e005      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003eca:	4b43      	ldr	r3, [pc, #268]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	4a42      	ldr	r2, [pc, #264]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ed0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003ed4:	6113      	str	r3, [r2, #16]
 8003ed6:	4b40      	ldr	r3, [pc, #256]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ed8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ede:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003ee2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ee6:	4a3c      	ldr	r2, [pc, #240]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ee8:	430b      	orrs	r3, r1
 8003eea:	6713      	str	r3, [r2, #112]	@ 0x70
 8003eec:	e008      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003eee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ef2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8003ef6:	e003      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003efc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f08:	f002 0301 	and.w	r3, r2, #1
 8003f0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f10:	2300      	movs	r3, #0
 8003f12:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003f16:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	f000 808f 	beq.w	8004040 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f28:	2b28      	cmp	r3, #40	@ 0x28
 8003f2a:	d871      	bhi.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8003f34 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f32:	bf00      	nop
 8003f34:	08004019 	.word	0x08004019
 8003f38:	08004011 	.word	0x08004011
 8003f3c:	08004011 	.word	0x08004011
 8003f40:	08004011 	.word	0x08004011
 8003f44:	08004011 	.word	0x08004011
 8003f48:	08004011 	.word	0x08004011
 8003f4c:	08004011 	.word	0x08004011
 8003f50:	08004011 	.word	0x08004011
 8003f54:	08003fe5 	.word	0x08003fe5
 8003f58:	08004011 	.word	0x08004011
 8003f5c:	08004011 	.word	0x08004011
 8003f60:	08004011 	.word	0x08004011
 8003f64:	08004011 	.word	0x08004011
 8003f68:	08004011 	.word	0x08004011
 8003f6c:	08004011 	.word	0x08004011
 8003f70:	08004011 	.word	0x08004011
 8003f74:	08003ffb 	.word	0x08003ffb
 8003f78:	08004011 	.word	0x08004011
 8003f7c:	08004011 	.word	0x08004011
 8003f80:	08004011 	.word	0x08004011
 8003f84:	08004011 	.word	0x08004011
 8003f88:	08004011 	.word	0x08004011
 8003f8c:	08004011 	.word	0x08004011
 8003f90:	08004011 	.word	0x08004011
 8003f94:	08004019 	.word	0x08004019
 8003f98:	08004011 	.word	0x08004011
 8003f9c:	08004011 	.word	0x08004011
 8003fa0:	08004011 	.word	0x08004011
 8003fa4:	08004011 	.word	0x08004011
 8003fa8:	08004011 	.word	0x08004011
 8003fac:	08004011 	.word	0x08004011
 8003fb0:	08004011 	.word	0x08004011
 8003fb4:	08004019 	.word	0x08004019
 8003fb8:	08004011 	.word	0x08004011
 8003fbc:	08004011 	.word	0x08004011
 8003fc0:	08004011 	.word	0x08004011
 8003fc4:	08004011 	.word	0x08004011
 8003fc8:	08004011 	.word	0x08004011
 8003fcc:	08004011 	.word	0x08004011
 8003fd0:	08004011 	.word	0x08004011
 8003fd4:	08004019 	.word	0x08004019
 8003fd8:	58024400 	.word	0x58024400
 8003fdc:	58024800 	.word	0x58024800
 8003fe0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fe8:	3308      	adds	r3, #8
 8003fea:	2101      	movs	r1, #1
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 ffa7 	bl	8004f40 <RCCEx_PLL2_Config>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003ff8:	e00f      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ffe:	3328      	adds	r3, #40	@ 0x28
 8004000:	2101      	movs	r1, #1
 8004002:	4618      	mov	r0, r3
 8004004:	f001 f84e 	bl	80050a4 <RCCEx_PLL3_Config>
 8004008:	4603      	mov	r3, r0
 800400a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800400e:	e004      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004016:	e000      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004018:	bf00      	nop
    }

    if (ret == HAL_OK)
 800401a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10a      	bne.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004022:	4bbf      	ldr	r3, [pc, #764]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004026:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800402a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800402e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004030:	4abb      	ldr	r2, [pc, #748]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004032:	430b      	orrs	r3, r1
 8004034:	6553      	str	r3, [r2, #84]	@ 0x54
 8004036:	e003      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004038:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800403c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004040:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004048:	f002 0302 	and.w	r3, r2, #2
 800404c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004050:	2300      	movs	r3, #0
 8004052:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004056:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800405a:	460b      	mov	r3, r1
 800405c:	4313      	orrs	r3, r2
 800405e:	d041      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004060:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004064:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004066:	2b05      	cmp	r3, #5
 8004068:	d824      	bhi.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800406a:	a201      	add	r2, pc, #4	@ (adr r2, 8004070 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800406c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004070:	080040bd 	.word	0x080040bd
 8004074:	08004089 	.word	0x08004089
 8004078:	0800409f 	.word	0x0800409f
 800407c:	080040bd 	.word	0x080040bd
 8004080:	080040bd 	.word	0x080040bd
 8004084:	080040bd 	.word	0x080040bd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004088:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800408c:	3308      	adds	r3, #8
 800408e:	2101      	movs	r1, #1
 8004090:	4618      	mov	r0, r3
 8004092:	f000 ff55 	bl	8004f40 <RCCEx_PLL2_Config>
 8004096:	4603      	mov	r3, r0
 8004098:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800409c:	e00f      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800409e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040a2:	3328      	adds	r3, #40	@ 0x28
 80040a4:	2101      	movs	r1, #1
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 fffc 	bl	80050a4 <RCCEx_PLL3_Config>
 80040ac:	4603      	mov	r3, r0
 80040ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80040b2:	e004      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80040ba:	e000      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80040bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10a      	bne.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80040c6:	4b96      	ldr	r3, [pc, #600]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80040c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ca:	f023 0107 	bic.w	r1, r3, #7
 80040ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040d4:	4a92      	ldr	r2, [pc, #584]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80040d6:	430b      	orrs	r3, r1
 80040d8:	6553      	str	r3, [r2, #84]	@ 0x54
 80040da:	e003      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ec:	f002 0304 	and.w	r3, r2, #4
 80040f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80040f4:	2300      	movs	r3, #0
 80040f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80040fa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80040fe:	460b      	mov	r3, r1
 8004100:	4313      	orrs	r3, r2
 8004102:	d044      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004104:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004108:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800410c:	2b05      	cmp	r3, #5
 800410e:	d825      	bhi.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8004110:	a201      	add	r2, pc, #4	@ (adr r2, 8004118 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8004112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004116:	bf00      	nop
 8004118:	08004165 	.word	0x08004165
 800411c:	08004131 	.word	0x08004131
 8004120:	08004147 	.word	0x08004147
 8004124:	08004165 	.word	0x08004165
 8004128:	08004165 	.word	0x08004165
 800412c:	08004165 	.word	0x08004165
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004130:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004134:	3308      	adds	r3, #8
 8004136:	2101      	movs	r1, #1
 8004138:	4618      	mov	r0, r3
 800413a:	f000 ff01 	bl	8004f40 <RCCEx_PLL2_Config>
 800413e:	4603      	mov	r3, r0
 8004140:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004144:	e00f      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004146:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800414a:	3328      	adds	r3, #40	@ 0x28
 800414c:	2101      	movs	r1, #1
 800414e:	4618      	mov	r0, r3
 8004150:	f000 ffa8 	bl	80050a4 <RCCEx_PLL3_Config>
 8004154:	4603      	mov	r3, r0
 8004156:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800415a:	e004      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004162:	e000      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8004164:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004166:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10b      	bne.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800416e:	4b6c      	ldr	r3, [pc, #432]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004172:	f023 0107 	bic.w	r1, r3, #7
 8004176:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800417a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800417e:	4a68      	ldr	r2, [pc, #416]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004180:	430b      	orrs	r3, r1
 8004182:	6593      	str	r3, [r2, #88]	@ 0x58
 8004184:	e003      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004186:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800418a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800418e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004196:	f002 0320 	and.w	r3, r2, #32
 800419a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800419e:	2300      	movs	r3, #0
 80041a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80041a4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80041a8:	460b      	mov	r3, r1
 80041aa:	4313      	orrs	r3, r2
 80041ac:	d055      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80041ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041ba:	d033      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80041bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041c0:	d82c      	bhi.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80041c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041c6:	d02f      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80041c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041cc:	d826      	bhi.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80041ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80041d2:	d02b      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80041d4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80041d8:	d820      	bhi.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80041da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041de:	d012      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80041e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041e4:	d81a      	bhi.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d022      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80041ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041ee:	d115      	bne.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041f4:	3308      	adds	r3, #8
 80041f6:	2100      	movs	r1, #0
 80041f8:	4618      	mov	r0, r3
 80041fa:	f000 fea1 	bl	8004f40 <RCCEx_PLL2_Config>
 80041fe:	4603      	mov	r3, r0
 8004200:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004204:	e015      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004206:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800420a:	3328      	adds	r3, #40	@ 0x28
 800420c:	2102      	movs	r1, #2
 800420e:	4618      	mov	r0, r3
 8004210:	f000 ff48 	bl	80050a4 <RCCEx_PLL3_Config>
 8004214:	4603      	mov	r3, r0
 8004216:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800421a:	e00a      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004222:	e006      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004224:	bf00      	nop
 8004226:	e004      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004228:	bf00      	nop
 800422a:	e002      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800422c:	bf00      	nop
 800422e:	e000      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004230:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004232:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10b      	bne.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800423a:	4b39      	ldr	r3, [pc, #228]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800423c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800423e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004242:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004246:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800424a:	4a35      	ldr	r2, [pc, #212]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800424c:	430b      	orrs	r3, r1
 800424e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004250:	e003      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004252:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004256:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800425a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800425e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004262:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004266:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800426a:	2300      	movs	r3, #0
 800426c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004270:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004274:	460b      	mov	r3, r1
 8004276:	4313      	orrs	r3, r2
 8004278:	d058      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800427a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800427e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004282:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004286:	d033      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8004288:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800428c:	d82c      	bhi.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800428e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004292:	d02f      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004294:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004298:	d826      	bhi.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800429a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800429e:	d02b      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80042a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80042a4:	d820      	bhi.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80042a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042aa:	d012      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80042ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042b0:	d81a      	bhi.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d022      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80042b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042ba:	d115      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042c0:	3308      	adds	r3, #8
 80042c2:	2100      	movs	r1, #0
 80042c4:	4618      	mov	r0, r3
 80042c6:	f000 fe3b 	bl	8004f40 <RCCEx_PLL2_Config>
 80042ca:	4603      	mov	r3, r0
 80042cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80042d0:	e015      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042d6:	3328      	adds	r3, #40	@ 0x28
 80042d8:	2102      	movs	r1, #2
 80042da:	4618      	mov	r0, r3
 80042dc:	f000 fee2 	bl	80050a4 <RCCEx_PLL3_Config>
 80042e0:	4603      	mov	r3, r0
 80042e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80042e6:	e00a      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80042ee:	e006      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80042f0:	bf00      	nop
 80042f2:	e004      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80042f4:	bf00      	nop
 80042f6:	e002      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80042f8:	bf00      	nop
 80042fa:	e000      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80042fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10e      	bne.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004306:	4b06      	ldr	r3, [pc, #24]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800430a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800430e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004312:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004316:	4a02      	ldr	r2, [pc, #8]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004318:	430b      	orrs	r3, r1
 800431a:	6593      	str	r3, [r2, #88]	@ 0x58
 800431c:	e006      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800431e:	bf00      	nop
 8004320:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004324:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004328:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800432c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004334:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004338:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800433c:	2300      	movs	r3, #0
 800433e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004342:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004346:	460b      	mov	r3, r1
 8004348:	4313      	orrs	r3, r2
 800434a:	d055      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800434c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004350:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004354:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004358:	d033      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800435a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800435e:	d82c      	bhi.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004360:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004364:	d02f      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004366:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800436a:	d826      	bhi.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800436c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004370:	d02b      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004372:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004376:	d820      	bhi.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004378:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800437c:	d012      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800437e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004382:	d81a      	bhi.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004384:	2b00      	cmp	r3, #0
 8004386:	d022      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004388:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800438c:	d115      	bne.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800438e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004392:	3308      	adds	r3, #8
 8004394:	2100      	movs	r1, #0
 8004396:	4618      	mov	r0, r3
 8004398:	f000 fdd2 	bl	8004f40 <RCCEx_PLL2_Config>
 800439c:	4603      	mov	r3, r0
 800439e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80043a2:	e015      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043a8:	3328      	adds	r3, #40	@ 0x28
 80043aa:	2102      	movs	r1, #2
 80043ac:	4618      	mov	r0, r3
 80043ae:	f000 fe79 	bl	80050a4 <RCCEx_PLL3_Config>
 80043b2:	4603      	mov	r3, r0
 80043b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80043b8:	e00a      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80043c0:	e006      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80043c2:	bf00      	nop
 80043c4:	e004      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80043c6:	bf00      	nop
 80043c8:	e002      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80043ca:	bf00      	nop
 80043cc:	e000      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80043ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d10b      	bne.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80043d8:	4ba0      	ldr	r3, [pc, #640]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80043da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043dc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80043e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043e8:	4a9c      	ldr	r2, [pc, #624]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80043ea:	430b      	orrs	r3, r1
 80043ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80043ee:	e003      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80043f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004400:	f002 0308 	and.w	r3, r2, #8
 8004404:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004408:	2300      	movs	r3, #0
 800440a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800440e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004412:	460b      	mov	r3, r1
 8004414:	4313      	orrs	r3, r2
 8004416:	d01e      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8004418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800441c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004420:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004424:	d10c      	bne.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004426:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800442a:	3328      	adds	r3, #40	@ 0x28
 800442c:	2102      	movs	r1, #2
 800442e:	4618      	mov	r0, r3
 8004430:	f000 fe38 	bl	80050a4 <RCCEx_PLL3_Config>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d002      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004440:	4b86      	ldr	r3, [pc, #536]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004444:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004448:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800444c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004450:	4a82      	ldr	r2, [pc, #520]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004452:	430b      	orrs	r3, r1
 8004454:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800445a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445e:	f002 0310 	and.w	r3, r2, #16
 8004462:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004466:	2300      	movs	r3, #0
 8004468:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800446c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004470:	460b      	mov	r3, r1
 8004472:	4313      	orrs	r3, r2
 8004474:	d01e      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004476:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800447a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800447e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004482:	d10c      	bne.n	800449e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004484:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004488:	3328      	adds	r3, #40	@ 0x28
 800448a:	2102      	movs	r1, #2
 800448c:	4618      	mov	r0, r3
 800448e:	f000 fe09 	bl	80050a4 <RCCEx_PLL3_Config>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d002      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800449e:	4b6f      	ldr	r3, [pc, #444]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80044a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044a2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80044a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044ae:	4a6b      	ldr	r2, [pc, #428]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80044b0:	430b      	orrs	r3, r1
 80044b2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044bc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80044c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80044c2:	2300      	movs	r3, #0
 80044c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80044c6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80044ca:	460b      	mov	r3, r1
 80044cc:	4313      	orrs	r3, r2
 80044ce:	d03e      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80044d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80044d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044dc:	d022      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80044de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044e2:	d81b      	bhi.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d003      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80044e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044ec:	d00b      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80044ee:	e015      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044f4:	3308      	adds	r3, #8
 80044f6:	2100      	movs	r1, #0
 80044f8:	4618      	mov	r0, r3
 80044fa:	f000 fd21 	bl	8004f40 <RCCEx_PLL2_Config>
 80044fe:	4603      	mov	r3, r0
 8004500:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004504:	e00f      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004506:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800450a:	3328      	adds	r3, #40	@ 0x28
 800450c:	2102      	movs	r1, #2
 800450e:	4618      	mov	r0, r3
 8004510:	f000 fdc8 	bl	80050a4 <RCCEx_PLL3_Config>
 8004514:	4603      	mov	r3, r0
 8004516:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800451a:	e004      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004522:	e000      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8004524:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004526:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10b      	bne.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800452e:	4b4b      	ldr	r3, [pc, #300]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004532:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004536:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800453a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800453e:	4a47      	ldr	r2, [pc, #284]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004540:	430b      	orrs	r3, r1
 8004542:	6593      	str	r3, [r2, #88]	@ 0x58
 8004544:	e003      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004546:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800454a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800454e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004556:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800455a:	673b      	str	r3, [r7, #112]	@ 0x70
 800455c:	2300      	movs	r3, #0
 800455e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004560:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004564:	460b      	mov	r3, r1
 8004566:	4313      	orrs	r3, r2
 8004568:	d03b      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800456a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800456e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004572:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004576:	d01f      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004578:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800457c:	d818      	bhi.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800457e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004582:	d003      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8004584:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004588:	d007      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800458a:	e011      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800458c:	4b33      	ldr	r3, [pc, #204]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800458e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004590:	4a32      	ldr	r2, [pc, #200]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004592:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004596:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004598:	e00f      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800459a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800459e:	3328      	adds	r3, #40	@ 0x28
 80045a0:	2101      	movs	r1, #1
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 fd7e 	bl	80050a4 <RCCEx_PLL3_Config>
 80045a8:	4603      	mov	r3, r0
 80045aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80045ae:	e004      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80045b6:	e000      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80045b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10b      	bne.n	80045da <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045c2:	4b26      	ldr	r3, [pc, #152]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80045c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045c6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80045ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045d2:	4a22      	ldr	r2, [pc, #136]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80045d4:	430b      	orrs	r3, r1
 80045d6:	6553      	str	r3, [r2, #84]	@ 0x54
 80045d8:	e003      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045de:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80045e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ea:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80045ee:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045f0:	2300      	movs	r3, #0
 80045f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80045f4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80045f8:	460b      	mov	r3, r1
 80045fa:	4313      	orrs	r3, r2
 80045fc:	d034      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80045fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004602:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004604:	2b00      	cmp	r3, #0
 8004606:	d003      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8004608:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800460c:	d007      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800460e:	e011      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004610:	4b12      	ldr	r3, [pc, #72]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004614:	4a11      	ldr	r2, [pc, #68]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004616:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800461a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800461c:	e00e      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800461e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004622:	3308      	adds	r3, #8
 8004624:	2102      	movs	r1, #2
 8004626:	4618      	mov	r0, r3
 8004628:	f000 fc8a 	bl	8004f40 <RCCEx_PLL2_Config>
 800462c:	4603      	mov	r3, r0
 800462e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004632:	e003      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800463a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800463c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10d      	bne.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004644:	4b05      	ldr	r3, [pc, #20]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004646:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004648:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800464c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004650:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004652:	4a02      	ldr	r2, [pc, #8]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004654:	430b      	orrs	r3, r1
 8004656:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004658:	e006      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800465a:	bf00      	nop
 800465c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004660:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004664:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004668:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800466c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004670:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004674:	663b      	str	r3, [r7, #96]	@ 0x60
 8004676:	2300      	movs	r3, #0
 8004678:	667b      	str	r3, [r7, #100]	@ 0x64
 800467a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800467e:	460b      	mov	r3, r1
 8004680:	4313      	orrs	r3, r2
 8004682:	d00c      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004688:	3328      	adds	r3, #40	@ 0x28
 800468a:	2102      	movs	r1, #2
 800468c:	4618      	mov	r0, r3
 800468e:	f000 fd09 	bl	80050a4 <RCCEx_PLL3_Config>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d002      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800469e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80046aa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80046ac:	2300      	movs	r3, #0
 80046ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046b0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80046b4:	460b      	mov	r3, r1
 80046b6:	4313      	orrs	r3, r2
 80046b8:	d036      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80046ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046c4:	d018      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80046c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046ca:	d811      	bhi.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80046cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046d0:	d014      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80046d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046d6:	d80b      	bhi.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d011      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80046dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046e0:	d106      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046e2:	4bb7      	ldr	r3, [pc, #732]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80046e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e6:	4ab6      	ldr	r2, [pc, #728]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80046e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80046ee:	e008      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80046f6:	e004      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80046f8:	bf00      	nop
 80046fa:	e002      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80046fc:	bf00      	nop
 80046fe:	e000      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004700:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004702:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10a      	bne.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800470a:	4bad      	ldr	r3, [pc, #692]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800470c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800470e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004712:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004716:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004718:	4aa9      	ldr	r2, [pc, #676]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800471a:	430b      	orrs	r3, r1
 800471c:	6553      	str	r3, [r2, #84]	@ 0x54
 800471e:	e003      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004720:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004724:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004728:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800472c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004730:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004734:	653b      	str	r3, [r7, #80]	@ 0x50
 8004736:	2300      	movs	r3, #0
 8004738:	657b      	str	r3, [r7, #84]	@ 0x54
 800473a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800473e:	460b      	mov	r3, r1
 8004740:	4313      	orrs	r3, r2
 8004742:	d009      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004744:	4b9e      	ldr	r3, [pc, #632]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004746:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004748:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800474c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004752:	4a9b      	ldr	r2, [pc, #620]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004754:	430b      	orrs	r3, r1
 8004756:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004758:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800475c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004760:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004764:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004766:	2300      	movs	r3, #0
 8004768:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800476a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800476e:	460b      	mov	r3, r1
 8004770:	4313      	orrs	r3, r2
 8004772:	d009      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004774:	4b92      	ldr	r3, [pc, #584]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004776:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004778:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800477c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004780:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004782:	4a8f      	ldr	r2, [pc, #572]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004784:	430b      	orrs	r3, r1
 8004786:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004788:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800478c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004790:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004794:	643b      	str	r3, [r7, #64]	@ 0x40
 8004796:	2300      	movs	r3, #0
 8004798:	647b      	str	r3, [r7, #68]	@ 0x44
 800479a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800479e:	460b      	mov	r3, r1
 80047a0:	4313      	orrs	r3, r2
 80047a2:	d00e      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80047a4:	4b86      	ldr	r3, [pc, #536]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	4a85      	ldr	r2, [pc, #532]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80047aa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80047ae:	6113      	str	r3, [r2, #16]
 80047b0:	4b83      	ldr	r3, [pc, #524]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80047b2:	6919      	ldr	r1, [r3, #16]
 80047b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80047bc:	4a80      	ldr	r2, [pc, #512]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80047be:	430b      	orrs	r3, r1
 80047c0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80047c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ca:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80047ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80047d0:	2300      	movs	r3, #0
 80047d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047d4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80047d8:	460b      	mov	r3, r1
 80047da:	4313      	orrs	r3, r2
 80047dc:	d009      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80047de:	4b78      	ldr	r3, [pc, #480]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80047e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047e2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80047e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ec:	4a74      	ldr	r2, [pc, #464]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80047ee:	430b      	orrs	r3, r1
 80047f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80047f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047fa:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80047fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8004800:	2300      	movs	r3, #0
 8004802:	637b      	str	r3, [r7, #52]	@ 0x34
 8004804:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004808:	460b      	mov	r3, r1
 800480a:	4313      	orrs	r3, r2
 800480c:	d00a      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800480e:	4b6c      	ldr	r3, [pc, #432]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004812:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004816:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800481a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800481e:	4a68      	ldr	r2, [pc, #416]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004820:	430b      	orrs	r3, r1
 8004822:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004824:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482c:	2100      	movs	r1, #0
 800482e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004836:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800483a:	460b      	mov	r3, r1
 800483c:	4313      	orrs	r3, r2
 800483e:	d011      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004840:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004844:	3308      	adds	r3, #8
 8004846:	2100      	movs	r1, #0
 8004848:	4618      	mov	r0, r3
 800484a:	f000 fb79 	bl	8004f40 <RCCEx_PLL2_Config>
 800484e:	4603      	mov	r3, r0
 8004850:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004854:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004858:	2b00      	cmp	r3, #0
 800485a:	d003      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800485c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004860:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004864:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800486c:	2100      	movs	r1, #0
 800486e:	6239      	str	r1, [r7, #32]
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	627b      	str	r3, [r7, #36]	@ 0x24
 8004876:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800487a:	460b      	mov	r3, r1
 800487c:	4313      	orrs	r3, r2
 800487e:	d011      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004880:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004884:	3308      	adds	r3, #8
 8004886:	2101      	movs	r1, #1
 8004888:	4618      	mov	r0, r3
 800488a:	f000 fb59 	bl	8004f40 <RCCEx_PLL2_Config>
 800488e:	4603      	mov	r3, r0
 8004890:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004894:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004898:	2b00      	cmp	r3, #0
 800489a:	d003      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800489c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80048a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ac:	2100      	movs	r1, #0
 80048ae:	61b9      	str	r1, [r7, #24]
 80048b0:	f003 0304 	and.w	r3, r3, #4
 80048b4:	61fb      	str	r3, [r7, #28]
 80048b6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80048ba:	460b      	mov	r3, r1
 80048bc:	4313      	orrs	r3, r2
 80048be:	d011      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80048c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048c4:	3308      	adds	r3, #8
 80048c6:	2102      	movs	r1, #2
 80048c8:	4618      	mov	r0, r3
 80048ca:	f000 fb39 	bl	8004f40 <RCCEx_PLL2_Config>
 80048ce:	4603      	mov	r3, r0
 80048d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80048d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d003      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80048e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ec:	2100      	movs	r1, #0
 80048ee:	6139      	str	r1, [r7, #16]
 80048f0:	f003 0308 	and.w	r3, r3, #8
 80048f4:	617b      	str	r3, [r7, #20]
 80048f6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80048fa:	460b      	mov	r3, r1
 80048fc:	4313      	orrs	r3, r2
 80048fe:	d011      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004900:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004904:	3328      	adds	r3, #40	@ 0x28
 8004906:	2100      	movs	r1, #0
 8004908:	4618      	mov	r0, r3
 800490a:	f000 fbcb 	bl	80050a4 <RCCEx_PLL3_Config>
 800490e:	4603      	mov	r3, r0
 8004910:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8004914:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004918:	2b00      	cmp	r3, #0
 800491a:	d003      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800491c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004920:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004924:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492c:	2100      	movs	r1, #0
 800492e:	60b9      	str	r1, [r7, #8]
 8004930:	f003 0310 	and.w	r3, r3, #16
 8004934:	60fb      	str	r3, [r7, #12]
 8004936:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800493a:	460b      	mov	r3, r1
 800493c:	4313      	orrs	r3, r2
 800493e:	d011      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004940:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004944:	3328      	adds	r3, #40	@ 0x28
 8004946:	2101      	movs	r1, #1
 8004948:	4618      	mov	r0, r3
 800494a:	f000 fbab 	bl	80050a4 <RCCEx_PLL3_Config>
 800494e:	4603      	mov	r3, r0
 8004950:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004954:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004958:	2b00      	cmp	r3, #0
 800495a:	d003      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800495c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004960:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004964:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496c:	2100      	movs	r1, #0
 800496e:	6039      	str	r1, [r7, #0]
 8004970:	f003 0320 	and.w	r3, r3, #32
 8004974:	607b      	str	r3, [r7, #4]
 8004976:	e9d7 1200 	ldrd	r1, r2, [r7]
 800497a:	460b      	mov	r3, r1
 800497c:	4313      	orrs	r3, r2
 800497e:	d011      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004980:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004984:	3328      	adds	r3, #40	@ 0x28
 8004986:	2102      	movs	r1, #2
 8004988:	4618      	mov	r0, r3
 800498a:	f000 fb8b 	bl	80050a4 <RCCEx_PLL3_Config>
 800498e:	4603      	mov	r3, r0
 8004990:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004994:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004998:	2b00      	cmp	r3, #0
 800499a:	d003      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800499c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80049a4:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d101      	bne.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80049ac:	2300      	movs	r3, #0
 80049ae:	e000      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80049b8:	46bd      	mov	sp, r7
 80049ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049be:	bf00      	nop
 80049c0:	58024400 	.word	0x58024400

080049c4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80049c8:	f7fe fe00 	bl	80035cc <HAL_RCC_GetHCLKFreq>
 80049cc:	4602      	mov	r2, r0
 80049ce:	4b06      	ldr	r3, [pc, #24]	@ (80049e8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	091b      	lsrs	r3, r3, #4
 80049d4:	f003 0307 	and.w	r3, r3, #7
 80049d8:	4904      	ldr	r1, [pc, #16]	@ (80049ec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80049da:	5ccb      	ldrb	r3, [r1, r3]
 80049dc:	f003 031f 	and.w	r3, r3, #31
 80049e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	58024400 	.word	0x58024400
 80049ec:	0800b89c 	.word	0x0800b89c

080049f0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b089      	sub	sp, #36	@ 0x24
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049f8:	4ba1      	ldr	r3, [pc, #644]	@ (8004c80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049fc:	f003 0303 	and.w	r3, r3, #3
 8004a00:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004a02:	4b9f      	ldr	r3, [pc, #636]	@ (8004c80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a06:	0b1b      	lsrs	r3, r3, #12
 8004a08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a0c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004a0e:	4b9c      	ldr	r3, [pc, #624]	@ (8004c80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a12:	091b      	lsrs	r3, r3, #4
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004a1a:	4b99      	ldr	r3, [pc, #612]	@ (8004c80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a1e:	08db      	lsrs	r3, r3, #3
 8004a20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	fb02 f303 	mul.w	r3, r2, r3
 8004a2a:	ee07 3a90 	vmov	s15, r3
 8004a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a32:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f000 8111 	beq.w	8004c60 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	f000 8083 	beq.w	8004b4c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	f200 80a1 	bhi.w	8004b90 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d003      	beq.n	8004a5c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d056      	beq.n	8004b08 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004a5a:	e099      	b.n	8004b90 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a5c:	4b88      	ldr	r3, [pc, #544]	@ (8004c80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0320 	and.w	r3, r3, #32
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d02d      	beq.n	8004ac4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a68:	4b85      	ldr	r3, [pc, #532]	@ (8004c80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	08db      	lsrs	r3, r3, #3
 8004a6e:	f003 0303 	and.w	r3, r3, #3
 8004a72:	4a84      	ldr	r2, [pc, #528]	@ (8004c84 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004a74:	fa22 f303 	lsr.w	r3, r2, r3
 8004a78:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	ee07 3a90 	vmov	s15, r3
 8004a80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	ee07 3a90 	vmov	s15, r3
 8004a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a92:	4b7b      	ldr	r3, [pc, #492]	@ (8004c80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a9a:	ee07 3a90 	vmov	s15, r3
 8004a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aa6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004c88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ab2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004abe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004ac2:	e087      	b.n	8004bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	ee07 3a90 	vmov	s15, r3
 8004aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ace:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ad6:	4b6a      	ldr	r3, [pc, #424]	@ (8004c80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ade:	ee07 3a90 	vmov	s15, r3
 8004ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ae6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aea:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004c88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004af6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b06:	e065      	b.n	8004bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	ee07 3a90 	vmov	s15, r3
 8004b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b12:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004c90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b1a:	4b59      	ldr	r3, [pc, #356]	@ (8004c80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b22:	ee07 3a90 	vmov	s15, r3
 8004b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b2e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004c88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b4a:	e043      	b.n	8004bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	ee07 3a90 	vmov	s15, r3
 8004b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b56:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004c94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b5e:	4b48      	ldr	r3, [pc, #288]	@ (8004c80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b66:	ee07 3a90 	vmov	s15, r3
 8004b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b72:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004c88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b8e:	e021      	b.n	8004bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	ee07 3a90 	vmov	s15, r3
 8004b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b9a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004c90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ba2:	4b37      	ldr	r3, [pc, #220]	@ (8004c80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004baa:	ee07 3a90 	vmov	s15, r3
 8004bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bb6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004c88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bd2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004bd4:	4b2a      	ldr	r3, [pc, #168]	@ (8004c80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bd8:	0a5b      	lsrs	r3, r3, #9
 8004bda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bde:	ee07 3a90 	vmov	s15, r3
 8004be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004be6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bee:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bfa:	ee17 2a90 	vmov	r2, s15
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004c02:	4b1f      	ldr	r3, [pc, #124]	@ (8004c80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c06:	0c1b      	lsrs	r3, r3, #16
 8004c08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c0c:	ee07 3a90 	vmov	s15, r3
 8004c10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c14:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c28:	ee17 2a90 	vmov	r2, s15
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004c30:	4b13      	ldr	r3, [pc, #76]	@ (8004c80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c34:	0e1b      	lsrs	r3, r3, #24
 8004c36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c3a:	ee07 3a90 	vmov	s15, r3
 8004c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c56:	ee17 2a90 	vmov	r2, s15
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004c5e:	e008      	b.n	8004c72 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	609a      	str	r2, [r3, #8]
}
 8004c72:	bf00      	nop
 8004c74:	3724      	adds	r7, #36	@ 0x24
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	58024400 	.word	0x58024400
 8004c84:	03d09000 	.word	0x03d09000
 8004c88:	46000000 	.word	0x46000000
 8004c8c:	4c742400 	.word	0x4c742400
 8004c90:	4a742400 	.word	0x4a742400
 8004c94:	4bbebc20 	.word	0x4bbebc20

08004c98 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b089      	sub	sp, #36	@ 0x24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ca0:	4ba1      	ldr	r3, [pc, #644]	@ (8004f28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca4:	f003 0303 	and.w	r3, r3, #3
 8004ca8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004caa:	4b9f      	ldr	r3, [pc, #636]	@ (8004f28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cae:	0d1b      	lsrs	r3, r3, #20
 8004cb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004cb4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004cb6:	4b9c      	ldr	r3, [pc, #624]	@ (8004f28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cba:	0a1b      	lsrs	r3, r3, #8
 8004cbc:	f003 0301 	and.w	r3, r3, #1
 8004cc0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004cc2:	4b99      	ldr	r3, [pc, #612]	@ (8004f28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cc6:	08db      	lsrs	r3, r3, #3
 8004cc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	fb02 f303 	mul.w	r3, r2, r3
 8004cd2:	ee07 3a90 	vmov	s15, r3
 8004cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cda:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f000 8111 	beq.w	8004f08 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	f000 8083 	beq.w	8004df4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	f200 80a1 	bhi.w	8004e38 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d003      	beq.n	8004d04 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d056      	beq.n	8004db0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004d02:	e099      	b.n	8004e38 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d04:	4b88      	ldr	r3, [pc, #544]	@ (8004f28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0320 	and.w	r3, r3, #32
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d02d      	beq.n	8004d6c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d10:	4b85      	ldr	r3, [pc, #532]	@ (8004f28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	08db      	lsrs	r3, r3, #3
 8004d16:	f003 0303 	and.w	r3, r3, #3
 8004d1a:	4a84      	ldr	r2, [pc, #528]	@ (8004f2c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d20:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	ee07 3a90 	vmov	s15, r3
 8004d28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	ee07 3a90 	vmov	s15, r3
 8004d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d3a:	4b7b      	ldr	r3, [pc, #492]	@ (8004f28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d42:	ee07 3a90 	vmov	s15, r3
 8004d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d4e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004f30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d66:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004d6a:	e087      	b.n	8004e7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	ee07 3a90 	vmov	s15, r3
 8004d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d76:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004f34 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004d7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d7e:	4b6a      	ldr	r3, [pc, #424]	@ (8004f28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d86:	ee07 3a90 	vmov	s15, r3
 8004d8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d92:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004f30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004da2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004daa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dae:	e065      	b.n	8004e7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	ee07 3a90 	vmov	s15, r3
 8004db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dba:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004f38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dc2:	4b59      	ldr	r3, [pc, #356]	@ (8004f28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dca:	ee07 3a90 	vmov	s15, r3
 8004dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dd6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004f30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004dda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004de2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004df2:	e043      	b.n	8004e7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	ee07 3a90 	vmov	s15, r3
 8004dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dfe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e06:	4b48      	ldr	r3, [pc, #288]	@ (8004f28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e0e:	ee07 3a90 	vmov	s15, r3
 8004e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e16:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e1a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004f30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e36:	e021      	b.n	8004e7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	ee07 3a90 	vmov	s15, r3
 8004e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e42:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004f38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e4a:	4b37      	ldr	r3, [pc, #220]	@ (8004f28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e52:	ee07 3a90 	vmov	s15, r3
 8004e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e5e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004f30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e7a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004e7c:	4b2a      	ldr	r3, [pc, #168]	@ (8004f28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e80:	0a5b      	lsrs	r3, r3, #9
 8004e82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e86:	ee07 3a90 	vmov	s15, r3
 8004e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e96:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ea2:	ee17 2a90 	vmov	r2, s15
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004eaa:	4b1f      	ldr	r3, [pc, #124]	@ (8004f28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eae:	0c1b      	lsrs	r3, r3, #16
 8004eb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004eb4:	ee07 3a90 	vmov	s15, r3
 8004eb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ebc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ec0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ec4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ec8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ecc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ed0:	ee17 2a90 	vmov	r2, s15
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004ed8:	4b13      	ldr	r3, [pc, #76]	@ (8004f28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004edc:	0e1b      	lsrs	r3, r3, #24
 8004ede:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ee2:	ee07 3a90 	vmov	s15, r3
 8004ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004eee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ef2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ef6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004efa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004efe:	ee17 2a90 	vmov	r2, s15
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004f06:	e008      	b.n	8004f1a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	609a      	str	r2, [r3, #8]
}
 8004f1a:	bf00      	nop
 8004f1c:	3724      	adds	r7, #36	@ 0x24
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	58024400 	.word	0x58024400
 8004f2c:	03d09000 	.word	0x03d09000
 8004f30:	46000000 	.word	0x46000000
 8004f34:	4c742400 	.word	0x4c742400
 8004f38:	4a742400 	.word	0x4a742400
 8004f3c:	4bbebc20 	.word	0x4bbebc20

08004f40 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f4e:	4b53      	ldr	r3, [pc, #332]	@ (800509c <RCCEx_PLL2_Config+0x15c>)
 8004f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f52:	f003 0303 	and.w	r3, r3, #3
 8004f56:	2b03      	cmp	r3, #3
 8004f58:	d101      	bne.n	8004f5e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e099      	b.n	8005092 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004f5e:	4b4f      	ldr	r3, [pc, #316]	@ (800509c <RCCEx_PLL2_Config+0x15c>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a4e      	ldr	r2, [pc, #312]	@ (800509c <RCCEx_PLL2_Config+0x15c>)
 8004f64:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004f68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f6a:	f7fd f86b 	bl	8002044 <HAL_GetTick>
 8004f6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f70:	e008      	b.n	8004f84 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f72:	f7fd f867 	bl	8002044 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d901      	bls.n	8004f84 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e086      	b.n	8005092 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f84:	4b45      	ldr	r3, [pc, #276]	@ (800509c <RCCEx_PLL2_Config+0x15c>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1f0      	bne.n	8004f72 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004f90:	4b42      	ldr	r3, [pc, #264]	@ (800509c <RCCEx_PLL2_Config+0x15c>)
 8004f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f94:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	031b      	lsls	r3, r3, #12
 8004f9e:	493f      	ldr	r1, [pc, #252]	@ (800509c <RCCEx_PLL2_Config+0x15c>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	628b      	str	r3, [r1, #40]	@ 0x28
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	025b      	lsls	r3, r3, #9
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	041b      	lsls	r3, r3, #16
 8004fc2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004fc6:	431a      	orrs	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	061b      	lsls	r3, r3, #24
 8004fd0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004fd4:	4931      	ldr	r1, [pc, #196]	@ (800509c <RCCEx_PLL2_Config+0x15c>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004fda:	4b30      	ldr	r3, [pc, #192]	@ (800509c <RCCEx_PLL2_Config+0x15c>)
 8004fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fde:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	492d      	ldr	r1, [pc, #180]	@ (800509c <RCCEx_PLL2_Config+0x15c>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004fec:	4b2b      	ldr	r3, [pc, #172]	@ (800509c <RCCEx_PLL2_Config+0x15c>)
 8004fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff0:	f023 0220 	bic.w	r2, r3, #32
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	4928      	ldr	r1, [pc, #160]	@ (800509c <RCCEx_PLL2_Config+0x15c>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004ffe:	4b27      	ldr	r3, [pc, #156]	@ (800509c <RCCEx_PLL2_Config+0x15c>)
 8005000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005002:	4a26      	ldr	r2, [pc, #152]	@ (800509c <RCCEx_PLL2_Config+0x15c>)
 8005004:	f023 0310 	bic.w	r3, r3, #16
 8005008:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800500a:	4b24      	ldr	r3, [pc, #144]	@ (800509c <RCCEx_PLL2_Config+0x15c>)
 800500c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800500e:	4b24      	ldr	r3, [pc, #144]	@ (80050a0 <RCCEx_PLL2_Config+0x160>)
 8005010:	4013      	ands	r3, r2
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	69d2      	ldr	r2, [r2, #28]
 8005016:	00d2      	lsls	r2, r2, #3
 8005018:	4920      	ldr	r1, [pc, #128]	@ (800509c <RCCEx_PLL2_Config+0x15c>)
 800501a:	4313      	orrs	r3, r2
 800501c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800501e:	4b1f      	ldr	r3, [pc, #124]	@ (800509c <RCCEx_PLL2_Config+0x15c>)
 8005020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005022:	4a1e      	ldr	r2, [pc, #120]	@ (800509c <RCCEx_PLL2_Config+0x15c>)
 8005024:	f043 0310 	orr.w	r3, r3, #16
 8005028:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d106      	bne.n	800503e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005030:	4b1a      	ldr	r3, [pc, #104]	@ (800509c <RCCEx_PLL2_Config+0x15c>)
 8005032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005034:	4a19      	ldr	r2, [pc, #100]	@ (800509c <RCCEx_PLL2_Config+0x15c>)
 8005036:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800503a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800503c:	e00f      	b.n	800505e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	2b01      	cmp	r3, #1
 8005042:	d106      	bne.n	8005052 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005044:	4b15      	ldr	r3, [pc, #84]	@ (800509c <RCCEx_PLL2_Config+0x15c>)
 8005046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005048:	4a14      	ldr	r2, [pc, #80]	@ (800509c <RCCEx_PLL2_Config+0x15c>)
 800504a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800504e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005050:	e005      	b.n	800505e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005052:	4b12      	ldr	r3, [pc, #72]	@ (800509c <RCCEx_PLL2_Config+0x15c>)
 8005054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005056:	4a11      	ldr	r2, [pc, #68]	@ (800509c <RCCEx_PLL2_Config+0x15c>)
 8005058:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800505c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800505e:	4b0f      	ldr	r3, [pc, #60]	@ (800509c <RCCEx_PLL2_Config+0x15c>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a0e      	ldr	r2, [pc, #56]	@ (800509c <RCCEx_PLL2_Config+0x15c>)
 8005064:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005068:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800506a:	f7fc ffeb 	bl	8002044 <HAL_GetTick>
 800506e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005070:	e008      	b.n	8005084 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005072:	f7fc ffe7 	bl	8002044 <HAL_GetTick>
 8005076:	4602      	mov	r2, r0
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	2b02      	cmp	r3, #2
 800507e:	d901      	bls.n	8005084 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e006      	b.n	8005092 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005084:	4b05      	ldr	r3, [pc, #20]	@ (800509c <RCCEx_PLL2_Config+0x15c>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d0f0      	beq.n	8005072 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005090:	7bfb      	ldrb	r3, [r7, #15]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	58024400 	.word	0x58024400
 80050a0:	ffff0007 	.word	0xffff0007

080050a4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050ae:	2300      	movs	r3, #0
 80050b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80050b2:	4b53      	ldr	r3, [pc, #332]	@ (8005200 <RCCEx_PLL3_Config+0x15c>)
 80050b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b6:	f003 0303 	and.w	r3, r3, #3
 80050ba:	2b03      	cmp	r3, #3
 80050bc:	d101      	bne.n	80050c2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e099      	b.n	80051f6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80050c2:	4b4f      	ldr	r3, [pc, #316]	@ (8005200 <RCCEx_PLL3_Config+0x15c>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a4e      	ldr	r2, [pc, #312]	@ (8005200 <RCCEx_PLL3_Config+0x15c>)
 80050c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050ce:	f7fc ffb9 	bl	8002044 <HAL_GetTick>
 80050d2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80050d4:	e008      	b.n	80050e8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80050d6:	f7fc ffb5 	bl	8002044 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d901      	bls.n	80050e8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e086      	b.n	80051f6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80050e8:	4b45      	ldr	r3, [pc, #276]	@ (8005200 <RCCEx_PLL3_Config+0x15c>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1f0      	bne.n	80050d6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80050f4:	4b42      	ldr	r3, [pc, #264]	@ (8005200 <RCCEx_PLL3_Config+0x15c>)
 80050f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	051b      	lsls	r3, r3, #20
 8005102:	493f      	ldr	r1, [pc, #252]	@ (8005200 <RCCEx_PLL3_Config+0x15c>)
 8005104:	4313      	orrs	r3, r2
 8005106:	628b      	str	r3, [r1, #40]	@ 0x28
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	3b01      	subs	r3, #1
 800510e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	3b01      	subs	r3, #1
 8005118:	025b      	lsls	r3, r3, #9
 800511a:	b29b      	uxth	r3, r3
 800511c:	431a      	orrs	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	3b01      	subs	r3, #1
 8005124:	041b      	lsls	r3, r3, #16
 8005126:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800512a:	431a      	orrs	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	3b01      	subs	r3, #1
 8005132:	061b      	lsls	r3, r3, #24
 8005134:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005138:	4931      	ldr	r1, [pc, #196]	@ (8005200 <RCCEx_PLL3_Config+0x15c>)
 800513a:	4313      	orrs	r3, r2
 800513c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800513e:	4b30      	ldr	r3, [pc, #192]	@ (8005200 <RCCEx_PLL3_Config+0x15c>)
 8005140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005142:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	492d      	ldr	r1, [pc, #180]	@ (8005200 <RCCEx_PLL3_Config+0x15c>)
 800514c:	4313      	orrs	r3, r2
 800514e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005150:	4b2b      	ldr	r3, [pc, #172]	@ (8005200 <RCCEx_PLL3_Config+0x15c>)
 8005152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005154:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	4928      	ldr	r1, [pc, #160]	@ (8005200 <RCCEx_PLL3_Config+0x15c>)
 800515e:	4313      	orrs	r3, r2
 8005160:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005162:	4b27      	ldr	r3, [pc, #156]	@ (8005200 <RCCEx_PLL3_Config+0x15c>)
 8005164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005166:	4a26      	ldr	r2, [pc, #152]	@ (8005200 <RCCEx_PLL3_Config+0x15c>)
 8005168:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800516c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800516e:	4b24      	ldr	r3, [pc, #144]	@ (8005200 <RCCEx_PLL3_Config+0x15c>)
 8005170:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005172:	4b24      	ldr	r3, [pc, #144]	@ (8005204 <RCCEx_PLL3_Config+0x160>)
 8005174:	4013      	ands	r3, r2
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	69d2      	ldr	r2, [r2, #28]
 800517a:	00d2      	lsls	r2, r2, #3
 800517c:	4920      	ldr	r1, [pc, #128]	@ (8005200 <RCCEx_PLL3_Config+0x15c>)
 800517e:	4313      	orrs	r3, r2
 8005180:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005182:	4b1f      	ldr	r3, [pc, #124]	@ (8005200 <RCCEx_PLL3_Config+0x15c>)
 8005184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005186:	4a1e      	ldr	r2, [pc, #120]	@ (8005200 <RCCEx_PLL3_Config+0x15c>)
 8005188:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800518c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d106      	bne.n	80051a2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005194:	4b1a      	ldr	r3, [pc, #104]	@ (8005200 <RCCEx_PLL3_Config+0x15c>)
 8005196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005198:	4a19      	ldr	r2, [pc, #100]	@ (8005200 <RCCEx_PLL3_Config+0x15c>)
 800519a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800519e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80051a0:	e00f      	b.n	80051c2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d106      	bne.n	80051b6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80051a8:	4b15      	ldr	r3, [pc, #84]	@ (8005200 <RCCEx_PLL3_Config+0x15c>)
 80051aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ac:	4a14      	ldr	r2, [pc, #80]	@ (8005200 <RCCEx_PLL3_Config+0x15c>)
 80051ae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80051b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80051b4:	e005      	b.n	80051c2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80051b6:	4b12      	ldr	r3, [pc, #72]	@ (8005200 <RCCEx_PLL3_Config+0x15c>)
 80051b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ba:	4a11      	ldr	r2, [pc, #68]	@ (8005200 <RCCEx_PLL3_Config+0x15c>)
 80051bc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80051c2:	4b0f      	ldr	r3, [pc, #60]	@ (8005200 <RCCEx_PLL3_Config+0x15c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a0e      	ldr	r2, [pc, #56]	@ (8005200 <RCCEx_PLL3_Config+0x15c>)
 80051c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051ce:	f7fc ff39 	bl	8002044 <HAL_GetTick>
 80051d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80051d4:	e008      	b.n	80051e8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80051d6:	f7fc ff35 	bl	8002044 <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d901      	bls.n	80051e8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e006      	b.n	80051f6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80051e8:	4b05      	ldr	r3, [pc, #20]	@ (8005200 <RCCEx_PLL3_Config+0x15c>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d0f0      	beq.n	80051d6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80051f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	58024400 	.word	0x58024400
 8005204:	ffff0007 	.word	0xffff0007

08005208 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d101      	bne.n	800521a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e10f      	b.n	800543a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a87      	ldr	r2, [pc, #540]	@ (8005444 <HAL_SPI_Init+0x23c>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d00f      	beq.n	800524a <HAL_SPI_Init+0x42>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a86      	ldr	r2, [pc, #536]	@ (8005448 <HAL_SPI_Init+0x240>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d00a      	beq.n	800524a <HAL_SPI_Init+0x42>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a84      	ldr	r2, [pc, #528]	@ (800544c <HAL_SPI_Init+0x244>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d005      	beq.n	800524a <HAL_SPI_Init+0x42>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	2b0f      	cmp	r3, #15
 8005244:	d901      	bls.n	800524a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e0f7      	b.n	800543a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 fbca 	bl	80059e4 <SPI_GetPacketSize>
 8005250:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a7b      	ldr	r2, [pc, #492]	@ (8005444 <HAL_SPI_Init+0x23c>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d00c      	beq.n	8005276 <HAL_SPI_Init+0x6e>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a79      	ldr	r2, [pc, #484]	@ (8005448 <HAL_SPI_Init+0x240>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d007      	beq.n	8005276 <HAL_SPI_Init+0x6e>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a78      	ldr	r2, [pc, #480]	@ (800544c <HAL_SPI_Init+0x244>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d002      	beq.n	8005276 <HAL_SPI_Init+0x6e>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2b08      	cmp	r3, #8
 8005274:	d811      	bhi.n	800529a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800527a:	4a72      	ldr	r2, [pc, #456]	@ (8005444 <HAL_SPI_Init+0x23c>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d009      	beq.n	8005294 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a70      	ldr	r2, [pc, #448]	@ (8005448 <HAL_SPI_Init+0x240>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d004      	beq.n	8005294 <HAL_SPI_Init+0x8c>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a6f      	ldr	r2, [pc, #444]	@ (800544c <HAL_SPI_Init+0x244>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d104      	bne.n	800529e <HAL_SPI_Init+0x96>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2b10      	cmp	r3, #16
 8005298:	d901      	bls.n	800529e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e0cd      	b.n	800543a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d106      	bne.n	80052b8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f7fc fbb4 	bl	8001a20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2202      	movs	r2, #2
 80052bc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f022 0201 	bic.w	r2, r2, #1
 80052ce:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80052da:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	699b      	ldr	r3, [r3, #24]
 80052e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80052e4:	d119      	bne.n	800531a <HAL_SPI_Init+0x112>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052ee:	d103      	bne.n	80052f8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d008      	beq.n	800530a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d10c      	bne.n	800531a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005304:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005308:	d107      	bne.n	800531a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005318:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00f      	beq.n	8005346 <HAL_SPI_Init+0x13e>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	2b06      	cmp	r3, #6
 800532c:	d90b      	bls.n	8005346 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	430a      	orrs	r2, r1
 8005342:	601a      	str	r2, [r3, #0]
 8005344:	e007      	b.n	8005356 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005354:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	69da      	ldr	r2, [r3, #28]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800535e:	431a      	orrs	r2, r3
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	431a      	orrs	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005368:	ea42 0103 	orr.w	r1, r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	68da      	ldr	r2, [r3, #12]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	430a      	orrs	r2, r1
 8005376:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005380:	431a      	orrs	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005386:	431a      	orrs	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	431a      	orrs	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	431a      	orrs	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	431a      	orrs	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	431a      	orrs	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	431a      	orrs	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053aa:	431a      	orrs	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	431a      	orrs	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053b6:	ea42 0103 	orr.w	r1, r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	430a      	orrs	r2, r1
 80053c4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d113      	bne.n	80053f6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053e0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80053f4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f022 0201 	bic.w	r2, r2, #1
 8005404:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00a      	beq.n	8005428 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	430a      	orrs	r2, r1
 8005426:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	40013000 	.word	0x40013000
 8005448:	40003800 	.word	0x40003800
 800544c:	40003c00 	.word	0x40003c00

08005450 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b088      	sub	sp, #32
 8005454:	af02      	add	r7, sp, #8
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	603b      	str	r3, [r7, #0]
 800545c:	4613      	mov	r3, r2
 800545e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	3320      	adds	r3, #32
 8005466:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005468:	f7fc fdec 	bl	8002044 <HAL_GetTick>
 800546c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b01      	cmp	r3, #1
 8005478:	d001      	beq.n	800547e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800547a:	2302      	movs	r3, #2
 800547c:	e1d1      	b.n	8005822 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d002      	beq.n	800548a <HAL_SPI_Transmit+0x3a>
 8005484:	88fb      	ldrh	r3, [r7, #6]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d101      	bne.n	800548e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e1c9      	b.n	8005822 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005494:	2b01      	cmp	r3, #1
 8005496:	d101      	bne.n	800549c <HAL_SPI_Transmit+0x4c>
 8005498:	2302      	movs	r3, #2
 800549a:	e1c2      	b.n	8005822 <HAL_SPI_Transmit+0x3d2>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2203      	movs	r2, #3
 80054a8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	68ba      	ldr	r2, [r7, #8]
 80054b8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	88fa      	ldrh	r2, [r7, #6]
 80054be:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	88fa      	ldrh	r2, [r7, #6]
 80054c6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80054f4:	d108      	bne.n	8005508 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005504:	601a      	str	r2, [r3, #0]
 8005506:	e009      	b.n	800551c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800551a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685a      	ldr	r2, [r3, #4]
 8005522:	4b96      	ldr	r3, [pc, #600]	@ (800577c <HAL_SPI_Transmit+0x32c>)
 8005524:	4013      	ands	r3, r2
 8005526:	88f9      	ldrh	r1, [r7, #6]
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	6812      	ldr	r2, [r2, #0]
 800552c:	430b      	orrs	r3, r1
 800552e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f042 0201 	orr.w	r2, r2, #1
 800553e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005548:	d107      	bne.n	800555a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005558:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	2b0f      	cmp	r3, #15
 8005560:	d947      	bls.n	80055f2 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005562:	e03f      	b.n	80055e4 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	2b02      	cmp	r3, #2
 8005570:	d114      	bne.n	800559c <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	6812      	ldr	r2, [r2, #0]
 800557c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005582:	1d1a      	adds	r2, r3, #4
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800558e:	b29b      	uxth	r3, r3
 8005590:	3b01      	subs	r3, #1
 8005592:	b29a      	uxth	r2, r3
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800559a:	e023      	b.n	80055e4 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800559c:	f7fc fd52 	bl	8002044 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d803      	bhi.n	80055b4 <HAL_SPI_Transmit+0x164>
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b2:	d102      	bne.n	80055ba <HAL_SPI_Transmit+0x16a>
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d114      	bne.n	80055e4 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f000 f944 	bl	8005848 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055c6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e11e      	b.n	8005822 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1b9      	bne.n	8005564 <HAL_SPI_Transmit+0x114>
 80055f0:	e0f1      	b.n	80057d6 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	2b07      	cmp	r3, #7
 80055f8:	f240 80e6 	bls.w	80057c8 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80055fc:	e05d      	b.n	80056ba <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	f003 0302 	and.w	r3, r3, #2
 8005608:	2b02      	cmp	r3, #2
 800560a:	d132      	bne.n	8005672 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005612:	b29b      	uxth	r3, r3
 8005614:	2b01      	cmp	r3, #1
 8005616:	d918      	bls.n	800564a <HAL_SPI_Transmit+0x1fa>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800561c:	2b00      	cmp	r3, #0
 800561e:	d014      	beq.n	800564a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6812      	ldr	r2, [r2, #0]
 800562a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005630:	1d1a      	adds	r2, r3, #4
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800563c:	b29b      	uxth	r3, r3
 800563e:	3b02      	subs	r3, #2
 8005640:	b29a      	uxth	r2, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005648:	e037      	b.n	80056ba <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800564e:	881a      	ldrh	r2, [r3, #0]
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005658:	1c9a      	adds	r2, r3, #2
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005664:	b29b      	uxth	r3, r3
 8005666:	3b01      	subs	r3, #1
 8005668:	b29a      	uxth	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005670:	e023      	b.n	80056ba <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005672:	f7fc fce7 	bl	8002044 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	429a      	cmp	r2, r3
 8005680:	d803      	bhi.n	800568a <HAL_SPI_Transmit+0x23a>
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005688:	d102      	bne.n	8005690 <HAL_SPI_Transmit+0x240>
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d114      	bne.n	80056ba <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005690:	68f8      	ldr	r0, [r7, #12]
 8005692:	f000 f8d9 	bl	8005848 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800569c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e0b3      	b.n	8005822 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d19b      	bne.n	80055fe <HAL_SPI_Transmit+0x1ae>
 80056c6:	e086      	b.n	80057d6 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d154      	bne.n	8005780 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80056dc:	b29b      	uxth	r3, r3
 80056de:	2b03      	cmp	r3, #3
 80056e0:	d918      	bls.n	8005714 <HAL_SPI_Transmit+0x2c4>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056e6:	2b40      	cmp	r3, #64	@ 0x40
 80056e8:	d914      	bls.n	8005714 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	6812      	ldr	r2, [r2, #0]
 80056f4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056fa:	1d1a      	adds	r2, r3, #4
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005706:	b29b      	uxth	r3, r3
 8005708:	3b04      	subs	r3, #4
 800570a:	b29a      	uxth	r2, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005712:	e059      	b.n	80057c8 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800571a:	b29b      	uxth	r3, r3
 800571c:	2b01      	cmp	r3, #1
 800571e:	d917      	bls.n	8005750 <HAL_SPI_Transmit+0x300>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005724:	2b00      	cmp	r3, #0
 8005726:	d013      	beq.n	8005750 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800572c:	881a      	ldrh	r2, [r3, #0]
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005736:	1c9a      	adds	r2, r3, #2
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005742:	b29b      	uxth	r3, r3
 8005744:	3b02      	subs	r3, #2
 8005746:	b29a      	uxth	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800574e:	e03b      	b.n	80057c8 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	3320      	adds	r3, #32
 800575a:	7812      	ldrb	r2, [r2, #0]
 800575c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005762:	1c5a      	adds	r2, r3, #1
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800576e:	b29b      	uxth	r3, r3
 8005770:	3b01      	subs	r3, #1
 8005772:	b29a      	uxth	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800577a:	e025      	b.n	80057c8 <HAL_SPI_Transmit+0x378>
 800577c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005780:	f7fc fc60 	bl	8002044 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	683a      	ldr	r2, [r7, #0]
 800578c:	429a      	cmp	r2, r3
 800578e:	d803      	bhi.n	8005798 <HAL_SPI_Transmit+0x348>
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005796:	d102      	bne.n	800579e <HAL_SPI_Transmit+0x34e>
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d114      	bne.n	80057c8 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800579e:	68f8      	ldr	r0, [r7, #12]
 80057a0:	f000 f852 	bl	8005848 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057aa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e02c      	b.n	8005822 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f47f af79 	bne.w	80056c8 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	2200      	movs	r2, #0
 80057de:	2108      	movs	r1, #8
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	f000 f8d1 	bl	8005988 <SPI_WaitOnFlagUntilTimeout>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d007      	beq.n	80057fc <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057f2:	f043 0220 	orr.w	r2, r3, #32
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f000 f823 	bl	8005848 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005818:	2b00      	cmp	r3, #0
 800581a:	d001      	beq.n	8005820 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e000      	b.n	8005822 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8005820:	2300      	movs	r3, #0
  }
}
 8005822:	4618      	mov	r0, r3
 8005824:	3718      	adds	r7, #24
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop

0800582c <HAL_SPI_GetError>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(const SPI_HandleTypeDef *hspi)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
}
 800583a:	4618      	mov	r0, r3
 800583c:	370c      	adds	r7, #12
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
	...

08005848 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	699a      	ldr	r2, [r3, #24]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f042 0208 	orr.w	r2, r2, #8
 8005866:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	699a      	ldr	r2, [r3, #24]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f042 0210 	orr.w	r2, r2, #16
 8005876:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f022 0201 	bic.w	r2, r2, #1
 8005886:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6919      	ldr	r1, [r3, #16]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	4b3c      	ldr	r3, [pc, #240]	@ (8005984 <SPI_CloseTransfer+0x13c>)
 8005894:	400b      	ands	r3, r1
 8005896:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	689a      	ldr	r2, [r3, #8]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80058a6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	2b04      	cmp	r3, #4
 80058b2:	d014      	beq.n	80058de <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f003 0320 	and.w	r3, r3, #32
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00f      	beq.n	80058de <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058c4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	699a      	ldr	r2, [r3, #24]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f042 0220 	orr.w	r2, r2, #32
 80058dc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b03      	cmp	r3, #3
 80058e8:	d014      	beq.n	8005914 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d00f      	beq.n	8005914 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058fa:	f043 0204 	orr.w	r2, r3, #4
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	699a      	ldr	r2, [r3, #24]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005912:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00f      	beq.n	800593e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005924:	f043 0201 	orr.w	r2, r3, #1
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	699a      	ldr	r2, [r3, #24]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800593c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00f      	beq.n	8005968 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800594e:	f043 0208 	orr.w	r2, r3, #8
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	699a      	ldr	r2, [r3, #24]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005966:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8005978:	bf00      	nop
 800597a:	3714      	adds	r7, #20
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr
 8005984:	fffffc90 	.word	0xfffffc90

08005988 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	603b      	str	r3, [r7, #0]
 8005994:	4613      	mov	r3, r2
 8005996:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005998:	e010      	b.n	80059bc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800599a:	f7fc fb53 	bl	8002044 <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	683a      	ldr	r2, [r7, #0]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d803      	bhi.n	80059b2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b0:	d102      	bne.n	80059b8 <SPI_WaitOnFlagUntilTimeout+0x30>
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d101      	bne.n	80059bc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80059b8:	2303      	movs	r3, #3
 80059ba:	e00f      	b.n	80059dc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	695a      	ldr	r2, [r3, #20]
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	4013      	ands	r3, r2
 80059c6:	68ba      	ldr	r2, [r7, #8]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	bf0c      	ite	eq
 80059cc:	2301      	moveq	r3, #1
 80059ce:	2300      	movne	r3, #0
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	461a      	mov	r2, r3
 80059d4:	79fb      	ldrb	r3, [r7, #7]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d0df      	beq.n	800599a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059f0:	095b      	lsrs	r3, r3, #5
 80059f2:	3301      	adds	r3, #1
 80059f4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	3301      	adds	r3, #1
 80059fc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	3307      	adds	r3, #7
 8005a02:	08db      	lsrs	r3, r3, #3
 8005a04:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	fb02 f303 	mul.w	r3, r2, r3
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3714      	adds	r7, #20
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr

08005a1a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a1a:	b580      	push	{r7, lr}
 8005a1c:	b082      	sub	sp, #8
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d101      	bne.n	8005a2c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e049      	b.n	8005ac0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d106      	bne.n	8005a46 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f7fc f87b 	bl	8001b3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2202      	movs	r2, #2
 8005a4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	3304      	adds	r3, #4
 8005a56:	4619      	mov	r1, r3
 8005a58:	4610      	mov	r0, r2
 8005a5a:	f000 f975 	bl	8005d48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2201      	movs	r2, #1
 8005a62:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2201      	movs	r2, #1
 8005a92:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3708      	adds	r7, #8
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d101      	bne.n	8005ada <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e049      	b.n	8005b6e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d106      	bne.n	8005af4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f841 	bl	8005b76 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2202      	movs	r2, #2
 8005af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	3304      	adds	r3, #4
 8005b04:	4619      	mov	r1, r3
 8005b06:	4610      	mov	r0, r2
 8005b08:	f000 f91e 	bl	8005d48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3708      	adds	r7, #8
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005b76:	b480      	push	{r7}
 8005b78:	b083      	sub	sp, #12
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005b7e:	bf00      	nop
 8005b80:	370c      	adds	r7, #12
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr

08005b8a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b086      	sub	sp, #24
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	60f8      	str	r0, [r7, #12]
 8005b92:	60b9      	str	r1, [r7, #8]
 8005b94:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b96:	2300      	movs	r3, #0
 8005b98:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d101      	bne.n	8005ba8 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	e088      	b.n	8005cba <HAL_TIM_IC_ConfigChannel+0x130>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d11b      	bne.n	8005bee <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005bc6:	f000 fa55 	bl	8006074 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	699a      	ldr	r2, [r3, #24]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f022 020c 	bic.w	r2, r2, #12
 8005bd8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	6999      	ldr	r1, [r3, #24]
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	689a      	ldr	r2, [r3, #8]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	430a      	orrs	r2, r1
 8005bea:	619a      	str	r2, [r3, #24]
 8005bec:	e060      	b.n	8005cb0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2b04      	cmp	r3, #4
 8005bf2:	d11c      	bne.n	8005c2e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005c04:	f000 fae5 	bl	80061d2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	699a      	ldr	r2, [r3, #24]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005c16:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6999      	ldr	r1, [r3, #24]
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	021a      	lsls	r2, r3, #8
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	619a      	str	r2, [r3, #24]
 8005c2c:	e040      	b.n	8005cb0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2b08      	cmp	r3, #8
 8005c32:	d11b      	bne.n	8005c6c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005c44:	f000 fb32 	bl	80062ac <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	69da      	ldr	r2, [r3, #28]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f022 020c 	bic.w	r2, r2, #12
 8005c56:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	69d9      	ldr	r1, [r3, #28]
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	689a      	ldr	r2, [r3, #8]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	430a      	orrs	r2, r1
 8005c68:	61da      	str	r2, [r3, #28]
 8005c6a:	e021      	b.n	8005cb0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b0c      	cmp	r3, #12
 8005c70:	d11c      	bne.n	8005cac <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005c82:	f000 fb4f 	bl	8006324 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	69da      	ldr	r2, [r3, #28]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005c94:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	69d9      	ldr	r1, [r3, #28]
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	021a      	lsls	r2, r3, #8
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	430a      	orrs	r2, r1
 8005ca8:	61da      	str	r2, [r3, #28]
 8005caa:	e001      	b.n	8005cb0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005cb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3718      	adds	r7, #24
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b082      	sub	sp, #8
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
 8005cca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d101      	bne.n	8005cda <HAL_TIM_SlaveConfigSynchro+0x18>
 8005cd6:	2302      	movs	r3, #2
 8005cd8:	e031      	b.n	8005d3e <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2202      	movs	r2, #2
 8005ce6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005cea:	6839      	ldr	r1, [r7, #0]
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 f8d7 	bl	8005ea0 <TIM_SlaveTimer_SetConfig>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d009      	beq.n	8005d0c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e018      	b.n	8005d3e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68da      	ldr	r2, [r3, #12]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d1a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68da      	ldr	r2, [r3, #12]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005d2a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3708      	adds	r7, #8
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
	...

08005d48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a47      	ldr	r2, [pc, #284]	@ (8005e78 <TIM_Base_SetConfig+0x130>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d013      	beq.n	8005d88 <TIM_Base_SetConfig+0x40>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d66:	d00f      	beq.n	8005d88 <TIM_Base_SetConfig+0x40>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a44      	ldr	r2, [pc, #272]	@ (8005e7c <TIM_Base_SetConfig+0x134>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d00b      	beq.n	8005d88 <TIM_Base_SetConfig+0x40>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a43      	ldr	r2, [pc, #268]	@ (8005e80 <TIM_Base_SetConfig+0x138>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d007      	beq.n	8005d88 <TIM_Base_SetConfig+0x40>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a42      	ldr	r2, [pc, #264]	@ (8005e84 <TIM_Base_SetConfig+0x13c>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d003      	beq.n	8005d88 <TIM_Base_SetConfig+0x40>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a41      	ldr	r2, [pc, #260]	@ (8005e88 <TIM_Base_SetConfig+0x140>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d108      	bne.n	8005d9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a36      	ldr	r2, [pc, #216]	@ (8005e78 <TIM_Base_SetConfig+0x130>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d027      	beq.n	8005df2 <TIM_Base_SetConfig+0xaa>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005da8:	d023      	beq.n	8005df2 <TIM_Base_SetConfig+0xaa>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a33      	ldr	r2, [pc, #204]	@ (8005e7c <TIM_Base_SetConfig+0x134>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d01f      	beq.n	8005df2 <TIM_Base_SetConfig+0xaa>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a32      	ldr	r2, [pc, #200]	@ (8005e80 <TIM_Base_SetConfig+0x138>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d01b      	beq.n	8005df2 <TIM_Base_SetConfig+0xaa>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a31      	ldr	r2, [pc, #196]	@ (8005e84 <TIM_Base_SetConfig+0x13c>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d017      	beq.n	8005df2 <TIM_Base_SetConfig+0xaa>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a30      	ldr	r2, [pc, #192]	@ (8005e88 <TIM_Base_SetConfig+0x140>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d013      	beq.n	8005df2 <TIM_Base_SetConfig+0xaa>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a2f      	ldr	r2, [pc, #188]	@ (8005e8c <TIM_Base_SetConfig+0x144>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d00f      	beq.n	8005df2 <TIM_Base_SetConfig+0xaa>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a2e      	ldr	r2, [pc, #184]	@ (8005e90 <TIM_Base_SetConfig+0x148>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d00b      	beq.n	8005df2 <TIM_Base_SetConfig+0xaa>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a2d      	ldr	r2, [pc, #180]	@ (8005e94 <TIM_Base_SetConfig+0x14c>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d007      	beq.n	8005df2 <TIM_Base_SetConfig+0xaa>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a2c      	ldr	r2, [pc, #176]	@ (8005e98 <TIM_Base_SetConfig+0x150>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d003      	beq.n	8005df2 <TIM_Base_SetConfig+0xaa>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a2b      	ldr	r2, [pc, #172]	@ (8005e9c <TIM_Base_SetConfig+0x154>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d108      	bne.n	8005e04 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005df8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	689a      	ldr	r2, [r3, #8]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a14      	ldr	r2, [pc, #80]	@ (8005e78 <TIM_Base_SetConfig+0x130>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d00f      	beq.n	8005e4a <TIM_Base_SetConfig+0x102>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a16      	ldr	r2, [pc, #88]	@ (8005e88 <TIM_Base_SetConfig+0x140>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d00b      	beq.n	8005e4a <TIM_Base_SetConfig+0x102>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a15      	ldr	r2, [pc, #84]	@ (8005e8c <TIM_Base_SetConfig+0x144>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d007      	beq.n	8005e4a <TIM_Base_SetConfig+0x102>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a14      	ldr	r2, [pc, #80]	@ (8005e90 <TIM_Base_SetConfig+0x148>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d003      	beq.n	8005e4a <TIM_Base_SetConfig+0x102>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a13      	ldr	r2, [pc, #76]	@ (8005e94 <TIM_Base_SetConfig+0x14c>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d103      	bne.n	8005e52 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	691a      	ldr	r2, [r3, #16]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f043 0204 	orr.w	r2, r3, #4
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2201      	movs	r2, #1
 8005e62:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	601a      	str	r2, [r3, #0]
}
 8005e6a:	bf00      	nop
 8005e6c:	3714      	adds	r7, #20
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
 8005e76:	bf00      	nop
 8005e78:	40010000 	.word	0x40010000
 8005e7c:	40000400 	.word	0x40000400
 8005e80:	40000800 	.word	0x40000800
 8005e84:	40000c00 	.word	0x40000c00
 8005e88:	40010400 	.word	0x40010400
 8005e8c:	40014000 	.word	0x40014000
 8005e90:	40014400 	.word	0x40014400
 8005e94:	40014800 	.word	0x40014800
 8005e98:	4000e000 	.word	0x4000e000
 8005e9c:	4000e400 	.word	0x4000e400

08005ea0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	4b65      	ldr	r3, [pc, #404]	@ (8006050 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8005eba:	4013      	ands	r3, r2
 8005ebc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	693a      	ldr	r2, [r7, #16]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	4b62      	ldr	r3, [pc, #392]	@ (8006054 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8005ecc:	4013      	ands	r3, r2
 8005ece:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	4a5c      	ldr	r2, [pc, #368]	@ (8006058 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	f000 80ab 	beq.w	8006044 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005eee:	4a5a      	ldr	r2, [pc, #360]	@ (8006058 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	f200 80a4 	bhi.w	800603e <TIM_SlaveTimer_SetConfig+0x19e>
 8005ef6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005efa:	f000 80a3 	beq.w	8006044 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005efe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f02:	f200 809c 	bhi.w	800603e <TIM_SlaveTimer_SetConfig+0x19e>
 8005f06:	4a55      	ldr	r2, [pc, #340]	@ (800605c <TIM_SlaveTimer_SetConfig+0x1bc>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	f000 809b 	beq.w	8006044 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005f0e:	4a53      	ldr	r2, [pc, #332]	@ (800605c <TIM_SlaveTimer_SetConfig+0x1bc>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	f200 8094 	bhi.w	800603e <TIM_SlaveTimer_SetConfig+0x19e>
 8005f16:	4a52      	ldr	r2, [pc, #328]	@ (8006060 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	f000 8093 	beq.w	8006044 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005f1e:	4a50      	ldr	r2, [pc, #320]	@ (8006060 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	f200 808c 	bhi.w	800603e <TIM_SlaveTimer_SetConfig+0x19e>
 8005f26:	4a4f      	ldr	r2, [pc, #316]	@ (8006064 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	f000 808b 	beq.w	8006044 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005f2e:	4a4d      	ldr	r2, [pc, #308]	@ (8006064 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	f200 8084 	bhi.w	800603e <TIM_SlaveTimer_SetConfig+0x19e>
 8005f36:	4a4c      	ldr	r2, [pc, #304]	@ (8006068 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	f000 8083 	beq.w	8006044 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005f3e:	4a4a      	ldr	r2, [pc, #296]	@ (8006068 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d87c      	bhi.n	800603e <TIM_SlaveTimer_SetConfig+0x19e>
 8005f44:	4a49      	ldr	r2, [pc, #292]	@ (800606c <TIM_SlaveTimer_SetConfig+0x1cc>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d07c      	beq.n	8006044 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005f4a:	4a48      	ldr	r2, [pc, #288]	@ (800606c <TIM_SlaveTimer_SetConfig+0x1cc>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d876      	bhi.n	800603e <TIM_SlaveTimer_SetConfig+0x19e>
 8005f50:	4a47      	ldr	r2, [pc, #284]	@ (8006070 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d076      	beq.n	8006044 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005f56:	4a46      	ldr	r2, [pc, #280]	@ (8006070 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d870      	bhi.n	800603e <TIM_SlaveTimer_SetConfig+0x19e>
 8005f5c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005f60:	d070      	beq.n	8006044 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005f62:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005f66:	d86a      	bhi.n	800603e <TIM_SlaveTimer_SetConfig+0x19e>
 8005f68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f6c:	d06a      	beq.n	8006044 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005f6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f72:	d864      	bhi.n	800603e <TIM_SlaveTimer_SetConfig+0x19e>
 8005f74:	2b70      	cmp	r3, #112	@ 0x70
 8005f76:	d01a      	beq.n	8005fae <TIM_SlaveTimer_SetConfig+0x10e>
 8005f78:	2b70      	cmp	r3, #112	@ 0x70
 8005f7a:	d860      	bhi.n	800603e <TIM_SlaveTimer_SetConfig+0x19e>
 8005f7c:	2b60      	cmp	r3, #96	@ 0x60
 8005f7e:	d054      	beq.n	800602a <TIM_SlaveTimer_SetConfig+0x18a>
 8005f80:	2b60      	cmp	r3, #96	@ 0x60
 8005f82:	d85c      	bhi.n	800603e <TIM_SlaveTimer_SetConfig+0x19e>
 8005f84:	2b50      	cmp	r3, #80	@ 0x50
 8005f86:	d046      	beq.n	8006016 <TIM_SlaveTimer_SetConfig+0x176>
 8005f88:	2b50      	cmp	r3, #80	@ 0x50
 8005f8a:	d858      	bhi.n	800603e <TIM_SlaveTimer_SetConfig+0x19e>
 8005f8c:	2b40      	cmp	r3, #64	@ 0x40
 8005f8e:	d019      	beq.n	8005fc4 <TIM_SlaveTimer_SetConfig+0x124>
 8005f90:	2b40      	cmp	r3, #64	@ 0x40
 8005f92:	d854      	bhi.n	800603e <TIM_SlaveTimer_SetConfig+0x19e>
 8005f94:	2b30      	cmp	r3, #48	@ 0x30
 8005f96:	d055      	beq.n	8006044 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005f98:	2b30      	cmp	r3, #48	@ 0x30
 8005f9a:	d850      	bhi.n	800603e <TIM_SlaveTimer_SetConfig+0x19e>
 8005f9c:	2b20      	cmp	r3, #32
 8005f9e:	d051      	beq.n	8006044 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005fa0:	2b20      	cmp	r3, #32
 8005fa2:	d84c      	bhi.n	800603e <TIM_SlaveTimer_SetConfig+0x19e>
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d04d      	beq.n	8006044 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005fa8:	2b10      	cmp	r3, #16
 8005faa:	d04b      	beq.n	8006044 <TIM_SlaveTimer_SetConfig+0x1a4>
 8005fac:	e047      	b.n	800603e <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005fbe:	f000 f9ee 	bl	800639e <TIM_ETR_SetConfig>
      break;
 8005fc2:	e040      	b.n	8006046 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2b05      	cmp	r3, #5
 8005fca:	d101      	bne.n	8005fd0 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e03b      	b.n	8006048 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6a1b      	ldr	r3, [r3, #32]
 8005fd6:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	6a1a      	ldr	r2, [r3, #32]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f022 0201 	bic.w	r2, r2, #1
 8005fe6:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ff6:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	011b      	lsls	r3, r3, #4
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	4313      	orrs	r3, r2
 8006002:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68ba      	ldr	r2, [r7, #8]
 800600a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	621a      	str	r2, [r3, #32]
      break;
 8006014:	e017      	b.n	8006046 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006022:	461a      	mov	r2, r3
 8006024:	f000 f8a6 	bl	8006174 <TIM_TI1_ConfigInputStage>
      break;
 8006028:	e00d      	b.n	8006046 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006036:	461a      	mov	r2, r3
 8006038:	f000 f908 	bl	800624c <TIM_TI2_ConfigInputStage>
      break;
 800603c:	e003      	b.n	8006046 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	75fb      	strb	r3, [r7, #23]
      break;
 8006042:	e000      	b.n	8006046 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 8006044:	bf00      	nop
  }

  return status;
 8006046:	7dfb      	ldrb	r3, [r7, #23]
}
 8006048:	4618      	mov	r0, r3
 800604a:	3718      	adds	r7, #24
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	ffcfff8f 	.word	0xffcfff8f
 8006054:	fffefff8 	.word	0xfffefff8
 8006058:	00200010 	.word	0x00200010
 800605c:	00100070 	.word	0x00100070
 8006060:	00100060 	.word	0x00100060
 8006064:	00100050 	.word	0x00100050
 8006068:	00100040 	.word	0x00100040
 800606c:	00100030 	.word	0x00100030
 8006070:	00100020 	.word	0x00100020

08006074 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006074:	b480      	push	{r7}
 8006076:	b087      	sub	sp, #28
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	607a      	str	r2, [r7, #4]
 8006080:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6a1b      	ldr	r3, [r3, #32]
 800608c:	f023 0201 	bic.w	r2, r3, #1
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	4a2c      	ldr	r2, [pc, #176]	@ (8006150 <TIM_TI1_SetConfig+0xdc>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d023      	beq.n	80060ea <TIM_TI1_SetConfig+0x76>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060a8:	d01f      	beq.n	80060ea <TIM_TI1_SetConfig+0x76>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	4a29      	ldr	r2, [pc, #164]	@ (8006154 <TIM_TI1_SetConfig+0xe0>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d01b      	beq.n	80060ea <TIM_TI1_SetConfig+0x76>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	4a28      	ldr	r2, [pc, #160]	@ (8006158 <TIM_TI1_SetConfig+0xe4>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d017      	beq.n	80060ea <TIM_TI1_SetConfig+0x76>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	4a27      	ldr	r2, [pc, #156]	@ (800615c <TIM_TI1_SetConfig+0xe8>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d013      	beq.n	80060ea <TIM_TI1_SetConfig+0x76>
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	4a26      	ldr	r2, [pc, #152]	@ (8006160 <TIM_TI1_SetConfig+0xec>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d00f      	beq.n	80060ea <TIM_TI1_SetConfig+0x76>
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	4a25      	ldr	r2, [pc, #148]	@ (8006164 <TIM_TI1_SetConfig+0xf0>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d00b      	beq.n	80060ea <TIM_TI1_SetConfig+0x76>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	4a24      	ldr	r2, [pc, #144]	@ (8006168 <TIM_TI1_SetConfig+0xf4>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d007      	beq.n	80060ea <TIM_TI1_SetConfig+0x76>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	4a23      	ldr	r2, [pc, #140]	@ (800616c <TIM_TI1_SetConfig+0xf8>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d003      	beq.n	80060ea <TIM_TI1_SetConfig+0x76>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	4a22      	ldr	r2, [pc, #136]	@ (8006170 <TIM_TI1_SetConfig+0xfc>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d101      	bne.n	80060ee <TIM_TI1_SetConfig+0x7a>
 80060ea:	2301      	movs	r3, #1
 80060ec:	e000      	b.n	80060f0 <TIM_TI1_SetConfig+0x7c>
 80060ee:	2300      	movs	r3, #0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d008      	beq.n	8006106 <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	f023 0303 	bic.w	r3, r3, #3
 80060fa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80060fc:	697a      	ldr	r2, [r7, #20]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4313      	orrs	r3, r2
 8006102:	617b      	str	r3, [r7, #20]
 8006104:	e003      	b.n	800610e <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	f043 0301 	orr.w	r3, r3, #1
 800610c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006114:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	011b      	lsls	r3, r3, #4
 800611a:	b2db      	uxtb	r3, r3
 800611c:	697a      	ldr	r2, [r7, #20]
 800611e:	4313      	orrs	r3, r2
 8006120:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	f023 030a 	bic.w	r3, r3, #10
 8006128:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	f003 030a 	and.w	r3, r3, #10
 8006130:	693a      	ldr	r2, [r7, #16]
 8006132:	4313      	orrs	r3, r2
 8006134:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	621a      	str	r2, [r3, #32]
}
 8006142:	bf00      	nop
 8006144:	371c      	adds	r7, #28
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	40010000 	.word	0x40010000
 8006154:	40000400 	.word	0x40000400
 8006158:	40000800 	.word	0x40000800
 800615c:	40000c00 	.word	0x40000c00
 8006160:	40010400 	.word	0x40010400
 8006164:	40001800 	.word	0x40001800
 8006168:	40014000 	.word	0x40014000
 800616c:	4000e000 	.word	0x4000e000
 8006170:	4000e400 	.word	0x4000e400

08006174 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006174:	b480      	push	{r7}
 8006176:	b087      	sub	sp, #28
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6a1b      	ldr	r3, [r3, #32]
 8006184:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6a1b      	ldr	r3, [r3, #32]
 800618a:	f023 0201 	bic.w	r2, r3, #1
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800619e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	011b      	lsls	r3, r3, #4
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f023 030a 	bic.w	r3, r3, #10
 80061b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061b2:	697a      	ldr	r2, [r7, #20]
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	621a      	str	r2, [r3, #32]
}
 80061c6:	bf00      	nop
 80061c8:	371c      	adds	r7, #28
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr

080061d2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80061d2:	b480      	push	{r7}
 80061d4:	b087      	sub	sp, #28
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	60f8      	str	r0, [r7, #12]
 80061da:	60b9      	str	r1, [r7, #8]
 80061dc:	607a      	str	r2, [r7, #4]
 80061de:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6a1b      	ldr	r3, [r3, #32]
 80061e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	f023 0210 	bic.w	r2, r3, #16
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	021b      	lsls	r3, r3, #8
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	4313      	orrs	r3, r2
 8006208:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006210:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	031b      	lsls	r3, r3, #12
 8006216:	b29b      	uxth	r3, r3
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	4313      	orrs	r3, r2
 800621c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006224:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	011b      	lsls	r3, r3, #4
 800622a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	4313      	orrs	r3, r2
 8006232:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	621a      	str	r2, [r3, #32]
}
 8006240:	bf00      	nop
 8006242:	371c      	adds	r7, #28
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800624c:	b480      	push	{r7}
 800624e:	b087      	sub	sp, #28
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6a1b      	ldr	r3, [r3, #32]
 800625c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6a1b      	ldr	r3, [r3, #32]
 8006262:	f023 0210 	bic.w	r2, r3, #16
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	699b      	ldr	r3, [r3, #24]
 800626e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006276:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	031b      	lsls	r3, r3, #12
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	4313      	orrs	r3, r2
 8006280:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006288:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	011b      	lsls	r3, r3, #4
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	4313      	orrs	r3, r2
 8006292:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	693a      	ldr	r2, [r7, #16]
 8006298:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	697a      	ldr	r2, [r7, #20]
 800629e:	621a      	str	r2, [r3, #32]
}
 80062a0:	bf00      	nop
 80062a2:	371c      	adds	r7, #28
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b087      	sub	sp, #28
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	607a      	str	r2, [r7, #4]
 80062b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6a1b      	ldr	r3, [r3, #32]
 80062c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	69db      	ldr	r3, [r3, #28]
 80062d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	f023 0303 	bic.w	r3, r3, #3
 80062d8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4313      	orrs	r3, r2
 80062e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062e8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	011b      	lsls	r3, r3, #4
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80062fc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	021b      	lsls	r3, r3, #8
 8006302:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006306:	697a      	ldr	r2, [r7, #20]
 8006308:	4313      	orrs	r3, r2
 800630a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	693a      	ldr	r2, [r7, #16]
 8006310:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	697a      	ldr	r2, [r7, #20]
 8006316:	621a      	str	r2, [r3, #32]
}
 8006318:	bf00      	nop
 800631a:	371c      	adds	r7, #28
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006324:	b480      	push	{r7}
 8006326:	b087      	sub	sp, #28
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	607a      	str	r2, [r7, #4]
 8006330:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6a1b      	ldr	r3, [r3, #32]
 800633c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	69db      	ldr	r3, [r3, #28]
 8006348:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006350:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	021b      	lsls	r3, r3, #8
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	4313      	orrs	r3, r2
 800635a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006362:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	031b      	lsls	r3, r3, #12
 8006368:	b29b      	uxth	r3, r3
 800636a:	693a      	ldr	r2, [r7, #16]
 800636c:	4313      	orrs	r3, r2
 800636e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006376:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	031b      	lsls	r3, r3, #12
 800637c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006380:	697a      	ldr	r2, [r7, #20]
 8006382:	4313      	orrs	r3, r2
 8006384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	621a      	str	r2, [r3, #32]
}
 8006392:	bf00      	nop
 8006394:	371c      	adds	r7, #28
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800639e:	b480      	push	{r7}
 80063a0:	b087      	sub	sp, #28
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	60f8      	str	r0, [r7, #12]
 80063a6:	60b9      	str	r1, [r7, #8]
 80063a8:	607a      	str	r2, [r7, #4]
 80063aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80063b8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	021a      	lsls	r2, r3, #8
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	431a      	orrs	r2, r3
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	697a      	ldr	r2, [r7, #20]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	697a      	ldr	r2, [r7, #20]
 80063d0:	609a      	str	r2, [r3, #8]
}
 80063d2:	bf00      	nop
 80063d4:	371c      	adds	r7, #28
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr
	...

080063e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d101      	bne.n	80063f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063f4:	2302      	movs	r3, #2
 80063f6:	e077      	b.n	80064e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2202      	movs	r2, #2
 8006404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a35      	ldr	r2, [pc, #212]	@ (80064f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d004      	beq.n	800642c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a34      	ldr	r2, [pc, #208]	@ (80064f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d108      	bne.n	800643e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006432:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	4313      	orrs	r3, r2
 800643c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006444:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	4313      	orrs	r3, r2
 800644e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a25      	ldr	r2, [pc, #148]	@ (80064f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d02c      	beq.n	80064bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800646a:	d027      	beq.n	80064bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a22      	ldr	r2, [pc, #136]	@ (80064fc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d022      	beq.n	80064bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a21      	ldr	r2, [pc, #132]	@ (8006500 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d01d      	beq.n	80064bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a1f      	ldr	r2, [pc, #124]	@ (8006504 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d018      	beq.n	80064bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a1a      	ldr	r2, [pc, #104]	@ (80064f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d013      	beq.n	80064bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a1b      	ldr	r2, [pc, #108]	@ (8006508 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d00e      	beq.n	80064bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a1a      	ldr	r2, [pc, #104]	@ (800650c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d009      	beq.n	80064bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a18      	ldr	r2, [pc, #96]	@ (8006510 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d004      	beq.n	80064bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a17      	ldr	r2, [pc, #92]	@ (8006514 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d10c      	bne.n	80064d6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	68ba      	ldr	r2, [r7, #8]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2201      	movs	r2, #1
 80064da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3714      	adds	r7, #20
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr
 80064f4:	40010000 	.word	0x40010000
 80064f8:	40010400 	.word	0x40010400
 80064fc:	40000400 	.word	0x40000400
 8006500:	40000800 	.word	0x40000800
 8006504:	40000c00 	.word	0x40000c00
 8006508:	40001800 	.word	0x40001800
 800650c:	40014000 	.word	0x40014000
 8006510:	4000e000 	.word	0x4000e000
 8006514:	4000e400 	.word	0x4000e400

08006518 <HAL_TIMEx_TISelection>:
  *
  *         (*)  Value not defined in all devices. \n
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_TIMEx_TISelection(TIM_HandleTypeDef *htim, uint32_t TISelection, uint32_t Channel)
{
 8006518:	b480      	push	{r7}
 800651a:	b087      	sub	sp, #28
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006524:	2300      	movs	r3, #0
 8006526:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_TIM_TISEL_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TISEL(TISelection));

  __HAL_LOCK(htim);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800652e:	2b01      	cmp	r3, #1
 8006530:	d101      	bne.n	8006536 <HAL_TIMEx_TISelection+0x1e>
 8006532:	2302      	movs	r3, #2
 8006534:	e058      	b.n	80065e8 <HAL_TIMEx_TISelection+0xd0>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2201      	movs	r2, #1
 800653a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2b0c      	cmp	r3, #12
 8006542:	d849      	bhi.n	80065d8 <HAL_TIMEx_TISelection+0xc0>
 8006544:	a201      	add	r2, pc, #4	@ (adr r2, 800654c <HAL_TIMEx_TISelection+0x34>)
 8006546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800654a:	bf00      	nop
 800654c:	08006581 	.word	0x08006581
 8006550:	080065d9 	.word	0x080065d9
 8006554:	080065d9 	.word	0x080065d9
 8006558:	080065d9 	.word	0x080065d9
 800655c:	08006597 	.word	0x08006597
 8006560:	080065d9 	.word	0x080065d9
 8006564:	080065d9 	.word	0x080065d9
 8006568:	080065d9 	.word	0x080065d9
 800656c:	080065ad 	.word	0x080065ad
 8006570:	080065d9 	.word	0x080065d9
 8006574:	080065d9 	.word	0x080065d9
 8006578:	080065d9 	.word	0x080065d9
 800657c:	080065c3 	.word	0x080065c3
  {
    case TIM_CHANNEL_1:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI1SEL, TISelection);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006586:	f023 010f 	bic.w	r1, r3, #15
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68ba      	ldr	r2, [r7, #8]
 8006590:	430a      	orrs	r2, r1
 8006592:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8006594:	e023      	b.n	80065de <HAL_TIMEx_TISelection+0xc6>
    case TIM_CHANNEL_2:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI2SEL, TISelection);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800659c:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68ba      	ldr	r2, [r7, #8]
 80065a6:	430a      	orrs	r2, r1
 80065a8:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 80065aa:	e018      	b.n	80065de <HAL_TIMEx_TISelection+0xc6>
    case TIM_CHANNEL_3:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI3SEL, TISelection);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065b2:	f423 2170 	bic.w	r1, r3, #983040	@ 0xf0000
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68ba      	ldr	r2, [r7, #8]
 80065bc:	430a      	orrs	r2, r1
 80065be:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 80065c0:	e00d      	b.n	80065de <HAL_TIMEx_TISelection+0xc6>
    case TIM_CHANNEL_4:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI4SEL, TISelection);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065c8:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68ba      	ldr	r2, [r7, #8]
 80065d2:	430a      	orrs	r2, r1
 80065d4:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 80065d6:	e002      	b.n	80065de <HAL_TIMEx_TISelection+0xc6>
    default:
      status = HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	75fb      	strb	r3, [r7, #23]
      break;
 80065dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80065e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	371c      	adds	r7, #28
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d101      	bne.n	8006606 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e042      	b.n	800668c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800660c:	2b00      	cmp	r3, #0
 800660e:	d106      	bne.n	800661e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f7fb fab1 	bl	8001b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2224      	movs	r2, #36	@ 0x24
 8006622:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f022 0201 	bic.w	r2, r2, #1
 8006634:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800663a:	2b00      	cmp	r3, #0
 800663c:	d002      	beq.n	8006644 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 ff22 	bl	8007488 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 f8b3 	bl	80067b0 <UART_SetConfig>
 800664a:	4603      	mov	r3, r0
 800664c:	2b01      	cmp	r3, #1
 800664e:	d101      	bne.n	8006654 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e01b      	b.n	800668c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	685a      	ldr	r2, [r3, #4]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006662:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	689a      	ldr	r2, [r3, #8]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006672:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f042 0201 	orr.w	r2, r2, #1
 8006682:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 ffa1 	bl	80075cc <UART_CheckIdleState>
 800668a:	4603      	mov	r3, r0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3708      	adds	r7, #8
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b08a      	sub	sp, #40	@ 0x28
 8006698:	af02      	add	r7, sp, #8
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	603b      	str	r3, [r7, #0]
 80066a0:	4613      	mov	r3, r2
 80066a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066aa:	2b20      	cmp	r3, #32
 80066ac:	d17b      	bne.n	80067a6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d002      	beq.n	80066ba <HAL_UART_Transmit+0x26>
 80066b4:	88fb      	ldrh	r3, [r7, #6]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d101      	bne.n	80066be <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e074      	b.n	80067a8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2221      	movs	r2, #33	@ 0x21
 80066ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066ce:	f7fb fcb9 	bl	8002044 <HAL_GetTick>
 80066d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	88fa      	ldrh	r2, [r7, #6]
 80066d8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	88fa      	ldrh	r2, [r7, #6]
 80066e0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066ec:	d108      	bne.n	8006700 <HAL_UART_Transmit+0x6c>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d104      	bne.n	8006700 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80066f6:	2300      	movs	r3, #0
 80066f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	61bb      	str	r3, [r7, #24]
 80066fe:	e003      	b.n	8006708 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006704:	2300      	movs	r3, #0
 8006706:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006708:	e030      	b.n	800676c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	2200      	movs	r2, #0
 8006712:	2180      	movs	r1, #128	@ 0x80
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f001 f803 	bl	8007720 <UART_WaitOnFlagUntilTimeout>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d005      	beq.n	800672c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2220      	movs	r2, #32
 8006724:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006728:	2303      	movs	r3, #3
 800672a:	e03d      	b.n	80067a8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d10b      	bne.n	800674a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	881b      	ldrh	r3, [r3, #0]
 8006736:	461a      	mov	r2, r3
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006740:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	3302      	adds	r3, #2
 8006746:	61bb      	str	r3, [r7, #24]
 8006748:	e007      	b.n	800675a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	781a      	ldrb	r2, [r3, #0]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	3301      	adds	r3, #1
 8006758:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006760:	b29b      	uxth	r3, r3
 8006762:	3b01      	subs	r3, #1
 8006764:	b29a      	uxth	r2, r3
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006772:	b29b      	uxth	r3, r3
 8006774:	2b00      	cmp	r3, #0
 8006776:	d1c8      	bne.n	800670a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	9300      	str	r3, [sp, #0]
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	2200      	movs	r2, #0
 8006780:	2140      	movs	r1, #64	@ 0x40
 8006782:	68f8      	ldr	r0, [r7, #12]
 8006784:	f000 ffcc 	bl	8007720 <UART_WaitOnFlagUntilTimeout>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d005      	beq.n	800679a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2220      	movs	r2, #32
 8006792:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e006      	b.n	80067a8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2220      	movs	r2, #32
 800679e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80067a2:	2300      	movs	r3, #0
 80067a4:	e000      	b.n	80067a8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80067a6:	2302      	movs	r3, #2
  }
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3720      	adds	r7, #32
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067b4:	b092      	sub	sp, #72	@ 0x48
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80067ba:	2300      	movs	r3, #0
 80067bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	689a      	ldr	r2, [r3, #8]
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	691b      	ldr	r3, [r3, #16]
 80067c8:	431a      	orrs	r2, r3
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	431a      	orrs	r2, r3
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	69db      	ldr	r3, [r3, #28]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	4bbe      	ldr	r3, [pc, #760]	@ (8006ad8 <UART_SetConfig+0x328>)
 80067e0:	4013      	ands	r3, r2
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	6812      	ldr	r2, [r2, #0]
 80067e6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80067e8:	430b      	orrs	r3, r1
 80067ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	68da      	ldr	r2, [r3, #12]
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	430a      	orrs	r2, r1
 8006800:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4ab3      	ldr	r2, [pc, #716]	@ (8006adc <UART_SetConfig+0x32c>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d004      	beq.n	800681c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006818:	4313      	orrs	r3, r2
 800681a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	689a      	ldr	r2, [r3, #8]
 8006822:	4baf      	ldr	r3, [pc, #700]	@ (8006ae0 <UART_SetConfig+0x330>)
 8006824:	4013      	ands	r3, r2
 8006826:	697a      	ldr	r2, [r7, #20]
 8006828:	6812      	ldr	r2, [r2, #0]
 800682a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800682c:	430b      	orrs	r3, r1
 800682e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006836:	f023 010f 	bic.w	r1, r3, #15
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	430a      	orrs	r2, r1
 8006844:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4aa6      	ldr	r2, [pc, #664]	@ (8006ae4 <UART_SetConfig+0x334>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d177      	bne.n	8006940 <UART_SetConfig+0x190>
 8006850:	4ba5      	ldr	r3, [pc, #660]	@ (8006ae8 <UART_SetConfig+0x338>)
 8006852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006854:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006858:	2b28      	cmp	r3, #40	@ 0x28
 800685a:	d86d      	bhi.n	8006938 <UART_SetConfig+0x188>
 800685c:	a201      	add	r2, pc, #4	@ (adr r2, 8006864 <UART_SetConfig+0xb4>)
 800685e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006862:	bf00      	nop
 8006864:	08006909 	.word	0x08006909
 8006868:	08006939 	.word	0x08006939
 800686c:	08006939 	.word	0x08006939
 8006870:	08006939 	.word	0x08006939
 8006874:	08006939 	.word	0x08006939
 8006878:	08006939 	.word	0x08006939
 800687c:	08006939 	.word	0x08006939
 8006880:	08006939 	.word	0x08006939
 8006884:	08006911 	.word	0x08006911
 8006888:	08006939 	.word	0x08006939
 800688c:	08006939 	.word	0x08006939
 8006890:	08006939 	.word	0x08006939
 8006894:	08006939 	.word	0x08006939
 8006898:	08006939 	.word	0x08006939
 800689c:	08006939 	.word	0x08006939
 80068a0:	08006939 	.word	0x08006939
 80068a4:	08006919 	.word	0x08006919
 80068a8:	08006939 	.word	0x08006939
 80068ac:	08006939 	.word	0x08006939
 80068b0:	08006939 	.word	0x08006939
 80068b4:	08006939 	.word	0x08006939
 80068b8:	08006939 	.word	0x08006939
 80068bc:	08006939 	.word	0x08006939
 80068c0:	08006939 	.word	0x08006939
 80068c4:	08006921 	.word	0x08006921
 80068c8:	08006939 	.word	0x08006939
 80068cc:	08006939 	.word	0x08006939
 80068d0:	08006939 	.word	0x08006939
 80068d4:	08006939 	.word	0x08006939
 80068d8:	08006939 	.word	0x08006939
 80068dc:	08006939 	.word	0x08006939
 80068e0:	08006939 	.word	0x08006939
 80068e4:	08006929 	.word	0x08006929
 80068e8:	08006939 	.word	0x08006939
 80068ec:	08006939 	.word	0x08006939
 80068f0:	08006939 	.word	0x08006939
 80068f4:	08006939 	.word	0x08006939
 80068f8:	08006939 	.word	0x08006939
 80068fc:	08006939 	.word	0x08006939
 8006900:	08006939 	.word	0x08006939
 8006904:	08006931 	.word	0x08006931
 8006908:	2301      	movs	r3, #1
 800690a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800690e:	e326      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006910:	2304      	movs	r3, #4
 8006912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006916:	e322      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006918:	2308      	movs	r3, #8
 800691a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800691e:	e31e      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006920:	2310      	movs	r3, #16
 8006922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006926:	e31a      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006928:	2320      	movs	r3, #32
 800692a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800692e:	e316      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006930:	2340      	movs	r3, #64	@ 0x40
 8006932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006936:	e312      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006938:	2380      	movs	r3, #128	@ 0x80
 800693a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800693e:	e30e      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a69      	ldr	r2, [pc, #420]	@ (8006aec <UART_SetConfig+0x33c>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d130      	bne.n	80069ac <UART_SetConfig+0x1fc>
 800694a:	4b67      	ldr	r3, [pc, #412]	@ (8006ae8 <UART_SetConfig+0x338>)
 800694c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800694e:	f003 0307 	and.w	r3, r3, #7
 8006952:	2b05      	cmp	r3, #5
 8006954:	d826      	bhi.n	80069a4 <UART_SetConfig+0x1f4>
 8006956:	a201      	add	r2, pc, #4	@ (adr r2, 800695c <UART_SetConfig+0x1ac>)
 8006958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800695c:	08006975 	.word	0x08006975
 8006960:	0800697d 	.word	0x0800697d
 8006964:	08006985 	.word	0x08006985
 8006968:	0800698d 	.word	0x0800698d
 800696c:	08006995 	.word	0x08006995
 8006970:	0800699d 	.word	0x0800699d
 8006974:	2300      	movs	r3, #0
 8006976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800697a:	e2f0      	b.n	8006f5e <UART_SetConfig+0x7ae>
 800697c:	2304      	movs	r3, #4
 800697e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006982:	e2ec      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006984:	2308      	movs	r3, #8
 8006986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800698a:	e2e8      	b.n	8006f5e <UART_SetConfig+0x7ae>
 800698c:	2310      	movs	r3, #16
 800698e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006992:	e2e4      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006994:	2320      	movs	r3, #32
 8006996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800699a:	e2e0      	b.n	8006f5e <UART_SetConfig+0x7ae>
 800699c:	2340      	movs	r3, #64	@ 0x40
 800699e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069a2:	e2dc      	b.n	8006f5e <UART_SetConfig+0x7ae>
 80069a4:	2380      	movs	r3, #128	@ 0x80
 80069a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069aa:	e2d8      	b.n	8006f5e <UART_SetConfig+0x7ae>
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a4f      	ldr	r2, [pc, #316]	@ (8006af0 <UART_SetConfig+0x340>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d130      	bne.n	8006a18 <UART_SetConfig+0x268>
 80069b6:	4b4c      	ldr	r3, [pc, #304]	@ (8006ae8 <UART_SetConfig+0x338>)
 80069b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069ba:	f003 0307 	and.w	r3, r3, #7
 80069be:	2b05      	cmp	r3, #5
 80069c0:	d826      	bhi.n	8006a10 <UART_SetConfig+0x260>
 80069c2:	a201      	add	r2, pc, #4	@ (adr r2, 80069c8 <UART_SetConfig+0x218>)
 80069c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c8:	080069e1 	.word	0x080069e1
 80069cc:	080069e9 	.word	0x080069e9
 80069d0:	080069f1 	.word	0x080069f1
 80069d4:	080069f9 	.word	0x080069f9
 80069d8:	08006a01 	.word	0x08006a01
 80069dc:	08006a09 	.word	0x08006a09
 80069e0:	2300      	movs	r3, #0
 80069e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069e6:	e2ba      	b.n	8006f5e <UART_SetConfig+0x7ae>
 80069e8:	2304      	movs	r3, #4
 80069ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069ee:	e2b6      	b.n	8006f5e <UART_SetConfig+0x7ae>
 80069f0:	2308      	movs	r3, #8
 80069f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069f6:	e2b2      	b.n	8006f5e <UART_SetConfig+0x7ae>
 80069f8:	2310      	movs	r3, #16
 80069fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069fe:	e2ae      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006a00:	2320      	movs	r3, #32
 8006a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a06:	e2aa      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006a08:	2340      	movs	r3, #64	@ 0x40
 8006a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a0e:	e2a6      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006a10:	2380      	movs	r3, #128	@ 0x80
 8006a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a16:	e2a2      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a35      	ldr	r2, [pc, #212]	@ (8006af4 <UART_SetConfig+0x344>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d130      	bne.n	8006a84 <UART_SetConfig+0x2d4>
 8006a22:	4b31      	ldr	r3, [pc, #196]	@ (8006ae8 <UART_SetConfig+0x338>)
 8006a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a26:	f003 0307 	and.w	r3, r3, #7
 8006a2a:	2b05      	cmp	r3, #5
 8006a2c:	d826      	bhi.n	8006a7c <UART_SetConfig+0x2cc>
 8006a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8006a34 <UART_SetConfig+0x284>)
 8006a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a34:	08006a4d 	.word	0x08006a4d
 8006a38:	08006a55 	.word	0x08006a55
 8006a3c:	08006a5d 	.word	0x08006a5d
 8006a40:	08006a65 	.word	0x08006a65
 8006a44:	08006a6d 	.word	0x08006a6d
 8006a48:	08006a75 	.word	0x08006a75
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a52:	e284      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006a54:	2304      	movs	r3, #4
 8006a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a5a:	e280      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006a5c:	2308      	movs	r3, #8
 8006a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a62:	e27c      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006a64:	2310      	movs	r3, #16
 8006a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a6a:	e278      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006a6c:	2320      	movs	r3, #32
 8006a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a72:	e274      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006a74:	2340      	movs	r3, #64	@ 0x40
 8006a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a7a:	e270      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006a7c:	2380      	movs	r3, #128	@ 0x80
 8006a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a82:	e26c      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a1b      	ldr	r2, [pc, #108]	@ (8006af8 <UART_SetConfig+0x348>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d142      	bne.n	8006b14 <UART_SetConfig+0x364>
 8006a8e:	4b16      	ldr	r3, [pc, #88]	@ (8006ae8 <UART_SetConfig+0x338>)
 8006a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a92:	f003 0307 	and.w	r3, r3, #7
 8006a96:	2b05      	cmp	r3, #5
 8006a98:	d838      	bhi.n	8006b0c <UART_SetConfig+0x35c>
 8006a9a:	a201      	add	r2, pc, #4	@ (adr r2, 8006aa0 <UART_SetConfig+0x2f0>)
 8006a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa0:	08006ab9 	.word	0x08006ab9
 8006aa4:	08006ac1 	.word	0x08006ac1
 8006aa8:	08006ac9 	.word	0x08006ac9
 8006aac:	08006ad1 	.word	0x08006ad1
 8006ab0:	08006afd 	.word	0x08006afd
 8006ab4:	08006b05 	.word	0x08006b05
 8006ab8:	2300      	movs	r3, #0
 8006aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006abe:	e24e      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006ac0:	2304      	movs	r3, #4
 8006ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ac6:	e24a      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006ac8:	2308      	movs	r3, #8
 8006aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ace:	e246      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006ad0:	2310      	movs	r3, #16
 8006ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ad6:	e242      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006ad8:	cfff69f3 	.word	0xcfff69f3
 8006adc:	58000c00 	.word	0x58000c00
 8006ae0:	11fff4ff 	.word	0x11fff4ff
 8006ae4:	40011000 	.word	0x40011000
 8006ae8:	58024400 	.word	0x58024400
 8006aec:	40004400 	.word	0x40004400
 8006af0:	40004800 	.word	0x40004800
 8006af4:	40004c00 	.word	0x40004c00
 8006af8:	40005000 	.word	0x40005000
 8006afc:	2320      	movs	r3, #32
 8006afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b02:	e22c      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006b04:	2340      	movs	r3, #64	@ 0x40
 8006b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b0a:	e228      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006b0c:	2380      	movs	r3, #128	@ 0x80
 8006b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b12:	e224      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4ab1      	ldr	r2, [pc, #708]	@ (8006de0 <UART_SetConfig+0x630>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d176      	bne.n	8006c0c <UART_SetConfig+0x45c>
 8006b1e:	4bb1      	ldr	r3, [pc, #708]	@ (8006de4 <UART_SetConfig+0x634>)
 8006b20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b26:	2b28      	cmp	r3, #40	@ 0x28
 8006b28:	d86c      	bhi.n	8006c04 <UART_SetConfig+0x454>
 8006b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b30 <UART_SetConfig+0x380>)
 8006b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b30:	08006bd5 	.word	0x08006bd5
 8006b34:	08006c05 	.word	0x08006c05
 8006b38:	08006c05 	.word	0x08006c05
 8006b3c:	08006c05 	.word	0x08006c05
 8006b40:	08006c05 	.word	0x08006c05
 8006b44:	08006c05 	.word	0x08006c05
 8006b48:	08006c05 	.word	0x08006c05
 8006b4c:	08006c05 	.word	0x08006c05
 8006b50:	08006bdd 	.word	0x08006bdd
 8006b54:	08006c05 	.word	0x08006c05
 8006b58:	08006c05 	.word	0x08006c05
 8006b5c:	08006c05 	.word	0x08006c05
 8006b60:	08006c05 	.word	0x08006c05
 8006b64:	08006c05 	.word	0x08006c05
 8006b68:	08006c05 	.word	0x08006c05
 8006b6c:	08006c05 	.word	0x08006c05
 8006b70:	08006be5 	.word	0x08006be5
 8006b74:	08006c05 	.word	0x08006c05
 8006b78:	08006c05 	.word	0x08006c05
 8006b7c:	08006c05 	.word	0x08006c05
 8006b80:	08006c05 	.word	0x08006c05
 8006b84:	08006c05 	.word	0x08006c05
 8006b88:	08006c05 	.word	0x08006c05
 8006b8c:	08006c05 	.word	0x08006c05
 8006b90:	08006bed 	.word	0x08006bed
 8006b94:	08006c05 	.word	0x08006c05
 8006b98:	08006c05 	.word	0x08006c05
 8006b9c:	08006c05 	.word	0x08006c05
 8006ba0:	08006c05 	.word	0x08006c05
 8006ba4:	08006c05 	.word	0x08006c05
 8006ba8:	08006c05 	.word	0x08006c05
 8006bac:	08006c05 	.word	0x08006c05
 8006bb0:	08006bf5 	.word	0x08006bf5
 8006bb4:	08006c05 	.word	0x08006c05
 8006bb8:	08006c05 	.word	0x08006c05
 8006bbc:	08006c05 	.word	0x08006c05
 8006bc0:	08006c05 	.word	0x08006c05
 8006bc4:	08006c05 	.word	0x08006c05
 8006bc8:	08006c05 	.word	0x08006c05
 8006bcc:	08006c05 	.word	0x08006c05
 8006bd0:	08006bfd 	.word	0x08006bfd
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bda:	e1c0      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006bdc:	2304      	movs	r3, #4
 8006bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006be2:	e1bc      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006be4:	2308      	movs	r3, #8
 8006be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bea:	e1b8      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006bec:	2310      	movs	r3, #16
 8006bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bf2:	e1b4      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006bf4:	2320      	movs	r3, #32
 8006bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bfa:	e1b0      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006bfc:	2340      	movs	r3, #64	@ 0x40
 8006bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c02:	e1ac      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006c04:	2380      	movs	r3, #128	@ 0x80
 8006c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c0a:	e1a8      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a75      	ldr	r2, [pc, #468]	@ (8006de8 <UART_SetConfig+0x638>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d130      	bne.n	8006c78 <UART_SetConfig+0x4c8>
 8006c16:	4b73      	ldr	r3, [pc, #460]	@ (8006de4 <UART_SetConfig+0x634>)
 8006c18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c1a:	f003 0307 	and.w	r3, r3, #7
 8006c1e:	2b05      	cmp	r3, #5
 8006c20:	d826      	bhi.n	8006c70 <UART_SetConfig+0x4c0>
 8006c22:	a201      	add	r2, pc, #4	@ (adr r2, 8006c28 <UART_SetConfig+0x478>)
 8006c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c28:	08006c41 	.word	0x08006c41
 8006c2c:	08006c49 	.word	0x08006c49
 8006c30:	08006c51 	.word	0x08006c51
 8006c34:	08006c59 	.word	0x08006c59
 8006c38:	08006c61 	.word	0x08006c61
 8006c3c:	08006c69 	.word	0x08006c69
 8006c40:	2300      	movs	r3, #0
 8006c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c46:	e18a      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006c48:	2304      	movs	r3, #4
 8006c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c4e:	e186      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006c50:	2308      	movs	r3, #8
 8006c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c56:	e182      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006c58:	2310      	movs	r3, #16
 8006c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c5e:	e17e      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006c60:	2320      	movs	r3, #32
 8006c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c66:	e17a      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006c68:	2340      	movs	r3, #64	@ 0x40
 8006c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c6e:	e176      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006c70:	2380      	movs	r3, #128	@ 0x80
 8006c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c76:	e172      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a5b      	ldr	r2, [pc, #364]	@ (8006dec <UART_SetConfig+0x63c>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d130      	bne.n	8006ce4 <UART_SetConfig+0x534>
 8006c82:	4b58      	ldr	r3, [pc, #352]	@ (8006de4 <UART_SetConfig+0x634>)
 8006c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c86:	f003 0307 	and.w	r3, r3, #7
 8006c8a:	2b05      	cmp	r3, #5
 8006c8c:	d826      	bhi.n	8006cdc <UART_SetConfig+0x52c>
 8006c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8006c94 <UART_SetConfig+0x4e4>)
 8006c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c94:	08006cad 	.word	0x08006cad
 8006c98:	08006cb5 	.word	0x08006cb5
 8006c9c:	08006cbd 	.word	0x08006cbd
 8006ca0:	08006cc5 	.word	0x08006cc5
 8006ca4:	08006ccd 	.word	0x08006ccd
 8006ca8:	08006cd5 	.word	0x08006cd5
 8006cac:	2300      	movs	r3, #0
 8006cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cb2:	e154      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006cb4:	2304      	movs	r3, #4
 8006cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cba:	e150      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006cbc:	2308      	movs	r3, #8
 8006cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cc2:	e14c      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006cc4:	2310      	movs	r3, #16
 8006cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cca:	e148      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006ccc:	2320      	movs	r3, #32
 8006cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cd2:	e144      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006cd4:	2340      	movs	r3, #64	@ 0x40
 8006cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cda:	e140      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006cdc:	2380      	movs	r3, #128	@ 0x80
 8006cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ce2:	e13c      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a41      	ldr	r2, [pc, #260]	@ (8006df0 <UART_SetConfig+0x640>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	f040 8082 	bne.w	8006df4 <UART_SetConfig+0x644>
 8006cf0:	4b3c      	ldr	r3, [pc, #240]	@ (8006de4 <UART_SetConfig+0x634>)
 8006cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cf4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006cf8:	2b28      	cmp	r3, #40	@ 0x28
 8006cfa:	d86d      	bhi.n	8006dd8 <UART_SetConfig+0x628>
 8006cfc:	a201      	add	r2, pc, #4	@ (adr r2, 8006d04 <UART_SetConfig+0x554>)
 8006cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d02:	bf00      	nop
 8006d04:	08006da9 	.word	0x08006da9
 8006d08:	08006dd9 	.word	0x08006dd9
 8006d0c:	08006dd9 	.word	0x08006dd9
 8006d10:	08006dd9 	.word	0x08006dd9
 8006d14:	08006dd9 	.word	0x08006dd9
 8006d18:	08006dd9 	.word	0x08006dd9
 8006d1c:	08006dd9 	.word	0x08006dd9
 8006d20:	08006dd9 	.word	0x08006dd9
 8006d24:	08006db1 	.word	0x08006db1
 8006d28:	08006dd9 	.word	0x08006dd9
 8006d2c:	08006dd9 	.word	0x08006dd9
 8006d30:	08006dd9 	.word	0x08006dd9
 8006d34:	08006dd9 	.word	0x08006dd9
 8006d38:	08006dd9 	.word	0x08006dd9
 8006d3c:	08006dd9 	.word	0x08006dd9
 8006d40:	08006dd9 	.word	0x08006dd9
 8006d44:	08006db9 	.word	0x08006db9
 8006d48:	08006dd9 	.word	0x08006dd9
 8006d4c:	08006dd9 	.word	0x08006dd9
 8006d50:	08006dd9 	.word	0x08006dd9
 8006d54:	08006dd9 	.word	0x08006dd9
 8006d58:	08006dd9 	.word	0x08006dd9
 8006d5c:	08006dd9 	.word	0x08006dd9
 8006d60:	08006dd9 	.word	0x08006dd9
 8006d64:	08006dc1 	.word	0x08006dc1
 8006d68:	08006dd9 	.word	0x08006dd9
 8006d6c:	08006dd9 	.word	0x08006dd9
 8006d70:	08006dd9 	.word	0x08006dd9
 8006d74:	08006dd9 	.word	0x08006dd9
 8006d78:	08006dd9 	.word	0x08006dd9
 8006d7c:	08006dd9 	.word	0x08006dd9
 8006d80:	08006dd9 	.word	0x08006dd9
 8006d84:	08006dc9 	.word	0x08006dc9
 8006d88:	08006dd9 	.word	0x08006dd9
 8006d8c:	08006dd9 	.word	0x08006dd9
 8006d90:	08006dd9 	.word	0x08006dd9
 8006d94:	08006dd9 	.word	0x08006dd9
 8006d98:	08006dd9 	.word	0x08006dd9
 8006d9c:	08006dd9 	.word	0x08006dd9
 8006da0:	08006dd9 	.word	0x08006dd9
 8006da4:	08006dd1 	.word	0x08006dd1
 8006da8:	2301      	movs	r3, #1
 8006daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dae:	e0d6      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006db0:	2304      	movs	r3, #4
 8006db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006db6:	e0d2      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006db8:	2308      	movs	r3, #8
 8006dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dbe:	e0ce      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006dc0:	2310      	movs	r3, #16
 8006dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dc6:	e0ca      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006dc8:	2320      	movs	r3, #32
 8006dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dce:	e0c6      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006dd0:	2340      	movs	r3, #64	@ 0x40
 8006dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dd6:	e0c2      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006dd8:	2380      	movs	r3, #128	@ 0x80
 8006dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dde:	e0be      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006de0:	40011400 	.word	0x40011400
 8006de4:	58024400 	.word	0x58024400
 8006de8:	40007800 	.word	0x40007800
 8006dec:	40007c00 	.word	0x40007c00
 8006df0:	40011800 	.word	0x40011800
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4aad      	ldr	r2, [pc, #692]	@ (80070b0 <UART_SetConfig+0x900>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d176      	bne.n	8006eec <UART_SetConfig+0x73c>
 8006dfe:	4bad      	ldr	r3, [pc, #692]	@ (80070b4 <UART_SetConfig+0x904>)
 8006e00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e06:	2b28      	cmp	r3, #40	@ 0x28
 8006e08:	d86c      	bhi.n	8006ee4 <UART_SetConfig+0x734>
 8006e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8006e10 <UART_SetConfig+0x660>)
 8006e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e10:	08006eb5 	.word	0x08006eb5
 8006e14:	08006ee5 	.word	0x08006ee5
 8006e18:	08006ee5 	.word	0x08006ee5
 8006e1c:	08006ee5 	.word	0x08006ee5
 8006e20:	08006ee5 	.word	0x08006ee5
 8006e24:	08006ee5 	.word	0x08006ee5
 8006e28:	08006ee5 	.word	0x08006ee5
 8006e2c:	08006ee5 	.word	0x08006ee5
 8006e30:	08006ebd 	.word	0x08006ebd
 8006e34:	08006ee5 	.word	0x08006ee5
 8006e38:	08006ee5 	.word	0x08006ee5
 8006e3c:	08006ee5 	.word	0x08006ee5
 8006e40:	08006ee5 	.word	0x08006ee5
 8006e44:	08006ee5 	.word	0x08006ee5
 8006e48:	08006ee5 	.word	0x08006ee5
 8006e4c:	08006ee5 	.word	0x08006ee5
 8006e50:	08006ec5 	.word	0x08006ec5
 8006e54:	08006ee5 	.word	0x08006ee5
 8006e58:	08006ee5 	.word	0x08006ee5
 8006e5c:	08006ee5 	.word	0x08006ee5
 8006e60:	08006ee5 	.word	0x08006ee5
 8006e64:	08006ee5 	.word	0x08006ee5
 8006e68:	08006ee5 	.word	0x08006ee5
 8006e6c:	08006ee5 	.word	0x08006ee5
 8006e70:	08006ecd 	.word	0x08006ecd
 8006e74:	08006ee5 	.word	0x08006ee5
 8006e78:	08006ee5 	.word	0x08006ee5
 8006e7c:	08006ee5 	.word	0x08006ee5
 8006e80:	08006ee5 	.word	0x08006ee5
 8006e84:	08006ee5 	.word	0x08006ee5
 8006e88:	08006ee5 	.word	0x08006ee5
 8006e8c:	08006ee5 	.word	0x08006ee5
 8006e90:	08006ed5 	.word	0x08006ed5
 8006e94:	08006ee5 	.word	0x08006ee5
 8006e98:	08006ee5 	.word	0x08006ee5
 8006e9c:	08006ee5 	.word	0x08006ee5
 8006ea0:	08006ee5 	.word	0x08006ee5
 8006ea4:	08006ee5 	.word	0x08006ee5
 8006ea8:	08006ee5 	.word	0x08006ee5
 8006eac:	08006ee5 	.word	0x08006ee5
 8006eb0:	08006edd 	.word	0x08006edd
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eba:	e050      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006ebc:	2304      	movs	r3, #4
 8006ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ec2:	e04c      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006ec4:	2308      	movs	r3, #8
 8006ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eca:	e048      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006ecc:	2310      	movs	r3, #16
 8006ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ed2:	e044      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006ed4:	2320      	movs	r3, #32
 8006ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eda:	e040      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006edc:	2340      	movs	r3, #64	@ 0x40
 8006ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ee2:	e03c      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006ee4:	2380      	movs	r3, #128	@ 0x80
 8006ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eea:	e038      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a71      	ldr	r2, [pc, #452]	@ (80070b8 <UART_SetConfig+0x908>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d130      	bne.n	8006f58 <UART_SetConfig+0x7a8>
 8006ef6:	4b6f      	ldr	r3, [pc, #444]	@ (80070b4 <UART_SetConfig+0x904>)
 8006ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006efa:	f003 0307 	and.w	r3, r3, #7
 8006efe:	2b05      	cmp	r3, #5
 8006f00:	d826      	bhi.n	8006f50 <UART_SetConfig+0x7a0>
 8006f02:	a201      	add	r2, pc, #4	@ (adr r2, 8006f08 <UART_SetConfig+0x758>)
 8006f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f08:	08006f21 	.word	0x08006f21
 8006f0c:	08006f29 	.word	0x08006f29
 8006f10:	08006f31 	.word	0x08006f31
 8006f14:	08006f39 	.word	0x08006f39
 8006f18:	08006f41 	.word	0x08006f41
 8006f1c:	08006f49 	.word	0x08006f49
 8006f20:	2302      	movs	r3, #2
 8006f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f26:	e01a      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006f28:	2304      	movs	r3, #4
 8006f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f2e:	e016      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006f30:	2308      	movs	r3, #8
 8006f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f36:	e012      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006f38:	2310      	movs	r3, #16
 8006f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f3e:	e00e      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006f40:	2320      	movs	r3, #32
 8006f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f46:	e00a      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006f48:	2340      	movs	r3, #64	@ 0x40
 8006f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f4e:	e006      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006f50:	2380      	movs	r3, #128	@ 0x80
 8006f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f56:	e002      	b.n	8006f5e <UART_SetConfig+0x7ae>
 8006f58:	2380      	movs	r3, #128	@ 0x80
 8006f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a55      	ldr	r2, [pc, #340]	@ (80070b8 <UART_SetConfig+0x908>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	f040 80f8 	bne.w	800715a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f6a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006f6e:	2b20      	cmp	r3, #32
 8006f70:	dc46      	bgt.n	8007000 <UART_SetConfig+0x850>
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	db75      	blt.n	8007062 <UART_SetConfig+0x8b2>
 8006f76:	3b02      	subs	r3, #2
 8006f78:	2b1e      	cmp	r3, #30
 8006f7a:	d872      	bhi.n	8007062 <UART_SetConfig+0x8b2>
 8006f7c:	a201      	add	r2, pc, #4	@ (adr r2, 8006f84 <UART_SetConfig+0x7d4>)
 8006f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f82:	bf00      	nop
 8006f84:	08007007 	.word	0x08007007
 8006f88:	08007063 	.word	0x08007063
 8006f8c:	0800700f 	.word	0x0800700f
 8006f90:	08007063 	.word	0x08007063
 8006f94:	08007063 	.word	0x08007063
 8006f98:	08007063 	.word	0x08007063
 8006f9c:	0800701f 	.word	0x0800701f
 8006fa0:	08007063 	.word	0x08007063
 8006fa4:	08007063 	.word	0x08007063
 8006fa8:	08007063 	.word	0x08007063
 8006fac:	08007063 	.word	0x08007063
 8006fb0:	08007063 	.word	0x08007063
 8006fb4:	08007063 	.word	0x08007063
 8006fb8:	08007063 	.word	0x08007063
 8006fbc:	0800702f 	.word	0x0800702f
 8006fc0:	08007063 	.word	0x08007063
 8006fc4:	08007063 	.word	0x08007063
 8006fc8:	08007063 	.word	0x08007063
 8006fcc:	08007063 	.word	0x08007063
 8006fd0:	08007063 	.word	0x08007063
 8006fd4:	08007063 	.word	0x08007063
 8006fd8:	08007063 	.word	0x08007063
 8006fdc:	08007063 	.word	0x08007063
 8006fe0:	08007063 	.word	0x08007063
 8006fe4:	08007063 	.word	0x08007063
 8006fe8:	08007063 	.word	0x08007063
 8006fec:	08007063 	.word	0x08007063
 8006ff0:	08007063 	.word	0x08007063
 8006ff4:	08007063 	.word	0x08007063
 8006ff8:	08007063 	.word	0x08007063
 8006ffc:	08007055 	.word	0x08007055
 8007000:	2b40      	cmp	r3, #64	@ 0x40
 8007002:	d02a      	beq.n	800705a <UART_SetConfig+0x8aa>
 8007004:	e02d      	b.n	8007062 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007006:	f7fd fcdd 	bl	80049c4 <HAL_RCCEx_GetD3PCLK1Freq>
 800700a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800700c:	e02f      	b.n	800706e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800700e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007012:	4618      	mov	r0, r3
 8007014:	f7fd fcec 	bl	80049f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800701a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800701c:	e027      	b.n	800706e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800701e:	f107 0318 	add.w	r3, r7, #24
 8007022:	4618      	mov	r0, r3
 8007024:	f7fd fe38 	bl	8004c98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800702c:	e01f      	b.n	800706e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800702e:	4b21      	ldr	r3, [pc, #132]	@ (80070b4 <UART_SetConfig+0x904>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f003 0320 	and.w	r3, r3, #32
 8007036:	2b00      	cmp	r3, #0
 8007038:	d009      	beq.n	800704e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800703a:	4b1e      	ldr	r3, [pc, #120]	@ (80070b4 <UART_SetConfig+0x904>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	08db      	lsrs	r3, r3, #3
 8007040:	f003 0303 	and.w	r3, r3, #3
 8007044:	4a1d      	ldr	r2, [pc, #116]	@ (80070bc <UART_SetConfig+0x90c>)
 8007046:	fa22 f303 	lsr.w	r3, r2, r3
 800704a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800704c:	e00f      	b.n	800706e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800704e:	4b1b      	ldr	r3, [pc, #108]	@ (80070bc <UART_SetConfig+0x90c>)
 8007050:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007052:	e00c      	b.n	800706e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007054:	4b1a      	ldr	r3, [pc, #104]	@ (80070c0 <UART_SetConfig+0x910>)
 8007056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007058:	e009      	b.n	800706e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800705a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800705e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007060:	e005      	b.n	800706e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007062:	2300      	movs	r3, #0
 8007064:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800706c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800706e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007070:	2b00      	cmp	r3, #0
 8007072:	f000 81ee 	beq.w	8007452 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800707a:	4a12      	ldr	r2, [pc, #72]	@ (80070c4 <UART_SetConfig+0x914>)
 800707c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007080:	461a      	mov	r2, r3
 8007082:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007084:	fbb3 f3f2 	udiv	r3, r3, r2
 8007088:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	685a      	ldr	r2, [r3, #4]
 800708e:	4613      	mov	r3, r2
 8007090:	005b      	lsls	r3, r3, #1
 8007092:	4413      	add	r3, r2
 8007094:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007096:	429a      	cmp	r2, r3
 8007098:	d305      	bcc.n	80070a6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d910      	bls.n	80070c8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80070ac:	e1d1      	b.n	8007452 <UART_SetConfig+0xca2>
 80070ae:	bf00      	nop
 80070b0:	40011c00 	.word	0x40011c00
 80070b4:	58024400 	.word	0x58024400
 80070b8:	58000c00 	.word	0x58000c00
 80070bc:	03d09000 	.word	0x03d09000
 80070c0:	003d0900 	.word	0x003d0900
 80070c4:	0800b8ac 	.word	0x0800b8ac
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070ca:	2200      	movs	r2, #0
 80070cc:	60bb      	str	r3, [r7, #8]
 80070ce:	60fa      	str	r2, [r7, #12]
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070d4:	4ac0      	ldr	r2, [pc, #768]	@ (80073d8 <UART_SetConfig+0xc28>)
 80070d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070da:	b29b      	uxth	r3, r3
 80070dc:	2200      	movs	r2, #0
 80070de:	603b      	str	r3, [r7, #0]
 80070e0:	607a      	str	r2, [r7, #4]
 80070e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80070ea:	f7f9 f961 	bl	80003b0 <__aeabi_uldivmod>
 80070ee:	4602      	mov	r2, r0
 80070f0:	460b      	mov	r3, r1
 80070f2:	4610      	mov	r0, r2
 80070f4:	4619      	mov	r1, r3
 80070f6:	f04f 0200 	mov.w	r2, #0
 80070fa:	f04f 0300 	mov.w	r3, #0
 80070fe:	020b      	lsls	r3, r1, #8
 8007100:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007104:	0202      	lsls	r2, r0, #8
 8007106:	6979      	ldr	r1, [r7, #20]
 8007108:	6849      	ldr	r1, [r1, #4]
 800710a:	0849      	lsrs	r1, r1, #1
 800710c:	2000      	movs	r0, #0
 800710e:	460c      	mov	r4, r1
 8007110:	4605      	mov	r5, r0
 8007112:	eb12 0804 	adds.w	r8, r2, r4
 8007116:	eb43 0905 	adc.w	r9, r3, r5
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	469a      	mov	sl, r3
 8007122:	4693      	mov	fp, r2
 8007124:	4652      	mov	r2, sl
 8007126:	465b      	mov	r3, fp
 8007128:	4640      	mov	r0, r8
 800712a:	4649      	mov	r1, r9
 800712c:	f7f9 f940 	bl	80003b0 <__aeabi_uldivmod>
 8007130:	4602      	mov	r2, r0
 8007132:	460b      	mov	r3, r1
 8007134:	4613      	mov	r3, r2
 8007136:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800713a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800713e:	d308      	bcc.n	8007152 <UART_SetConfig+0x9a2>
 8007140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007142:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007146:	d204      	bcs.n	8007152 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800714e:	60da      	str	r2, [r3, #12]
 8007150:	e17f      	b.n	8007452 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007158:	e17b      	b.n	8007452 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	69db      	ldr	r3, [r3, #28]
 800715e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007162:	f040 80bd 	bne.w	80072e0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8007166:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800716a:	2b20      	cmp	r3, #32
 800716c:	dc48      	bgt.n	8007200 <UART_SetConfig+0xa50>
 800716e:	2b00      	cmp	r3, #0
 8007170:	db7b      	blt.n	800726a <UART_SetConfig+0xaba>
 8007172:	2b20      	cmp	r3, #32
 8007174:	d879      	bhi.n	800726a <UART_SetConfig+0xaba>
 8007176:	a201      	add	r2, pc, #4	@ (adr r2, 800717c <UART_SetConfig+0x9cc>)
 8007178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800717c:	08007207 	.word	0x08007207
 8007180:	0800720f 	.word	0x0800720f
 8007184:	0800726b 	.word	0x0800726b
 8007188:	0800726b 	.word	0x0800726b
 800718c:	08007217 	.word	0x08007217
 8007190:	0800726b 	.word	0x0800726b
 8007194:	0800726b 	.word	0x0800726b
 8007198:	0800726b 	.word	0x0800726b
 800719c:	08007227 	.word	0x08007227
 80071a0:	0800726b 	.word	0x0800726b
 80071a4:	0800726b 	.word	0x0800726b
 80071a8:	0800726b 	.word	0x0800726b
 80071ac:	0800726b 	.word	0x0800726b
 80071b0:	0800726b 	.word	0x0800726b
 80071b4:	0800726b 	.word	0x0800726b
 80071b8:	0800726b 	.word	0x0800726b
 80071bc:	08007237 	.word	0x08007237
 80071c0:	0800726b 	.word	0x0800726b
 80071c4:	0800726b 	.word	0x0800726b
 80071c8:	0800726b 	.word	0x0800726b
 80071cc:	0800726b 	.word	0x0800726b
 80071d0:	0800726b 	.word	0x0800726b
 80071d4:	0800726b 	.word	0x0800726b
 80071d8:	0800726b 	.word	0x0800726b
 80071dc:	0800726b 	.word	0x0800726b
 80071e0:	0800726b 	.word	0x0800726b
 80071e4:	0800726b 	.word	0x0800726b
 80071e8:	0800726b 	.word	0x0800726b
 80071ec:	0800726b 	.word	0x0800726b
 80071f0:	0800726b 	.word	0x0800726b
 80071f4:	0800726b 	.word	0x0800726b
 80071f8:	0800726b 	.word	0x0800726b
 80071fc:	0800725d 	.word	0x0800725d
 8007200:	2b40      	cmp	r3, #64	@ 0x40
 8007202:	d02e      	beq.n	8007262 <UART_SetConfig+0xab2>
 8007204:	e031      	b.n	800726a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007206:	f7fc fa11 	bl	800362c <HAL_RCC_GetPCLK1Freq>
 800720a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800720c:	e033      	b.n	8007276 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800720e:	f7fc fa23 	bl	8003658 <HAL_RCC_GetPCLK2Freq>
 8007212:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007214:	e02f      	b.n	8007276 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007216:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800721a:	4618      	mov	r0, r3
 800721c:	f7fd fbe8 	bl	80049f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007222:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007224:	e027      	b.n	8007276 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007226:	f107 0318 	add.w	r3, r7, #24
 800722a:	4618      	mov	r0, r3
 800722c:	f7fd fd34 	bl	8004c98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007234:	e01f      	b.n	8007276 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007236:	4b69      	ldr	r3, [pc, #420]	@ (80073dc <UART_SetConfig+0xc2c>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 0320 	and.w	r3, r3, #32
 800723e:	2b00      	cmp	r3, #0
 8007240:	d009      	beq.n	8007256 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007242:	4b66      	ldr	r3, [pc, #408]	@ (80073dc <UART_SetConfig+0xc2c>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	08db      	lsrs	r3, r3, #3
 8007248:	f003 0303 	and.w	r3, r3, #3
 800724c:	4a64      	ldr	r2, [pc, #400]	@ (80073e0 <UART_SetConfig+0xc30>)
 800724e:	fa22 f303 	lsr.w	r3, r2, r3
 8007252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007254:	e00f      	b.n	8007276 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8007256:	4b62      	ldr	r3, [pc, #392]	@ (80073e0 <UART_SetConfig+0xc30>)
 8007258:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800725a:	e00c      	b.n	8007276 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800725c:	4b61      	ldr	r3, [pc, #388]	@ (80073e4 <UART_SetConfig+0xc34>)
 800725e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007260:	e009      	b.n	8007276 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007262:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007268:	e005      	b.n	8007276 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800726a:	2300      	movs	r3, #0
 800726c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007274:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007278:	2b00      	cmp	r3, #0
 800727a:	f000 80ea 	beq.w	8007452 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007282:	4a55      	ldr	r2, [pc, #340]	@ (80073d8 <UART_SetConfig+0xc28>)
 8007284:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007288:	461a      	mov	r2, r3
 800728a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800728c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007290:	005a      	lsls	r2, r3, #1
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	085b      	lsrs	r3, r3, #1
 8007298:	441a      	add	r2, r3
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	fbb2 f3f3 	udiv	r3, r2, r3
 80072a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072a6:	2b0f      	cmp	r3, #15
 80072a8:	d916      	bls.n	80072d8 <UART_SetConfig+0xb28>
 80072aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072b0:	d212      	bcs.n	80072d8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80072b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	f023 030f 	bic.w	r3, r3, #15
 80072ba:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80072bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072be:	085b      	lsrs	r3, r3, #1
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	f003 0307 	and.w	r3, r3, #7
 80072c6:	b29a      	uxth	r2, r3
 80072c8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80072ca:	4313      	orrs	r3, r2
 80072cc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80072d4:	60da      	str	r2, [r3, #12]
 80072d6:	e0bc      	b.n	8007452 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80072de:	e0b8      	b.n	8007452 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80072e0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80072e4:	2b20      	cmp	r3, #32
 80072e6:	dc4b      	bgt.n	8007380 <UART_SetConfig+0xbd0>
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	f2c0 8087 	blt.w	80073fc <UART_SetConfig+0xc4c>
 80072ee:	2b20      	cmp	r3, #32
 80072f0:	f200 8084 	bhi.w	80073fc <UART_SetConfig+0xc4c>
 80072f4:	a201      	add	r2, pc, #4	@ (adr r2, 80072fc <UART_SetConfig+0xb4c>)
 80072f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072fa:	bf00      	nop
 80072fc:	08007387 	.word	0x08007387
 8007300:	0800738f 	.word	0x0800738f
 8007304:	080073fd 	.word	0x080073fd
 8007308:	080073fd 	.word	0x080073fd
 800730c:	08007397 	.word	0x08007397
 8007310:	080073fd 	.word	0x080073fd
 8007314:	080073fd 	.word	0x080073fd
 8007318:	080073fd 	.word	0x080073fd
 800731c:	080073a7 	.word	0x080073a7
 8007320:	080073fd 	.word	0x080073fd
 8007324:	080073fd 	.word	0x080073fd
 8007328:	080073fd 	.word	0x080073fd
 800732c:	080073fd 	.word	0x080073fd
 8007330:	080073fd 	.word	0x080073fd
 8007334:	080073fd 	.word	0x080073fd
 8007338:	080073fd 	.word	0x080073fd
 800733c:	080073b7 	.word	0x080073b7
 8007340:	080073fd 	.word	0x080073fd
 8007344:	080073fd 	.word	0x080073fd
 8007348:	080073fd 	.word	0x080073fd
 800734c:	080073fd 	.word	0x080073fd
 8007350:	080073fd 	.word	0x080073fd
 8007354:	080073fd 	.word	0x080073fd
 8007358:	080073fd 	.word	0x080073fd
 800735c:	080073fd 	.word	0x080073fd
 8007360:	080073fd 	.word	0x080073fd
 8007364:	080073fd 	.word	0x080073fd
 8007368:	080073fd 	.word	0x080073fd
 800736c:	080073fd 	.word	0x080073fd
 8007370:	080073fd 	.word	0x080073fd
 8007374:	080073fd 	.word	0x080073fd
 8007378:	080073fd 	.word	0x080073fd
 800737c:	080073ef 	.word	0x080073ef
 8007380:	2b40      	cmp	r3, #64	@ 0x40
 8007382:	d037      	beq.n	80073f4 <UART_SetConfig+0xc44>
 8007384:	e03a      	b.n	80073fc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007386:	f7fc f951 	bl	800362c <HAL_RCC_GetPCLK1Freq>
 800738a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800738c:	e03c      	b.n	8007408 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800738e:	f7fc f963 	bl	8003658 <HAL_RCC_GetPCLK2Freq>
 8007392:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007394:	e038      	b.n	8007408 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007396:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800739a:	4618      	mov	r0, r3
 800739c:	f7fd fb28 	bl	80049f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80073a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073a4:	e030      	b.n	8007408 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073a6:	f107 0318 	add.w	r3, r7, #24
 80073aa:	4618      	mov	r0, r3
 80073ac:	f7fd fc74 	bl	8004c98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073b4:	e028      	b.n	8007408 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073b6:	4b09      	ldr	r3, [pc, #36]	@ (80073dc <UART_SetConfig+0xc2c>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f003 0320 	and.w	r3, r3, #32
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d012      	beq.n	80073e8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80073c2:	4b06      	ldr	r3, [pc, #24]	@ (80073dc <UART_SetConfig+0xc2c>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	08db      	lsrs	r3, r3, #3
 80073c8:	f003 0303 	and.w	r3, r3, #3
 80073cc:	4a04      	ldr	r2, [pc, #16]	@ (80073e0 <UART_SetConfig+0xc30>)
 80073ce:	fa22 f303 	lsr.w	r3, r2, r3
 80073d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80073d4:	e018      	b.n	8007408 <UART_SetConfig+0xc58>
 80073d6:	bf00      	nop
 80073d8:	0800b8ac 	.word	0x0800b8ac
 80073dc:	58024400 	.word	0x58024400
 80073e0:	03d09000 	.word	0x03d09000
 80073e4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80073e8:	4b24      	ldr	r3, [pc, #144]	@ (800747c <UART_SetConfig+0xccc>)
 80073ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073ec:	e00c      	b.n	8007408 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80073ee:	4b24      	ldr	r3, [pc, #144]	@ (8007480 <UART_SetConfig+0xcd0>)
 80073f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073f2:	e009      	b.n	8007408 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073fa:	e005      	b.n	8007408 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80073fc:	2300      	movs	r3, #0
 80073fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007406:	bf00      	nop
    }

    if (pclk != 0U)
 8007408:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800740a:	2b00      	cmp	r3, #0
 800740c:	d021      	beq.n	8007452 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007412:	4a1c      	ldr	r2, [pc, #112]	@ (8007484 <UART_SetConfig+0xcd4>)
 8007414:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007418:	461a      	mov	r2, r3
 800741a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800741c:	fbb3 f2f2 	udiv	r2, r3, r2
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	085b      	lsrs	r3, r3, #1
 8007426:	441a      	add	r2, r3
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007430:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007434:	2b0f      	cmp	r3, #15
 8007436:	d909      	bls.n	800744c <UART_SetConfig+0xc9c>
 8007438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800743a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800743e:	d205      	bcs.n	800744c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007442:	b29a      	uxth	r2, r3
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	60da      	str	r2, [r3, #12]
 800744a:	e002      	b.n	8007452 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	2201      	movs	r2, #1
 8007456:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	2201      	movs	r2, #1
 800745e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	2200      	movs	r2, #0
 8007466:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	2200      	movs	r2, #0
 800746c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800746e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007472:	4618      	mov	r0, r3
 8007474:	3748      	adds	r7, #72	@ 0x48
 8007476:	46bd      	mov	sp, r7
 8007478:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800747c:	03d09000 	.word	0x03d09000
 8007480:	003d0900 	.word	0x003d0900
 8007484:	0800b8ac 	.word	0x0800b8ac

08007488 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007494:	f003 0308 	and.w	r3, r3, #8
 8007498:	2b00      	cmp	r3, #0
 800749a:	d00a      	beq.n	80074b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	430a      	orrs	r2, r1
 80074b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074b6:	f003 0301 	and.w	r3, r3, #1
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00a      	beq.n	80074d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	430a      	orrs	r2, r1
 80074d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074d8:	f003 0302 	and.w	r3, r3, #2
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d00a      	beq.n	80074f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	430a      	orrs	r2, r1
 80074f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074fa:	f003 0304 	and.w	r3, r3, #4
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d00a      	beq.n	8007518 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	430a      	orrs	r2, r1
 8007516:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800751c:	f003 0310 	and.w	r3, r3, #16
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00a      	beq.n	800753a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	430a      	orrs	r2, r1
 8007538:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800753e:	f003 0320 	and.w	r3, r3, #32
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00a      	beq.n	800755c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	430a      	orrs	r2, r1
 800755a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007564:	2b00      	cmp	r3, #0
 8007566:	d01a      	beq.n	800759e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	430a      	orrs	r2, r1
 800757c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007582:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007586:	d10a      	bne.n	800759e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	430a      	orrs	r2, r1
 800759c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d00a      	beq.n	80075c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	430a      	orrs	r2, r1
 80075be:	605a      	str	r2, [r3, #4]
  }
}
 80075c0:	bf00      	nop
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b098      	sub	sp, #96	@ 0x60
 80075d0:	af02      	add	r7, sp, #8
 80075d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80075dc:	f7fa fd32 	bl	8002044 <HAL_GetTick>
 80075e0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f003 0308 	and.w	r3, r3, #8
 80075ec:	2b08      	cmp	r3, #8
 80075ee:	d12f      	bne.n	8007650 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80075f4:	9300      	str	r3, [sp, #0]
 80075f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075f8:	2200      	movs	r2, #0
 80075fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 f88e 	bl	8007720 <UART_WaitOnFlagUntilTimeout>
 8007604:	4603      	mov	r3, r0
 8007606:	2b00      	cmp	r3, #0
 8007608:	d022      	beq.n	8007650 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007612:	e853 3f00 	ldrex	r3, [r3]
 8007616:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800761a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800761e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	461a      	mov	r2, r3
 8007626:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007628:	647b      	str	r3, [r7, #68]	@ 0x44
 800762a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800762c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800762e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007630:	e841 2300 	strex	r3, r2, [r1]
 8007634:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007636:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007638:	2b00      	cmp	r3, #0
 800763a:	d1e6      	bne.n	800760a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2220      	movs	r2, #32
 8007640:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800764c:	2303      	movs	r3, #3
 800764e:	e063      	b.n	8007718 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f003 0304 	and.w	r3, r3, #4
 800765a:	2b04      	cmp	r3, #4
 800765c:	d149      	bne.n	80076f2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800765e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007662:	9300      	str	r3, [sp, #0]
 8007664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007666:	2200      	movs	r2, #0
 8007668:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 f857 	bl	8007720 <UART_WaitOnFlagUntilTimeout>
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d03c      	beq.n	80076f2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800767e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007680:	e853 3f00 	ldrex	r3, [r3]
 8007684:	623b      	str	r3, [r7, #32]
   return(result);
 8007686:	6a3b      	ldr	r3, [r7, #32]
 8007688:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800768c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	461a      	mov	r2, r3
 8007694:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007696:	633b      	str	r3, [r7, #48]	@ 0x30
 8007698:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800769c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800769e:	e841 2300 	strex	r3, r2, [r1]
 80076a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80076a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d1e6      	bne.n	8007678 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	3308      	adds	r3, #8
 80076b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	e853 3f00 	ldrex	r3, [r3]
 80076b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f023 0301 	bic.w	r3, r3, #1
 80076c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	3308      	adds	r3, #8
 80076c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076ca:	61fa      	str	r2, [r7, #28]
 80076cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ce:	69b9      	ldr	r1, [r7, #24]
 80076d0:	69fa      	ldr	r2, [r7, #28]
 80076d2:	e841 2300 	strex	r3, r2, [r1]
 80076d6:	617b      	str	r3, [r7, #20]
   return(result);
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d1e5      	bne.n	80076aa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2220      	movs	r2, #32
 80076e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076ee:	2303      	movs	r3, #3
 80076f0:	e012      	b.n	8007718 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2220      	movs	r2, #32
 80076f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2220      	movs	r2, #32
 80076fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	3758      	adds	r7, #88	@ 0x58
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	603b      	str	r3, [r7, #0]
 800772c:	4613      	mov	r3, r2
 800772e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007730:	e04f      	b.n	80077d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007738:	d04b      	beq.n	80077d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800773a:	f7fa fc83 	bl	8002044 <HAL_GetTick>
 800773e:	4602      	mov	r2, r0
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	1ad3      	subs	r3, r2, r3
 8007744:	69ba      	ldr	r2, [r7, #24]
 8007746:	429a      	cmp	r2, r3
 8007748:	d302      	bcc.n	8007750 <UART_WaitOnFlagUntilTimeout+0x30>
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d101      	bne.n	8007754 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007750:	2303      	movs	r3, #3
 8007752:	e04e      	b.n	80077f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f003 0304 	and.w	r3, r3, #4
 800775e:	2b00      	cmp	r3, #0
 8007760:	d037      	beq.n	80077d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	2b80      	cmp	r3, #128	@ 0x80
 8007766:	d034      	beq.n	80077d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	2b40      	cmp	r3, #64	@ 0x40
 800776c:	d031      	beq.n	80077d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	69db      	ldr	r3, [r3, #28]
 8007774:	f003 0308 	and.w	r3, r3, #8
 8007778:	2b08      	cmp	r3, #8
 800777a:	d110      	bne.n	800779e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2208      	movs	r2, #8
 8007782:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	f000 f839 	bl	80077fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2208      	movs	r2, #8
 800778e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2200      	movs	r2, #0
 8007796:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	e029      	b.n	80077f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	69db      	ldr	r3, [r3, #28]
 80077a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077ac:	d111      	bne.n	80077d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80077b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077b8:	68f8      	ldr	r0, [r7, #12]
 80077ba:	f000 f81f 	bl	80077fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2220      	movs	r2, #32
 80077c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2200      	movs	r2, #0
 80077ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80077ce:	2303      	movs	r3, #3
 80077d0:	e00f      	b.n	80077f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	69da      	ldr	r2, [r3, #28]
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	4013      	ands	r3, r2
 80077dc:	68ba      	ldr	r2, [r7, #8]
 80077de:	429a      	cmp	r2, r3
 80077e0:	bf0c      	ite	eq
 80077e2:	2301      	moveq	r3, #1
 80077e4:	2300      	movne	r3, #0
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	461a      	mov	r2, r3
 80077ea:	79fb      	ldrb	r3, [r7, #7]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d0a0      	beq.n	8007732 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
	...

080077fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b095      	sub	sp, #84	@ 0x54
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800780c:	e853 3f00 	ldrex	r3, [r3]
 8007810:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007814:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007818:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	461a      	mov	r2, r3
 8007820:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007822:	643b      	str	r3, [r7, #64]	@ 0x40
 8007824:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007826:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007828:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800782a:	e841 2300 	strex	r3, r2, [r1]
 800782e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007832:	2b00      	cmp	r3, #0
 8007834:	d1e6      	bne.n	8007804 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	3308      	adds	r3, #8
 800783c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783e:	6a3b      	ldr	r3, [r7, #32]
 8007840:	e853 3f00 	ldrex	r3, [r3]
 8007844:	61fb      	str	r3, [r7, #28]
   return(result);
 8007846:	69fa      	ldr	r2, [r7, #28]
 8007848:	4b1e      	ldr	r3, [pc, #120]	@ (80078c4 <UART_EndRxTransfer+0xc8>)
 800784a:	4013      	ands	r3, r2
 800784c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	3308      	adds	r3, #8
 8007854:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007856:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007858:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800785c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800785e:	e841 2300 	strex	r3, r2, [r1]
 8007862:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007866:	2b00      	cmp	r3, #0
 8007868:	d1e5      	bne.n	8007836 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800786e:	2b01      	cmp	r3, #1
 8007870:	d118      	bne.n	80078a4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	e853 3f00 	ldrex	r3, [r3]
 800787e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	f023 0310 	bic.w	r3, r3, #16
 8007886:	647b      	str	r3, [r7, #68]	@ 0x44
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	461a      	mov	r2, r3
 800788e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007890:	61bb      	str	r3, [r7, #24]
 8007892:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007894:	6979      	ldr	r1, [r7, #20]
 8007896:	69ba      	ldr	r2, [r7, #24]
 8007898:	e841 2300 	strex	r3, r2, [r1]
 800789c:	613b      	str	r3, [r7, #16]
   return(result);
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d1e6      	bne.n	8007872 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2220      	movs	r2, #32
 80078a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80078b8:	bf00      	nop
 80078ba:	3754      	adds	r7, #84	@ 0x54
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr
 80078c4:	effffffe 	.word	0xeffffffe

080078c8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b085      	sub	sp, #20
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d101      	bne.n	80078de <HAL_UARTEx_DisableFifoMode+0x16>
 80078da:	2302      	movs	r3, #2
 80078dc:	e027      	b.n	800792e <HAL_UARTEx_DisableFifoMode+0x66>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2201      	movs	r2, #1
 80078e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2224      	movs	r2, #36	@ 0x24
 80078ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f022 0201 	bic.w	r2, r2, #1
 8007904:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800790c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2220      	movs	r2, #32
 8007920:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3714      	adds	r7, #20
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr

0800793a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b084      	sub	sp, #16
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
 8007942:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800794a:	2b01      	cmp	r3, #1
 800794c:	d101      	bne.n	8007952 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800794e:	2302      	movs	r3, #2
 8007950:	e02d      	b.n	80079ae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2201      	movs	r2, #1
 8007956:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2224      	movs	r2, #36	@ 0x24
 800795e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f022 0201 	bic.w	r2, r2, #1
 8007978:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	683a      	ldr	r2, [r7, #0]
 800798a:	430a      	orrs	r2, r1
 800798c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 f850 	bl	8007a34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	68fa      	ldr	r2, [r7, #12]
 800799a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2220      	movs	r2, #32
 80079a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b084      	sub	sp, #16
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
 80079be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d101      	bne.n	80079ce <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80079ca:	2302      	movs	r3, #2
 80079cc:	e02d      	b.n	8007a2a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2201      	movs	r2, #1
 80079d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2224      	movs	r2, #36	@ 0x24
 80079da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f022 0201 	bic.w	r2, r2, #1
 80079f4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	683a      	ldr	r2, [r7, #0]
 8007a06:	430a      	orrs	r2, r1
 8007a08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 f812 	bl	8007a34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	68fa      	ldr	r2, [r7, #12]
 8007a16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2220      	movs	r2, #32
 8007a1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a28:	2300      	movs	r3, #0
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3710      	adds	r7, #16
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
	...

08007a34 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d108      	bne.n	8007a56 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007a54:	e031      	b.n	8007aba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007a56:	2310      	movs	r3, #16
 8007a58:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007a5a:	2310      	movs	r3, #16
 8007a5c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	0e5b      	lsrs	r3, r3, #25
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	f003 0307 	and.w	r3, r3, #7
 8007a6c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	0f5b      	lsrs	r3, r3, #29
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	f003 0307 	and.w	r3, r3, #7
 8007a7c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a7e:	7bbb      	ldrb	r3, [r7, #14]
 8007a80:	7b3a      	ldrb	r2, [r7, #12]
 8007a82:	4911      	ldr	r1, [pc, #68]	@ (8007ac8 <UARTEx_SetNbDataToProcess+0x94>)
 8007a84:	5c8a      	ldrb	r2, [r1, r2]
 8007a86:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007a8a:	7b3a      	ldrb	r2, [r7, #12]
 8007a8c:	490f      	ldr	r1, [pc, #60]	@ (8007acc <UARTEx_SetNbDataToProcess+0x98>)
 8007a8e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a90:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a94:	b29a      	uxth	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a9c:	7bfb      	ldrb	r3, [r7, #15]
 8007a9e:	7b7a      	ldrb	r2, [r7, #13]
 8007aa0:	4909      	ldr	r1, [pc, #36]	@ (8007ac8 <UARTEx_SetNbDataToProcess+0x94>)
 8007aa2:	5c8a      	ldrb	r2, [r1, r2]
 8007aa4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007aa8:	7b7a      	ldrb	r2, [r7, #13]
 8007aaa:	4908      	ldr	r1, [pc, #32]	@ (8007acc <UARTEx_SetNbDataToProcess+0x98>)
 8007aac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007aae:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ab2:	b29a      	uxth	r2, r3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007aba:	bf00      	nop
 8007abc:	3714      	adds	r7, #20
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr
 8007ac6:	bf00      	nop
 8007ac8:	0800b8c4 	.word	0x0800b8c4
 8007acc:	0800b8cc 	.word	0x0800b8cc

08007ad0 <std>:
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	b510      	push	{r4, lr}
 8007ad4:	4604      	mov	r4, r0
 8007ad6:	e9c0 3300 	strd	r3, r3, [r0]
 8007ada:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ade:	6083      	str	r3, [r0, #8]
 8007ae0:	8181      	strh	r1, [r0, #12]
 8007ae2:	6643      	str	r3, [r0, #100]	@ 0x64
 8007ae4:	81c2      	strh	r2, [r0, #14]
 8007ae6:	6183      	str	r3, [r0, #24]
 8007ae8:	4619      	mov	r1, r3
 8007aea:	2208      	movs	r2, #8
 8007aec:	305c      	adds	r0, #92	@ 0x5c
 8007aee:	f000 fa19 	bl	8007f24 <memset>
 8007af2:	4b0d      	ldr	r3, [pc, #52]	@ (8007b28 <std+0x58>)
 8007af4:	6263      	str	r3, [r4, #36]	@ 0x24
 8007af6:	4b0d      	ldr	r3, [pc, #52]	@ (8007b2c <std+0x5c>)
 8007af8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007afa:	4b0d      	ldr	r3, [pc, #52]	@ (8007b30 <std+0x60>)
 8007afc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007afe:	4b0d      	ldr	r3, [pc, #52]	@ (8007b34 <std+0x64>)
 8007b00:	6323      	str	r3, [r4, #48]	@ 0x30
 8007b02:	4b0d      	ldr	r3, [pc, #52]	@ (8007b38 <std+0x68>)
 8007b04:	6224      	str	r4, [r4, #32]
 8007b06:	429c      	cmp	r4, r3
 8007b08:	d006      	beq.n	8007b18 <std+0x48>
 8007b0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007b0e:	4294      	cmp	r4, r2
 8007b10:	d002      	beq.n	8007b18 <std+0x48>
 8007b12:	33d0      	adds	r3, #208	@ 0xd0
 8007b14:	429c      	cmp	r4, r3
 8007b16:	d105      	bne.n	8007b24 <std+0x54>
 8007b18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b20:	f000 ba78 	b.w	8008014 <__retarget_lock_init_recursive>
 8007b24:	bd10      	pop	{r4, pc}
 8007b26:	bf00      	nop
 8007b28:	08007d75 	.word	0x08007d75
 8007b2c:	08007d97 	.word	0x08007d97
 8007b30:	08007dcf 	.word	0x08007dcf
 8007b34:	08007df3 	.word	0x08007df3
 8007b38:	24003ca8 	.word	0x24003ca8

08007b3c <stdio_exit_handler>:
 8007b3c:	4a02      	ldr	r2, [pc, #8]	@ (8007b48 <stdio_exit_handler+0xc>)
 8007b3e:	4903      	ldr	r1, [pc, #12]	@ (8007b4c <stdio_exit_handler+0x10>)
 8007b40:	4803      	ldr	r0, [pc, #12]	@ (8007b50 <stdio_exit_handler+0x14>)
 8007b42:	f000 b869 	b.w	8007c18 <_fwalk_sglue>
 8007b46:	bf00      	nop
 8007b48:	24000014 	.word	0x24000014
 8007b4c:	08008b65 	.word	0x08008b65
 8007b50:	24000024 	.word	0x24000024

08007b54 <cleanup_stdio>:
 8007b54:	6841      	ldr	r1, [r0, #4]
 8007b56:	4b0c      	ldr	r3, [pc, #48]	@ (8007b88 <cleanup_stdio+0x34>)
 8007b58:	4299      	cmp	r1, r3
 8007b5a:	b510      	push	{r4, lr}
 8007b5c:	4604      	mov	r4, r0
 8007b5e:	d001      	beq.n	8007b64 <cleanup_stdio+0x10>
 8007b60:	f001 f800 	bl	8008b64 <_fflush_r>
 8007b64:	68a1      	ldr	r1, [r4, #8]
 8007b66:	4b09      	ldr	r3, [pc, #36]	@ (8007b8c <cleanup_stdio+0x38>)
 8007b68:	4299      	cmp	r1, r3
 8007b6a:	d002      	beq.n	8007b72 <cleanup_stdio+0x1e>
 8007b6c:	4620      	mov	r0, r4
 8007b6e:	f000 fff9 	bl	8008b64 <_fflush_r>
 8007b72:	68e1      	ldr	r1, [r4, #12]
 8007b74:	4b06      	ldr	r3, [pc, #24]	@ (8007b90 <cleanup_stdio+0x3c>)
 8007b76:	4299      	cmp	r1, r3
 8007b78:	d004      	beq.n	8007b84 <cleanup_stdio+0x30>
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b80:	f000 bff0 	b.w	8008b64 <_fflush_r>
 8007b84:	bd10      	pop	{r4, pc}
 8007b86:	bf00      	nop
 8007b88:	24003ca8 	.word	0x24003ca8
 8007b8c:	24003d10 	.word	0x24003d10
 8007b90:	24003d78 	.word	0x24003d78

08007b94 <global_stdio_init.part.0>:
 8007b94:	b510      	push	{r4, lr}
 8007b96:	4b0b      	ldr	r3, [pc, #44]	@ (8007bc4 <global_stdio_init.part.0+0x30>)
 8007b98:	4c0b      	ldr	r4, [pc, #44]	@ (8007bc8 <global_stdio_init.part.0+0x34>)
 8007b9a:	4a0c      	ldr	r2, [pc, #48]	@ (8007bcc <global_stdio_init.part.0+0x38>)
 8007b9c:	601a      	str	r2, [r3, #0]
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	2104      	movs	r1, #4
 8007ba4:	f7ff ff94 	bl	8007ad0 <std>
 8007ba8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007bac:	2201      	movs	r2, #1
 8007bae:	2109      	movs	r1, #9
 8007bb0:	f7ff ff8e 	bl	8007ad0 <std>
 8007bb4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007bb8:	2202      	movs	r2, #2
 8007bba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bbe:	2112      	movs	r1, #18
 8007bc0:	f7ff bf86 	b.w	8007ad0 <std>
 8007bc4:	24003de0 	.word	0x24003de0
 8007bc8:	24003ca8 	.word	0x24003ca8
 8007bcc:	08007b3d 	.word	0x08007b3d

08007bd0 <__sfp_lock_acquire>:
 8007bd0:	4801      	ldr	r0, [pc, #4]	@ (8007bd8 <__sfp_lock_acquire+0x8>)
 8007bd2:	f000 ba20 	b.w	8008016 <__retarget_lock_acquire_recursive>
 8007bd6:	bf00      	nop
 8007bd8:	24003de9 	.word	0x24003de9

08007bdc <__sfp_lock_release>:
 8007bdc:	4801      	ldr	r0, [pc, #4]	@ (8007be4 <__sfp_lock_release+0x8>)
 8007bde:	f000 ba1b 	b.w	8008018 <__retarget_lock_release_recursive>
 8007be2:	bf00      	nop
 8007be4:	24003de9 	.word	0x24003de9

08007be8 <__sinit>:
 8007be8:	b510      	push	{r4, lr}
 8007bea:	4604      	mov	r4, r0
 8007bec:	f7ff fff0 	bl	8007bd0 <__sfp_lock_acquire>
 8007bf0:	6a23      	ldr	r3, [r4, #32]
 8007bf2:	b11b      	cbz	r3, 8007bfc <__sinit+0x14>
 8007bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bf8:	f7ff bff0 	b.w	8007bdc <__sfp_lock_release>
 8007bfc:	4b04      	ldr	r3, [pc, #16]	@ (8007c10 <__sinit+0x28>)
 8007bfe:	6223      	str	r3, [r4, #32]
 8007c00:	4b04      	ldr	r3, [pc, #16]	@ (8007c14 <__sinit+0x2c>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d1f5      	bne.n	8007bf4 <__sinit+0xc>
 8007c08:	f7ff ffc4 	bl	8007b94 <global_stdio_init.part.0>
 8007c0c:	e7f2      	b.n	8007bf4 <__sinit+0xc>
 8007c0e:	bf00      	nop
 8007c10:	08007b55 	.word	0x08007b55
 8007c14:	24003de0 	.word	0x24003de0

08007c18 <_fwalk_sglue>:
 8007c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c1c:	4607      	mov	r7, r0
 8007c1e:	4688      	mov	r8, r1
 8007c20:	4614      	mov	r4, r2
 8007c22:	2600      	movs	r6, #0
 8007c24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c28:	f1b9 0901 	subs.w	r9, r9, #1
 8007c2c:	d505      	bpl.n	8007c3a <_fwalk_sglue+0x22>
 8007c2e:	6824      	ldr	r4, [r4, #0]
 8007c30:	2c00      	cmp	r4, #0
 8007c32:	d1f7      	bne.n	8007c24 <_fwalk_sglue+0xc>
 8007c34:	4630      	mov	r0, r6
 8007c36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c3a:	89ab      	ldrh	r3, [r5, #12]
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d907      	bls.n	8007c50 <_fwalk_sglue+0x38>
 8007c40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c44:	3301      	adds	r3, #1
 8007c46:	d003      	beq.n	8007c50 <_fwalk_sglue+0x38>
 8007c48:	4629      	mov	r1, r5
 8007c4a:	4638      	mov	r0, r7
 8007c4c:	47c0      	blx	r8
 8007c4e:	4306      	orrs	r6, r0
 8007c50:	3568      	adds	r5, #104	@ 0x68
 8007c52:	e7e9      	b.n	8007c28 <_fwalk_sglue+0x10>

08007c54 <iprintf>:
 8007c54:	b40f      	push	{r0, r1, r2, r3}
 8007c56:	b507      	push	{r0, r1, r2, lr}
 8007c58:	4906      	ldr	r1, [pc, #24]	@ (8007c74 <iprintf+0x20>)
 8007c5a:	ab04      	add	r3, sp, #16
 8007c5c:	6808      	ldr	r0, [r1, #0]
 8007c5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c62:	6881      	ldr	r1, [r0, #8]
 8007c64:	9301      	str	r3, [sp, #4]
 8007c66:	f000 fc53 	bl	8008510 <_vfiprintf_r>
 8007c6a:	b003      	add	sp, #12
 8007c6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c70:	b004      	add	sp, #16
 8007c72:	4770      	bx	lr
 8007c74:	24000020 	.word	0x24000020

08007c78 <_puts_r>:
 8007c78:	6a03      	ldr	r3, [r0, #32]
 8007c7a:	b570      	push	{r4, r5, r6, lr}
 8007c7c:	6884      	ldr	r4, [r0, #8]
 8007c7e:	4605      	mov	r5, r0
 8007c80:	460e      	mov	r6, r1
 8007c82:	b90b      	cbnz	r3, 8007c88 <_puts_r+0x10>
 8007c84:	f7ff ffb0 	bl	8007be8 <__sinit>
 8007c88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007c8a:	07db      	lsls	r3, r3, #31
 8007c8c:	d405      	bmi.n	8007c9a <_puts_r+0x22>
 8007c8e:	89a3      	ldrh	r3, [r4, #12]
 8007c90:	0598      	lsls	r0, r3, #22
 8007c92:	d402      	bmi.n	8007c9a <_puts_r+0x22>
 8007c94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c96:	f000 f9be 	bl	8008016 <__retarget_lock_acquire_recursive>
 8007c9a:	89a3      	ldrh	r3, [r4, #12]
 8007c9c:	0719      	lsls	r1, r3, #28
 8007c9e:	d502      	bpl.n	8007ca6 <_puts_r+0x2e>
 8007ca0:	6923      	ldr	r3, [r4, #16]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d135      	bne.n	8007d12 <_puts_r+0x9a>
 8007ca6:	4621      	mov	r1, r4
 8007ca8:	4628      	mov	r0, r5
 8007caa:	f000 f8e5 	bl	8007e78 <__swsetup_r>
 8007cae:	b380      	cbz	r0, 8007d12 <_puts_r+0x9a>
 8007cb0:	f04f 35ff 	mov.w	r5, #4294967295
 8007cb4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007cb6:	07da      	lsls	r2, r3, #31
 8007cb8:	d405      	bmi.n	8007cc6 <_puts_r+0x4e>
 8007cba:	89a3      	ldrh	r3, [r4, #12]
 8007cbc:	059b      	lsls	r3, r3, #22
 8007cbe:	d402      	bmi.n	8007cc6 <_puts_r+0x4e>
 8007cc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007cc2:	f000 f9a9 	bl	8008018 <__retarget_lock_release_recursive>
 8007cc6:	4628      	mov	r0, r5
 8007cc8:	bd70      	pop	{r4, r5, r6, pc}
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	da04      	bge.n	8007cd8 <_puts_r+0x60>
 8007cce:	69a2      	ldr	r2, [r4, #24]
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	dc17      	bgt.n	8007d04 <_puts_r+0x8c>
 8007cd4:	290a      	cmp	r1, #10
 8007cd6:	d015      	beq.n	8007d04 <_puts_r+0x8c>
 8007cd8:	6823      	ldr	r3, [r4, #0]
 8007cda:	1c5a      	adds	r2, r3, #1
 8007cdc:	6022      	str	r2, [r4, #0]
 8007cde:	7019      	strb	r1, [r3, #0]
 8007ce0:	68a3      	ldr	r3, [r4, #8]
 8007ce2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	60a3      	str	r3, [r4, #8]
 8007cea:	2900      	cmp	r1, #0
 8007cec:	d1ed      	bne.n	8007cca <_puts_r+0x52>
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	da11      	bge.n	8007d16 <_puts_r+0x9e>
 8007cf2:	4622      	mov	r2, r4
 8007cf4:	210a      	movs	r1, #10
 8007cf6:	4628      	mov	r0, r5
 8007cf8:	f000 f87f 	bl	8007dfa <__swbuf_r>
 8007cfc:	3001      	adds	r0, #1
 8007cfe:	d0d7      	beq.n	8007cb0 <_puts_r+0x38>
 8007d00:	250a      	movs	r5, #10
 8007d02:	e7d7      	b.n	8007cb4 <_puts_r+0x3c>
 8007d04:	4622      	mov	r2, r4
 8007d06:	4628      	mov	r0, r5
 8007d08:	f000 f877 	bl	8007dfa <__swbuf_r>
 8007d0c:	3001      	adds	r0, #1
 8007d0e:	d1e7      	bne.n	8007ce0 <_puts_r+0x68>
 8007d10:	e7ce      	b.n	8007cb0 <_puts_r+0x38>
 8007d12:	3e01      	subs	r6, #1
 8007d14:	e7e4      	b.n	8007ce0 <_puts_r+0x68>
 8007d16:	6823      	ldr	r3, [r4, #0]
 8007d18:	1c5a      	adds	r2, r3, #1
 8007d1a:	6022      	str	r2, [r4, #0]
 8007d1c:	220a      	movs	r2, #10
 8007d1e:	701a      	strb	r2, [r3, #0]
 8007d20:	e7ee      	b.n	8007d00 <_puts_r+0x88>
	...

08007d24 <puts>:
 8007d24:	4b02      	ldr	r3, [pc, #8]	@ (8007d30 <puts+0xc>)
 8007d26:	4601      	mov	r1, r0
 8007d28:	6818      	ldr	r0, [r3, #0]
 8007d2a:	f7ff bfa5 	b.w	8007c78 <_puts_r>
 8007d2e:	bf00      	nop
 8007d30:	24000020 	.word	0x24000020

08007d34 <siprintf>:
 8007d34:	b40e      	push	{r1, r2, r3}
 8007d36:	b500      	push	{lr}
 8007d38:	b09c      	sub	sp, #112	@ 0x70
 8007d3a:	ab1d      	add	r3, sp, #116	@ 0x74
 8007d3c:	9002      	str	r0, [sp, #8]
 8007d3e:	9006      	str	r0, [sp, #24]
 8007d40:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007d44:	4809      	ldr	r0, [pc, #36]	@ (8007d6c <siprintf+0x38>)
 8007d46:	9107      	str	r1, [sp, #28]
 8007d48:	9104      	str	r1, [sp, #16]
 8007d4a:	4909      	ldr	r1, [pc, #36]	@ (8007d70 <siprintf+0x3c>)
 8007d4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d50:	9105      	str	r1, [sp, #20]
 8007d52:	6800      	ldr	r0, [r0, #0]
 8007d54:	9301      	str	r3, [sp, #4]
 8007d56:	a902      	add	r1, sp, #8
 8007d58:	f000 fab4 	bl	80082c4 <_svfiprintf_r>
 8007d5c:	9b02      	ldr	r3, [sp, #8]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	701a      	strb	r2, [r3, #0]
 8007d62:	b01c      	add	sp, #112	@ 0x70
 8007d64:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d68:	b003      	add	sp, #12
 8007d6a:	4770      	bx	lr
 8007d6c:	24000020 	.word	0x24000020
 8007d70:	ffff0208 	.word	0xffff0208

08007d74 <__sread>:
 8007d74:	b510      	push	{r4, lr}
 8007d76:	460c      	mov	r4, r1
 8007d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d7c:	f000 f8fc 	bl	8007f78 <_read_r>
 8007d80:	2800      	cmp	r0, #0
 8007d82:	bfab      	itete	ge
 8007d84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007d86:	89a3      	ldrhlt	r3, [r4, #12]
 8007d88:	181b      	addge	r3, r3, r0
 8007d8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007d8e:	bfac      	ite	ge
 8007d90:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007d92:	81a3      	strhlt	r3, [r4, #12]
 8007d94:	bd10      	pop	{r4, pc}

08007d96 <__swrite>:
 8007d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d9a:	461f      	mov	r7, r3
 8007d9c:	898b      	ldrh	r3, [r1, #12]
 8007d9e:	05db      	lsls	r3, r3, #23
 8007da0:	4605      	mov	r5, r0
 8007da2:	460c      	mov	r4, r1
 8007da4:	4616      	mov	r6, r2
 8007da6:	d505      	bpl.n	8007db4 <__swrite+0x1e>
 8007da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dac:	2302      	movs	r3, #2
 8007dae:	2200      	movs	r2, #0
 8007db0:	f000 f8d0 	bl	8007f54 <_lseek_r>
 8007db4:	89a3      	ldrh	r3, [r4, #12]
 8007db6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007dbe:	81a3      	strh	r3, [r4, #12]
 8007dc0:	4632      	mov	r2, r6
 8007dc2:	463b      	mov	r3, r7
 8007dc4:	4628      	mov	r0, r5
 8007dc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dca:	f000 b8e7 	b.w	8007f9c <_write_r>

08007dce <__sseek>:
 8007dce:	b510      	push	{r4, lr}
 8007dd0:	460c      	mov	r4, r1
 8007dd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dd6:	f000 f8bd 	bl	8007f54 <_lseek_r>
 8007dda:	1c43      	adds	r3, r0, #1
 8007ddc:	89a3      	ldrh	r3, [r4, #12]
 8007dde:	bf15      	itete	ne
 8007de0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007de2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007de6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007dea:	81a3      	strheq	r3, [r4, #12]
 8007dec:	bf18      	it	ne
 8007dee:	81a3      	strhne	r3, [r4, #12]
 8007df0:	bd10      	pop	{r4, pc}

08007df2 <__sclose>:
 8007df2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007df6:	f000 b89d 	b.w	8007f34 <_close_r>

08007dfa <__swbuf_r>:
 8007dfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dfc:	460e      	mov	r6, r1
 8007dfe:	4614      	mov	r4, r2
 8007e00:	4605      	mov	r5, r0
 8007e02:	b118      	cbz	r0, 8007e0c <__swbuf_r+0x12>
 8007e04:	6a03      	ldr	r3, [r0, #32]
 8007e06:	b90b      	cbnz	r3, 8007e0c <__swbuf_r+0x12>
 8007e08:	f7ff feee 	bl	8007be8 <__sinit>
 8007e0c:	69a3      	ldr	r3, [r4, #24]
 8007e0e:	60a3      	str	r3, [r4, #8]
 8007e10:	89a3      	ldrh	r3, [r4, #12]
 8007e12:	071a      	lsls	r2, r3, #28
 8007e14:	d501      	bpl.n	8007e1a <__swbuf_r+0x20>
 8007e16:	6923      	ldr	r3, [r4, #16]
 8007e18:	b943      	cbnz	r3, 8007e2c <__swbuf_r+0x32>
 8007e1a:	4621      	mov	r1, r4
 8007e1c:	4628      	mov	r0, r5
 8007e1e:	f000 f82b 	bl	8007e78 <__swsetup_r>
 8007e22:	b118      	cbz	r0, 8007e2c <__swbuf_r+0x32>
 8007e24:	f04f 37ff 	mov.w	r7, #4294967295
 8007e28:	4638      	mov	r0, r7
 8007e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e2c:	6823      	ldr	r3, [r4, #0]
 8007e2e:	6922      	ldr	r2, [r4, #16]
 8007e30:	1a98      	subs	r0, r3, r2
 8007e32:	6963      	ldr	r3, [r4, #20]
 8007e34:	b2f6      	uxtb	r6, r6
 8007e36:	4283      	cmp	r3, r0
 8007e38:	4637      	mov	r7, r6
 8007e3a:	dc05      	bgt.n	8007e48 <__swbuf_r+0x4e>
 8007e3c:	4621      	mov	r1, r4
 8007e3e:	4628      	mov	r0, r5
 8007e40:	f000 fe90 	bl	8008b64 <_fflush_r>
 8007e44:	2800      	cmp	r0, #0
 8007e46:	d1ed      	bne.n	8007e24 <__swbuf_r+0x2a>
 8007e48:	68a3      	ldr	r3, [r4, #8]
 8007e4a:	3b01      	subs	r3, #1
 8007e4c:	60a3      	str	r3, [r4, #8]
 8007e4e:	6823      	ldr	r3, [r4, #0]
 8007e50:	1c5a      	adds	r2, r3, #1
 8007e52:	6022      	str	r2, [r4, #0]
 8007e54:	701e      	strb	r6, [r3, #0]
 8007e56:	6962      	ldr	r2, [r4, #20]
 8007e58:	1c43      	adds	r3, r0, #1
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d004      	beq.n	8007e68 <__swbuf_r+0x6e>
 8007e5e:	89a3      	ldrh	r3, [r4, #12]
 8007e60:	07db      	lsls	r3, r3, #31
 8007e62:	d5e1      	bpl.n	8007e28 <__swbuf_r+0x2e>
 8007e64:	2e0a      	cmp	r6, #10
 8007e66:	d1df      	bne.n	8007e28 <__swbuf_r+0x2e>
 8007e68:	4621      	mov	r1, r4
 8007e6a:	4628      	mov	r0, r5
 8007e6c:	f000 fe7a 	bl	8008b64 <_fflush_r>
 8007e70:	2800      	cmp	r0, #0
 8007e72:	d0d9      	beq.n	8007e28 <__swbuf_r+0x2e>
 8007e74:	e7d6      	b.n	8007e24 <__swbuf_r+0x2a>
	...

08007e78 <__swsetup_r>:
 8007e78:	b538      	push	{r3, r4, r5, lr}
 8007e7a:	4b29      	ldr	r3, [pc, #164]	@ (8007f20 <__swsetup_r+0xa8>)
 8007e7c:	4605      	mov	r5, r0
 8007e7e:	6818      	ldr	r0, [r3, #0]
 8007e80:	460c      	mov	r4, r1
 8007e82:	b118      	cbz	r0, 8007e8c <__swsetup_r+0x14>
 8007e84:	6a03      	ldr	r3, [r0, #32]
 8007e86:	b90b      	cbnz	r3, 8007e8c <__swsetup_r+0x14>
 8007e88:	f7ff feae 	bl	8007be8 <__sinit>
 8007e8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e90:	0719      	lsls	r1, r3, #28
 8007e92:	d422      	bmi.n	8007eda <__swsetup_r+0x62>
 8007e94:	06da      	lsls	r2, r3, #27
 8007e96:	d407      	bmi.n	8007ea8 <__swsetup_r+0x30>
 8007e98:	2209      	movs	r2, #9
 8007e9a:	602a      	str	r2, [r5, #0]
 8007e9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ea0:	81a3      	strh	r3, [r4, #12]
 8007ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea6:	e033      	b.n	8007f10 <__swsetup_r+0x98>
 8007ea8:	0758      	lsls	r0, r3, #29
 8007eaa:	d512      	bpl.n	8007ed2 <__swsetup_r+0x5a>
 8007eac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007eae:	b141      	cbz	r1, 8007ec2 <__swsetup_r+0x4a>
 8007eb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007eb4:	4299      	cmp	r1, r3
 8007eb6:	d002      	beq.n	8007ebe <__swsetup_r+0x46>
 8007eb8:	4628      	mov	r0, r5
 8007eba:	f000 f8af 	bl	800801c <_free_r>
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ec2:	89a3      	ldrh	r3, [r4, #12]
 8007ec4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007ec8:	81a3      	strh	r3, [r4, #12]
 8007eca:	2300      	movs	r3, #0
 8007ecc:	6063      	str	r3, [r4, #4]
 8007ece:	6923      	ldr	r3, [r4, #16]
 8007ed0:	6023      	str	r3, [r4, #0]
 8007ed2:	89a3      	ldrh	r3, [r4, #12]
 8007ed4:	f043 0308 	orr.w	r3, r3, #8
 8007ed8:	81a3      	strh	r3, [r4, #12]
 8007eda:	6923      	ldr	r3, [r4, #16]
 8007edc:	b94b      	cbnz	r3, 8007ef2 <__swsetup_r+0x7a>
 8007ede:	89a3      	ldrh	r3, [r4, #12]
 8007ee0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007ee4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ee8:	d003      	beq.n	8007ef2 <__swsetup_r+0x7a>
 8007eea:	4621      	mov	r1, r4
 8007eec:	4628      	mov	r0, r5
 8007eee:	f000 fe87 	bl	8008c00 <__smakebuf_r>
 8007ef2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ef6:	f013 0201 	ands.w	r2, r3, #1
 8007efa:	d00a      	beq.n	8007f12 <__swsetup_r+0x9a>
 8007efc:	2200      	movs	r2, #0
 8007efe:	60a2      	str	r2, [r4, #8]
 8007f00:	6962      	ldr	r2, [r4, #20]
 8007f02:	4252      	negs	r2, r2
 8007f04:	61a2      	str	r2, [r4, #24]
 8007f06:	6922      	ldr	r2, [r4, #16]
 8007f08:	b942      	cbnz	r2, 8007f1c <__swsetup_r+0xa4>
 8007f0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007f0e:	d1c5      	bne.n	8007e9c <__swsetup_r+0x24>
 8007f10:	bd38      	pop	{r3, r4, r5, pc}
 8007f12:	0799      	lsls	r1, r3, #30
 8007f14:	bf58      	it	pl
 8007f16:	6962      	ldrpl	r2, [r4, #20]
 8007f18:	60a2      	str	r2, [r4, #8]
 8007f1a:	e7f4      	b.n	8007f06 <__swsetup_r+0x8e>
 8007f1c:	2000      	movs	r0, #0
 8007f1e:	e7f7      	b.n	8007f10 <__swsetup_r+0x98>
 8007f20:	24000020 	.word	0x24000020

08007f24 <memset>:
 8007f24:	4402      	add	r2, r0
 8007f26:	4603      	mov	r3, r0
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d100      	bne.n	8007f2e <memset+0xa>
 8007f2c:	4770      	bx	lr
 8007f2e:	f803 1b01 	strb.w	r1, [r3], #1
 8007f32:	e7f9      	b.n	8007f28 <memset+0x4>

08007f34 <_close_r>:
 8007f34:	b538      	push	{r3, r4, r5, lr}
 8007f36:	4d06      	ldr	r5, [pc, #24]	@ (8007f50 <_close_r+0x1c>)
 8007f38:	2300      	movs	r3, #0
 8007f3a:	4604      	mov	r4, r0
 8007f3c:	4608      	mov	r0, r1
 8007f3e:	602b      	str	r3, [r5, #0]
 8007f40:	f7f9 feee 	bl	8001d20 <_close>
 8007f44:	1c43      	adds	r3, r0, #1
 8007f46:	d102      	bne.n	8007f4e <_close_r+0x1a>
 8007f48:	682b      	ldr	r3, [r5, #0]
 8007f4a:	b103      	cbz	r3, 8007f4e <_close_r+0x1a>
 8007f4c:	6023      	str	r3, [r4, #0]
 8007f4e:	bd38      	pop	{r3, r4, r5, pc}
 8007f50:	24003de4 	.word	0x24003de4

08007f54 <_lseek_r>:
 8007f54:	b538      	push	{r3, r4, r5, lr}
 8007f56:	4d07      	ldr	r5, [pc, #28]	@ (8007f74 <_lseek_r+0x20>)
 8007f58:	4604      	mov	r4, r0
 8007f5a:	4608      	mov	r0, r1
 8007f5c:	4611      	mov	r1, r2
 8007f5e:	2200      	movs	r2, #0
 8007f60:	602a      	str	r2, [r5, #0]
 8007f62:	461a      	mov	r2, r3
 8007f64:	f7f9 ff03 	bl	8001d6e <_lseek>
 8007f68:	1c43      	adds	r3, r0, #1
 8007f6a:	d102      	bne.n	8007f72 <_lseek_r+0x1e>
 8007f6c:	682b      	ldr	r3, [r5, #0]
 8007f6e:	b103      	cbz	r3, 8007f72 <_lseek_r+0x1e>
 8007f70:	6023      	str	r3, [r4, #0]
 8007f72:	bd38      	pop	{r3, r4, r5, pc}
 8007f74:	24003de4 	.word	0x24003de4

08007f78 <_read_r>:
 8007f78:	b538      	push	{r3, r4, r5, lr}
 8007f7a:	4d07      	ldr	r5, [pc, #28]	@ (8007f98 <_read_r+0x20>)
 8007f7c:	4604      	mov	r4, r0
 8007f7e:	4608      	mov	r0, r1
 8007f80:	4611      	mov	r1, r2
 8007f82:	2200      	movs	r2, #0
 8007f84:	602a      	str	r2, [r5, #0]
 8007f86:	461a      	mov	r2, r3
 8007f88:	f7f9 fe91 	bl	8001cae <_read>
 8007f8c:	1c43      	adds	r3, r0, #1
 8007f8e:	d102      	bne.n	8007f96 <_read_r+0x1e>
 8007f90:	682b      	ldr	r3, [r5, #0]
 8007f92:	b103      	cbz	r3, 8007f96 <_read_r+0x1e>
 8007f94:	6023      	str	r3, [r4, #0]
 8007f96:	bd38      	pop	{r3, r4, r5, pc}
 8007f98:	24003de4 	.word	0x24003de4

08007f9c <_write_r>:
 8007f9c:	b538      	push	{r3, r4, r5, lr}
 8007f9e:	4d07      	ldr	r5, [pc, #28]	@ (8007fbc <_write_r+0x20>)
 8007fa0:	4604      	mov	r4, r0
 8007fa2:	4608      	mov	r0, r1
 8007fa4:	4611      	mov	r1, r2
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	602a      	str	r2, [r5, #0]
 8007faa:	461a      	mov	r2, r3
 8007fac:	f7f9 fe9c 	bl	8001ce8 <_write>
 8007fb0:	1c43      	adds	r3, r0, #1
 8007fb2:	d102      	bne.n	8007fba <_write_r+0x1e>
 8007fb4:	682b      	ldr	r3, [r5, #0]
 8007fb6:	b103      	cbz	r3, 8007fba <_write_r+0x1e>
 8007fb8:	6023      	str	r3, [r4, #0]
 8007fba:	bd38      	pop	{r3, r4, r5, pc}
 8007fbc:	24003de4 	.word	0x24003de4

08007fc0 <__errno>:
 8007fc0:	4b01      	ldr	r3, [pc, #4]	@ (8007fc8 <__errno+0x8>)
 8007fc2:	6818      	ldr	r0, [r3, #0]
 8007fc4:	4770      	bx	lr
 8007fc6:	bf00      	nop
 8007fc8:	24000020 	.word	0x24000020

08007fcc <__libc_init_array>:
 8007fcc:	b570      	push	{r4, r5, r6, lr}
 8007fce:	4d0d      	ldr	r5, [pc, #52]	@ (8008004 <__libc_init_array+0x38>)
 8007fd0:	4c0d      	ldr	r4, [pc, #52]	@ (8008008 <__libc_init_array+0x3c>)
 8007fd2:	1b64      	subs	r4, r4, r5
 8007fd4:	10a4      	asrs	r4, r4, #2
 8007fd6:	2600      	movs	r6, #0
 8007fd8:	42a6      	cmp	r6, r4
 8007fda:	d109      	bne.n	8007ff0 <__libc_init_array+0x24>
 8007fdc:	4d0b      	ldr	r5, [pc, #44]	@ (800800c <__libc_init_array+0x40>)
 8007fde:	4c0c      	ldr	r4, [pc, #48]	@ (8008010 <__libc_init_array+0x44>)
 8007fe0:	f000 feda 	bl	8008d98 <_init>
 8007fe4:	1b64      	subs	r4, r4, r5
 8007fe6:	10a4      	asrs	r4, r4, #2
 8007fe8:	2600      	movs	r6, #0
 8007fea:	42a6      	cmp	r6, r4
 8007fec:	d105      	bne.n	8007ffa <__libc_init_array+0x2e>
 8007fee:	bd70      	pop	{r4, r5, r6, pc}
 8007ff0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ff4:	4798      	blx	r3
 8007ff6:	3601      	adds	r6, #1
 8007ff8:	e7ee      	b.n	8007fd8 <__libc_init_array+0xc>
 8007ffa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ffe:	4798      	blx	r3
 8008000:	3601      	adds	r6, #1
 8008002:	e7f2      	b.n	8007fea <__libc_init_array+0x1e>
 8008004:	0800b910 	.word	0x0800b910
 8008008:	0800b910 	.word	0x0800b910
 800800c:	0800b910 	.word	0x0800b910
 8008010:	0800b914 	.word	0x0800b914

08008014 <__retarget_lock_init_recursive>:
 8008014:	4770      	bx	lr

08008016 <__retarget_lock_acquire_recursive>:
 8008016:	4770      	bx	lr

08008018 <__retarget_lock_release_recursive>:
 8008018:	4770      	bx	lr
	...

0800801c <_free_r>:
 800801c:	b538      	push	{r3, r4, r5, lr}
 800801e:	4605      	mov	r5, r0
 8008020:	2900      	cmp	r1, #0
 8008022:	d041      	beq.n	80080a8 <_free_r+0x8c>
 8008024:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008028:	1f0c      	subs	r4, r1, #4
 800802a:	2b00      	cmp	r3, #0
 800802c:	bfb8      	it	lt
 800802e:	18e4      	addlt	r4, r4, r3
 8008030:	f000 f8e0 	bl	80081f4 <__malloc_lock>
 8008034:	4a1d      	ldr	r2, [pc, #116]	@ (80080ac <_free_r+0x90>)
 8008036:	6813      	ldr	r3, [r2, #0]
 8008038:	b933      	cbnz	r3, 8008048 <_free_r+0x2c>
 800803a:	6063      	str	r3, [r4, #4]
 800803c:	6014      	str	r4, [r2, #0]
 800803e:	4628      	mov	r0, r5
 8008040:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008044:	f000 b8dc 	b.w	8008200 <__malloc_unlock>
 8008048:	42a3      	cmp	r3, r4
 800804a:	d908      	bls.n	800805e <_free_r+0x42>
 800804c:	6820      	ldr	r0, [r4, #0]
 800804e:	1821      	adds	r1, r4, r0
 8008050:	428b      	cmp	r3, r1
 8008052:	bf01      	itttt	eq
 8008054:	6819      	ldreq	r1, [r3, #0]
 8008056:	685b      	ldreq	r3, [r3, #4]
 8008058:	1809      	addeq	r1, r1, r0
 800805a:	6021      	streq	r1, [r4, #0]
 800805c:	e7ed      	b.n	800803a <_free_r+0x1e>
 800805e:	461a      	mov	r2, r3
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	b10b      	cbz	r3, 8008068 <_free_r+0x4c>
 8008064:	42a3      	cmp	r3, r4
 8008066:	d9fa      	bls.n	800805e <_free_r+0x42>
 8008068:	6811      	ldr	r1, [r2, #0]
 800806a:	1850      	adds	r0, r2, r1
 800806c:	42a0      	cmp	r0, r4
 800806e:	d10b      	bne.n	8008088 <_free_r+0x6c>
 8008070:	6820      	ldr	r0, [r4, #0]
 8008072:	4401      	add	r1, r0
 8008074:	1850      	adds	r0, r2, r1
 8008076:	4283      	cmp	r3, r0
 8008078:	6011      	str	r1, [r2, #0]
 800807a:	d1e0      	bne.n	800803e <_free_r+0x22>
 800807c:	6818      	ldr	r0, [r3, #0]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	6053      	str	r3, [r2, #4]
 8008082:	4408      	add	r0, r1
 8008084:	6010      	str	r0, [r2, #0]
 8008086:	e7da      	b.n	800803e <_free_r+0x22>
 8008088:	d902      	bls.n	8008090 <_free_r+0x74>
 800808a:	230c      	movs	r3, #12
 800808c:	602b      	str	r3, [r5, #0]
 800808e:	e7d6      	b.n	800803e <_free_r+0x22>
 8008090:	6820      	ldr	r0, [r4, #0]
 8008092:	1821      	adds	r1, r4, r0
 8008094:	428b      	cmp	r3, r1
 8008096:	bf04      	itt	eq
 8008098:	6819      	ldreq	r1, [r3, #0]
 800809a:	685b      	ldreq	r3, [r3, #4]
 800809c:	6063      	str	r3, [r4, #4]
 800809e:	bf04      	itt	eq
 80080a0:	1809      	addeq	r1, r1, r0
 80080a2:	6021      	streq	r1, [r4, #0]
 80080a4:	6054      	str	r4, [r2, #4]
 80080a6:	e7ca      	b.n	800803e <_free_r+0x22>
 80080a8:	bd38      	pop	{r3, r4, r5, pc}
 80080aa:	bf00      	nop
 80080ac:	24003df0 	.word	0x24003df0

080080b0 <sbrk_aligned>:
 80080b0:	b570      	push	{r4, r5, r6, lr}
 80080b2:	4e0f      	ldr	r6, [pc, #60]	@ (80080f0 <sbrk_aligned+0x40>)
 80080b4:	460c      	mov	r4, r1
 80080b6:	6831      	ldr	r1, [r6, #0]
 80080b8:	4605      	mov	r5, r0
 80080ba:	b911      	cbnz	r1, 80080c2 <sbrk_aligned+0x12>
 80080bc:	f000 fe18 	bl	8008cf0 <_sbrk_r>
 80080c0:	6030      	str	r0, [r6, #0]
 80080c2:	4621      	mov	r1, r4
 80080c4:	4628      	mov	r0, r5
 80080c6:	f000 fe13 	bl	8008cf0 <_sbrk_r>
 80080ca:	1c43      	adds	r3, r0, #1
 80080cc:	d103      	bne.n	80080d6 <sbrk_aligned+0x26>
 80080ce:	f04f 34ff 	mov.w	r4, #4294967295
 80080d2:	4620      	mov	r0, r4
 80080d4:	bd70      	pop	{r4, r5, r6, pc}
 80080d6:	1cc4      	adds	r4, r0, #3
 80080d8:	f024 0403 	bic.w	r4, r4, #3
 80080dc:	42a0      	cmp	r0, r4
 80080de:	d0f8      	beq.n	80080d2 <sbrk_aligned+0x22>
 80080e0:	1a21      	subs	r1, r4, r0
 80080e2:	4628      	mov	r0, r5
 80080e4:	f000 fe04 	bl	8008cf0 <_sbrk_r>
 80080e8:	3001      	adds	r0, #1
 80080ea:	d1f2      	bne.n	80080d2 <sbrk_aligned+0x22>
 80080ec:	e7ef      	b.n	80080ce <sbrk_aligned+0x1e>
 80080ee:	bf00      	nop
 80080f0:	24003dec 	.word	0x24003dec

080080f4 <_malloc_r>:
 80080f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080f8:	1ccd      	adds	r5, r1, #3
 80080fa:	f025 0503 	bic.w	r5, r5, #3
 80080fe:	3508      	adds	r5, #8
 8008100:	2d0c      	cmp	r5, #12
 8008102:	bf38      	it	cc
 8008104:	250c      	movcc	r5, #12
 8008106:	2d00      	cmp	r5, #0
 8008108:	4606      	mov	r6, r0
 800810a:	db01      	blt.n	8008110 <_malloc_r+0x1c>
 800810c:	42a9      	cmp	r1, r5
 800810e:	d904      	bls.n	800811a <_malloc_r+0x26>
 8008110:	230c      	movs	r3, #12
 8008112:	6033      	str	r3, [r6, #0]
 8008114:	2000      	movs	r0, #0
 8008116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800811a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80081f0 <_malloc_r+0xfc>
 800811e:	f000 f869 	bl	80081f4 <__malloc_lock>
 8008122:	f8d8 3000 	ldr.w	r3, [r8]
 8008126:	461c      	mov	r4, r3
 8008128:	bb44      	cbnz	r4, 800817c <_malloc_r+0x88>
 800812a:	4629      	mov	r1, r5
 800812c:	4630      	mov	r0, r6
 800812e:	f7ff ffbf 	bl	80080b0 <sbrk_aligned>
 8008132:	1c43      	adds	r3, r0, #1
 8008134:	4604      	mov	r4, r0
 8008136:	d158      	bne.n	80081ea <_malloc_r+0xf6>
 8008138:	f8d8 4000 	ldr.w	r4, [r8]
 800813c:	4627      	mov	r7, r4
 800813e:	2f00      	cmp	r7, #0
 8008140:	d143      	bne.n	80081ca <_malloc_r+0xd6>
 8008142:	2c00      	cmp	r4, #0
 8008144:	d04b      	beq.n	80081de <_malloc_r+0xea>
 8008146:	6823      	ldr	r3, [r4, #0]
 8008148:	4639      	mov	r1, r7
 800814a:	4630      	mov	r0, r6
 800814c:	eb04 0903 	add.w	r9, r4, r3
 8008150:	f000 fdce 	bl	8008cf0 <_sbrk_r>
 8008154:	4581      	cmp	r9, r0
 8008156:	d142      	bne.n	80081de <_malloc_r+0xea>
 8008158:	6821      	ldr	r1, [r4, #0]
 800815a:	1a6d      	subs	r5, r5, r1
 800815c:	4629      	mov	r1, r5
 800815e:	4630      	mov	r0, r6
 8008160:	f7ff ffa6 	bl	80080b0 <sbrk_aligned>
 8008164:	3001      	adds	r0, #1
 8008166:	d03a      	beq.n	80081de <_malloc_r+0xea>
 8008168:	6823      	ldr	r3, [r4, #0]
 800816a:	442b      	add	r3, r5
 800816c:	6023      	str	r3, [r4, #0]
 800816e:	f8d8 3000 	ldr.w	r3, [r8]
 8008172:	685a      	ldr	r2, [r3, #4]
 8008174:	bb62      	cbnz	r2, 80081d0 <_malloc_r+0xdc>
 8008176:	f8c8 7000 	str.w	r7, [r8]
 800817a:	e00f      	b.n	800819c <_malloc_r+0xa8>
 800817c:	6822      	ldr	r2, [r4, #0]
 800817e:	1b52      	subs	r2, r2, r5
 8008180:	d420      	bmi.n	80081c4 <_malloc_r+0xd0>
 8008182:	2a0b      	cmp	r2, #11
 8008184:	d917      	bls.n	80081b6 <_malloc_r+0xc2>
 8008186:	1961      	adds	r1, r4, r5
 8008188:	42a3      	cmp	r3, r4
 800818a:	6025      	str	r5, [r4, #0]
 800818c:	bf18      	it	ne
 800818e:	6059      	strne	r1, [r3, #4]
 8008190:	6863      	ldr	r3, [r4, #4]
 8008192:	bf08      	it	eq
 8008194:	f8c8 1000 	streq.w	r1, [r8]
 8008198:	5162      	str	r2, [r4, r5]
 800819a:	604b      	str	r3, [r1, #4]
 800819c:	4630      	mov	r0, r6
 800819e:	f000 f82f 	bl	8008200 <__malloc_unlock>
 80081a2:	f104 000b 	add.w	r0, r4, #11
 80081a6:	1d23      	adds	r3, r4, #4
 80081a8:	f020 0007 	bic.w	r0, r0, #7
 80081ac:	1ac2      	subs	r2, r0, r3
 80081ae:	bf1c      	itt	ne
 80081b0:	1a1b      	subne	r3, r3, r0
 80081b2:	50a3      	strne	r3, [r4, r2]
 80081b4:	e7af      	b.n	8008116 <_malloc_r+0x22>
 80081b6:	6862      	ldr	r2, [r4, #4]
 80081b8:	42a3      	cmp	r3, r4
 80081ba:	bf0c      	ite	eq
 80081bc:	f8c8 2000 	streq.w	r2, [r8]
 80081c0:	605a      	strne	r2, [r3, #4]
 80081c2:	e7eb      	b.n	800819c <_malloc_r+0xa8>
 80081c4:	4623      	mov	r3, r4
 80081c6:	6864      	ldr	r4, [r4, #4]
 80081c8:	e7ae      	b.n	8008128 <_malloc_r+0x34>
 80081ca:	463c      	mov	r4, r7
 80081cc:	687f      	ldr	r7, [r7, #4]
 80081ce:	e7b6      	b.n	800813e <_malloc_r+0x4a>
 80081d0:	461a      	mov	r2, r3
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	42a3      	cmp	r3, r4
 80081d6:	d1fb      	bne.n	80081d0 <_malloc_r+0xdc>
 80081d8:	2300      	movs	r3, #0
 80081da:	6053      	str	r3, [r2, #4]
 80081dc:	e7de      	b.n	800819c <_malloc_r+0xa8>
 80081de:	230c      	movs	r3, #12
 80081e0:	6033      	str	r3, [r6, #0]
 80081e2:	4630      	mov	r0, r6
 80081e4:	f000 f80c 	bl	8008200 <__malloc_unlock>
 80081e8:	e794      	b.n	8008114 <_malloc_r+0x20>
 80081ea:	6005      	str	r5, [r0, #0]
 80081ec:	e7d6      	b.n	800819c <_malloc_r+0xa8>
 80081ee:	bf00      	nop
 80081f0:	24003df0 	.word	0x24003df0

080081f4 <__malloc_lock>:
 80081f4:	4801      	ldr	r0, [pc, #4]	@ (80081fc <__malloc_lock+0x8>)
 80081f6:	f7ff bf0e 	b.w	8008016 <__retarget_lock_acquire_recursive>
 80081fa:	bf00      	nop
 80081fc:	24003de8 	.word	0x24003de8

08008200 <__malloc_unlock>:
 8008200:	4801      	ldr	r0, [pc, #4]	@ (8008208 <__malloc_unlock+0x8>)
 8008202:	f7ff bf09 	b.w	8008018 <__retarget_lock_release_recursive>
 8008206:	bf00      	nop
 8008208:	24003de8 	.word	0x24003de8

0800820c <__ssputs_r>:
 800820c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008210:	688e      	ldr	r6, [r1, #8]
 8008212:	461f      	mov	r7, r3
 8008214:	42be      	cmp	r6, r7
 8008216:	680b      	ldr	r3, [r1, #0]
 8008218:	4682      	mov	sl, r0
 800821a:	460c      	mov	r4, r1
 800821c:	4690      	mov	r8, r2
 800821e:	d82d      	bhi.n	800827c <__ssputs_r+0x70>
 8008220:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008224:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008228:	d026      	beq.n	8008278 <__ssputs_r+0x6c>
 800822a:	6965      	ldr	r5, [r4, #20]
 800822c:	6909      	ldr	r1, [r1, #16]
 800822e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008232:	eba3 0901 	sub.w	r9, r3, r1
 8008236:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800823a:	1c7b      	adds	r3, r7, #1
 800823c:	444b      	add	r3, r9
 800823e:	106d      	asrs	r5, r5, #1
 8008240:	429d      	cmp	r5, r3
 8008242:	bf38      	it	cc
 8008244:	461d      	movcc	r5, r3
 8008246:	0553      	lsls	r3, r2, #21
 8008248:	d527      	bpl.n	800829a <__ssputs_r+0x8e>
 800824a:	4629      	mov	r1, r5
 800824c:	f7ff ff52 	bl	80080f4 <_malloc_r>
 8008250:	4606      	mov	r6, r0
 8008252:	b360      	cbz	r0, 80082ae <__ssputs_r+0xa2>
 8008254:	6921      	ldr	r1, [r4, #16]
 8008256:	464a      	mov	r2, r9
 8008258:	f000 fd5a 	bl	8008d10 <memcpy>
 800825c:	89a3      	ldrh	r3, [r4, #12]
 800825e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008262:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008266:	81a3      	strh	r3, [r4, #12]
 8008268:	6126      	str	r6, [r4, #16]
 800826a:	6165      	str	r5, [r4, #20]
 800826c:	444e      	add	r6, r9
 800826e:	eba5 0509 	sub.w	r5, r5, r9
 8008272:	6026      	str	r6, [r4, #0]
 8008274:	60a5      	str	r5, [r4, #8]
 8008276:	463e      	mov	r6, r7
 8008278:	42be      	cmp	r6, r7
 800827a:	d900      	bls.n	800827e <__ssputs_r+0x72>
 800827c:	463e      	mov	r6, r7
 800827e:	6820      	ldr	r0, [r4, #0]
 8008280:	4632      	mov	r2, r6
 8008282:	4641      	mov	r1, r8
 8008284:	f000 fcf8 	bl	8008c78 <memmove>
 8008288:	68a3      	ldr	r3, [r4, #8]
 800828a:	1b9b      	subs	r3, r3, r6
 800828c:	60a3      	str	r3, [r4, #8]
 800828e:	6823      	ldr	r3, [r4, #0]
 8008290:	4433      	add	r3, r6
 8008292:	6023      	str	r3, [r4, #0]
 8008294:	2000      	movs	r0, #0
 8008296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800829a:	462a      	mov	r2, r5
 800829c:	f000 fd46 	bl	8008d2c <_realloc_r>
 80082a0:	4606      	mov	r6, r0
 80082a2:	2800      	cmp	r0, #0
 80082a4:	d1e0      	bne.n	8008268 <__ssputs_r+0x5c>
 80082a6:	6921      	ldr	r1, [r4, #16]
 80082a8:	4650      	mov	r0, sl
 80082aa:	f7ff feb7 	bl	800801c <_free_r>
 80082ae:	230c      	movs	r3, #12
 80082b0:	f8ca 3000 	str.w	r3, [sl]
 80082b4:	89a3      	ldrh	r3, [r4, #12]
 80082b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082ba:	81a3      	strh	r3, [r4, #12]
 80082bc:	f04f 30ff 	mov.w	r0, #4294967295
 80082c0:	e7e9      	b.n	8008296 <__ssputs_r+0x8a>
	...

080082c4 <_svfiprintf_r>:
 80082c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082c8:	4698      	mov	r8, r3
 80082ca:	898b      	ldrh	r3, [r1, #12]
 80082cc:	061b      	lsls	r3, r3, #24
 80082ce:	b09d      	sub	sp, #116	@ 0x74
 80082d0:	4607      	mov	r7, r0
 80082d2:	460d      	mov	r5, r1
 80082d4:	4614      	mov	r4, r2
 80082d6:	d510      	bpl.n	80082fa <_svfiprintf_r+0x36>
 80082d8:	690b      	ldr	r3, [r1, #16]
 80082da:	b973      	cbnz	r3, 80082fa <_svfiprintf_r+0x36>
 80082dc:	2140      	movs	r1, #64	@ 0x40
 80082de:	f7ff ff09 	bl	80080f4 <_malloc_r>
 80082e2:	6028      	str	r0, [r5, #0]
 80082e4:	6128      	str	r0, [r5, #16]
 80082e6:	b930      	cbnz	r0, 80082f6 <_svfiprintf_r+0x32>
 80082e8:	230c      	movs	r3, #12
 80082ea:	603b      	str	r3, [r7, #0]
 80082ec:	f04f 30ff 	mov.w	r0, #4294967295
 80082f0:	b01d      	add	sp, #116	@ 0x74
 80082f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082f6:	2340      	movs	r3, #64	@ 0x40
 80082f8:	616b      	str	r3, [r5, #20]
 80082fa:	2300      	movs	r3, #0
 80082fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80082fe:	2320      	movs	r3, #32
 8008300:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008304:	f8cd 800c 	str.w	r8, [sp, #12]
 8008308:	2330      	movs	r3, #48	@ 0x30
 800830a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80084a8 <_svfiprintf_r+0x1e4>
 800830e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008312:	f04f 0901 	mov.w	r9, #1
 8008316:	4623      	mov	r3, r4
 8008318:	469a      	mov	sl, r3
 800831a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800831e:	b10a      	cbz	r2, 8008324 <_svfiprintf_r+0x60>
 8008320:	2a25      	cmp	r2, #37	@ 0x25
 8008322:	d1f9      	bne.n	8008318 <_svfiprintf_r+0x54>
 8008324:	ebba 0b04 	subs.w	fp, sl, r4
 8008328:	d00b      	beq.n	8008342 <_svfiprintf_r+0x7e>
 800832a:	465b      	mov	r3, fp
 800832c:	4622      	mov	r2, r4
 800832e:	4629      	mov	r1, r5
 8008330:	4638      	mov	r0, r7
 8008332:	f7ff ff6b 	bl	800820c <__ssputs_r>
 8008336:	3001      	adds	r0, #1
 8008338:	f000 80a7 	beq.w	800848a <_svfiprintf_r+0x1c6>
 800833c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800833e:	445a      	add	r2, fp
 8008340:	9209      	str	r2, [sp, #36]	@ 0x24
 8008342:	f89a 3000 	ldrb.w	r3, [sl]
 8008346:	2b00      	cmp	r3, #0
 8008348:	f000 809f 	beq.w	800848a <_svfiprintf_r+0x1c6>
 800834c:	2300      	movs	r3, #0
 800834e:	f04f 32ff 	mov.w	r2, #4294967295
 8008352:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008356:	f10a 0a01 	add.w	sl, sl, #1
 800835a:	9304      	str	r3, [sp, #16]
 800835c:	9307      	str	r3, [sp, #28]
 800835e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008362:	931a      	str	r3, [sp, #104]	@ 0x68
 8008364:	4654      	mov	r4, sl
 8008366:	2205      	movs	r2, #5
 8008368:	f814 1b01 	ldrb.w	r1, [r4], #1
 800836c:	484e      	ldr	r0, [pc, #312]	@ (80084a8 <_svfiprintf_r+0x1e4>)
 800836e:	f7f7 ffcf 	bl	8000310 <memchr>
 8008372:	9a04      	ldr	r2, [sp, #16]
 8008374:	b9d8      	cbnz	r0, 80083ae <_svfiprintf_r+0xea>
 8008376:	06d0      	lsls	r0, r2, #27
 8008378:	bf44      	itt	mi
 800837a:	2320      	movmi	r3, #32
 800837c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008380:	0711      	lsls	r1, r2, #28
 8008382:	bf44      	itt	mi
 8008384:	232b      	movmi	r3, #43	@ 0x2b
 8008386:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800838a:	f89a 3000 	ldrb.w	r3, [sl]
 800838e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008390:	d015      	beq.n	80083be <_svfiprintf_r+0xfa>
 8008392:	9a07      	ldr	r2, [sp, #28]
 8008394:	4654      	mov	r4, sl
 8008396:	2000      	movs	r0, #0
 8008398:	f04f 0c0a 	mov.w	ip, #10
 800839c:	4621      	mov	r1, r4
 800839e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083a2:	3b30      	subs	r3, #48	@ 0x30
 80083a4:	2b09      	cmp	r3, #9
 80083a6:	d94b      	bls.n	8008440 <_svfiprintf_r+0x17c>
 80083a8:	b1b0      	cbz	r0, 80083d8 <_svfiprintf_r+0x114>
 80083aa:	9207      	str	r2, [sp, #28]
 80083ac:	e014      	b.n	80083d8 <_svfiprintf_r+0x114>
 80083ae:	eba0 0308 	sub.w	r3, r0, r8
 80083b2:	fa09 f303 	lsl.w	r3, r9, r3
 80083b6:	4313      	orrs	r3, r2
 80083b8:	9304      	str	r3, [sp, #16]
 80083ba:	46a2      	mov	sl, r4
 80083bc:	e7d2      	b.n	8008364 <_svfiprintf_r+0xa0>
 80083be:	9b03      	ldr	r3, [sp, #12]
 80083c0:	1d19      	adds	r1, r3, #4
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	9103      	str	r1, [sp, #12]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	bfbb      	ittet	lt
 80083ca:	425b      	neglt	r3, r3
 80083cc:	f042 0202 	orrlt.w	r2, r2, #2
 80083d0:	9307      	strge	r3, [sp, #28]
 80083d2:	9307      	strlt	r3, [sp, #28]
 80083d4:	bfb8      	it	lt
 80083d6:	9204      	strlt	r2, [sp, #16]
 80083d8:	7823      	ldrb	r3, [r4, #0]
 80083da:	2b2e      	cmp	r3, #46	@ 0x2e
 80083dc:	d10a      	bne.n	80083f4 <_svfiprintf_r+0x130>
 80083de:	7863      	ldrb	r3, [r4, #1]
 80083e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80083e2:	d132      	bne.n	800844a <_svfiprintf_r+0x186>
 80083e4:	9b03      	ldr	r3, [sp, #12]
 80083e6:	1d1a      	adds	r2, r3, #4
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	9203      	str	r2, [sp, #12]
 80083ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80083f0:	3402      	adds	r4, #2
 80083f2:	9305      	str	r3, [sp, #20]
 80083f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80084b8 <_svfiprintf_r+0x1f4>
 80083f8:	7821      	ldrb	r1, [r4, #0]
 80083fa:	2203      	movs	r2, #3
 80083fc:	4650      	mov	r0, sl
 80083fe:	f7f7 ff87 	bl	8000310 <memchr>
 8008402:	b138      	cbz	r0, 8008414 <_svfiprintf_r+0x150>
 8008404:	9b04      	ldr	r3, [sp, #16]
 8008406:	eba0 000a 	sub.w	r0, r0, sl
 800840a:	2240      	movs	r2, #64	@ 0x40
 800840c:	4082      	lsls	r2, r0
 800840e:	4313      	orrs	r3, r2
 8008410:	3401      	adds	r4, #1
 8008412:	9304      	str	r3, [sp, #16]
 8008414:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008418:	4824      	ldr	r0, [pc, #144]	@ (80084ac <_svfiprintf_r+0x1e8>)
 800841a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800841e:	2206      	movs	r2, #6
 8008420:	f7f7 ff76 	bl	8000310 <memchr>
 8008424:	2800      	cmp	r0, #0
 8008426:	d036      	beq.n	8008496 <_svfiprintf_r+0x1d2>
 8008428:	4b21      	ldr	r3, [pc, #132]	@ (80084b0 <_svfiprintf_r+0x1ec>)
 800842a:	bb1b      	cbnz	r3, 8008474 <_svfiprintf_r+0x1b0>
 800842c:	9b03      	ldr	r3, [sp, #12]
 800842e:	3307      	adds	r3, #7
 8008430:	f023 0307 	bic.w	r3, r3, #7
 8008434:	3308      	adds	r3, #8
 8008436:	9303      	str	r3, [sp, #12]
 8008438:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800843a:	4433      	add	r3, r6
 800843c:	9309      	str	r3, [sp, #36]	@ 0x24
 800843e:	e76a      	b.n	8008316 <_svfiprintf_r+0x52>
 8008440:	fb0c 3202 	mla	r2, ip, r2, r3
 8008444:	460c      	mov	r4, r1
 8008446:	2001      	movs	r0, #1
 8008448:	e7a8      	b.n	800839c <_svfiprintf_r+0xd8>
 800844a:	2300      	movs	r3, #0
 800844c:	3401      	adds	r4, #1
 800844e:	9305      	str	r3, [sp, #20]
 8008450:	4619      	mov	r1, r3
 8008452:	f04f 0c0a 	mov.w	ip, #10
 8008456:	4620      	mov	r0, r4
 8008458:	f810 2b01 	ldrb.w	r2, [r0], #1
 800845c:	3a30      	subs	r2, #48	@ 0x30
 800845e:	2a09      	cmp	r2, #9
 8008460:	d903      	bls.n	800846a <_svfiprintf_r+0x1a6>
 8008462:	2b00      	cmp	r3, #0
 8008464:	d0c6      	beq.n	80083f4 <_svfiprintf_r+0x130>
 8008466:	9105      	str	r1, [sp, #20]
 8008468:	e7c4      	b.n	80083f4 <_svfiprintf_r+0x130>
 800846a:	fb0c 2101 	mla	r1, ip, r1, r2
 800846e:	4604      	mov	r4, r0
 8008470:	2301      	movs	r3, #1
 8008472:	e7f0      	b.n	8008456 <_svfiprintf_r+0x192>
 8008474:	ab03      	add	r3, sp, #12
 8008476:	9300      	str	r3, [sp, #0]
 8008478:	462a      	mov	r2, r5
 800847a:	4b0e      	ldr	r3, [pc, #56]	@ (80084b4 <_svfiprintf_r+0x1f0>)
 800847c:	a904      	add	r1, sp, #16
 800847e:	4638      	mov	r0, r7
 8008480:	f3af 8000 	nop.w
 8008484:	1c42      	adds	r2, r0, #1
 8008486:	4606      	mov	r6, r0
 8008488:	d1d6      	bne.n	8008438 <_svfiprintf_r+0x174>
 800848a:	89ab      	ldrh	r3, [r5, #12]
 800848c:	065b      	lsls	r3, r3, #25
 800848e:	f53f af2d 	bmi.w	80082ec <_svfiprintf_r+0x28>
 8008492:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008494:	e72c      	b.n	80082f0 <_svfiprintf_r+0x2c>
 8008496:	ab03      	add	r3, sp, #12
 8008498:	9300      	str	r3, [sp, #0]
 800849a:	462a      	mov	r2, r5
 800849c:	4b05      	ldr	r3, [pc, #20]	@ (80084b4 <_svfiprintf_r+0x1f0>)
 800849e:	a904      	add	r1, sp, #16
 80084a0:	4638      	mov	r0, r7
 80084a2:	f000 f9bb 	bl	800881c <_printf_i>
 80084a6:	e7ed      	b.n	8008484 <_svfiprintf_r+0x1c0>
 80084a8:	0800b8d4 	.word	0x0800b8d4
 80084ac:	0800b8de 	.word	0x0800b8de
 80084b0:	00000000 	.word	0x00000000
 80084b4:	0800820d 	.word	0x0800820d
 80084b8:	0800b8da 	.word	0x0800b8da

080084bc <__sfputc_r>:
 80084bc:	6893      	ldr	r3, [r2, #8]
 80084be:	3b01      	subs	r3, #1
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	b410      	push	{r4}
 80084c4:	6093      	str	r3, [r2, #8]
 80084c6:	da08      	bge.n	80084da <__sfputc_r+0x1e>
 80084c8:	6994      	ldr	r4, [r2, #24]
 80084ca:	42a3      	cmp	r3, r4
 80084cc:	db01      	blt.n	80084d2 <__sfputc_r+0x16>
 80084ce:	290a      	cmp	r1, #10
 80084d0:	d103      	bne.n	80084da <__sfputc_r+0x1e>
 80084d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084d6:	f7ff bc90 	b.w	8007dfa <__swbuf_r>
 80084da:	6813      	ldr	r3, [r2, #0]
 80084dc:	1c58      	adds	r0, r3, #1
 80084de:	6010      	str	r0, [r2, #0]
 80084e0:	7019      	strb	r1, [r3, #0]
 80084e2:	4608      	mov	r0, r1
 80084e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084e8:	4770      	bx	lr

080084ea <__sfputs_r>:
 80084ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ec:	4606      	mov	r6, r0
 80084ee:	460f      	mov	r7, r1
 80084f0:	4614      	mov	r4, r2
 80084f2:	18d5      	adds	r5, r2, r3
 80084f4:	42ac      	cmp	r4, r5
 80084f6:	d101      	bne.n	80084fc <__sfputs_r+0x12>
 80084f8:	2000      	movs	r0, #0
 80084fa:	e007      	b.n	800850c <__sfputs_r+0x22>
 80084fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008500:	463a      	mov	r2, r7
 8008502:	4630      	mov	r0, r6
 8008504:	f7ff ffda 	bl	80084bc <__sfputc_r>
 8008508:	1c43      	adds	r3, r0, #1
 800850a:	d1f3      	bne.n	80084f4 <__sfputs_r+0xa>
 800850c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008510 <_vfiprintf_r>:
 8008510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008514:	460d      	mov	r5, r1
 8008516:	b09d      	sub	sp, #116	@ 0x74
 8008518:	4614      	mov	r4, r2
 800851a:	4698      	mov	r8, r3
 800851c:	4606      	mov	r6, r0
 800851e:	b118      	cbz	r0, 8008528 <_vfiprintf_r+0x18>
 8008520:	6a03      	ldr	r3, [r0, #32]
 8008522:	b90b      	cbnz	r3, 8008528 <_vfiprintf_r+0x18>
 8008524:	f7ff fb60 	bl	8007be8 <__sinit>
 8008528:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800852a:	07d9      	lsls	r1, r3, #31
 800852c:	d405      	bmi.n	800853a <_vfiprintf_r+0x2a>
 800852e:	89ab      	ldrh	r3, [r5, #12]
 8008530:	059a      	lsls	r2, r3, #22
 8008532:	d402      	bmi.n	800853a <_vfiprintf_r+0x2a>
 8008534:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008536:	f7ff fd6e 	bl	8008016 <__retarget_lock_acquire_recursive>
 800853a:	89ab      	ldrh	r3, [r5, #12]
 800853c:	071b      	lsls	r3, r3, #28
 800853e:	d501      	bpl.n	8008544 <_vfiprintf_r+0x34>
 8008540:	692b      	ldr	r3, [r5, #16]
 8008542:	b99b      	cbnz	r3, 800856c <_vfiprintf_r+0x5c>
 8008544:	4629      	mov	r1, r5
 8008546:	4630      	mov	r0, r6
 8008548:	f7ff fc96 	bl	8007e78 <__swsetup_r>
 800854c:	b170      	cbz	r0, 800856c <_vfiprintf_r+0x5c>
 800854e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008550:	07dc      	lsls	r4, r3, #31
 8008552:	d504      	bpl.n	800855e <_vfiprintf_r+0x4e>
 8008554:	f04f 30ff 	mov.w	r0, #4294967295
 8008558:	b01d      	add	sp, #116	@ 0x74
 800855a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800855e:	89ab      	ldrh	r3, [r5, #12]
 8008560:	0598      	lsls	r0, r3, #22
 8008562:	d4f7      	bmi.n	8008554 <_vfiprintf_r+0x44>
 8008564:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008566:	f7ff fd57 	bl	8008018 <__retarget_lock_release_recursive>
 800856a:	e7f3      	b.n	8008554 <_vfiprintf_r+0x44>
 800856c:	2300      	movs	r3, #0
 800856e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008570:	2320      	movs	r3, #32
 8008572:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008576:	f8cd 800c 	str.w	r8, [sp, #12]
 800857a:	2330      	movs	r3, #48	@ 0x30
 800857c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800872c <_vfiprintf_r+0x21c>
 8008580:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008584:	f04f 0901 	mov.w	r9, #1
 8008588:	4623      	mov	r3, r4
 800858a:	469a      	mov	sl, r3
 800858c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008590:	b10a      	cbz	r2, 8008596 <_vfiprintf_r+0x86>
 8008592:	2a25      	cmp	r2, #37	@ 0x25
 8008594:	d1f9      	bne.n	800858a <_vfiprintf_r+0x7a>
 8008596:	ebba 0b04 	subs.w	fp, sl, r4
 800859a:	d00b      	beq.n	80085b4 <_vfiprintf_r+0xa4>
 800859c:	465b      	mov	r3, fp
 800859e:	4622      	mov	r2, r4
 80085a0:	4629      	mov	r1, r5
 80085a2:	4630      	mov	r0, r6
 80085a4:	f7ff ffa1 	bl	80084ea <__sfputs_r>
 80085a8:	3001      	adds	r0, #1
 80085aa:	f000 80a7 	beq.w	80086fc <_vfiprintf_r+0x1ec>
 80085ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085b0:	445a      	add	r2, fp
 80085b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80085b4:	f89a 3000 	ldrb.w	r3, [sl]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	f000 809f 	beq.w	80086fc <_vfiprintf_r+0x1ec>
 80085be:	2300      	movs	r3, #0
 80085c0:	f04f 32ff 	mov.w	r2, #4294967295
 80085c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085c8:	f10a 0a01 	add.w	sl, sl, #1
 80085cc:	9304      	str	r3, [sp, #16]
 80085ce:	9307      	str	r3, [sp, #28]
 80085d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80085d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80085d6:	4654      	mov	r4, sl
 80085d8:	2205      	movs	r2, #5
 80085da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085de:	4853      	ldr	r0, [pc, #332]	@ (800872c <_vfiprintf_r+0x21c>)
 80085e0:	f7f7 fe96 	bl	8000310 <memchr>
 80085e4:	9a04      	ldr	r2, [sp, #16]
 80085e6:	b9d8      	cbnz	r0, 8008620 <_vfiprintf_r+0x110>
 80085e8:	06d1      	lsls	r1, r2, #27
 80085ea:	bf44      	itt	mi
 80085ec:	2320      	movmi	r3, #32
 80085ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085f2:	0713      	lsls	r3, r2, #28
 80085f4:	bf44      	itt	mi
 80085f6:	232b      	movmi	r3, #43	@ 0x2b
 80085f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085fc:	f89a 3000 	ldrb.w	r3, [sl]
 8008600:	2b2a      	cmp	r3, #42	@ 0x2a
 8008602:	d015      	beq.n	8008630 <_vfiprintf_r+0x120>
 8008604:	9a07      	ldr	r2, [sp, #28]
 8008606:	4654      	mov	r4, sl
 8008608:	2000      	movs	r0, #0
 800860a:	f04f 0c0a 	mov.w	ip, #10
 800860e:	4621      	mov	r1, r4
 8008610:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008614:	3b30      	subs	r3, #48	@ 0x30
 8008616:	2b09      	cmp	r3, #9
 8008618:	d94b      	bls.n	80086b2 <_vfiprintf_r+0x1a2>
 800861a:	b1b0      	cbz	r0, 800864a <_vfiprintf_r+0x13a>
 800861c:	9207      	str	r2, [sp, #28]
 800861e:	e014      	b.n	800864a <_vfiprintf_r+0x13a>
 8008620:	eba0 0308 	sub.w	r3, r0, r8
 8008624:	fa09 f303 	lsl.w	r3, r9, r3
 8008628:	4313      	orrs	r3, r2
 800862a:	9304      	str	r3, [sp, #16]
 800862c:	46a2      	mov	sl, r4
 800862e:	e7d2      	b.n	80085d6 <_vfiprintf_r+0xc6>
 8008630:	9b03      	ldr	r3, [sp, #12]
 8008632:	1d19      	adds	r1, r3, #4
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	9103      	str	r1, [sp, #12]
 8008638:	2b00      	cmp	r3, #0
 800863a:	bfbb      	ittet	lt
 800863c:	425b      	neglt	r3, r3
 800863e:	f042 0202 	orrlt.w	r2, r2, #2
 8008642:	9307      	strge	r3, [sp, #28]
 8008644:	9307      	strlt	r3, [sp, #28]
 8008646:	bfb8      	it	lt
 8008648:	9204      	strlt	r2, [sp, #16]
 800864a:	7823      	ldrb	r3, [r4, #0]
 800864c:	2b2e      	cmp	r3, #46	@ 0x2e
 800864e:	d10a      	bne.n	8008666 <_vfiprintf_r+0x156>
 8008650:	7863      	ldrb	r3, [r4, #1]
 8008652:	2b2a      	cmp	r3, #42	@ 0x2a
 8008654:	d132      	bne.n	80086bc <_vfiprintf_r+0x1ac>
 8008656:	9b03      	ldr	r3, [sp, #12]
 8008658:	1d1a      	adds	r2, r3, #4
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	9203      	str	r2, [sp, #12]
 800865e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008662:	3402      	adds	r4, #2
 8008664:	9305      	str	r3, [sp, #20]
 8008666:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800873c <_vfiprintf_r+0x22c>
 800866a:	7821      	ldrb	r1, [r4, #0]
 800866c:	2203      	movs	r2, #3
 800866e:	4650      	mov	r0, sl
 8008670:	f7f7 fe4e 	bl	8000310 <memchr>
 8008674:	b138      	cbz	r0, 8008686 <_vfiprintf_r+0x176>
 8008676:	9b04      	ldr	r3, [sp, #16]
 8008678:	eba0 000a 	sub.w	r0, r0, sl
 800867c:	2240      	movs	r2, #64	@ 0x40
 800867e:	4082      	lsls	r2, r0
 8008680:	4313      	orrs	r3, r2
 8008682:	3401      	adds	r4, #1
 8008684:	9304      	str	r3, [sp, #16]
 8008686:	f814 1b01 	ldrb.w	r1, [r4], #1
 800868a:	4829      	ldr	r0, [pc, #164]	@ (8008730 <_vfiprintf_r+0x220>)
 800868c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008690:	2206      	movs	r2, #6
 8008692:	f7f7 fe3d 	bl	8000310 <memchr>
 8008696:	2800      	cmp	r0, #0
 8008698:	d03f      	beq.n	800871a <_vfiprintf_r+0x20a>
 800869a:	4b26      	ldr	r3, [pc, #152]	@ (8008734 <_vfiprintf_r+0x224>)
 800869c:	bb1b      	cbnz	r3, 80086e6 <_vfiprintf_r+0x1d6>
 800869e:	9b03      	ldr	r3, [sp, #12]
 80086a0:	3307      	adds	r3, #7
 80086a2:	f023 0307 	bic.w	r3, r3, #7
 80086a6:	3308      	adds	r3, #8
 80086a8:	9303      	str	r3, [sp, #12]
 80086aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086ac:	443b      	add	r3, r7
 80086ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80086b0:	e76a      	b.n	8008588 <_vfiprintf_r+0x78>
 80086b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80086b6:	460c      	mov	r4, r1
 80086b8:	2001      	movs	r0, #1
 80086ba:	e7a8      	b.n	800860e <_vfiprintf_r+0xfe>
 80086bc:	2300      	movs	r3, #0
 80086be:	3401      	adds	r4, #1
 80086c0:	9305      	str	r3, [sp, #20]
 80086c2:	4619      	mov	r1, r3
 80086c4:	f04f 0c0a 	mov.w	ip, #10
 80086c8:	4620      	mov	r0, r4
 80086ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086ce:	3a30      	subs	r2, #48	@ 0x30
 80086d0:	2a09      	cmp	r2, #9
 80086d2:	d903      	bls.n	80086dc <_vfiprintf_r+0x1cc>
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d0c6      	beq.n	8008666 <_vfiprintf_r+0x156>
 80086d8:	9105      	str	r1, [sp, #20]
 80086da:	e7c4      	b.n	8008666 <_vfiprintf_r+0x156>
 80086dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80086e0:	4604      	mov	r4, r0
 80086e2:	2301      	movs	r3, #1
 80086e4:	e7f0      	b.n	80086c8 <_vfiprintf_r+0x1b8>
 80086e6:	ab03      	add	r3, sp, #12
 80086e8:	9300      	str	r3, [sp, #0]
 80086ea:	462a      	mov	r2, r5
 80086ec:	4b12      	ldr	r3, [pc, #72]	@ (8008738 <_vfiprintf_r+0x228>)
 80086ee:	a904      	add	r1, sp, #16
 80086f0:	4630      	mov	r0, r6
 80086f2:	f3af 8000 	nop.w
 80086f6:	4607      	mov	r7, r0
 80086f8:	1c78      	adds	r0, r7, #1
 80086fa:	d1d6      	bne.n	80086aa <_vfiprintf_r+0x19a>
 80086fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80086fe:	07d9      	lsls	r1, r3, #31
 8008700:	d405      	bmi.n	800870e <_vfiprintf_r+0x1fe>
 8008702:	89ab      	ldrh	r3, [r5, #12]
 8008704:	059a      	lsls	r2, r3, #22
 8008706:	d402      	bmi.n	800870e <_vfiprintf_r+0x1fe>
 8008708:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800870a:	f7ff fc85 	bl	8008018 <__retarget_lock_release_recursive>
 800870e:	89ab      	ldrh	r3, [r5, #12]
 8008710:	065b      	lsls	r3, r3, #25
 8008712:	f53f af1f 	bmi.w	8008554 <_vfiprintf_r+0x44>
 8008716:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008718:	e71e      	b.n	8008558 <_vfiprintf_r+0x48>
 800871a:	ab03      	add	r3, sp, #12
 800871c:	9300      	str	r3, [sp, #0]
 800871e:	462a      	mov	r2, r5
 8008720:	4b05      	ldr	r3, [pc, #20]	@ (8008738 <_vfiprintf_r+0x228>)
 8008722:	a904      	add	r1, sp, #16
 8008724:	4630      	mov	r0, r6
 8008726:	f000 f879 	bl	800881c <_printf_i>
 800872a:	e7e4      	b.n	80086f6 <_vfiprintf_r+0x1e6>
 800872c:	0800b8d4 	.word	0x0800b8d4
 8008730:	0800b8de 	.word	0x0800b8de
 8008734:	00000000 	.word	0x00000000
 8008738:	080084eb 	.word	0x080084eb
 800873c:	0800b8da 	.word	0x0800b8da

08008740 <_printf_common>:
 8008740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008744:	4616      	mov	r6, r2
 8008746:	4698      	mov	r8, r3
 8008748:	688a      	ldr	r2, [r1, #8]
 800874a:	690b      	ldr	r3, [r1, #16]
 800874c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008750:	4293      	cmp	r3, r2
 8008752:	bfb8      	it	lt
 8008754:	4613      	movlt	r3, r2
 8008756:	6033      	str	r3, [r6, #0]
 8008758:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800875c:	4607      	mov	r7, r0
 800875e:	460c      	mov	r4, r1
 8008760:	b10a      	cbz	r2, 8008766 <_printf_common+0x26>
 8008762:	3301      	adds	r3, #1
 8008764:	6033      	str	r3, [r6, #0]
 8008766:	6823      	ldr	r3, [r4, #0]
 8008768:	0699      	lsls	r1, r3, #26
 800876a:	bf42      	ittt	mi
 800876c:	6833      	ldrmi	r3, [r6, #0]
 800876e:	3302      	addmi	r3, #2
 8008770:	6033      	strmi	r3, [r6, #0]
 8008772:	6825      	ldr	r5, [r4, #0]
 8008774:	f015 0506 	ands.w	r5, r5, #6
 8008778:	d106      	bne.n	8008788 <_printf_common+0x48>
 800877a:	f104 0a19 	add.w	sl, r4, #25
 800877e:	68e3      	ldr	r3, [r4, #12]
 8008780:	6832      	ldr	r2, [r6, #0]
 8008782:	1a9b      	subs	r3, r3, r2
 8008784:	42ab      	cmp	r3, r5
 8008786:	dc26      	bgt.n	80087d6 <_printf_common+0x96>
 8008788:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800878c:	6822      	ldr	r2, [r4, #0]
 800878e:	3b00      	subs	r3, #0
 8008790:	bf18      	it	ne
 8008792:	2301      	movne	r3, #1
 8008794:	0692      	lsls	r2, r2, #26
 8008796:	d42b      	bmi.n	80087f0 <_printf_common+0xb0>
 8008798:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800879c:	4641      	mov	r1, r8
 800879e:	4638      	mov	r0, r7
 80087a0:	47c8      	blx	r9
 80087a2:	3001      	adds	r0, #1
 80087a4:	d01e      	beq.n	80087e4 <_printf_common+0xa4>
 80087a6:	6823      	ldr	r3, [r4, #0]
 80087a8:	6922      	ldr	r2, [r4, #16]
 80087aa:	f003 0306 	and.w	r3, r3, #6
 80087ae:	2b04      	cmp	r3, #4
 80087b0:	bf02      	ittt	eq
 80087b2:	68e5      	ldreq	r5, [r4, #12]
 80087b4:	6833      	ldreq	r3, [r6, #0]
 80087b6:	1aed      	subeq	r5, r5, r3
 80087b8:	68a3      	ldr	r3, [r4, #8]
 80087ba:	bf0c      	ite	eq
 80087bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087c0:	2500      	movne	r5, #0
 80087c2:	4293      	cmp	r3, r2
 80087c4:	bfc4      	itt	gt
 80087c6:	1a9b      	subgt	r3, r3, r2
 80087c8:	18ed      	addgt	r5, r5, r3
 80087ca:	2600      	movs	r6, #0
 80087cc:	341a      	adds	r4, #26
 80087ce:	42b5      	cmp	r5, r6
 80087d0:	d11a      	bne.n	8008808 <_printf_common+0xc8>
 80087d2:	2000      	movs	r0, #0
 80087d4:	e008      	b.n	80087e8 <_printf_common+0xa8>
 80087d6:	2301      	movs	r3, #1
 80087d8:	4652      	mov	r2, sl
 80087da:	4641      	mov	r1, r8
 80087dc:	4638      	mov	r0, r7
 80087de:	47c8      	blx	r9
 80087e0:	3001      	adds	r0, #1
 80087e2:	d103      	bne.n	80087ec <_printf_common+0xac>
 80087e4:	f04f 30ff 	mov.w	r0, #4294967295
 80087e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087ec:	3501      	adds	r5, #1
 80087ee:	e7c6      	b.n	800877e <_printf_common+0x3e>
 80087f0:	18e1      	adds	r1, r4, r3
 80087f2:	1c5a      	adds	r2, r3, #1
 80087f4:	2030      	movs	r0, #48	@ 0x30
 80087f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80087fa:	4422      	add	r2, r4
 80087fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008800:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008804:	3302      	adds	r3, #2
 8008806:	e7c7      	b.n	8008798 <_printf_common+0x58>
 8008808:	2301      	movs	r3, #1
 800880a:	4622      	mov	r2, r4
 800880c:	4641      	mov	r1, r8
 800880e:	4638      	mov	r0, r7
 8008810:	47c8      	blx	r9
 8008812:	3001      	adds	r0, #1
 8008814:	d0e6      	beq.n	80087e4 <_printf_common+0xa4>
 8008816:	3601      	adds	r6, #1
 8008818:	e7d9      	b.n	80087ce <_printf_common+0x8e>
	...

0800881c <_printf_i>:
 800881c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008820:	7e0f      	ldrb	r7, [r1, #24]
 8008822:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008824:	2f78      	cmp	r7, #120	@ 0x78
 8008826:	4691      	mov	r9, r2
 8008828:	4680      	mov	r8, r0
 800882a:	460c      	mov	r4, r1
 800882c:	469a      	mov	sl, r3
 800882e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008832:	d807      	bhi.n	8008844 <_printf_i+0x28>
 8008834:	2f62      	cmp	r7, #98	@ 0x62
 8008836:	d80a      	bhi.n	800884e <_printf_i+0x32>
 8008838:	2f00      	cmp	r7, #0
 800883a:	f000 80d2 	beq.w	80089e2 <_printf_i+0x1c6>
 800883e:	2f58      	cmp	r7, #88	@ 0x58
 8008840:	f000 80b9 	beq.w	80089b6 <_printf_i+0x19a>
 8008844:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008848:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800884c:	e03a      	b.n	80088c4 <_printf_i+0xa8>
 800884e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008852:	2b15      	cmp	r3, #21
 8008854:	d8f6      	bhi.n	8008844 <_printf_i+0x28>
 8008856:	a101      	add	r1, pc, #4	@ (adr r1, 800885c <_printf_i+0x40>)
 8008858:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800885c:	080088b5 	.word	0x080088b5
 8008860:	080088c9 	.word	0x080088c9
 8008864:	08008845 	.word	0x08008845
 8008868:	08008845 	.word	0x08008845
 800886c:	08008845 	.word	0x08008845
 8008870:	08008845 	.word	0x08008845
 8008874:	080088c9 	.word	0x080088c9
 8008878:	08008845 	.word	0x08008845
 800887c:	08008845 	.word	0x08008845
 8008880:	08008845 	.word	0x08008845
 8008884:	08008845 	.word	0x08008845
 8008888:	080089c9 	.word	0x080089c9
 800888c:	080088f3 	.word	0x080088f3
 8008890:	08008983 	.word	0x08008983
 8008894:	08008845 	.word	0x08008845
 8008898:	08008845 	.word	0x08008845
 800889c:	080089eb 	.word	0x080089eb
 80088a0:	08008845 	.word	0x08008845
 80088a4:	080088f3 	.word	0x080088f3
 80088a8:	08008845 	.word	0x08008845
 80088ac:	08008845 	.word	0x08008845
 80088b0:	0800898b 	.word	0x0800898b
 80088b4:	6833      	ldr	r3, [r6, #0]
 80088b6:	1d1a      	adds	r2, r3, #4
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	6032      	str	r2, [r6, #0]
 80088bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80088c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80088c4:	2301      	movs	r3, #1
 80088c6:	e09d      	b.n	8008a04 <_printf_i+0x1e8>
 80088c8:	6833      	ldr	r3, [r6, #0]
 80088ca:	6820      	ldr	r0, [r4, #0]
 80088cc:	1d19      	adds	r1, r3, #4
 80088ce:	6031      	str	r1, [r6, #0]
 80088d0:	0606      	lsls	r6, r0, #24
 80088d2:	d501      	bpl.n	80088d8 <_printf_i+0xbc>
 80088d4:	681d      	ldr	r5, [r3, #0]
 80088d6:	e003      	b.n	80088e0 <_printf_i+0xc4>
 80088d8:	0645      	lsls	r5, r0, #25
 80088da:	d5fb      	bpl.n	80088d4 <_printf_i+0xb8>
 80088dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80088e0:	2d00      	cmp	r5, #0
 80088e2:	da03      	bge.n	80088ec <_printf_i+0xd0>
 80088e4:	232d      	movs	r3, #45	@ 0x2d
 80088e6:	426d      	negs	r5, r5
 80088e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80088ec:	4859      	ldr	r0, [pc, #356]	@ (8008a54 <_printf_i+0x238>)
 80088ee:	230a      	movs	r3, #10
 80088f0:	e011      	b.n	8008916 <_printf_i+0xfa>
 80088f2:	6821      	ldr	r1, [r4, #0]
 80088f4:	6833      	ldr	r3, [r6, #0]
 80088f6:	0608      	lsls	r0, r1, #24
 80088f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80088fc:	d402      	bmi.n	8008904 <_printf_i+0xe8>
 80088fe:	0649      	lsls	r1, r1, #25
 8008900:	bf48      	it	mi
 8008902:	b2ad      	uxthmi	r5, r5
 8008904:	2f6f      	cmp	r7, #111	@ 0x6f
 8008906:	4853      	ldr	r0, [pc, #332]	@ (8008a54 <_printf_i+0x238>)
 8008908:	6033      	str	r3, [r6, #0]
 800890a:	bf14      	ite	ne
 800890c:	230a      	movne	r3, #10
 800890e:	2308      	moveq	r3, #8
 8008910:	2100      	movs	r1, #0
 8008912:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008916:	6866      	ldr	r6, [r4, #4]
 8008918:	60a6      	str	r6, [r4, #8]
 800891a:	2e00      	cmp	r6, #0
 800891c:	bfa2      	ittt	ge
 800891e:	6821      	ldrge	r1, [r4, #0]
 8008920:	f021 0104 	bicge.w	r1, r1, #4
 8008924:	6021      	strge	r1, [r4, #0]
 8008926:	b90d      	cbnz	r5, 800892c <_printf_i+0x110>
 8008928:	2e00      	cmp	r6, #0
 800892a:	d04b      	beq.n	80089c4 <_printf_i+0x1a8>
 800892c:	4616      	mov	r6, r2
 800892e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008932:	fb03 5711 	mls	r7, r3, r1, r5
 8008936:	5dc7      	ldrb	r7, [r0, r7]
 8008938:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800893c:	462f      	mov	r7, r5
 800893e:	42bb      	cmp	r3, r7
 8008940:	460d      	mov	r5, r1
 8008942:	d9f4      	bls.n	800892e <_printf_i+0x112>
 8008944:	2b08      	cmp	r3, #8
 8008946:	d10b      	bne.n	8008960 <_printf_i+0x144>
 8008948:	6823      	ldr	r3, [r4, #0]
 800894a:	07df      	lsls	r7, r3, #31
 800894c:	d508      	bpl.n	8008960 <_printf_i+0x144>
 800894e:	6923      	ldr	r3, [r4, #16]
 8008950:	6861      	ldr	r1, [r4, #4]
 8008952:	4299      	cmp	r1, r3
 8008954:	bfde      	ittt	le
 8008956:	2330      	movle	r3, #48	@ 0x30
 8008958:	f806 3c01 	strble.w	r3, [r6, #-1]
 800895c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008960:	1b92      	subs	r2, r2, r6
 8008962:	6122      	str	r2, [r4, #16]
 8008964:	f8cd a000 	str.w	sl, [sp]
 8008968:	464b      	mov	r3, r9
 800896a:	aa03      	add	r2, sp, #12
 800896c:	4621      	mov	r1, r4
 800896e:	4640      	mov	r0, r8
 8008970:	f7ff fee6 	bl	8008740 <_printf_common>
 8008974:	3001      	adds	r0, #1
 8008976:	d14a      	bne.n	8008a0e <_printf_i+0x1f2>
 8008978:	f04f 30ff 	mov.w	r0, #4294967295
 800897c:	b004      	add	sp, #16
 800897e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008982:	6823      	ldr	r3, [r4, #0]
 8008984:	f043 0320 	orr.w	r3, r3, #32
 8008988:	6023      	str	r3, [r4, #0]
 800898a:	4833      	ldr	r0, [pc, #204]	@ (8008a58 <_printf_i+0x23c>)
 800898c:	2778      	movs	r7, #120	@ 0x78
 800898e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008992:	6823      	ldr	r3, [r4, #0]
 8008994:	6831      	ldr	r1, [r6, #0]
 8008996:	061f      	lsls	r7, r3, #24
 8008998:	f851 5b04 	ldr.w	r5, [r1], #4
 800899c:	d402      	bmi.n	80089a4 <_printf_i+0x188>
 800899e:	065f      	lsls	r7, r3, #25
 80089a0:	bf48      	it	mi
 80089a2:	b2ad      	uxthmi	r5, r5
 80089a4:	6031      	str	r1, [r6, #0]
 80089a6:	07d9      	lsls	r1, r3, #31
 80089a8:	bf44      	itt	mi
 80089aa:	f043 0320 	orrmi.w	r3, r3, #32
 80089ae:	6023      	strmi	r3, [r4, #0]
 80089b0:	b11d      	cbz	r5, 80089ba <_printf_i+0x19e>
 80089b2:	2310      	movs	r3, #16
 80089b4:	e7ac      	b.n	8008910 <_printf_i+0xf4>
 80089b6:	4827      	ldr	r0, [pc, #156]	@ (8008a54 <_printf_i+0x238>)
 80089b8:	e7e9      	b.n	800898e <_printf_i+0x172>
 80089ba:	6823      	ldr	r3, [r4, #0]
 80089bc:	f023 0320 	bic.w	r3, r3, #32
 80089c0:	6023      	str	r3, [r4, #0]
 80089c2:	e7f6      	b.n	80089b2 <_printf_i+0x196>
 80089c4:	4616      	mov	r6, r2
 80089c6:	e7bd      	b.n	8008944 <_printf_i+0x128>
 80089c8:	6833      	ldr	r3, [r6, #0]
 80089ca:	6825      	ldr	r5, [r4, #0]
 80089cc:	6961      	ldr	r1, [r4, #20]
 80089ce:	1d18      	adds	r0, r3, #4
 80089d0:	6030      	str	r0, [r6, #0]
 80089d2:	062e      	lsls	r6, r5, #24
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	d501      	bpl.n	80089dc <_printf_i+0x1c0>
 80089d8:	6019      	str	r1, [r3, #0]
 80089da:	e002      	b.n	80089e2 <_printf_i+0x1c6>
 80089dc:	0668      	lsls	r0, r5, #25
 80089de:	d5fb      	bpl.n	80089d8 <_printf_i+0x1bc>
 80089e0:	8019      	strh	r1, [r3, #0]
 80089e2:	2300      	movs	r3, #0
 80089e4:	6123      	str	r3, [r4, #16]
 80089e6:	4616      	mov	r6, r2
 80089e8:	e7bc      	b.n	8008964 <_printf_i+0x148>
 80089ea:	6833      	ldr	r3, [r6, #0]
 80089ec:	1d1a      	adds	r2, r3, #4
 80089ee:	6032      	str	r2, [r6, #0]
 80089f0:	681e      	ldr	r6, [r3, #0]
 80089f2:	6862      	ldr	r2, [r4, #4]
 80089f4:	2100      	movs	r1, #0
 80089f6:	4630      	mov	r0, r6
 80089f8:	f7f7 fc8a 	bl	8000310 <memchr>
 80089fc:	b108      	cbz	r0, 8008a02 <_printf_i+0x1e6>
 80089fe:	1b80      	subs	r0, r0, r6
 8008a00:	6060      	str	r0, [r4, #4]
 8008a02:	6863      	ldr	r3, [r4, #4]
 8008a04:	6123      	str	r3, [r4, #16]
 8008a06:	2300      	movs	r3, #0
 8008a08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a0c:	e7aa      	b.n	8008964 <_printf_i+0x148>
 8008a0e:	6923      	ldr	r3, [r4, #16]
 8008a10:	4632      	mov	r2, r6
 8008a12:	4649      	mov	r1, r9
 8008a14:	4640      	mov	r0, r8
 8008a16:	47d0      	blx	sl
 8008a18:	3001      	adds	r0, #1
 8008a1a:	d0ad      	beq.n	8008978 <_printf_i+0x15c>
 8008a1c:	6823      	ldr	r3, [r4, #0]
 8008a1e:	079b      	lsls	r3, r3, #30
 8008a20:	d413      	bmi.n	8008a4a <_printf_i+0x22e>
 8008a22:	68e0      	ldr	r0, [r4, #12]
 8008a24:	9b03      	ldr	r3, [sp, #12]
 8008a26:	4298      	cmp	r0, r3
 8008a28:	bfb8      	it	lt
 8008a2a:	4618      	movlt	r0, r3
 8008a2c:	e7a6      	b.n	800897c <_printf_i+0x160>
 8008a2e:	2301      	movs	r3, #1
 8008a30:	4632      	mov	r2, r6
 8008a32:	4649      	mov	r1, r9
 8008a34:	4640      	mov	r0, r8
 8008a36:	47d0      	blx	sl
 8008a38:	3001      	adds	r0, #1
 8008a3a:	d09d      	beq.n	8008978 <_printf_i+0x15c>
 8008a3c:	3501      	adds	r5, #1
 8008a3e:	68e3      	ldr	r3, [r4, #12]
 8008a40:	9903      	ldr	r1, [sp, #12]
 8008a42:	1a5b      	subs	r3, r3, r1
 8008a44:	42ab      	cmp	r3, r5
 8008a46:	dcf2      	bgt.n	8008a2e <_printf_i+0x212>
 8008a48:	e7eb      	b.n	8008a22 <_printf_i+0x206>
 8008a4a:	2500      	movs	r5, #0
 8008a4c:	f104 0619 	add.w	r6, r4, #25
 8008a50:	e7f5      	b.n	8008a3e <_printf_i+0x222>
 8008a52:	bf00      	nop
 8008a54:	0800b8e5 	.word	0x0800b8e5
 8008a58:	0800b8f6 	.word	0x0800b8f6

08008a5c <__sflush_r>:
 8008a5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a64:	0716      	lsls	r6, r2, #28
 8008a66:	4605      	mov	r5, r0
 8008a68:	460c      	mov	r4, r1
 8008a6a:	d454      	bmi.n	8008b16 <__sflush_r+0xba>
 8008a6c:	684b      	ldr	r3, [r1, #4]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	dc02      	bgt.n	8008a78 <__sflush_r+0x1c>
 8008a72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	dd48      	ble.n	8008b0a <__sflush_r+0xae>
 8008a78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a7a:	2e00      	cmp	r6, #0
 8008a7c:	d045      	beq.n	8008b0a <__sflush_r+0xae>
 8008a7e:	2300      	movs	r3, #0
 8008a80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008a84:	682f      	ldr	r7, [r5, #0]
 8008a86:	6a21      	ldr	r1, [r4, #32]
 8008a88:	602b      	str	r3, [r5, #0]
 8008a8a:	d030      	beq.n	8008aee <__sflush_r+0x92>
 8008a8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008a8e:	89a3      	ldrh	r3, [r4, #12]
 8008a90:	0759      	lsls	r1, r3, #29
 8008a92:	d505      	bpl.n	8008aa0 <__sflush_r+0x44>
 8008a94:	6863      	ldr	r3, [r4, #4]
 8008a96:	1ad2      	subs	r2, r2, r3
 8008a98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008a9a:	b10b      	cbz	r3, 8008aa0 <__sflush_r+0x44>
 8008a9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008a9e:	1ad2      	subs	r2, r2, r3
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008aa4:	6a21      	ldr	r1, [r4, #32]
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	47b0      	blx	r6
 8008aaa:	1c43      	adds	r3, r0, #1
 8008aac:	89a3      	ldrh	r3, [r4, #12]
 8008aae:	d106      	bne.n	8008abe <__sflush_r+0x62>
 8008ab0:	6829      	ldr	r1, [r5, #0]
 8008ab2:	291d      	cmp	r1, #29
 8008ab4:	d82b      	bhi.n	8008b0e <__sflush_r+0xb2>
 8008ab6:	4a2a      	ldr	r2, [pc, #168]	@ (8008b60 <__sflush_r+0x104>)
 8008ab8:	410a      	asrs	r2, r1
 8008aba:	07d6      	lsls	r6, r2, #31
 8008abc:	d427      	bmi.n	8008b0e <__sflush_r+0xb2>
 8008abe:	2200      	movs	r2, #0
 8008ac0:	6062      	str	r2, [r4, #4]
 8008ac2:	04d9      	lsls	r1, r3, #19
 8008ac4:	6922      	ldr	r2, [r4, #16]
 8008ac6:	6022      	str	r2, [r4, #0]
 8008ac8:	d504      	bpl.n	8008ad4 <__sflush_r+0x78>
 8008aca:	1c42      	adds	r2, r0, #1
 8008acc:	d101      	bne.n	8008ad2 <__sflush_r+0x76>
 8008ace:	682b      	ldr	r3, [r5, #0]
 8008ad0:	b903      	cbnz	r3, 8008ad4 <__sflush_r+0x78>
 8008ad2:	6560      	str	r0, [r4, #84]	@ 0x54
 8008ad4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008ad6:	602f      	str	r7, [r5, #0]
 8008ad8:	b1b9      	cbz	r1, 8008b0a <__sflush_r+0xae>
 8008ada:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ade:	4299      	cmp	r1, r3
 8008ae0:	d002      	beq.n	8008ae8 <__sflush_r+0x8c>
 8008ae2:	4628      	mov	r0, r5
 8008ae4:	f7ff fa9a 	bl	800801c <_free_r>
 8008ae8:	2300      	movs	r3, #0
 8008aea:	6363      	str	r3, [r4, #52]	@ 0x34
 8008aec:	e00d      	b.n	8008b0a <__sflush_r+0xae>
 8008aee:	2301      	movs	r3, #1
 8008af0:	4628      	mov	r0, r5
 8008af2:	47b0      	blx	r6
 8008af4:	4602      	mov	r2, r0
 8008af6:	1c50      	adds	r0, r2, #1
 8008af8:	d1c9      	bne.n	8008a8e <__sflush_r+0x32>
 8008afa:	682b      	ldr	r3, [r5, #0]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d0c6      	beq.n	8008a8e <__sflush_r+0x32>
 8008b00:	2b1d      	cmp	r3, #29
 8008b02:	d001      	beq.n	8008b08 <__sflush_r+0xac>
 8008b04:	2b16      	cmp	r3, #22
 8008b06:	d11e      	bne.n	8008b46 <__sflush_r+0xea>
 8008b08:	602f      	str	r7, [r5, #0]
 8008b0a:	2000      	movs	r0, #0
 8008b0c:	e022      	b.n	8008b54 <__sflush_r+0xf8>
 8008b0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b12:	b21b      	sxth	r3, r3
 8008b14:	e01b      	b.n	8008b4e <__sflush_r+0xf2>
 8008b16:	690f      	ldr	r7, [r1, #16]
 8008b18:	2f00      	cmp	r7, #0
 8008b1a:	d0f6      	beq.n	8008b0a <__sflush_r+0xae>
 8008b1c:	0793      	lsls	r3, r2, #30
 8008b1e:	680e      	ldr	r6, [r1, #0]
 8008b20:	bf08      	it	eq
 8008b22:	694b      	ldreq	r3, [r1, #20]
 8008b24:	600f      	str	r7, [r1, #0]
 8008b26:	bf18      	it	ne
 8008b28:	2300      	movne	r3, #0
 8008b2a:	eba6 0807 	sub.w	r8, r6, r7
 8008b2e:	608b      	str	r3, [r1, #8]
 8008b30:	f1b8 0f00 	cmp.w	r8, #0
 8008b34:	dde9      	ble.n	8008b0a <__sflush_r+0xae>
 8008b36:	6a21      	ldr	r1, [r4, #32]
 8008b38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008b3a:	4643      	mov	r3, r8
 8008b3c:	463a      	mov	r2, r7
 8008b3e:	4628      	mov	r0, r5
 8008b40:	47b0      	blx	r6
 8008b42:	2800      	cmp	r0, #0
 8008b44:	dc08      	bgt.n	8008b58 <__sflush_r+0xfc>
 8008b46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b4e:	81a3      	strh	r3, [r4, #12]
 8008b50:	f04f 30ff 	mov.w	r0, #4294967295
 8008b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b58:	4407      	add	r7, r0
 8008b5a:	eba8 0800 	sub.w	r8, r8, r0
 8008b5e:	e7e7      	b.n	8008b30 <__sflush_r+0xd4>
 8008b60:	dfbffffe 	.word	0xdfbffffe

08008b64 <_fflush_r>:
 8008b64:	b538      	push	{r3, r4, r5, lr}
 8008b66:	690b      	ldr	r3, [r1, #16]
 8008b68:	4605      	mov	r5, r0
 8008b6a:	460c      	mov	r4, r1
 8008b6c:	b913      	cbnz	r3, 8008b74 <_fflush_r+0x10>
 8008b6e:	2500      	movs	r5, #0
 8008b70:	4628      	mov	r0, r5
 8008b72:	bd38      	pop	{r3, r4, r5, pc}
 8008b74:	b118      	cbz	r0, 8008b7e <_fflush_r+0x1a>
 8008b76:	6a03      	ldr	r3, [r0, #32]
 8008b78:	b90b      	cbnz	r3, 8008b7e <_fflush_r+0x1a>
 8008b7a:	f7ff f835 	bl	8007be8 <__sinit>
 8008b7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d0f3      	beq.n	8008b6e <_fflush_r+0xa>
 8008b86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008b88:	07d0      	lsls	r0, r2, #31
 8008b8a:	d404      	bmi.n	8008b96 <_fflush_r+0x32>
 8008b8c:	0599      	lsls	r1, r3, #22
 8008b8e:	d402      	bmi.n	8008b96 <_fflush_r+0x32>
 8008b90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b92:	f7ff fa40 	bl	8008016 <__retarget_lock_acquire_recursive>
 8008b96:	4628      	mov	r0, r5
 8008b98:	4621      	mov	r1, r4
 8008b9a:	f7ff ff5f 	bl	8008a5c <__sflush_r>
 8008b9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008ba0:	07da      	lsls	r2, r3, #31
 8008ba2:	4605      	mov	r5, r0
 8008ba4:	d4e4      	bmi.n	8008b70 <_fflush_r+0xc>
 8008ba6:	89a3      	ldrh	r3, [r4, #12]
 8008ba8:	059b      	lsls	r3, r3, #22
 8008baa:	d4e1      	bmi.n	8008b70 <_fflush_r+0xc>
 8008bac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008bae:	f7ff fa33 	bl	8008018 <__retarget_lock_release_recursive>
 8008bb2:	e7dd      	b.n	8008b70 <_fflush_r+0xc>

08008bb4 <__swhatbuf_r>:
 8008bb4:	b570      	push	{r4, r5, r6, lr}
 8008bb6:	460c      	mov	r4, r1
 8008bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bbc:	2900      	cmp	r1, #0
 8008bbe:	b096      	sub	sp, #88	@ 0x58
 8008bc0:	4615      	mov	r5, r2
 8008bc2:	461e      	mov	r6, r3
 8008bc4:	da0d      	bge.n	8008be2 <__swhatbuf_r+0x2e>
 8008bc6:	89a3      	ldrh	r3, [r4, #12]
 8008bc8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008bcc:	f04f 0100 	mov.w	r1, #0
 8008bd0:	bf14      	ite	ne
 8008bd2:	2340      	movne	r3, #64	@ 0x40
 8008bd4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008bd8:	2000      	movs	r0, #0
 8008bda:	6031      	str	r1, [r6, #0]
 8008bdc:	602b      	str	r3, [r5, #0]
 8008bde:	b016      	add	sp, #88	@ 0x58
 8008be0:	bd70      	pop	{r4, r5, r6, pc}
 8008be2:	466a      	mov	r2, sp
 8008be4:	f000 f862 	bl	8008cac <_fstat_r>
 8008be8:	2800      	cmp	r0, #0
 8008bea:	dbec      	blt.n	8008bc6 <__swhatbuf_r+0x12>
 8008bec:	9901      	ldr	r1, [sp, #4]
 8008bee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008bf2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008bf6:	4259      	negs	r1, r3
 8008bf8:	4159      	adcs	r1, r3
 8008bfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008bfe:	e7eb      	b.n	8008bd8 <__swhatbuf_r+0x24>

08008c00 <__smakebuf_r>:
 8008c00:	898b      	ldrh	r3, [r1, #12]
 8008c02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c04:	079d      	lsls	r5, r3, #30
 8008c06:	4606      	mov	r6, r0
 8008c08:	460c      	mov	r4, r1
 8008c0a:	d507      	bpl.n	8008c1c <__smakebuf_r+0x1c>
 8008c0c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008c10:	6023      	str	r3, [r4, #0]
 8008c12:	6123      	str	r3, [r4, #16]
 8008c14:	2301      	movs	r3, #1
 8008c16:	6163      	str	r3, [r4, #20]
 8008c18:	b003      	add	sp, #12
 8008c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c1c:	ab01      	add	r3, sp, #4
 8008c1e:	466a      	mov	r2, sp
 8008c20:	f7ff ffc8 	bl	8008bb4 <__swhatbuf_r>
 8008c24:	9f00      	ldr	r7, [sp, #0]
 8008c26:	4605      	mov	r5, r0
 8008c28:	4639      	mov	r1, r7
 8008c2a:	4630      	mov	r0, r6
 8008c2c:	f7ff fa62 	bl	80080f4 <_malloc_r>
 8008c30:	b948      	cbnz	r0, 8008c46 <__smakebuf_r+0x46>
 8008c32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c36:	059a      	lsls	r2, r3, #22
 8008c38:	d4ee      	bmi.n	8008c18 <__smakebuf_r+0x18>
 8008c3a:	f023 0303 	bic.w	r3, r3, #3
 8008c3e:	f043 0302 	orr.w	r3, r3, #2
 8008c42:	81a3      	strh	r3, [r4, #12]
 8008c44:	e7e2      	b.n	8008c0c <__smakebuf_r+0xc>
 8008c46:	89a3      	ldrh	r3, [r4, #12]
 8008c48:	6020      	str	r0, [r4, #0]
 8008c4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c4e:	81a3      	strh	r3, [r4, #12]
 8008c50:	9b01      	ldr	r3, [sp, #4]
 8008c52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008c56:	b15b      	cbz	r3, 8008c70 <__smakebuf_r+0x70>
 8008c58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c5c:	4630      	mov	r0, r6
 8008c5e:	f000 f837 	bl	8008cd0 <_isatty_r>
 8008c62:	b128      	cbz	r0, 8008c70 <__smakebuf_r+0x70>
 8008c64:	89a3      	ldrh	r3, [r4, #12]
 8008c66:	f023 0303 	bic.w	r3, r3, #3
 8008c6a:	f043 0301 	orr.w	r3, r3, #1
 8008c6e:	81a3      	strh	r3, [r4, #12]
 8008c70:	89a3      	ldrh	r3, [r4, #12]
 8008c72:	431d      	orrs	r5, r3
 8008c74:	81a5      	strh	r5, [r4, #12]
 8008c76:	e7cf      	b.n	8008c18 <__smakebuf_r+0x18>

08008c78 <memmove>:
 8008c78:	4288      	cmp	r0, r1
 8008c7a:	b510      	push	{r4, lr}
 8008c7c:	eb01 0402 	add.w	r4, r1, r2
 8008c80:	d902      	bls.n	8008c88 <memmove+0x10>
 8008c82:	4284      	cmp	r4, r0
 8008c84:	4623      	mov	r3, r4
 8008c86:	d807      	bhi.n	8008c98 <memmove+0x20>
 8008c88:	1e43      	subs	r3, r0, #1
 8008c8a:	42a1      	cmp	r1, r4
 8008c8c:	d008      	beq.n	8008ca0 <memmove+0x28>
 8008c8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c96:	e7f8      	b.n	8008c8a <memmove+0x12>
 8008c98:	4402      	add	r2, r0
 8008c9a:	4601      	mov	r1, r0
 8008c9c:	428a      	cmp	r2, r1
 8008c9e:	d100      	bne.n	8008ca2 <memmove+0x2a>
 8008ca0:	bd10      	pop	{r4, pc}
 8008ca2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ca6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008caa:	e7f7      	b.n	8008c9c <memmove+0x24>

08008cac <_fstat_r>:
 8008cac:	b538      	push	{r3, r4, r5, lr}
 8008cae:	4d07      	ldr	r5, [pc, #28]	@ (8008ccc <_fstat_r+0x20>)
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	4604      	mov	r4, r0
 8008cb4:	4608      	mov	r0, r1
 8008cb6:	4611      	mov	r1, r2
 8008cb8:	602b      	str	r3, [r5, #0]
 8008cba:	f7f9 f83d 	bl	8001d38 <_fstat>
 8008cbe:	1c43      	adds	r3, r0, #1
 8008cc0:	d102      	bne.n	8008cc8 <_fstat_r+0x1c>
 8008cc2:	682b      	ldr	r3, [r5, #0]
 8008cc4:	b103      	cbz	r3, 8008cc8 <_fstat_r+0x1c>
 8008cc6:	6023      	str	r3, [r4, #0]
 8008cc8:	bd38      	pop	{r3, r4, r5, pc}
 8008cca:	bf00      	nop
 8008ccc:	24003de4 	.word	0x24003de4

08008cd0 <_isatty_r>:
 8008cd0:	b538      	push	{r3, r4, r5, lr}
 8008cd2:	4d06      	ldr	r5, [pc, #24]	@ (8008cec <_isatty_r+0x1c>)
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	4604      	mov	r4, r0
 8008cd8:	4608      	mov	r0, r1
 8008cda:	602b      	str	r3, [r5, #0]
 8008cdc:	f7f9 f83c 	bl	8001d58 <_isatty>
 8008ce0:	1c43      	adds	r3, r0, #1
 8008ce2:	d102      	bne.n	8008cea <_isatty_r+0x1a>
 8008ce4:	682b      	ldr	r3, [r5, #0]
 8008ce6:	b103      	cbz	r3, 8008cea <_isatty_r+0x1a>
 8008ce8:	6023      	str	r3, [r4, #0]
 8008cea:	bd38      	pop	{r3, r4, r5, pc}
 8008cec:	24003de4 	.word	0x24003de4

08008cf0 <_sbrk_r>:
 8008cf0:	b538      	push	{r3, r4, r5, lr}
 8008cf2:	4d06      	ldr	r5, [pc, #24]	@ (8008d0c <_sbrk_r+0x1c>)
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	4604      	mov	r4, r0
 8008cf8:	4608      	mov	r0, r1
 8008cfa:	602b      	str	r3, [r5, #0]
 8008cfc:	f7f9 f844 	bl	8001d88 <_sbrk>
 8008d00:	1c43      	adds	r3, r0, #1
 8008d02:	d102      	bne.n	8008d0a <_sbrk_r+0x1a>
 8008d04:	682b      	ldr	r3, [r5, #0]
 8008d06:	b103      	cbz	r3, 8008d0a <_sbrk_r+0x1a>
 8008d08:	6023      	str	r3, [r4, #0]
 8008d0a:	bd38      	pop	{r3, r4, r5, pc}
 8008d0c:	24003de4 	.word	0x24003de4

08008d10 <memcpy>:
 8008d10:	440a      	add	r2, r1
 8008d12:	4291      	cmp	r1, r2
 8008d14:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d18:	d100      	bne.n	8008d1c <memcpy+0xc>
 8008d1a:	4770      	bx	lr
 8008d1c:	b510      	push	{r4, lr}
 8008d1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d26:	4291      	cmp	r1, r2
 8008d28:	d1f9      	bne.n	8008d1e <memcpy+0xe>
 8008d2a:	bd10      	pop	{r4, pc}

08008d2c <_realloc_r>:
 8008d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d30:	4680      	mov	r8, r0
 8008d32:	4615      	mov	r5, r2
 8008d34:	460c      	mov	r4, r1
 8008d36:	b921      	cbnz	r1, 8008d42 <_realloc_r+0x16>
 8008d38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d3c:	4611      	mov	r1, r2
 8008d3e:	f7ff b9d9 	b.w	80080f4 <_malloc_r>
 8008d42:	b92a      	cbnz	r2, 8008d50 <_realloc_r+0x24>
 8008d44:	f7ff f96a 	bl	800801c <_free_r>
 8008d48:	2400      	movs	r4, #0
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d50:	f000 f81a 	bl	8008d88 <_malloc_usable_size_r>
 8008d54:	4285      	cmp	r5, r0
 8008d56:	4606      	mov	r6, r0
 8008d58:	d802      	bhi.n	8008d60 <_realloc_r+0x34>
 8008d5a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008d5e:	d8f4      	bhi.n	8008d4a <_realloc_r+0x1e>
 8008d60:	4629      	mov	r1, r5
 8008d62:	4640      	mov	r0, r8
 8008d64:	f7ff f9c6 	bl	80080f4 <_malloc_r>
 8008d68:	4607      	mov	r7, r0
 8008d6a:	2800      	cmp	r0, #0
 8008d6c:	d0ec      	beq.n	8008d48 <_realloc_r+0x1c>
 8008d6e:	42b5      	cmp	r5, r6
 8008d70:	462a      	mov	r2, r5
 8008d72:	4621      	mov	r1, r4
 8008d74:	bf28      	it	cs
 8008d76:	4632      	movcs	r2, r6
 8008d78:	f7ff ffca 	bl	8008d10 <memcpy>
 8008d7c:	4621      	mov	r1, r4
 8008d7e:	4640      	mov	r0, r8
 8008d80:	f7ff f94c 	bl	800801c <_free_r>
 8008d84:	463c      	mov	r4, r7
 8008d86:	e7e0      	b.n	8008d4a <_realloc_r+0x1e>

08008d88 <_malloc_usable_size_r>:
 8008d88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d8c:	1f18      	subs	r0, r3, #4
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	bfbc      	itt	lt
 8008d92:	580b      	ldrlt	r3, [r1, r0]
 8008d94:	18c0      	addlt	r0, r0, r3
 8008d96:	4770      	bx	lr

08008d98 <_init>:
 8008d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d9a:	bf00      	nop
 8008d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d9e:	bc08      	pop	{r3}
 8008da0:	469e      	mov	lr, r3
 8008da2:	4770      	bx	lr

08008da4 <_fini>:
 8008da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008da6:	bf00      	nop
 8008da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008daa:	bc08      	pop	{r3}
 8008dac:	469e      	mov	lr, r3
 8008dae:	4770      	bx	lr
